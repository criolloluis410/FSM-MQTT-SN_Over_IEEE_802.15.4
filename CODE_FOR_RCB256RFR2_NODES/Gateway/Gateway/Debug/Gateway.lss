
Gateway.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001ce  00800200  0000345e  000034f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000345e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000004d5  008003ce  008003ce  000036c0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000036c0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000036f0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000007c8  00000000  00000000  00003730  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000be61  00000000  00000000  00003ef8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000414e  00000000  00000000  0000fd59  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000e30c  00000000  00000000  00013ea7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000018c4  00000000  00000000  000221b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0001f568  00000000  00000000  00023a78  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000068e0  00000000  00000000  00042fe0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000718  00000000  00000000  000498c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000b712  00000000  00000000  00049fd8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	b8 c0       	rjmp	.+368    	; 0x172 <__ctors_end>
       2:	00 00       	nop
       4:	d7 c0       	rjmp	.+430    	; 0x1b4 <__bad_interrupt>
       6:	00 00       	nop
       8:	d5 c0       	rjmp	.+426    	; 0x1b4 <__bad_interrupt>
       a:	00 00       	nop
       c:	d3 c0       	rjmp	.+422    	; 0x1b4 <__bad_interrupt>
       e:	00 00       	nop
      10:	d1 c0       	rjmp	.+418    	; 0x1b4 <__bad_interrupt>
      12:	00 00       	nop
      14:	cf c0       	rjmp	.+414    	; 0x1b4 <__bad_interrupt>
      16:	00 00       	nop
      18:	cd c0       	rjmp	.+410    	; 0x1b4 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	cb c0       	rjmp	.+406    	; 0x1b4 <__bad_interrupt>
      1e:	00 00       	nop
      20:	c9 c0       	rjmp	.+402    	; 0x1b4 <__bad_interrupt>
      22:	00 00       	nop
      24:	c7 c0       	rjmp	.+398    	; 0x1b4 <__bad_interrupt>
      26:	00 00       	nop
      28:	c5 c0       	rjmp	.+394    	; 0x1b4 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	c3 c0       	rjmp	.+390    	; 0x1b4 <__bad_interrupt>
      2e:	00 00       	nop
      30:	c1 c0       	rjmp	.+386    	; 0x1b4 <__bad_interrupt>
      32:	00 00       	nop
      34:	bf c0       	rjmp	.+382    	; 0x1b4 <__bad_interrupt>
      36:	00 00       	nop
      38:	bd c0       	rjmp	.+378    	; 0x1b4 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	bb c0       	rjmp	.+374    	; 0x1b4 <__bad_interrupt>
      3e:	00 00       	nop
      40:	b9 c0       	rjmp	.+370    	; 0x1b4 <__bad_interrupt>
      42:	00 00       	nop
      44:	0c 94 31 15 	jmp	0x2a62	; 0x2a62 <__vector_17>
      48:	0c 94 5e 15 	jmp	0x2abc	; 0x2abc <__vector_18>
      4c:	0c 94 8b 15 	jmp	0x2b16	; 0x2b16 <__vector_19>
      50:	0c 94 04 15 	jmp	0x2a08	; 0x2a08 <__vector_20>
      54:	af c0       	rjmp	.+350    	; 0x1b4 <__bad_interrupt>
      56:	00 00       	nop
      58:	ad c0       	rjmp	.+346    	; 0x1b4 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	ab c0       	rjmp	.+342    	; 0x1b4 <__bad_interrupt>
      5e:	00 00       	nop
      60:	a9 c0       	rjmp	.+338    	; 0x1b4 <__bad_interrupt>
      62:	00 00       	nop
      64:	a7 c0       	rjmp	.+334    	; 0x1b4 <__bad_interrupt>
      66:	00 00       	nop
      68:	a5 c0       	rjmp	.+330    	; 0x1b4 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	a3 c0       	rjmp	.+326    	; 0x1b4 <__bad_interrupt>
      6e:	00 00       	nop
      70:	a1 c0       	rjmp	.+322    	; 0x1b4 <__bad_interrupt>
      72:	00 00       	nop
      74:	9f c0       	rjmp	.+318    	; 0x1b4 <__bad_interrupt>
      76:	00 00       	nop
      78:	9d c0       	rjmp	.+314    	; 0x1b4 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	9b c0       	rjmp	.+310    	; 0x1b4 <__bad_interrupt>
      7e:	00 00       	nop
      80:	0c 94 e5 15 	jmp	0x2bca	; 0x2bca <__vector_32>
      84:	0c 94 12 16 	jmp	0x2c24	; 0x2c24 <__vector_33>
      88:	0c 94 3f 16 	jmp	0x2c7e	; 0x2c7e <__vector_34>
      8c:	0c 94 b8 15 	jmp	0x2b70	; 0x2b70 <__vector_35>
      90:	91 c0       	rjmp	.+290    	; 0x1b4 <__bad_interrupt>
      92:	00 00       	nop
      94:	8f c0       	rjmp	.+286    	; 0x1b4 <__bad_interrupt>
      96:	00 00       	nop
      98:	8d c0       	rjmp	.+282    	; 0x1b4 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	8b c0       	rjmp	.+278    	; 0x1b4 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	89 c0       	rjmp	.+274    	; 0x1b4 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	87 c0       	rjmp	.+270    	; 0x1b4 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	0c 94 99 16 	jmp	0x2d32	; 0x2d32 <__vector_42>
      ac:	0c 94 c6 16 	jmp	0x2d8c	; 0x2d8c <__vector_43>
      b0:	0c 94 f3 16 	jmp	0x2de6	; 0x2de6 <__vector_44>
      b4:	0c 94 6c 16 	jmp	0x2cd8	; 0x2cd8 <__vector_45>
      b8:	7d c0       	rjmp	.+250    	; 0x1b4 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	0c 94 4d 17 	jmp	0x2e9a	; 0x2e9a <__vector_47>
      c0:	0c 94 7a 17 	jmp	0x2ef4	; 0x2ef4 <__vector_48>
      c4:	0c 94 a7 17 	jmp	0x2f4e	; 0x2f4e <__vector_49>
      c8:	0c 94 20 17 	jmp	0x2e40	; 0x2e40 <__vector_50>
      cc:	73 c0       	rjmp	.+230    	; 0x1b4 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	71 c0       	rjmp	.+226    	; 0x1b4 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	6f c0       	rjmp	.+222    	; 0x1b4 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	6d c0       	rjmp	.+218    	; 0x1b4 <__bad_interrupt>
      da:	00 00       	nop
      dc:	6b c0       	rjmp	.+214    	; 0x1b4 <__bad_interrupt>
      de:	00 00       	nop
      e0:	69 c0       	rjmp	.+210    	; 0x1b4 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	0c 94 2a 10 	jmp	0x2054	; 0x2054 <__vector_57>
      e8:	0c 94 34 10 	jmp	0x2068	; 0x2068 <__vector_58>
      ec:	0c 94 20 10 	jmp	0x2040	; 0x2040 <__vector_59>
      f0:	0c 94 9f 0f 	jmp	0x1f3e	; 0x1f3e <__vector_60>
      f4:	0c 94 ca 0f 	jmp	0x1f94	; 0x1f94 <__vector_61>
      f8:	0c 94 3e 10 	jmp	0x207c	; 0x207c <__vector_62>
      fc:	0c 94 74 0f 	jmp	0x1ee8	; 0x1ee8 <__vector_63>
     100:	0c 94 f5 0f 	jmp	0x1fea	; 0x1fea <__vector_64>
     104:	57 c0       	rjmp	.+174    	; 0x1b4 <__bad_interrupt>
     106:	00 00       	nop
     108:	55 c0       	rjmp	.+170    	; 0x1b4 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	53 c0       	rjmp	.+166    	; 0x1b4 <__bad_interrupt>
     10e:	00 00       	nop
     110:	51 c0       	rjmp	.+162    	; 0x1b4 <__bad_interrupt>
     112:	00 00       	nop
     114:	4f c0       	rjmp	.+158    	; 0x1b4 <__bad_interrupt>
     116:	00 00       	nop
     118:	0c 94 52 10 	jmp	0x20a4	; 0x20a4 <__vector_70>
     11c:	0c 94 48 10 	jmp	0x2090	; 0x2090 <__vector_71>
     120:	0c 94 5c 10 	jmp	0x20b8	; 0x20b8 <__vector_72>
     124:	0c 94 66 10 	jmp	0x20cc	; 0x20cc <__vector_73>
     128:	0c 94 70 10 	jmp	0x20e0	; 0x20e0 <__vector_74>
     12c:	0c 94 7a 10 	jmp	0x20f4	; 0x20f4 <__vector_75>
     130:	0c 94 84 10 	jmp	0x2108	; 0x2108 <__vector_76>
     134:	09 0d       	add	r16, r9
     136:	30 0d       	add	r19, r0
     138:	24 0d       	add	r18, r4
     13a:	3d 0d       	add	r19, r13
     13c:	24 0d       	add	r18, r4
     13e:	fc 0c       	add	r15, r12
     140:	16 0d       	add	r17, r6
     142:	24 0d       	add	r18, r4
     144:	24 0d       	add	r18, r4
     146:	24 0d       	add	r18, r4
     148:	24 0d       	add	r18, r4
     14a:	24 0d       	add	r18, r4
     14c:	d5 0c       	add	r13, r5
     14e:	24 0d       	add	r18, r4
     150:	24 0d       	add	r18, r4
     152:	24 0d       	add	r18, r4
     154:	24 0d       	add	r18, r4
     156:	24 0d       	add	r18, r4
     158:	24 0d       	add	r18, r4
     15a:	5c 0d       	add	r21, r12
     15c:	24 0d       	add	r18, r4
     15e:	24 0d       	add	r18, r4
     160:	95 0d       	add	r25, r5

00000162 <__trampolines_end>:
     162:	04 03       	mulsu	r16, r20
     164:	03 02       	muls	r16, r19
     166:	02 01       	movw	r0, r4
     168:	00 ff       	sbrs	r16, 0
     16a:	fe fd       	.word	0xfdfe	; ????
     16c:	fc fb       	.word	0xfbfc	; ????
     16e:	f9 f7       	brne	.-2      	; 0x16e <__trampolines_end+0xc>
     170:	f4 ef       	ldi	r31, 0xF4	; 244

00000172 <__ctors_end>:
     172:	11 24       	eor	r1, r1
     174:	1f be       	out	0x3f, r1	; 63
     176:	cf ef       	ldi	r28, 0xFF	; 255
     178:	d1 e8       	ldi	r29, 0x81	; 129
     17a:	de bf       	out	0x3e, r29	; 62
     17c:	cd bf       	out	0x3d, r28	; 61
     17e:	00 e0       	ldi	r16, 0x00	; 0
     180:	0c bf       	out	0x3c, r16	; 60

00000182 <__do_copy_data>:
     182:	13 e0       	ldi	r17, 0x03	; 3
     184:	a0 e0       	ldi	r26, 0x00	; 0
     186:	b2 e0       	ldi	r27, 0x02	; 2
     188:	ee e5       	ldi	r30, 0x5E	; 94
     18a:	f4 e3       	ldi	r31, 0x34	; 52
     18c:	00 e0       	ldi	r16, 0x00	; 0
     18e:	0b bf       	out	0x3b, r16	; 59
     190:	02 c0       	rjmp	.+4      	; 0x196 <__do_copy_data+0x14>
     192:	07 90       	elpm	r0, Z+
     194:	0d 92       	st	X+, r0
     196:	ae 3c       	cpi	r26, 0xCE	; 206
     198:	b1 07       	cpc	r27, r17
     19a:	d9 f7       	brne	.-10     	; 0x192 <__do_copy_data+0x10>

0000019c <__do_clear_bss>:
     19c:	28 e0       	ldi	r18, 0x08	; 8
     19e:	ae ec       	ldi	r26, 0xCE	; 206
     1a0:	b3 e0       	ldi	r27, 0x03	; 3
     1a2:	01 c0       	rjmp	.+2      	; 0x1a6 <.do_clear_bss_start>

000001a4 <.do_clear_bss_loop>:
     1a4:	1d 92       	st	X+, r1

000001a6 <.do_clear_bss_start>:
     1a6:	a3 3a       	cpi	r26, 0xA3	; 163
     1a8:	b2 07       	cpc	r27, r18
     1aa:	e1 f7       	brne	.-8      	; 0x1a4 <.do_clear_bss_loop>
     1ac:	0e 94 02 19 	call	0x3204	; 0x3204 <main>
     1b0:	0c 94 2d 1a 	jmp	0x345a	; 0x345a <_exit>

000001b4 <__bad_interrupt>:
     1b4:	25 cf       	rjmp	.-438    	; 0x0 <__vectors>

000001b6 <common_tc_read_count>:
     1b6:	0e 94 ac 14 	call	0x2958	; 0x2958 <tmr_read_count>
     1ba:	20 91 d2 03 	lds	r18, 0x03D2	; 0x8003d2 <timer_mul_var>
     1be:	22 23       	and	r18, r18
     1c0:	d9 f0       	breq	.+54     	; 0x1f8 <common_tc_read_count+0x42>
     1c2:	40 91 a2 08 	lds	r20, 0x08A2	; 0x8008a2 <timer_multiplier>
     1c6:	30 e0       	ldi	r19, 0x00	; 0
     1c8:	20 91 d2 03 	lds	r18, 0x03D2	; 0x8003d2 <timer_mul_var>
     1cc:	64 2f       	mov	r22, r20
     1ce:	73 2f       	mov	r23, r19
     1d0:	0e 94 2b 19 	call	0x3256	; 0x3256 <__udivmodhi4>
     1d4:	fb 01       	movw	r30, r22
     1d6:	8f ef       	ldi	r24, 0xFF	; 255
     1d8:	9f ef       	ldi	r25, 0xFF	; 255
     1da:	64 2f       	mov	r22, r20
     1dc:	73 2f       	mov	r23, r19
     1de:	0e 94 2b 19 	call	0x3256	; 0x3256 <__udivmodhi4>
     1e2:	30 e0       	ldi	r19, 0x00	; 0
     1e4:	62 9f       	mul	r22, r18
     1e6:	c0 01       	movw	r24, r0
     1e8:	63 9f       	mul	r22, r19
     1ea:	90 0d       	add	r25, r0
     1ec:	72 9f       	mul	r23, r18
     1ee:	90 0d       	add	r25, r0
     1f0:	11 24       	eor	r1, r1
     1f2:	8e 0f       	add	r24, r30
     1f4:	9f 1f       	adc	r25, r31
     1f6:	08 95       	ret
     1f8:	60 91 a2 08 	lds	r22, 0x08A2	; 0x8008a2 <timer_multiplier>
     1fc:	70 e0       	ldi	r23, 0x00	; 0
     1fe:	0e 94 2b 19 	call	0x3256	; 0x3256 <__udivmodhi4>
     202:	cb 01       	movw	r24, r22
     204:	08 95       	ret

00000206 <common_tc_compare_stop>:
     206:	0e 94 b1 14 	call	0x2962	; 0x2962 <tmr_disable_cc_interrupt>
     20a:	0e 94 d5 14 	call	0x29aa	; 0x29aa <save_cpu_interrupt>
     20e:	10 92 ce 03 	sts	0x03CE, r1	; 0x8003ce <__data_end>
     212:	10 92 cf 03 	sts	0x03CF, r1	; 0x8003cf <__data_end+0x1>
     216:	10 92 d0 03 	sts	0x03D0, r1	; 0x8003d0 <__data_end+0x2>
     21a:	10 92 d1 03 	sts	0x03D1, r1	; 0x8003d1 <__data_end+0x3>
     21e:	10 92 d4 03 	sts	0x03D4, r1	; 0x8003d4 <compare_value+0x1>
     222:	10 92 d3 03 	sts	0x03D3, r1	; 0x8003d3 <compare_value>
     226:	0c 94 e2 14 	jmp	0x29c4	; 0x29c4 <restore_cpu_interrupt>

0000022a <common_tc_overflow_stop>:
     22a:	0e 94 bf 14 	call	0x297e	; 0x297e <tmr_disable_ovf_interrupt>
     22e:	10 92 d2 03 	sts	0x03D2, r1	; 0x8003d2 <timer_mul_var>
     232:	08 95       	ret

00000234 <common_tc_stop>:
     234:	e8 df       	rcall	.-48     	; 0x206 <common_tc_compare_stop>
     236:	f9 df       	rcall	.-14     	; 0x22a <common_tc_overflow_stop>
     238:	0c 94 c6 14 	jmp	0x298c	; 0x298c <tmr_stop>

0000023c <common_tc_delay>:
     23c:	0f 93       	push	r16
     23e:	1f 93       	push	r17
     240:	cf 93       	push	r28
     242:	df 93       	push	r29
     244:	ec 01       	movw	r28, r24
     246:	0e 94 ac 14 	call	0x2958	; 0x2958 <tmr_read_count>
     24a:	8c 01       	movw	r16, r24
     24c:	be 01       	movw	r22, r28
     24e:	80 e0       	ldi	r24, 0x00	; 0
     250:	90 e0       	ldi	r25, 0x00	; 0
     252:	20 91 a2 08 	lds	r18, 0x08A2	; 0x8008a2 <timer_multiplier>
     256:	30 e0       	ldi	r19, 0x00	; 0
     258:	40 e0       	ldi	r20, 0x00	; 0
     25a:	50 e0       	ldi	r21, 0x00	; 0
     25c:	0e 94 1c 19 	call	0x3238	; 0x3238 <__mulsi3>
     260:	dc 01       	movw	r26, r24
     262:	cb 01       	movw	r24, r22
     264:	a8 01       	movw	r20, r16
     266:	60 e0       	ldi	r22, 0x00	; 0
     268:	70 e0       	ldi	r23, 0x00	; 0
     26a:	48 0f       	add	r20, r24
     26c:	59 1f       	adc	r21, r25
     26e:	6a 1f       	adc	r22, r26
     270:	7b 1f       	adc	r23, r27
     272:	40 93 ce 03 	sts	0x03CE, r20	; 0x8003ce <__data_end>
     276:	50 93 cf 03 	sts	0x03CF, r21	; 0x8003cf <__data_end+0x1>
     27a:	60 93 d0 03 	sts	0x03D0, r22	; 0x8003d0 <__data_end+0x2>
     27e:	70 93 d1 03 	sts	0x03D1, r23	; 0x8003d1 <__data_end+0x3>
     282:	40 91 ce 03 	lds	r20, 0x03CE	; 0x8003ce <__data_end>
     286:	50 91 cf 03 	lds	r21, 0x03CF	; 0x8003cf <__data_end+0x1>
     28a:	60 91 d0 03 	lds	r22, 0x03D0	; 0x8003d0 <__data_end+0x2>
     28e:	70 91 d1 03 	lds	r23, 0x03D1	; 0x8003d1 <__data_end+0x3>
     292:	ab 01       	movw	r20, r22
     294:	66 27       	eor	r22, r22
     296:	77 27       	eor	r23, r23
     298:	40 93 ce 03 	sts	0x03CE, r20	; 0x8003ce <__data_end>
     29c:	50 93 cf 03 	sts	0x03CF, r21	; 0x8003cf <__data_end+0x1>
     2a0:	60 93 d0 03 	sts	0x03D0, r22	; 0x8003d0 <__data_end+0x2>
     2a4:	70 93 d1 03 	sts	0x03D1, r23	; 0x8003d1 <__data_end+0x3>
     2a8:	40 91 ce 03 	lds	r20, 0x03CE	; 0x8003ce <__data_end>
     2ac:	50 91 cf 03 	lds	r21, 0x03CF	; 0x8003cf <__data_end+0x1>
     2b0:	60 91 d0 03 	lds	r22, 0x03D0	; 0x8003d0 <__data_end+0x2>
     2b4:	70 91 d1 03 	lds	r23, 0x03D1	; 0x8003d1 <__data_end+0x3>
     2b8:	41 15       	cp	r20, r1
     2ba:	51 05       	cpc	r21, r1
     2bc:	61 05       	cpc	r22, r1
     2be:	71 05       	cpc	r23, r1
     2c0:	91 f0       	breq	.+36     	; 0x2e6 <common_tc_delay+0xaa>
     2c2:	40 91 ce 03 	lds	r20, 0x03CE	; 0x8003ce <__data_end>
     2c6:	50 91 cf 03 	lds	r21, 0x03CF	; 0x8003cf <__data_end+0x1>
     2ca:	60 91 d0 03 	lds	r22, 0x03D0	; 0x8003d0 <__data_end+0x2>
     2ce:	70 91 d1 03 	lds	r23, 0x03D1	; 0x8003d1 <__data_end+0x3>
     2d2:	01 96       	adiw	r24, 0x01	; 1
     2d4:	08 0f       	add	r16, r24
     2d6:	19 1f       	adc	r17, r25
     2d8:	10 93 d4 03 	sts	0x03D4, r17	; 0x8003d4 <compare_value+0x1>
     2dc:	00 93 d3 03 	sts	0x03D3, r16	; 0x8003d3 <compare_value>
     2e0:	0e 94 b1 14 	call	0x2962	; 0x2962 <tmr_disable_cc_interrupt>
     2e4:	08 c0       	rjmp	.+16     	; 0x2f6 <common_tc_delay+0xba>
     2e6:	08 0f       	add	r16, r24
     2e8:	19 1f       	adc	r17, r25
     2ea:	10 93 d4 03 	sts	0x03D4, r17	; 0x8003d4 <compare_value+0x1>
     2ee:	00 93 d3 03 	sts	0x03D3, r16	; 0x8003d3 <compare_value>
     2f2:	0e 94 b8 14 	call	0x2970	; 0x2970 <tmr_enable_cc_interrupt>
     2f6:	80 91 d3 03 	lds	r24, 0x03D3	; 0x8003d3 <compare_value>
     2fa:	90 91 d4 03 	lds	r25, 0x03D4	; 0x8003d4 <compare_value+0x1>
     2fe:	84 36       	cpi	r24, 0x64	; 100
     300:	91 05       	cpc	r25, r1
     302:	30 f4       	brcc	.+12     	; 0x310 <common_tc_delay+0xd4>
     304:	8c 59       	subi	r24, 0x9C	; 156
     306:	9f 4f       	sbci	r25, 0xFF	; 255
     308:	90 93 d4 03 	sts	0x03D4, r25	; 0x8003d4 <compare_value+0x1>
     30c:	80 93 d3 03 	sts	0x03D3, r24	; 0x8003d3 <compare_value>
     310:	80 91 d3 03 	lds	r24, 0x03D3	; 0x8003d3 <compare_value>
     314:	90 91 d4 03 	lds	r25, 0x03D4	; 0x8003d4 <compare_value+0x1>
     318:	0e 94 ca 14 	call	0x2994	; 0x2994 <tmr_write_cmpreg>
     31c:	df 91       	pop	r29
     31e:	cf 91       	pop	r28
     320:	1f 91       	pop	r17
     322:	0f 91       	pop	r16
     324:	08 95       	ret

00000326 <common_tc_init>:
     326:	10 92 d2 03 	sts	0x03D2, r1	; 0x8003d2 <timer_mul_var>
     32a:	0e 94 e4 14 	call	0x29c8	; 0x29c8 <tmr_init>
     32e:	80 93 a2 08 	sts	0x08A2, r24	; 0x8008a2 <timer_multiplier>
     332:	08 95       	ret

00000334 <tmr_ovf_callback>:
     334:	80 91 ce 03 	lds	r24, 0x03CE	; 0x8003ce <__data_end>
     338:	90 91 cf 03 	lds	r25, 0x03CF	; 0x8003cf <__data_end+0x1>
     33c:	a0 91 d0 03 	lds	r26, 0x03D0	; 0x8003d0 <__data_end+0x2>
     340:	b0 91 d1 03 	lds	r27, 0x03D1	; 0x8003d1 <__data_end+0x3>
     344:	00 97       	sbiw	r24, 0x00	; 0
     346:	a1 05       	cpc	r26, r1
     348:	b1 05       	cpc	r27, r1
     34a:	c9 f0       	breq	.+50     	; 0x37e <tmr_ovf_callback+0x4a>
     34c:	80 91 ce 03 	lds	r24, 0x03CE	; 0x8003ce <__data_end>
     350:	90 91 cf 03 	lds	r25, 0x03CF	; 0x8003cf <__data_end+0x1>
     354:	a0 91 d0 03 	lds	r26, 0x03D0	; 0x8003d0 <__data_end+0x2>
     358:	b0 91 d1 03 	lds	r27, 0x03D1	; 0x8003d1 <__data_end+0x3>
     35c:	01 97       	sbiw	r24, 0x01	; 1
     35e:	a1 09       	sbc	r26, r1
     360:	b1 09       	sbc	r27, r1
     362:	80 93 ce 03 	sts	0x03CE, r24	; 0x8003ce <__data_end>
     366:	90 93 cf 03 	sts	0x03CF, r25	; 0x8003cf <__data_end+0x1>
     36a:	a0 93 d0 03 	sts	0x03D0, r26	; 0x8003d0 <__data_end+0x2>
     36e:	b0 93 d1 03 	sts	0x03D1, r27	; 0x8003d1 <__data_end+0x3>
     372:	00 97       	sbiw	r24, 0x00	; 0
     374:	a1 05       	cpc	r26, r1
     376:	b1 05       	cpc	r27, r1
     378:	11 f4       	brne	.+4      	; 0x37e <tmr_ovf_callback+0x4a>
     37a:	0e 94 b8 14 	call	0x2970	; 0x2970 <tmr_enable_cc_interrupt>
     37e:	80 91 d2 03 	lds	r24, 0x03D2	; 0x8003d2 <timer_mul_var>
     382:	8f 5f       	subi	r24, 0xFF	; 255
     384:	80 93 d2 03 	sts	0x03D2, r24	; 0x8003d2 <timer_mul_var>
     388:	90 91 a2 08 	lds	r25, 0x08A2	; 0x8008a2 <timer_multiplier>
     38c:	89 17       	cp	r24, r25
     38e:	48 f0       	brcs	.+18     	; 0x3a2 <tmr_ovf_callback+0x6e>
     390:	10 92 d2 03 	sts	0x03D2, r1	; 0x8003d2 <timer_mul_var>
     394:	e0 91 d5 03 	lds	r30, 0x03D5	; 0x8003d5 <common_tc_ovf_callback>
     398:	f0 91 d6 03 	lds	r31, 0x03D6	; 0x8003d6 <common_tc_ovf_callback+0x1>
     39c:	30 97       	sbiw	r30, 0x00	; 0
     39e:	09 f0       	breq	.+2      	; 0x3a2 <tmr_ovf_callback+0x6e>
     3a0:	19 95       	eicall
     3a2:	08 95       	ret

000003a4 <tmr_cca_callback>:
     3a4:	0e 94 b1 14 	call	0x2962	; 0x2962 <tmr_disable_cc_interrupt>
     3a8:	e0 91 d7 03 	lds	r30, 0x03D7	; 0x8003d7 <common_tc_cca_callback>
     3ac:	f0 91 d8 03 	lds	r31, 0x03D8	; 0x8003d8 <common_tc_cca_callback+0x1>
     3b0:	30 97       	sbiw	r30, 0x00	; 0
     3b2:	09 f0       	breq	.+2      	; 0x3b6 <tmr_cca_callback+0x12>
     3b4:	19 95       	eicall
     3b6:	08 95       	ret

000003b8 <set_common_tc_overflow_callback>:
     3b8:	90 93 d6 03 	sts	0x03D6, r25	; 0x8003d6 <common_tc_ovf_callback+0x1>
     3bc:	80 93 d5 03 	sts	0x03D5, r24	; 0x8003d5 <common_tc_ovf_callback>
     3c0:	08 95       	ret

000003c2 <set_common_tc_expiry_callback>:
     3c2:	90 93 d8 03 	sts	0x03D8, r25	; 0x8003d8 <common_tc_cca_callback+0x1>
     3c6:	80 93 d7 03 	sts	0x03D7, r24	; 0x8003d7 <common_tc_cca_callback>
     3ca:	08 95       	ret

000003cc <functionADVERTISE>:
     3cc:	fc 01       	movw	r30, r24
     3ce:	85 e0       	ldi	r24, 0x05	; 5
     3d0:	80 83       	st	Z, r24
     3d2:	11 82       	std	Z+1, r1	; 0x01
	uint8_t Radius=0x00;
	msg[0]=Length;
	msg[1]=MsgType;
	msg[2]=Radius;
	return sizeof(SEARCHGW);
}
     3d4:	81 e0       	ldi	r24, 0x01	; 1
     3d6:	82 83       	std	Z+2, r24	; 0x02
     3d8:	83 e0       	ldi	r24, 0x03	; 3
     3da:	83 83       	std	Z+3, r24	; 0x03
     3dc:	84 e8       	ldi	r24, 0x84	; 132
     3de:	84 83       	std	Z+4, r24	; 0x04
     3e0:	85 e0       	ldi	r24, 0x05	; 5
     3e2:	90 e0       	ldi	r25, 0x00	; 0
     3e4:	08 95       	ret

000003e6 <functionGWINFO>:
int functionGWINFO(uint8_t *msg, char nodeType){
     3e6:	fc 01       	movw	r30, r24
	uint8_t Length;
	uint8_t MsgType=0x02;
	uint8_t GwId=0x01;
	uint8_t GwAdd1=0x00;
	uint8_t GwAdd2=0x01;
	if (nodeType=='c')
     3e8:	63 36       	cpi	r22, 0x63	; 99
     3ea:	59 f4       	brne	.+22     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
	{
		Length=0x05;
		msg[0]=Length;
     3ec:	85 e0       	ldi	r24, 0x05	; 5
     3ee:	80 83       	st	Z, r24
		msg[1]=MsgType;
     3f0:	82 e0       	ldi	r24, 0x02	; 2
     3f2:	81 83       	std	Z+1, r24	; 0x01
		msg[2]=GwId;
     3f4:	81 e0       	ldi	r24, 0x01	; 1
     3f6:	82 83       	std	Z+2, r24	; 0x02
		msg[3]=GwAdd1;
     3f8:	13 82       	std	Z+3, r1	; 0x03
		msg[4]=GwAdd2;
     3fa:	84 83       	std	Z+4, r24	; 0x04
		length=5;
     3fc:	85 e0       	ldi	r24, 0x05	; 5
     3fe:	90 e0       	ldi	r25, 0x00	; 0
     400:	08 95       	ret
	}
	if (nodeType=='g')
     402:	67 36       	cpi	r22, 0x67	; 103
     404:	49 f4       	brne	.+18     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
	{
		Length=0x03;
		msg[0]=Length;
     406:	83 e0       	ldi	r24, 0x03	; 3
     408:	80 83       	st	Z, r24
		msg[1]=MsgType;
     40a:	82 e0       	ldi	r24, 0x02	; 2
     40c:	81 83       	std	Z+1, r24	; 0x01
		msg[2]=GwId;
     40e:	81 e0       	ldi	r24, 0x01	; 1
     410:	82 83       	std	Z+2, r24	; 0x02
		length=3;
     412:	83 e0       	ldi	r24, 0x03	; 3
     414:	90 e0       	ldi	r25, 0x00	; 0
     416:	08 95       	ret
	msg[1]=MsgType;
	msg[2]=Radius;
	return sizeof(SEARCHGW);
}
int functionGWINFO(uint8_t *msg, char nodeType){
	int length=0;
     418:	80 e0       	ldi	r24, 0x00	; 0
     41a:	90 e0       	ldi	r25, 0x00	; 0
		msg[1]=MsgType;
		msg[2]=GwId;
		length=3;
	}
	return length;
}
     41c:	08 95       	ret

0000041e <usr_app_timer_cb>:
 * \brief Callback function when the timer expires,Perform tasks required to be done after particular timeouts,
* the Timer can be started again in this function to have timeouts periodically
*/
void usr_app_timer_cb(void *parameter)
{
	TimerEnd=1;
     41e:	81 e0       	ldi	r24, 0x01	; 1
     420:	90 e0       	ldi	r25, 0x00	; 0
     422:	90 93 3e 08 	sts	0x083E, r25	; 0x80083e <TimerEnd+0x1>
     426:	80 93 3d 08 	sts	0x083D, r24	; 0x80083d <TimerEnd>
     42a:	08 95       	ret

0000042c <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
     42c:	04 c0       	rjmp	.+8      	; 0x436 <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
     42e:	61 50       	subi	r22, 0x01	; 1
     430:	71 09       	sbc	r23, r1
     432:	81 09       	sbc	r24, r1
     434:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
     436:	61 15       	cp	r22, r1
     438:	71 05       	cpc	r23, r1
     43a:	81 05       	cpc	r24, r1
     43c:	91 05       	cpc	r25, r1
     43e:	b9 f7       	brne	.-18     	; 0x42e <__portable_avr_delay_cycles+0x2>
     440:	08 95       	ret

00000442 <usr_frame_received_cb>:
    }
}

// Function to receive MQTT-SN messages over IEEE802.15.4 frames //
void usr_frame_received_cb(frame_info_t *frame)
{
     442:	0f 93       	push	r16
     444:	1f 93       	push	r17
     446:	cf 93       	push	r28
     448:	df 93       	push	r29
    if (enableReception == 1)
     44a:	20 91 e3 03 	lds	r18, 0x03E3	; 0x8003e3 <enableReception>
     44e:	30 91 e4 03 	lds	r19, 0x03E4	; 0x8003e4 <enableReception+0x1>
     452:	21 30       	cpi	r18, 0x01	; 1
     454:	31 05       	cpc	r19, r1
     456:	79 f5       	brne	.+94     	; 0x4b6 <usr_frame_received_cb+0x74>
     458:	ec 01       	movw	r28, r24
    {
        memset(&receivedFrame, 0, sizeof(receivedFrame)); // Reserve memory space
     45a:	0d e5       	ldi	r16, 0x5D	; 93
     45c:	16 e0       	ldi	r17, 0x06	; 6
     45e:	81 e7       	ldi	r24, 0x71	; 113
     460:	f8 01       	movw	r30, r16
     462:	11 92       	st	Z+, r1
     464:	8a 95       	dec	r24
     466:	e9 f7       	brne	.-6      	; 0x462 <usr_frame_received_cb+0x20>
        memcpy(&receivedFrame, frame->mpdu, sizeof(receivedFrame)); // Copy information from source buffer to destination
     468:	ef 81       	ldd	r30, Y+7	; 0x07
     46a:	f8 85       	ldd	r31, Y+8	; 0x08
     46c:	81 e7       	ldi	r24, 0x71	; 113
     46e:	d8 01       	movw	r26, r16
     470:	01 90       	ld	r0, Z+
     472:	0d 92       	st	X+, r0
     474:	8a 95       	dec	r24
     476:	e1 f7       	brne	.-8      	; 0x470 <usr_frame_received_cb+0x2e>
        bmm_buffer_free(frame->buffer_header); // Free buffer data to avoid overlap.
     478:	89 81       	ldd	r24, Y+1	; 0x01
     47a:	9a 81       	ldd	r25, Y+2	; 0x02
     47c:	0e 94 b1 0b 	call	0x1762	; 0x1762 <bmm_buffer_free>

        uint8_t msgTypeMQTT_SN;
        msgTypeMQTT_SN = receivedFrame.MQTT_SN_message[1];
     480:	f8 01       	movw	r30, r16
     482:	83 85       	ldd	r24, Z+11	; 0x0b

        if (msgTypeMQTT_SN == 0x00) // RX ADVERTISE from another GW
     484:	81 11       	cpse	r24, r1
     486:	0b c0       	rjmp	.+22     	; 0x49e <usr_frame_received_cb+0x5c>
        {
            enableReception = 0; // Disable reception to avoid interference in state change.
     488:	10 92 e4 03 	sts	0x03E4, r1	; 0x8003e4 <enableReception+0x1>
     48c:	10 92 e3 03 	sts	0x03E3, r1	; 0x8003e3 <enableReception>
            successfulReceptionControl = 1; // This variable allows the node to exit the reception loop
     490:	81 e0       	ldi	r24, 0x01	; 1
     492:	90 e0       	ldi	r25, 0x00	; 0
     494:	90 93 0f 02 	sts	0x020F, r25	; 0x80020f <successfulReceptionControl+0x1>
     498:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <successfulReceptionControl>
     49c:	0c c0       	rjmp	.+24     	; 0x4b6 <usr_frame_received_cb+0x74>
            // it is in and allows the state to continue with its operation.
        }
        else if (msgTypeMQTT_SN == 0x01) // RX SEARCHGW
     49e:	81 30       	cpi	r24, 0x01	; 1
     4a0:	51 f4       	brne	.+20     	; 0x4b6 <usr_frame_received_cb+0x74>
        {
            enableReception = 0; // Disable reception to avoid interference in state change.
     4a2:	10 92 e4 03 	sts	0x03E4, r1	; 0x8003e4 <enableReception+0x1>
     4a6:	10 92 e3 03 	sts	0x03E3, r1	; 0x8003e3 <enableReception>
            successfulReceptionControl = 1; // This variable allows the node to exit the reception loop
     4aa:	81 e0       	ldi	r24, 0x01	; 1
     4ac:	90 e0       	ldi	r25, 0x00	; 0
     4ae:	90 93 0f 02 	sts	0x020F, r25	; 0x80020f <successfulReceptionControl+0x1>
     4b2:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <successfulReceptionControl>
            // it is in and allows the state to continue with its operation.
        }
    }
}
     4b6:	df 91       	pop	r29
     4b8:	cf 91       	pop	r28
     4ba:	1f 91       	pop	r17
     4bc:	0f 91       	pop	r16
     4be:	08 95       	ret

000004c0 <usr_frame_transmitted_cb>:

// Predefined Function // 
void usr_frame_transmitted_cb(retval_t status, frame_info_t *frame)
{
     4c0:	08 95       	ret

000004c2 <state_2>:
        temporaryStateIndex = -1; // Set to -1 for later use.
    }
}
// ============================================================================================================================= //
void state_2(void) // WAIT state
{
     4c2:	cf 93       	push	r28
     4c4:	df 93       	push	r29
     4c6:	cd b7       	in	r28, 0x3d	; 61
     4c8:	de b7       	in	r29, 0x3e	; 62
     4ca:	ac 97       	sbiw	r28, 0x2c	; 44
     4cc:	0f b6       	in	r0, 0x3f	; 63
     4ce:	f8 94       	cli
     4d0:	de bf       	out	0x3e, r29	; 62
     4d2:	0f be       	out	0x3f, r0	; 63
     4d4:	cd bf       	out	0x3d, r28	; 61
    uint8_t State[44] = ":'''''GW_WAIT''''''::       S-02         :";
     4d6:	8b e2       	ldi	r24, 0x2B	; 43
     4d8:	e0 e1       	ldi	r30, 0x10	; 16
     4da:	f2 e0       	ldi	r31, 0x02	; 2
     4dc:	de 01       	movw	r26, r28
     4de:	11 96       	adiw	r26, 0x01	; 1
     4e0:	01 90       	ld	r0, Z+
     4e2:	0d 92       	st	X+, r0
     4e4:	8a 95       	dec	r24
     4e6:	e1 f7       	brne	.-8      	; 0x4e0 <state_2+0x1e>
     4e8:	1c a6       	std	Y+44, r1	; 0x2c
    if (stateControl == 1)
     4ea:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <stateControl>
     4ee:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <stateControl+0x1>
     4f2:	81 30       	cpi	r24, 0x01	; 1
     4f4:	91 05       	cpc	r25, r1
     4f6:	61 f4       	brne	.+24     	; 0x510 <state_2+0x4e>
    {
        stateControl = 2;
     4f8:	82 e0       	ldi	r24, 0x02	; 2
     4fa:	90 e0       	ldi	r25, 0x00	; 0
     4fc:	90 93 0d 02 	sts	0x020D, r25	; 0x80020d <stateControl+0x1>
     500:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <stateControl>
        delay_ms(1500); // Waiting time to appreciate the start of state
     504:	61 e8       	ldi	r22, 0x81	; 129
     506:	74 e8       	ldi	r23, 0x84	; 132
     508:	8e e1       	ldi	r24, 0x1E	; 30
     50a:	90 e0       	ldi	r25, 0x00	; 0
     50c:	8f df       	rcall	.-226    	; 0x42c <__portable_avr_delay_cycles>
     50e:	b7 c0       	rjmp	.+366    	; 0x67e <state_2+0x1bc>
    }
    else if (stateControl == 2)
     510:	82 30       	cpi	r24, 0x02	; 2
     512:	91 05       	cpc	r25, r1
     514:	99 f4       	brne	.+38     	; 0x53c <state_2+0x7a>
    {
        stateControl = 3;
     516:	83 e0       	ldi	r24, 0x03	; 3
     518:	90 e0       	ldi	r25, 0x00	; 0
     51a:	90 93 0d 02 	sts	0x020D, r25	; 0x80020d <stateControl+0x1>
     51e:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <stateControl>
        transmit_sample_frame(State, 44, 1); // State indicator
     522:	41 e0       	ldi	r20, 0x01	; 1
     524:	50 e0       	ldi	r21, 0x00	; 0
     526:	6c e2       	ldi	r22, 0x2C	; 44
     528:	ce 01       	movw	r24, r28
     52a:	01 96       	adiw	r24, 0x01	; 1
     52c:	f4 d3       	rcall	.+2024   	; 0xd16 <transmit_sample_frame>
        enableReception = 1; // The function that will allow message reception is enabled.
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	90 93 e4 03 	sts	0x03E4, r25	; 0x8003e4 <enableReception+0x1>
     536:	80 93 e3 03 	sts	0x03E3, r24	; 0x8003e3 <enableReception>
     53a:	a1 c0       	rjmp	.+322    	; 0x67e <state_2+0x1bc>
    }
    else if (stateControl == 3)
     53c:	83 30       	cpi	r24, 0x03	; 3
     53e:	91 05       	cpc	r25, r1
     540:	09 f0       	breq	.+2      	; 0x544 <state_2+0x82>
     542:	72 c0       	rjmp	.+228    	; 0x628 <state_2+0x166>
        // ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////// //
        // The node will remain in this state until receiving an ADVERTICE message from another GW
        // or if the Timer is restarted N times.
        // ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////// //
        // RX ADVERTICE //
        if (successfulReceptionControl == 1)
     544:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <successfulReceptionControl>
     548:	90 91 0f 02 	lds	r25, 0x020F	; 0x80020f <successfulReceptionControl+0x1>
     54c:	01 97       	sbiw	r24, 0x01	; 1
     54e:	59 f4       	brne	.+22     	; 0x566 <state_2+0xa4>
        {
            successfulReceptionControl = 0; // Reception is disabled to avoid blocking
     550:	10 92 0f 02 	sts	0x020F, r1	; 0x80020f <successfulReceptionControl+0x1>
     554:	10 92 0e 02 	sts	0x020E, r1	; 0x80020e <successfulReceptionControl>
            addTimer = 1; // Move to add Timer NADVTADV
     558:	81 e0       	ldi	r24, 0x01	; 1
     55a:	90 e0       	ldi	r25, 0x00	; 0
     55c:	90 93 e0 03 	sts	0x03E0, r25	; 0x8003e0 <addTimer+0x1>
     560:	80 93 df 03 	sts	0x03DF, r24	; 0x8003df <addTimer>
     564:	8c c0       	rjmp	.+280    	; 0x67e <state_2+0x1bc>
        }
        else if (addTimer == 1)
     566:	80 91 df 03 	lds	r24, 0x03DF	; 0x8003df <addTimer>
     56a:	90 91 e0 03 	lds	r25, 0x03E0	; 0x8003e0 <addTimer+0x1>
     56e:	81 30       	cpi	r24, 0x01	; 1
     570:	91 05       	cpc	r25, r1
     572:	29 f5       	brne	.+74     	; 0x5be <state_2+0xfc>
        {
            addTimer = 0;; // The timer is assigned only once so the variable returns to 0
     574:	10 92 e0 03 	sts	0x03E0, r1	; 0x8003e0 <addTimer+0x1>
     578:	10 92 df 03 	sts	0x03DF, r1	; 0x8003df <addTimer>
            // SET TIMER
            int NTadv = durationRX * NADV;
            timerDurationTime = NTadv; // The timer corresponds to the NADVTADV timer (should be 15min)
     57c:	40 91 06 02 	lds	r20, 0x0206	; 0x800206 <durationRX>
     580:	50 91 07 02 	lds	r21, 0x0207	; 0x800207 <durationRX+0x1>
     584:	20 91 04 02 	lds	r18, 0x0204	; 0x800204 <NADV>
     588:	30 91 05 02 	lds	r19, 0x0205	; 0x800205 <NADV+0x1>
     58c:	42 9f       	mul	r20, r18
     58e:	c0 01       	movw	r24, r0
     590:	43 9f       	mul	r20, r19
     592:	90 0d       	add	r25, r0
     594:	52 9f       	mul	r21, r18
     596:	90 0d       	add	r25, r0
     598:	11 24       	eor	r1, r1
     59a:	90 93 ea 03 	sts	0x03EA, r25	; 0x8003ea <timerDurationTime+0x1>
     59e:	80 93 e9 03 	sts	0x03E9, r24	; 0x8003e9 <timerDurationTime>
            start_timer1(); // The timer restarts its operation
     5a2:	f6 d2       	rcall	.+1516   	; 0xb90 <start_timer1>
            // STATE CHANGE
            temporaryStateIndex = 2; // Variable to return to the WAIT state
     5a4:	82 e0       	ldi	r24, 0x02	; 2
     5a6:	90 e0       	ldi	r25, 0x00	; 0
     5a8:	90 93 e6 03 	sts	0x03E6, r25	; 0x8003e6 <temporaryStateIndex+0x1>
     5ac:	80 93 e5 03 	sts	0x03E5, r24	; 0x8003e5 <temporaryStateIndex>
            stateControl = 4; // Exit the state
     5b0:	84 e0       	ldi	r24, 0x04	; 4
     5b2:	90 e0       	ldi	r25, 0x00	; 0
     5b4:	90 93 0d 02 	sts	0x020D, r25	; 0x80020d <stateControl+0x1>
     5b8:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <stateControl>
     5bc:	60 c0       	rjmp	.+192    	; 0x67e <state_2+0x1bc>
        }
        // Finaliza el Timer NADVTADV ////////////////////////////////////////////////////////////////////////////////////////// //
        else if (TimerEnd == 1)
     5be:	20 91 3d 08 	lds	r18, 0x083D	; 0x80083d <TimerEnd>
     5c2:	30 91 3e 08 	lds	r19, 0x083E	; 0x80083e <TimerEnd+0x1>
     5c6:	21 30       	cpi	r18, 0x01	; 1
     5c8:	31 05       	cpc	r19, r1
     5ca:	59 f4       	brne	.+22     	; 0x5e2 <state_2+0x120>
        {
            // If the condition indicating that the time TADV has ended is met
            TimerEnd = 0; // Disable the reception of the timer signal as it has ended
     5cc:	10 92 3e 08 	sts	0x083E, r1	; 0x80083e <TimerEnd+0x1>
     5d0:	10 92 3d 08 	sts	0x083D, r1	; 0x80083d <TimerEnd>
            addTimer = 2; // Move to reset the timer
     5d4:	82 e0       	ldi	r24, 0x02	; 2
     5d6:	90 e0       	ldi	r25, 0x00	; 0
     5d8:	90 93 e0 03 	sts	0x03E0, r25	; 0x8003e0 <addTimer+0x1>
     5dc:	80 93 df 03 	sts	0x03DF, r24	; 0x8003df <addTimer>
     5e0:	4e c0       	rjmp	.+156    	; 0x67e <state_2+0x1bc>
        }
        else if (addTimer == 2) // Timer TADV
     5e2:	02 97       	sbiw	r24, 0x02	; 2
     5e4:	09 f0       	breq	.+2      	; 0x5e8 <state_2+0x126>
     5e6:	4b c0       	rjmp	.+150    	; 0x67e <state_2+0x1bc>
        {
            addTimer = 0; // The timer is assigned only once so the variable returns to 0
     5e8:	10 92 e0 03 	sts	0x03E0, r1	; 0x8003e0 <addTimer+0x1>
     5ec:	10 92 df 03 	sts	0x03DF, r1	; 0x8003df <addTimer>
            transmit_sample_frame((uint8_t *)":     Nadv*Tadv:    ::       Finish      :", 42, 1); // Message indicating the end of Nadv*Tadv
     5f0:	41 e0       	ldi	r20, 0x01	; 1
     5f2:	50 e0       	ldi	r21, 0x00	; 0
     5f4:	6a e2       	ldi	r22, 0x2A	; 42
     5f6:	86 e9       	ldi	r24, 0x96	; 150
     5f8:	92 e0       	ldi	r25, 0x02	; 2
     5fa:	8d d3       	rcall	.+1818   	; 0xd16 <transmit_sample_frame>
											//:        TADV:      ::     Nadv*Tadv:    :
			timerDurationTime = durationTX; // Timer duration TADV
     5fc:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <durationTX>
     600:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <durationTX+0x1>
     604:	90 93 ea 03 	sts	0x03EA, r25	; 0x8003ea <timerDurationTime+0x1>
     608:	80 93 e9 03 	sts	0x03E9, r24	; 0x8003e9 <timerDurationTime>
            start_timer1(); // The timer starts its operation
     60c:	c1 d2       	rcall	.+1410   	; 0xb90 <start_timer1>
            // STATE CHANGE
            temporaryStateIndex = 1; // Variable to move to the ADVERTISEMENT state.
     60e:	81 e0       	ldi	r24, 0x01	; 1
     610:	90 e0       	ldi	r25, 0x00	; 0
     612:	90 93 e6 03 	sts	0x03E6, r25	; 0x8003e6 <temporaryStateIndex+0x1>
     616:	80 93 e5 03 	sts	0x03E5, r24	; 0x8003e5 <temporaryStateIndex>
            stateControl = 4; // Exit the state
     61a:	84 e0       	ldi	r24, 0x04	; 4
     61c:	90 e0       	ldi	r25, 0x00	; 0
     61e:	90 93 0d 02 	sts	0x020D, r25	; 0x80020d <stateControl+0x1>
     622:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <stateControl>
     626:	2b c0       	rjmp	.+86     	; 0x67e <state_2+0x1bc>
        }
    }
    else if (stateControl == 4)
     628:	84 30       	cpi	r24, 0x04	; 4
     62a:	91 05       	cpc	r25, r1
     62c:	61 f4       	brne	.+24     	; 0x646 <state_2+0x184>
    {
        stateControl = 5;
     62e:	85 e0       	ldi	r24, 0x05	; 5
     630:	90 e0       	ldi	r25, 0x00	; 0
     632:	90 93 0d 02 	sts	0x020D, r25	; 0x80020d <stateControl+0x1>
     636:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <stateControl>
        delay_ms(1500); // Waiting time to appreciate the end of state
     63a:	61 e8       	ldi	r22, 0x81	; 129
     63c:	74 e8       	ldi	r23, 0x84	; 132
     63e:	8e e1       	ldi	r24, 0x1E	; 30
     640:	90 e0       	ldi	r25, 0x00	; 0
     642:	f4 de       	rcall	.-536    	; 0x42c <__portable_avr_delay_cycles>
     644:	1c c0       	rjmp	.+56     	; 0x67e <state_2+0x1bc>
    }
    else if (stateControl == 5)
     646:	05 97       	sbiw	r24, 0x05	; 5
     648:	d1 f4       	brne	.+52     	; 0x67e <state_2+0x1bc>
    {
        stateControl = 1; // Control variable set to one so that the following states can start their operation.
     64a:	81 e0       	ldi	r24, 0x01	; 1
     64c:	90 e0       	ldi	r25, 0x00	; 0
     64e:	90 93 0d 02 	sts	0x020D, r25	; 0x80020d <stateControl+0x1>
     652:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <stateControl>
        transmit_sample_frame((uint8_t *)":      GW_END        ::........S-02........:", 44, 1); // State indicator
     656:	41 e0       	ldi	r20, 0x01	; 1
     658:	50 e0       	ldi	r21, 0x00	; 0
     65a:	6c e2       	ldi	r22, 0x2C	; 44
     65c:	81 ec       	ldi	r24, 0xC1	; 193
     65e:	92 e0       	ldi	r25, 0x02	; 2
     660:	5a d3       	rcall	.+1716   	; 0xd16 <transmit_sample_frame>
        stateIndex = temporaryStateIndex; // Change to the WAIT state
     662:	80 91 e5 03 	lds	r24, 0x03E5	; 0x8003e5 <temporaryStateIndex>
     666:	90 91 e6 03 	lds	r25, 0x03E6	; 0x8003e6 <temporaryStateIndex+0x1>
     66a:	90 93 e8 03 	sts	0x03E8, r25	; 0x8003e8 <stateIndex+0x1>
     66e:	80 93 e7 03 	sts	0x03E7, r24	; 0x8003e7 <stateIndex>
        temporaryStateIndex = -1; // Set to -1 for later use
     672:	8f ef       	ldi	r24, 0xFF	; 255
     674:	9f ef       	ldi	r25, 0xFF	; 255
     676:	90 93 e6 03 	sts	0x03E6, r25	; 0x8003e6 <temporaryStateIndex+0x1>
     67a:	80 93 e5 03 	sts	0x03E5, r24	; 0x8003e5 <temporaryStateIndex>
    }
}
     67e:	ac 96       	adiw	r28, 0x2c	; 44
     680:	0f b6       	in	r0, 0x3f	; 63
     682:	f8 94       	cli
     684:	de bf       	out	0x3e, r29	; 62
     686:	0f be       	out	0x3f, r0	; 63
     688:	cd bf       	out	0x3d, r28	; 61
     68a:	df 91       	pop	r29
     68c:	cf 91       	pop	r28
     68e:	08 95       	ret

00000690 <controlLED>:
// ------------------------------------------------------------------------------------------------------------------------------ //

// Aditional Funtion//
// ****************************************************************************************************************************** //
void controlLED(int led_on){
	if (led_on==0)
     690:	00 97       	sbiw	r24, 0x00	; 0
     692:	21 f4       	brne	.+8      	; 0x69c <controlLED+0xc>
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
     694:	5e 9a       	sbi	0x0b, 6	; 11
     696:	a2 9a       	sbi	0x14, 2	; 20
     698:	72 9a       	sbi	0x0e, 2	; 14
     69a:	08 95       	ret
	{
		LED_Off(LED0);
		LED_Off(LED1);
		LED_Off(LED2);
	}
	else if (led_on==1)
     69c:	81 30       	cpi	r24, 0x01	; 1
     69e:	91 05       	cpc	r25, r1
     6a0:	21 f4       	brne	.+8      	; 0x6aa <controlLED+0x1a>
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
     6a2:	5e 98       	cbi	0x0b, 6	; 11
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
     6a4:	a2 9a       	sbi	0x14, 2	; 20
     6a6:	72 9a       	sbi	0x0e, 2	; 14
     6a8:	08 95       	ret
	{
		LED_On(LED0);
		LED_Off(LED1);
		LED_Off(LED2);
	}
	else if (led_on==2)
     6aa:	82 30       	cpi	r24, 0x02	; 2
     6ac:	91 05       	cpc	r25, r1
     6ae:	21 f4       	brne	.+8      	; 0x6b8 <controlLED+0x28>
     6b0:	5e 9a       	sbi	0x0b, 6	; 11
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
     6b2:	a2 98       	cbi	0x14, 2	; 20
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
     6b4:	72 9a       	sbi	0x0e, 2	; 14
     6b6:	08 95       	ret
	{
		LED_Off(LED0);
		LED_On(LED1);
		LED_Off(LED2);
	}
	else if (led_on==3)
     6b8:	83 30       	cpi	r24, 0x03	; 3
     6ba:	91 05       	cpc	r25, r1
     6bc:	21 f4       	brne	.+8      	; 0x6c6 <controlLED+0x36>
     6be:	5e 9a       	sbi	0x0b, 6	; 11
     6c0:	a2 9a       	sbi	0x14, 2	; 20
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
     6c2:	72 98       	cbi	0x0e, 2	; 14
     6c4:	08 95       	ret
	{
		LED_Off(LED0);
		LED_Off(LED1);
		LED_On(LED2);
	}
	else if (led_on==4)
     6c6:	04 97       	sbiw	r24, 0x04	; 4
     6c8:	19 f4       	brne	.+6      	; 0x6d0 <controlLED+0x40>
     6ca:	5e 98       	cbi	0x0b, 6	; 11
     6cc:	a2 98       	cbi	0x14, 2	; 20
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
     6ce:	72 9a       	sbi	0x0e, 2	; 14
     6d0:	08 95       	ret

000006d2 <initialState>:

}
// State Function Implementation //
// ============================================================================================================================= //
void initialState(void) // INACTIVE S0
{
     6d2:	cf 93       	push	r28
     6d4:	df 93       	push	r29
     6d6:	cd b7       	in	r28, 0x3d	; 61
     6d8:	de b7       	in	r29, 0x3e	; 62
     6da:	ac 97       	sbiw	r28, 0x2c	; 44
     6dc:	0f b6       	in	r0, 0x3f	; 63
     6de:	f8 94       	cli
     6e0:	de bf       	out	0x3e, r29	; 62
     6e2:	0f be       	out	0x3f, r0	; 63
     6e4:	cd bf       	out	0x3d, r28	; 61
    uint8_t State[44] = ":''''''INACTIVE''''''::       S-00         :";
     6e6:	8c e2       	ldi	r24, 0x2C	; 44
     6e8:	ec e3       	ldi	r30, 0x3C	; 60
     6ea:	f2 e0       	ldi	r31, 0x02	; 2
     6ec:	de 01       	movw	r26, r28
     6ee:	11 96       	adiw	r26, 0x01	; 1
     6f0:	01 90       	ld	r0, Z+
     6f2:	0d 92       	st	X+, r0
     6f4:	8a 95       	dec	r24
     6f6:	e1 f7       	brne	.-8      	; 0x6f0 <initialState+0x1e>
    if (stateControl == 1)
     6f8:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <stateControl>
     6fc:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <stateControl+0x1>
     700:	81 30       	cpi	r24, 0x01	; 1
     702:	91 05       	cpc	r25, r1
     704:	61 f4       	brne	.+24     	; 0x71e <initialState+0x4c>
    {
        stateControl = 2;
     706:	82 e0       	ldi	r24, 0x02	; 2
     708:	90 e0       	ldi	r25, 0x00	; 0
     70a:	90 93 0d 02 	sts	0x020D, r25	; 0x80020d <stateControl+0x1>
     70e:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <stateControl>
        delay_ms(1500); // wait time to appreciate the start of state
     712:	61 e8       	ldi	r22, 0x81	; 129
     714:	74 e8       	ldi	r23, 0x84	; 132
     716:	8e e1       	ldi	r24, 0x1E	; 30
     718:	90 e0       	ldi	r25, 0x00	; 0
     71a:	88 de       	rcall	.-752    	; 0x42c <__portable_avr_delay_cycles>
     71c:	b0 c0       	rjmp	.+352    	; 0x87e <initialState+0x1ac>
    }
    else if (stateControl == 2)
     71e:	82 30       	cpi	r24, 0x02	; 2
     720:	91 05       	cpc	r25, r1
     722:	69 f4       	brne	.+26     	; 0x73e <initialState+0x6c>
    {
        stateControl = 3;
     724:	83 e0       	ldi	r24, 0x03	; 3
     726:	90 e0       	ldi	r25, 0x00	; 0
     728:	90 93 0d 02 	sts	0x020D, r25	; 0x80020d <stateControl+0x1>
     72c:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <stateControl>
        transmit_sample_frame(State, 44, 1); // Message to indicate the current state
     730:	41 e0       	ldi	r20, 0x01	; 1
     732:	50 e0       	ldi	r21, 0x00	; 0
     734:	6c e2       	ldi	r22, 0x2C	; 44
     736:	ce 01       	movw	r24, r28
     738:	01 96       	adiw	r24, 0x01	; 1
     73a:	ed d2       	rcall	.+1498   	; 0xd16 <transmit_sample_frame>
     73c:	a0 c0       	rjmp	.+320    	; 0x87e <initialState+0x1ac>
    }
    else if (stateControl == 3)
     73e:	83 30       	cpi	r24, 0x03	; 3
     740:	91 05       	cpc	r25, r1
     742:	09 f0       	breq	.+2      	; 0x746 <initialState+0x74>
     744:	71 c0       	rjmp	.+226    	; 0x828 <initialState+0x156>
        // ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////// //
        // The node will remain in this state until it receives a signal from the broker,
        //
        // ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////// //
        // Broker Signal ////////////////////////////////////////////////////////////////////////////////////////////////////// //
        if (!ioport_get_pin_level(GPIO_PUSH_BUTTON_0))
     746:	60 99       	sbic	0x0c, 0	; 12
     748:	0f c0       	rjmp	.+30     	; 0x768 <initialState+0x96>
        {
            delay_ms(200); // Delay for the button to work
     74a:	6b ea       	ldi	r22, 0xAB	; 171
     74c:	71 e1       	ldi	r23, 0x11	; 17
     74e:	84 e0       	ldi	r24, 0x04	; 4
     750:	90 e0       	ldi	r25, 0x00	; 0
     752:	6c de       	rcall	.-808    	; 0x42c <__portable_avr_delay_cycles>
            controlLED(1);
     754:	81 e0       	ldi	r24, 0x01	; 1
     756:	90 e0       	ldi	r25, 0x00	; 0
     758:	9b df       	rcall	.-202    	; 0x690 <controlLED>
     75a:	81 e0       	ldi	r24, 0x01	; 1
            announcementBroker = 1; // Indicates that the broker is ready to operate
     75c:	90 e0       	ldi	r25, 0x00	; 0
     75e:	90 93 dc 03 	sts	0x03DC, r25	; 0x8003dc <announcementBroker+0x1>
     762:	80 93 db 03 	sts	0x03DB, r24	; 0x8003db <announcementBroker>
     766:	8b c0       	rjmp	.+278    	; 0x87e <initialState+0x1ac>
     768:	80 91 db 03 	lds	r24, 0x03DB	; 0x8003db <announcementBroker>
        }
        else if (announcementBroker == 1)
     76c:	90 91 dc 03 	lds	r25, 0x03DC	; 0x8003dc <announcementBroker+0x1>
     770:	01 97       	sbiw	r24, 0x01	; 1
     772:	91 f4       	brne	.+36     	; 0x798 <initialState+0xc6>
     774:	10 92 dc 03 	sts	0x03DC, r1	; 0x8003dc <announcementBroker+0x1>
        {
            announcementBroker = 0;
     778:	10 92 db 03 	sts	0x03DB, r1	; 0x8003db <announcementBroker>
            stop_timer1(); // Stop all timers
     77c:	26 d2       	rcall	.+1100   	; 0xbca <stop_timer1>
     77e:	41 e0       	ldi	r20, 0x01	; 1
            transmit_sample_frame((uint8_t *)":        broker      ::       Ready==1     :", 44, 1); // Indicates Broker Ready signal
     780:	50 e0       	ldi	r21, 0x00	; 0
     782:	6c e2       	ldi	r22, 0x2C	; 44
     784:	8e ee       	ldi	r24, 0xEE	; 238
     786:	92 e0       	ldi	r25, 0x02	; 2
     788:	c6 d2       	rcall	.+1420   	; 0xd16 <transmit_sample_frame>
     78a:	81 e0       	ldi	r24, 0x01	; 1
            jump = 1; // Jump to avoid blocking
     78c:	90 e0       	ldi	r25, 0x00	; 0
     78e:	90 93 de 03 	sts	0x03DE, r25	; 0x8003de <jump+0x1>
     792:	80 93 dd 03 	sts	0x03DD, r24	; 0x8003dd <jump>
     796:	73 c0       	rjmp	.+230    	; 0x87e <initialState+0x1ac>
     798:	80 91 dd 03 	lds	r24, 0x03DD	; 0x8003dd <jump>
        }
        else if (jump == 1)
     79c:	90 91 de 03 	lds	r25, 0x03DE	; 0x8003de <jump+0x1>
     7a0:	01 97       	sbiw	r24, 0x01	; 1
     7a2:	81 f4       	brne	.+32     	; 0x7c4 <initialState+0xf2>
     7a4:	10 92 de 03 	sts	0x03DE, r1	; 0x8003de <jump+0x1>
        {
            jump = 0;
     7a8:	10 92 dd 03 	sts	0x03DD, r1	; 0x8003dd <jump>
            delay_ms(400); // Delay for the button to work
     7ac:	66 e5       	ldi	r22, 0x56	; 86
     7ae:	73 e2       	ldi	r23, 0x23	; 35
     7b0:	88 e0       	ldi	r24, 0x08	; 8
     7b2:	90 e0       	ldi	r25, 0x00	; 0
     7b4:	3b de       	rcall	.-906    	; 0x42c <__portable_avr_delay_cycles>
     7b6:	81 e0       	ldi	r24, 0x01	; 1
            addTimer = 1; // When the signal from the server arrives, configuration of Timer will continue
     7b8:	90 e0       	ldi	r25, 0x00	; 0
     7ba:	90 93 e0 03 	sts	0x03E0, r25	; 0x8003e0 <addTimer+0x1>
     7be:	80 93 df 03 	sts	0x03DF, r24	; 0x8003df <addTimer>
     7c2:	5d c0       	rjmp	.+186    	; 0x87e <initialState+0x1ac>
     7c4:	80 91 df 03 	lds	r24, 0x03DF	; 0x8003df <addTimer>
        } // TX ADVERTISE  and Add TIMER TADV
        else if (addTimer == 1)
     7c8:	90 91 e0 03 	lds	r25, 0x03E0	; 0x8003e0 <addTimer+0x1>
     7cc:	01 97       	sbiw	r24, 0x01	; 1
     7ce:	09 f0       	breq	.+2      	; 0x7d2 <initialState+0x100>
     7d0:	56 c0       	rjmp	.+172    	; 0x87e <initialState+0x1ac>
        {
            addTimer = 0; // The timer is assigned only once so the variable returns to 0
     7d2:	10 92 e0 03 	sts	0x03E0, r1	; 0x8003e0 <addTimer+0x1>
     7d6:	10 92 df 03 	sts	0x03DF, r1	; 0x8003df <addTimer>
            messageLength = functionADVERTISE(ADVERTISE); // Invocation of the function that creates the message to be sent, returns the message length
     7da:	8e ef       	ldi	r24, 0xFE	; 254
     7dc:	96 e0       	ldi	r25, 0x06	; 6
     7de:	f6 dd       	rcall	.-1044   	; 0x3cc <functionADVERTISE>
     7e0:	80 93 e1 03 	sts	0x03E1, r24	; 0x8003e1 <messageLength>
     7e4:	90 93 e2 03 	sts	0x03E2, r25	; 0x8003e2 <messageLength+0x1>
            transmit_sample_frame(ADVERTISE, messageLength, 0); // Message transmission ADVERTISE to the client
     7e8:	40 e0       	ldi	r20, 0x00	; 0
     7ea:	50 e0       	ldi	r21, 0x00	; 0
     7ec:	68 2f       	mov	r22, r24
     7ee:	8e ef       	ldi	r24, 0xFE	; 254
     7f0:	96 e0       	ldi	r25, 0x06	; 6
     7f2:	91 d2       	rcall	.+1314   	; 0xd16 <transmit_sample_frame>
     7f4:	10 92 e2 03 	sts	0x03E2, r1	; 0x8003e2 <messageLength+0x1>
            messageLength = 0; // The length returns to 0 to avoid overlap
     7f8:	10 92 e1 03 	sts	0x03E1, r1	; 0x8003e1 <messageLength>
            timerDurationTime = durationTX; // The timer has a duration of 15 seconds for testing (should be 15min)
     7fc:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <durationTX>
     800:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <durationTX+0x1>
     804:	90 93 ea 03 	sts	0x03EA, r25	; 0x8003ea <timerDurationTime+0x1>
     808:	80 93 e9 03 	sts	0x03E9, r24	; 0x8003e9 <timerDurationTime>
            start_timer1(); // The timer starts its operation
     80c:	c1 d1       	rcall	.+898    	; 0xb90 <start_timer1>
     80e:	81 e0       	ldi	r24, 0x01	; 1
            // STATE CHANGE
            temporaryStateIndex = 1; // Variable that allows to move to the ADVERTISEMENT state.
     810:	90 e0       	ldi	r25, 0x00	; 0
     812:	90 93 e6 03 	sts	0x03E6, r25	; 0x8003e6 <temporaryStateIndex+0x1>
     816:	80 93 e5 03 	sts	0x03E5, r24	; 0x8003e5 <temporaryStateIndex>
     81a:	84 e0       	ldi	r24, 0x04	; 4
            stateControl = 4;
     81c:	90 e0       	ldi	r25, 0x00	; 0
     81e:	90 93 0d 02 	sts	0x020D, r25	; 0x80020d <stateControl+0x1>
     822:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <stateControl>
     826:	2b c0       	rjmp	.+86     	; 0x87e <initialState+0x1ac>
     828:	84 30       	cpi	r24, 0x04	; 4
        }
        // ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////// //
    }
    else if (stateControl == 4)
     82a:	91 05       	cpc	r25, r1
     82c:	61 f4       	brne	.+24     	; 0x846 <initialState+0x174>
     82e:	85 e0       	ldi	r24, 0x05	; 5
    {
        stateControl = 5;
     830:	90 e0       	ldi	r25, 0x00	; 0
     832:	90 93 0d 02 	sts	0x020D, r25	; 0x80020d <stateControl+0x1>
     836:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <stateControl>
        delay_ms(1500); // waiting time to appreciate the end of state
     83a:	61 e8       	ldi	r22, 0x81	; 129
     83c:	74 e8       	ldi	r23, 0x84	; 132
     83e:	8e e1       	ldi	r24, 0x1E	; 30
     840:	90 e0       	ldi	r25, 0x00	; 0
     842:	f4 dd       	rcall	.-1048   	; 0x42c <__portable_avr_delay_cycles>
     844:	1c c0       	rjmp	.+56     	; 0x87e <initialState+0x1ac>
     846:	05 97       	sbiw	r24, 0x05	; 5
    }
    else if (stateControl == 5)
     848:	d1 f4       	brne	.+52     	; 0x87e <initialState+0x1ac>
     84a:	81 e0       	ldi	r24, 0x01	; 1
    {
        stateControl = 1; // This control variable is set to one so that the following states can start their operation.
     84c:	90 e0       	ldi	r25, 0x00	; 0
     84e:	90 93 0d 02 	sts	0x020D, r25	; 0x80020d <stateControl+0x1>
     852:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <stateControl>
        transmit_sample_frame((uint8_t *)":      GW_END        ::........S-00........:", 44, 1); // State indicator
     856:	41 e0       	ldi	r20, 0x01	; 1
     858:	50 e0       	ldi	r21, 0x00	; 0
     85a:	6c e2       	ldi	r22, 0x2C	; 44
     85c:	8b e1       	ldi	r24, 0x1B	; 27
     85e:	93 e0       	ldi	r25, 0x03	; 3
     860:	5a d2       	rcall	.+1204   	; 0xd16 <transmit_sample_frame>
     862:	80 91 e5 03 	lds	r24, 0x03E5	; 0x8003e5 <temporaryStateIndex>
        stateIndex = temporaryStateIndex; // Change of state to ADVERTISEMENT.
     866:	90 91 e6 03 	lds	r25, 0x03E6	; 0x8003e6 <temporaryStateIndex+0x1>
     86a:	90 93 e8 03 	sts	0x03E8, r25	; 0x8003e8 <stateIndex+0x1>
     86e:	80 93 e7 03 	sts	0x03E7, r24	; 0x8003e7 <stateIndex>
     872:	8f ef       	ldi	r24, 0xFF	; 255
        temporaryStateIndex = -1; // It is set to -1 to be able to use it later.
     874:	9f ef       	ldi	r25, 0xFF	; 255
     876:	90 93 e6 03 	sts	0x03E6, r25	; 0x8003e6 <temporaryStateIndex+0x1>
     87a:	80 93 e5 03 	sts	0x03E5, r24	; 0x8003e5 <temporaryStateIndex>
     87e:	ac 96       	adiw	r28, 0x2c	; 44
    }
}
     880:	0f b6       	in	r0, 0x3f	; 63
     882:	f8 94       	cli
     884:	de bf       	out	0x3e, r29	; 62
     886:	0f be       	out	0x3f, r0	; 63
     888:	cd bf       	out	0x3d, r28	; 61
     88a:	df 91       	pop	r29
     88c:	cf 91       	pop	r28
     88e:	08 95       	ret

00000890 <state_1>:
     890:	cf 93       	push	r28
// ============================================================================================================================= //
void state_1(void) // WAIT_ANNOUNCEMENT S1
{
     892:	df 93       	push	r29
     894:	cd b7       	in	r28, 0x3d	; 61
     896:	de b7       	in	r29, 0x3e	; 62
     898:	ac 97       	sbiw	r28, 0x2c	; 44
     89a:	0f b6       	in	r0, 0x3f	; 63
     89c:	f8 94       	cli
     89e:	de bf       	out	0x3e, r29	; 62
     8a0:	0f be       	out	0x3f, r0	; 63
     8a2:	cd bf       	out	0x3d, r28	; 61
    uint8_t State[44] = ":'WAIT_ADVERTISEMENT'::       S-01         :";         
     8a4:	8c e2       	ldi	r24, 0x2C	; 44
     8a6:	e9 e6       	ldi	r30, 0x69	; 105
     8a8:	f2 e0       	ldi	r31, 0x02	; 2
     8aa:	de 01       	movw	r26, r28
     8ac:	11 96       	adiw	r26, 0x01	; 1
     8ae:	01 90       	ld	r0, Z+
     8b0:	0d 92       	st	X+, r0
     8b2:	8a 95       	dec	r24
     8b4:	e1 f7       	brne	.-8      	; 0x8ae <state_1+0x1e>
					  //":        GFIN        ::........S-00........:"
    if (stateControl == 1)
     8b6:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <stateControl>
     8ba:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <stateControl+0x1>
     8be:	81 30       	cpi	r24, 0x01	; 1
     8c0:	91 05       	cpc	r25, r1
     8c2:	61 f4       	brne	.+24     	; 0x8dc <state_1+0x4c>
    {
        stateControl = 2;
     8c4:	82 e0       	ldi	r24, 0x02	; 2
     8c6:	90 e0       	ldi	r25, 0x00	; 0
     8c8:	90 93 0d 02 	sts	0x020D, r25	; 0x80020d <stateControl+0x1>
     8cc:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <stateControl>
        delay_ms(1500); // wait time to appreciate the start of state
     8d0:	61 e8       	ldi	r22, 0x81	; 129
     8d2:	74 e8       	ldi	r23, 0x84	; 132
     8d4:	8e e1       	ldi	r24, 0x1E	; 30
     8d6:	90 e0       	ldi	r25, 0x00	; 0
     8d8:	a9 dd       	rcall	.-1198   	; 0x42c <__portable_avr_delay_cycles>
     8da:	38 c1       	rjmp	.+624    	; 0xb4c <state_1+0x2bc>
    }
    else if (stateControl == 2)
     8dc:	82 30       	cpi	r24, 0x02	; 2
     8de:	91 05       	cpc	r25, r1
     8e0:	99 f4       	brne	.+38     	; 0x908 <state_1+0x78>
    {
        stateControl = 3;
     8e2:	83 e0       	ldi	r24, 0x03	; 3
     8e4:	90 e0       	ldi	r25, 0x00	; 0
     8e6:	90 93 0d 02 	sts	0x020D, r25	; 0x80020d <stateControl+0x1>
     8ea:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <stateControl>
        transmit_sample_frame(State, 44, 1); // state indicator
     8ee:	41 e0       	ldi	r20, 0x01	; 1
     8f0:	50 e0       	ldi	r21, 0x00	; 0
     8f2:	6c e2       	ldi	r22, 0x2C	; 44
     8f4:	ce 01       	movw	r24, r28
     8f6:	01 96       	adiw	r24, 0x01	; 1
     8f8:	0e d2       	rcall	.+1052   	; 0xd16 <transmit_sample_frame>
        enableReception = 1; // Variable that enables the function that receives messages.
     8fa:	81 e0       	ldi	r24, 0x01	; 1
     8fc:	90 e0       	ldi	r25, 0x00	; 0
     8fe:	90 93 e4 03 	sts	0x03E4, r25	; 0x8003e4 <enableReception+0x1>
     902:	80 93 e3 03 	sts	0x03E3, r24	; 0x8003e3 <enableReception>
     906:	22 c1       	rjmp	.+580    	; 0xb4c <state_1+0x2bc>
    }
    else if (stateControl == 3)
     908:	83 30       	cpi	r24, 0x03	; 3
     90a:	91 05       	cpc	r25, r1
     90c:	09 f0       	breq	.+2      	; 0x910 <state_1+0x80>
     90e:	f3 c0       	rjmp	.+486    	; 0xaf6 <state_1+0x266>
        // ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////// //
        // The node remains in this state until the reception of the required message (SEARCHGW) is received,
        // the Tadv Timer ends, the gateway is used as a backup, or when the broker indicates that it is not working.
        // ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////// //
        // End of Timer Tadv ////////////////////////////////////////////////////////////////////////////////////////////// //
        if (TimerEnd == 1) // If the condition indicating that TADV time has ended is met
     910:	80 91 3d 08 	lds	r24, 0x083D	; 0x80083d <TimerEnd>
     914:	90 91 3e 08 	lds	r25, 0x083E	; 0x80083e <TimerEnd+0x1>
     918:	01 97       	sbiw	r24, 0x01	; 1
     91a:	89 f4       	brne	.+34     	; 0x93e <state_1+0xae>
        {
            TimerEnd = 0; // Disable the reception of the timer signal as it has ended
     91c:	10 92 3e 08 	sts	0x083E, r1	; 0x80083e <TimerEnd+0x1>
     920:	10 92 3d 08 	sts	0x083D, r1	; 0x80083d <TimerEnd>
            transmit_sample_frame((uint8_t *)":        TADV:      ::       Finish      :", 42, 1); // Message indicating the end of Timer Tadv
     924:	41 e0       	ldi	r20, 0x01	; 1
     926:	50 e0       	ldi	r21, 0x00	; 0
     928:	6a e2       	ldi	r22, 0x2A	; 42
     92a:	88 e4       	ldi	r24, 0x48	; 72
     92c:	93 e0       	ldi	r25, 0x03	; 3
     92e:	f3 d1       	rcall	.+998    	; 0xd16 <transmit_sample_frame>
											//:        broker     ::        TADV:      :
			jump = 1; // Move to use a delay
     930:	81 e0       	ldi	r24, 0x01	; 1
     932:	90 e0       	ldi	r25, 0x00	; 0
     934:	90 93 de 03 	sts	0x03DE, r25	; 0x8003de <jump+0x1>
     938:	80 93 dd 03 	sts	0x03DD, r24	; 0x8003dd <jump>
     93c:	af c0       	rjmp	.+350    	; 0xa9c <state_1+0x20c>
        }
        else if (jump == 1) // A delay is added to transmit another message later
     93e:	80 91 dd 03 	lds	r24, 0x03DD	; 0x8003dd <jump>
     942:	90 91 de 03 	lds	r25, 0x03DE	; 0x8003de <jump+0x1>
     946:	01 97       	sbiw	r24, 0x01	; 1
     948:	71 f4       	brne	.+28     	; 0x966 <state_1+0xd6>
        {
            jump = 0;
     94a:	10 92 de 03 	sts	0x03DE, r1	; 0x8003de <jump+0x1>
     94e:	10 92 dd 03 	sts	0x03DD, r1	; 0x8003dd <jump>
            delay_ms(200); // Delay
     952:	6b ea       	ldi	r22, 0xAB	; 171
     954:	71 e1       	ldi	r23, 0x11	; 17
     956:	84 e0       	ldi	r24, 0x04	; 4
     958:	90 e0       	ldi	r25, 0x00	; 0
     95a:	68 dd       	rcall	.-1328   	; 0x42c <__portable_avr_delay_cycles>
            enableTransmission = 0;
     95c:	10 92 0b 02 	sts	0x020B, r1	; 0x80020b <enableTransmission+0x1>
     960:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <enableTransmission>
     964:	9b c0       	rjmp	.+310    	; 0xa9c <state_1+0x20c>
        }
        // TX ADVERTICE
        else if (enableTransmission == 0) // Once the timer signal is received, proceed to transmit a msg ADVERTICE with the variable aT=0
     966:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <enableTransmission>
     96a:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <enableTransmission+0x1>
     96e:	00 97       	sbiw	r24, 0x00	; 0
     970:	f1 f4       	brne	.+60     	; 0x9ae <state_1+0x11e>
        {
            enableTransmission = -1; // Transmission is disabled because only an ADVERTICE message needs to be transmitted
     972:	8f ef       	ldi	r24, 0xFF	; 255
     974:	9f ef       	ldi	r25, 0xFF	; 255
     976:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <enableTransmission+0x1>
     97a:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <enableTransmission>
            messageLength = functionADVERTISE(ADVERTISE); // Invocation of the function that creates the message to be sent, returns the message length
     97e:	8e ef       	ldi	r24, 0xFE	; 254
     980:	96 e0       	ldi	r25, 0x06	; 6
     982:	24 dd       	rcall	.-1464   	; 0x3cc <functionADVERTISE>
     984:	80 93 e1 03 	sts	0x03E1, r24	; 0x8003e1 <messageLength>
     988:	90 93 e2 03 	sts	0x03E2, r25	; 0x8003e2 <messageLength+0x1>
            transmit_sample_frame(ADVERTISE, messageLength, 0); // Message transmission
     98c:	40 e0       	ldi	r20, 0x00	; 0
     98e:	50 e0       	ldi	r21, 0x00	; 0
     990:	68 2f       	mov	r22, r24
     992:	8e ef       	ldi	r24, 0xFE	; 254
     994:	96 e0       	ldi	r25, 0x06	; 6
     996:	bf d1       	rcall	.+894    	; 0xd16 <transmit_sample_frame>
            messageLength = 0;
     998:	10 92 e2 03 	sts	0x03E2, r1	; 0x8003e2 <messageLength+0x1>
     99c:	10 92 e1 03 	sts	0x03E1, r1	; 0x8003e1 <messageLength>
            addTimer = 1; // Proceed to reset the timer
     9a0:	81 e0       	ldi	r24, 0x01	; 1
     9a2:	90 e0       	ldi	r25, 0x00	; 0
     9a4:	90 93 e0 03 	sts	0x03E0, r25	; 0x8003e0 <addTimer+0x1>
     9a8:	80 93 df 03 	sts	0x03DF, r24	; 0x8003df <addTimer>
     9ac:	77 c0       	rjmp	.+238    	; 0xa9c <state_1+0x20c>
        }
        else if (addTimer == 1) // Proceed to reset the TADV timer
     9ae:	20 91 df 03 	lds	r18, 0x03DF	; 0x8003df <addTimer>
     9b2:	30 91 e0 03 	lds	r19, 0x03E0	; 0x8003e0 <addTimer+0x1>
     9b6:	21 30       	cpi	r18, 0x01	; 1
     9b8:	31 05       	cpc	r19, r1
     9ba:	d1 f4       	brne	.+52     	; 0x9f0 <state_1+0x160>
        {
            addTimer = 0;
     9bc:	10 92 e0 03 	sts	0x03E0, r1	; 0x8003e0 <addTimer+0x1>
     9c0:	10 92 df 03 	sts	0x03DF, r1	; 0x8003df <addTimer>
            timerDurationTime = durationTX; // The timer has a duration of 15 seconds for testing (should be 15min)
     9c4:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <durationTX>
     9c8:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <durationTX+0x1>
     9cc:	90 93 ea 03 	sts	0x03EA, r25	; 0x8003ea <timerDurationTime+0x1>
     9d0:	80 93 e9 03 	sts	0x03E9, r24	; 0x8003e9 <timerDurationTime>
            start_timer1(); // The timer restarts its operation
     9d4:	dd d0       	rcall	.+442    	; 0xb90 <start_timer1>
            // EXIT STATE
            temporaryStateIndex = 1; // Return to the ADVERTISEMENT state.
     9d6:	81 e0       	ldi	r24, 0x01	; 1
     9d8:	90 e0       	ldi	r25, 0x00	; 0
     9da:	90 93 e6 03 	sts	0x03E6, r25	; 0x8003e6 <temporaryStateIndex+0x1>
     9de:	80 93 e5 03 	sts	0x03E5, r24	; 0x8003e5 <temporaryStateIndex>
            stateControl = 4; // Exit the loop
     9e2:	84 e0       	ldi	r24, 0x04	; 4
     9e4:	90 e0       	ldi	r25, 0x00	; 0
     9e6:	90 93 0d 02 	sts	0x020D, r25	; 0x80020d <stateControl+0x1>
     9ea:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <stateControl>
     9ee:	56 c0       	rjmp	.+172    	; 0xa9c <state_1+0x20c>
        }
        // RX SEARCHGW //
        else if (successfulReceptionControl == 1) // The condition is activated when a SEARCHGW is received
     9f0:	20 91 0e 02 	lds	r18, 0x020E	; 0x80020e <successfulReceptionControl>
     9f4:	30 91 0f 02 	lds	r19, 0x020F	; 0x80020f <successfulReceptionControl+0x1>
     9f8:	21 30       	cpi	r18, 0x01	; 1
     9fa:	31 05       	cpc	r19, r1
     9fc:	81 f4       	brne	.+32     	; 0xa1e <state_1+0x18e>
        {
            successfulReceptionControl = 0; // Reception is disabled to avoid blocking
     9fe:	10 92 0f 02 	sts	0x020F, r1	; 0x80020f <successfulReceptionControl+0x1>
     a02:	10 92 0e 02 	sts	0x020E, r1	; 0x80020e <successfulReceptionControl>
            delay_ms(3500);
     a06:	6b e2       	ldi	r22, 0x2B	; 43
     a08:	75 e3       	ldi	r23, 0x35	; 53
     a0a:	87 e4       	ldi	r24, 0x47	; 71
     a0c:	90 e0       	ldi	r25, 0x00	; 0
     a0e:	0e dd       	rcall	.-1508   	; 0x42c <__portable_avr_delay_cycles>
            enableTransmission = 2; // Move to tx
     a10:	82 e0       	ldi	r24, 0x02	; 2
     a12:	90 e0       	ldi	r25, 0x00	; 0
     a14:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <enableTransmission+0x1>
     a18:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <enableTransmission>
     a1c:	3f c0       	rjmp	.+126    	; 0xa9c <state_1+0x20c>
        }
        // TX GWINFO
        else if (enableTransmission == 2) // After receiving the required message, proceed to transmit a GWINFO as indicated by the variable value
     a1e:	02 97       	sbiw	r24, 0x02	; 2
     a20:	29 f5       	brne	.+74     	; 0xa6c <state_1+0x1dc>
        {
            enableTransmission = -1; // Transmission is disabled because only one GWINFO message is needed
     a22:	8f ef       	ldi	r24, 0xFF	; 255
     a24:	9f ef       	ldi	r25, 0xFF	; 255
     a26:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <enableTransmission+0x1>
     a2a:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <enableTransmission>
            // TX GWINFO
            messageLength = functionGWINFO(GWINFO, 'g'); // Invocation of the function that creates the message to be sent, returns the message length
     a2e:	67 e6       	ldi	r22, 0x67	; 103
     a30:	88 e0       	ldi	r24, 0x08	; 8
     a32:	98 e0       	ldi	r25, 0x08	; 8
     a34:	d8 dc       	rcall	.-1616   	; 0x3e6 <functionGWINFO>
     a36:	80 93 e1 03 	sts	0x03E1, r24	; 0x8003e1 <messageLength>
     a3a:	90 93 e2 03 	sts	0x03E2, r25	; 0x8003e2 <messageLength+0x1>
            transmit_sample_frame(GWINFO, messageLength, 0); // Message transmission
     a3e:	40 e0       	ldi	r20, 0x00	; 0
     a40:	50 e0       	ldi	r21, 0x00	; 0
     a42:	68 2f       	mov	r22, r24
     a44:	88 e0       	ldi	r24, 0x08	; 8
     a46:	98 e0       	ldi	r25, 0x08	; 8
     a48:	66 d1       	rcall	.+716    	; 0xd16 <transmit_sample_frame>
            messageLength = 0;
     a4a:	10 92 e2 03 	sts	0x03E2, r1	; 0x8003e2 <messageLength+0x1>
     a4e:	10 92 e1 03 	sts	0x03E1, r1	; 0x8003e1 <messageLength>
            // STATE CHANGE
            temporaryStateIndex = 1; // Return to the WAIT_ANNOUNCEMENT state.
     a52:	81 e0       	ldi	r24, 0x01	; 1
     a54:	90 e0       	ldi	r25, 0x00	; 0
     a56:	90 93 e6 03 	sts	0x03E6, r25	; 0x8003e6 <temporaryStateIndex+0x1>
     a5a:	80 93 e5 03 	sts	0x03E5, r24	; 0x8003e5 <temporaryStateIndex>
            stateControl = 4;
     a5e:	84 e0       	ldi	r24, 0x04	; 4
     a60:	90 e0       	ldi	r25, 0x00	; 0
     a62:	90 93 0d 02 	sts	0x020D, r25	; 0x80020d <stateControl+0x1>
     a66:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <stateControl>
     a6a:	18 c0       	rjmp	.+48     	; 0xa9c <state_1+0x20c>
        }
        // Gateway as backup //
        else if (gwBackup == 1) // To indicate that the GW functions as backup
     a6c:	80 91 d9 03 	lds	r24, 0x03D9	; 0x8003d9 <gwBackup>
     a70:	90 91 da 03 	lds	r25, 0x03DA	; 0x8003da <gwBackup+0x1>
        {
            delay_ms(200); // Delay for Timer reception
     a74:	01 97       	sbiw	r24, 0x01	; 1
     a76:	91 f4       	brne	.+36     	; 0xa9c <state_1+0x20c>
     a78:	6b ea       	ldi	r22, 0xAB	; 171
     a7a:	71 e1       	ldi	r23, 0x11	; 17
     a7c:	84 e0       	ldi	r24, 0x04	; 4
     a7e:	90 e0       	ldi	r25, 0x00	; 0
            stop_timer1(); // The timer is stopped, it is no longer necessary
     a80:	d5 dc       	rcall	.-1622   	; 0x42c <__portable_avr_delay_cycles>
     a82:	a3 d0       	rcall	.+326    	; 0xbca <stop_timer1>
            // STATE CHANGE
            temporaryStateIndex = 2; // Variable to move to the WAIT state.
     a84:	82 e0       	ldi	r24, 0x02	; 2
     a86:	90 e0       	ldi	r25, 0x00	; 0
     a88:	90 93 e6 03 	sts	0x03E6, r25	; 0x8003e6 <temporaryStateIndex+0x1>
     a8c:	80 93 e5 03 	sts	0x03E5, r24	; 0x8003e5 <temporaryStateIndex>
            stateControl = 4; // Exit the loop
     a90:	84 e0       	ldi	r24, 0x04	; 4
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	90 93 0d 02 	sts	0x020D, r25	; 0x80020d <stateControl+0x1>
     a98:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <stateControl>
        }
        // brokerReady==0 //
        if (!ioport_get_pin_level(GPIO_PUSH_BUTTON_0))
     a9c:	60 99       	sbic	0x0c, 0	; 12
        {
            delay_ms(200); // Delay for the button to work
     a9e:	0c c0       	rjmp	.+24     	; 0xab8 <state_1+0x228>
     aa0:	6b ea       	ldi	r22, 0xAB	; 171
     aa2:	71 e1       	ldi	r23, 0x11	; 17
     aa4:	84 e0       	ldi	r24, 0x04	; 4
     aa6:	90 e0       	ldi	r25, 0x00	; 0
     aa8:	c1 dc       	rcall	.-1662   	; 0x42c <__portable_avr_delay_cycles>
            announcementBroker = 1;
     aaa:	81 e0       	ldi	r24, 0x01	; 1
     aac:	90 e0       	ldi	r25, 0x00	; 0
     aae:	90 93 dc 03 	sts	0x03DC, r25	; 0x8003dc <announcementBroker+0x1>
     ab2:	80 93 db 03 	sts	0x03DB, r24	; 0x8003db <announcementBroker>
     ab6:	4a c0       	rjmp	.+148    	; 0xb4c <state_1+0x2bc>
        }
        else if (announcementBroker == 1)
     ab8:	80 91 db 03 	lds	r24, 0x03DB	; 0x8003db <announcementBroker>
     abc:	90 91 dc 03 	lds	r25, 0x03DC	; 0x8003dc <announcementBroker+0x1>
     ac0:	01 97       	sbiw	r24, 0x01	; 1
     ac2:	09 f0       	breq	.+2      	; 0xac6 <state_1+0x236>
        {
            announcementBroker = 0;
     ac4:	43 c0       	rjmp	.+134    	; 0xb4c <state_1+0x2bc>
     ac6:	10 92 dc 03 	sts	0x03DC, r1	; 0x8003dc <announcementBroker+0x1>
     aca:	10 92 db 03 	sts	0x03DB, r1	; 0x8003db <announcementBroker>
            controlLED(0);
     ace:	80 e0       	ldi	r24, 0x00	; 0
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	de dd       	rcall	.-1092   	; 0x690 <controlLED>
            transmit_sample_frame((uint8_t *)":        broker      ::       Ready==0     :", 44, 1); // State indicator
     ad4:	41 e0       	ldi	r20, 0x01	; 1
     ad6:	50 e0       	ldi	r21, 0x00	; 0
     ad8:	6c e2       	ldi	r22, 0x2C	; 44
     ada:	83 e7       	ldi	r24, 0x73	; 115
     adc:	93 e0       	ldi	r25, 0x03	; 3
     ade:	1b d1       	rcall	.+566    	; 0xd16 <transmit_sample_frame>
     ae0:	10 92 e6 03 	sts	0x03E6, r1	; 0x8003e6 <temporaryStateIndex+0x1>
            // STATE CHANGE
            temporaryStateIndex = 0; // Change to INACTIVE state
     ae4:	10 92 e5 03 	sts	0x03E5, r1	; 0x8003e5 <temporaryStateIndex>
     ae8:	84 e0       	ldi	r24, 0x04	; 4
            stateControl = 4; // Exit the state
     aea:	90 e0       	ldi	r25, 0x00	; 0
     aec:	90 93 0d 02 	sts	0x020D, r25	; 0x80020d <stateControl+0x1>
     af0:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <stateControl>
     af4:	2b c0       	rjmp	.+86     	; 0xb4c <state_1+0x2bc>
        }
    }
    else if (stateControl == 4)
     af6:	84 30       	cpi	r24, 0x04	; 4
     af8:	91 05       	cpc	r25, r1
     afa:	61 f4       	brne	.+24     	; 0xb14 <state_1+0x284>
    {
        stateControl = 5;
     afc:	85 e0       	ldi	r24, 0x05	; 5
     afe:	90 e0       	ldi	r25, 0x00	; 0
     b00:	90 93 0d 02 	sts	0x020D, r25	; 0x80020d <stateControl+0x1>
     b04:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <stateControl>
        delay_ms(1500); // Waiting time to appreciate the end of state
     b08:	61 e8       	ldi	r22, 0x81	; 129
     b0a:	74 e8       	ldi	r23, 0x84	; 132
     b0c:	8e e1       	ldi	r24, 0x1E	; 30
     b0e:	90 e0       	ldi	r25, 0x00	; 0
     b10:	8d dc       	rcall	.-1766   	; 0x42c <__portable_avr_delay_cycles>
     b12:	1c c0       	rjmp	.+56     	; 0xb4c <state_1+0x2bc>
    }
    else if (stateControl == 5)
     b14:	05 97       	sbiw	r24, 0x05	; 5
     b16:	d1 f4       	brne	.+52     	; 0xb4c <state_1+0x2bc>
    {
        stateControl = 1;
     b18:	81 e0       	ldi	r24, 0x01	; 1
     b1a:	90 e0       	ldi	r25, 0x00	; 0
     b1c:	90 93 0d 02 	sts	0x020D, r25	; 0x80020d <stateControl+0x1>
     b20:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <stateControl>
        transmit_sample_frame((uint8_t *)":      GW_END        ::........S-01........:", 44, 1); // State indicator
     b24:	41 e0       	ldi	r20, 0x01	; 1
     b26:	50 e0       	ldi	r21, 0x00	; 0
     b28:	6c e2       	ldi	r22, 0x2C	; 44
     b2a:	80 ea       	ldi	r24, 0xA0	; 160
     b2c:	93 e0       	ldi	r25, 0x03	; 3
     b2e:	f3 d0       	rcall	.+486    	; 0xd16 <transmit_sample_frame>
     b30:	80 91 e5 03 	lds	r24, 0x03E5	; 0x8003e5 <temporaryStateIndex>
        stateIndex = temporaryStateIndex; // Change to the WAIT_ANNOUNCEMENT state.
     b34:	90 91 e6 03 	lds	r25, 0x03E6	; 0x8003e6 <temporaryStateIndex+0x1>
     b38:	90 93 e8 03 	sts	0x03E8, r25	; 0x8003e8 <stateIndex+0x1>
     b3c:	80 93 e7 03 	sts	0x03E7, r24	; 0x8003e7 <stateIndex>
     b40:	8f ef       	ldi	r24, 0xFF	; 255
        temporaryStateIndex = -1; // Set to -1 for later use.
     b42:	9f ef       	ldi	r25, 0xFF	; 255
     b44:	90 93 e6 03 	sts	0x03E6, r25	; 0x8003e6 <temporaryStateIndex+0x1>
     b48:	80 93 e5 03 	sts	0x03E5, r24	; 0x8003e5 <temporaryStateIndex>
     b4c:	ac 96       	adiw	r28, 0x2c	; 44
    }
}
     b4e:	0f b6       	in	r0, 0x3f	; 63
     b50:	f8 94       	cli
     b52:	de bf       	out	0x3e, r29	; 62
     b54:	0f be       	out	0x3f, r0	; 63
     b56:	cd bf       	out	0x3d, r28	; 61
     b58:	df 91       	pop	r29
     b5a:	cf 91       	pop	r28
     b5c:	08 95       	ret

00000b5e <usr_wireless_app_task>:
     b5e:	80 91 e7 03 	lds	r24, 0x03E7	; 0x8003e7 <stateIndex>
void state_2(void); // BACKUP S2

// Function where state functions are executed //
void usr_wireless_app_task(void)
{
    if (stateIndex == 0) // INACTIVE
     b62:	90 91 e8 03 	lds	r25, 0x03E8	; 0x8003e8 <stateIndex+0x1>
     b66:	00 97       	sbiw	r24, 0x00	; 0
     b68:	11 f4       	brne	.+4      	; 0xb6e <usr_wireless_app_task+0x10>
    {
        initialState();
     b6a:	b3 cd       	rjmp	.-1178   	; 0x6d2 <initialState>
     b6c:	08 95       	ret
    }
    else if (stateIndex == 1) // WAIT_ANNOUNCEMENT S1  
     b6e:	81 30       	cpi	r24, 0x01	; 1
     b70:	91 05       	cpc	r25, r1
    {
        state_1();
     b72:	11 f4       	brne	.+4      	; 0xb78 <usr_wireless_app_task+0x1a>
     b74:	8d ce       	rjmp	.-742    	; 0x890 <state_1>
     b76:	08 95       	ret
    }
    else if (stateIndex == 2) // BACKUP S2
     b78:	02 97       	sbiw	r24, 0x02	; 2
    {
        state_2();
     b7a:	09 f4       	brne	.+2      	; 0xb7e <usr_wireless_app_task+0x20>
     b7c:	a2 cc       	rjmp	.-1724   	; 0x4c2 <state_2>
     b7e:	08 95       	ret

00000b80 <app_timer_cb>:
/**
 \brief Callback called once the timer expires
*/
void app_timer_cb(void *parameter)
{
	usr_app_timer_cb(parameter);
     b80:	4e cc       	rjmp	.-1892   	; 0x41e <usr_app_timer_cb>
     b82:	08 95       	ret

00000b84 <app_timers_init>:
 * (T_APP_TIMER1 is the only timer added by the project wizard,add extra timers based on the application requirement)
 */
//int variableGloval;
void app_timers_init(void)
{
	if (STATUS_OK != sw_timer_get_id(&T_APP_TIMER1)) {
     b84:	8f e3       	ldi	r24, 0x3F	; 63
     b86:	98 e0       	ldi	r25, 0x08	; 8
     b88:	c8 d2       	rcall	.+1424   	; 0x111a <sw_timer_get_id>
     b8a:	81 11       	cpse	r24, r1
		app_alert();
     b8c:	40 c1       	rjmp	.+640    	; 0xe0e <app_alert>
     b8e:	08 95       	ret

00000b90 <start_timer1>:
     b90:	ef 92       	push	r14
 \brief This function starts a timer T-APP_TIMER with timeout TIMER_DURATION  with callback id app_timer_cb
 * New timers can be added by defeining ex. start_timer2 by adding a new timer id T_APP_TIMER2 and a different call back name based on the requirement ,
 * max no of timers to be added is based on *the  count  TOTAL_NUMBER_OF_TIMERS in conf_common_sw_timer.h
 */
void start_timer1(void)
{
     b92:	ff 92       	push	r15
     b94:	0f 93       	push	r16
     b96:	1f 93       	push	r17
	sw_timer_start(T_APP_TIMER1,TIMER_DURATION,SW_TIMEOUT_RELATIVE,(FUNC_PTR)app_timer_cb,NULL)	;
     b98:	a0 91 e9 03 	lds	r26, 0x03E9	; 0x8003e9 <timerDurationTime>
     b9c:	b0 91 ea 03 	lds	r27, 0x03EA	; 0x8003ea <timerDurationTime+0x1>
     ba0:	20 e4       	ldi	r18, 0x40	; 64
     ba2:	32 e4       	ldi	r19, 0x42	; 66
     ba4:	4f e0       	ldi	r20, 0x0F	; 15
     ba6:	50 e0       	ldi	r21, 0x00	; 0
     ba8:	0e 94 73 19 	call	0x32e6	; 0x32e6 <__mulshisi3>
     bac:	ab 01       	movw	r20, r22
     bae:	bc 01       	movw	r22, r24
     bb0:	e1 2c       	mov	r14, r1
     bb2:	f1 2c       	mov	r15, r1
     bb4:	00 ec       	ldi	r16, 0xC0	; 192
     bb6:	15 e0       	ldi	r17, 0x05	; 5
     bb8:	20 e0       	ldi	r18, 0x00	; 0
     bba:	80 91 3f 08 	lds	r24, 0x083F	; 0x80083f <T_APP_TIMER1>
     bbe:	ba d2       	rcall	.+1396   	; 0x1134 <sw_timer_start>
}
     bc0:	1f 91       	pop	r17
     bc2:	0f 91       	pop	r16
     bc4:	ff 90       	pop	r15
     bc6:	ef 90       	pop	r14
     bc8:	08 95       	ret

00000bca <stop_timer1>:
 * To add stop timer functions for other timer, add defenitions stop_timer2 with sw_timer_stop(NEW ID) inside it
 */
void stop_timer1(void)
{

	sw_timer_stop(T_APP_TIMER1);
     bca:	80 91 3f 08 	lds	r24, 0x083F	; 0x80083f <T_APP_TIMER1>
     bce:	1d c4       	rjmp	.+2106   	; 0x140a <sw_timer_stop>
     bd0:	08 95       	ret

00000bd2 <transmit_frame>:
		uint8_t src_addr_mode,
		uint8_t msdu_handle,
		uint8_t *payload,
		uint8_t payload_length,
		bool ack_req,csma_mode_t csma_mode ,bool frame_retry)
{
     bd2:	4f 92       	push	r4
     bd4:	5f 92       	push	r5
     bd6:	6f 92       	push	r6
     bd8:	7f 92       	push	r7
     bda:	8f 92       	push	r8
     bdc:	af 92       	push	r10
     bde:	cf 92       	push	r12
     be0:	ef 92       	push	r14
     be2:	0f 93       	push	r16
     be4:	1f 93       	push	r17
     be6:	cf 93       	push	r28
     be8:	df 93       	push	r29
     bea:	cd b7       	in	r28, 0x3d	; 61
     bec:	de b7       	in	r29, 0x3e	; 62
	tx_frame_info = (frame_info_t *)storage_buffer;
	/* Get length of current frame. */
	frame_length = (FRAME_OVERHEAD + payload_length); 

	/* Set payload pointer. */     
	frame_ptr = temp_frame_ptr = (uint8_t *)tx_frame_info +
     bee:	a9 e8       	ldi	r26, 0x89	; 137
     bf0:	b0 e0       	ldi	r27, 0x00	; 0
     bf2:	ae 19       	sub	r26, r14
     bf4:	b1 09       	sbc	r27, r1
     bf6:	fd 01       	movw	r30, r26
     bf8:	e3 51       	subi	r30, 0x13	; 19
     bfa:	fc 4f       	sbci	r31, 0xFC	; 252
     bfc:	3f 01       	movw	r6, r30

	/*
	* Payload is stored to the end of the buffer avoiding payload
	* copying by TAL.
	*/
	for (i = 0; i < payload_length; i++) {
     bfe:	ee 20       	and	r14, r14
     c00:	79 f0       	breq	.+30     	; 0xc20 <transmit_frame+0x4e>
     c02:	d8 01       	movw	r26, r16
     c04:	44 24       	eor	r4, r4
     c06:	4a 94       	dec	r4
     c08:	4e 0c       	add	r4, r14
     c0a:	51 2c       	mov	r5, r1
     c0c:	9f ef       	ldi	r25, 0xFF	; 255
     c0e:	49 1a       	sub	r4, r25
     c10:	59 0a       	sbc	r5, r25
     c12:	04 0d       	add	r16, r4
     c14:	15 1d       	adc	r17, r5
	*temp_frame_ptr++ = *(payload + i);
     c16:	9d 91       	ld	r25, X+
     c18:	91 93       	st	Z+, r25

	/*
	* Payload is stored to the end of the buffer avoiding payload
	* copying by TAL.
	*/
	for (i = 0; i < payload_length; i++) {
     c1a:	a0 17       	cp	r26, r16
     c1c:	b1 07       	cpc	r27, r17
     c1e:	d9 f7       	brne	.-10     	; 0xc16 <transmit_frame+0x44>
	*temp_frame_ptr++ = *(payload + i);
	}


	/* Source address */
	if (FCF_SHORT_ADDR == src_addr_mode) {
     c20:	42 30       	cpi	r20, 0x02	; 2
     c22:	61 f4       	brne	.+24     	; 0xc3c <transmit_frame+0x6a>
	uint16_t temp_value,fcf = 0;
	/* Get length of current frame. */

	tx_frame_info = (frame_info_t *)storage_buffer;
	/* Get length of current frame. */
	frame_length = (FRAME_OVERHEAD + payload_length); 
     c24:	3b e0       	ldi	r19, 0x0B	; 11
     c26:	3e 0d       	add	r19, r14
	}


	/* Source address */
	if (FCF_SHORT_ADDR == src_addr_mode) {
	frame_ptr -= SHORT_ADDR_LEN;
     c28:	d3 01       	movw	r26, r6
	convert_16_bit_to_byte_array(tal_pib.ShortAddress, frame_ptr);
     c2a:	40 91 89 08 	lds	r20, 0x0889	; 0x800889 <tal_pib+0xc>
     c2e:	50 91 8a 08 	lds	r21, 0x088A	; 0x80088a <tal_pib+0xd>
     c32:	5e 93       	st	-X, r21
     c34:	4e 93       	st	-X, r20

	fcf |= FCF_SET_SOURCE_ADDR_MODE(FCF_SHORT_ADDR);
     c36:	40 e0       	ldi	r20, 0x00	; 0
     c38:	50 e8       	ldi	r21, 0x80	; 128
     c3a:	26 c0       	rjmp	.+76     	; 0xc88 <transmit_frame+0xb6>
	} else {
	frame_ptr -= EXT_ADDR_LEN;
     c3c:	d3 01       	movw	r26, r6
     c3e:	18 97       	sbiw	r26, 0x08	; 8
	frame_length += FCF_2_SOURCE_ADDR_OFFSET;
     c40:	31 e1       	ldi	r19, 0x11	; 17
     c42:	3e 0d       	add	r19, r14

	convert_64_bit_to_byte_array(tal_pib.IeeeAddress, frame_ptr);
     c44:	ed e7       	ldi	r30, 0x7D	; 125
     c46:	f8 e0       	ldi	r31, 0x08	; 8
     c48:	90 81       	ld	r25, Z
     c4a:	9c 93       	st	X, r25
     c4c:	91 81       	ldd	r25, Z+1	; 0x01
     c4e:	11 96       	adiw	r26, 0x01	; 1
     c50:	9c 93       	st	X, r25
     c52:	11 97       	sbiw	r26, 0x01	; 1
     c54:	92 81       	ldd	r25, Z+2	; 0x02
     c56:	12 96       	adiw	r26, 0x02	; 2
     c58:	9c 93       	st	X, r25
     c5a:	12 97       	sbiw	r26, 0x02	; 2
     c5c:	93 81       	ldd	r25, Z+3	; 0x03
     c5e:	13 96       	adiw	r26, 0x03	; 3
     c60:	9c 93       	st	X, r25
     c62:	13 97       	sbiw	r26, 0x03	; 3
     c64:	94 81       	ldd	r25, Z+4	; 0x04
     c66:	14 96       	adiw	r26, 0x04	; 4
     c68:	9c 93       	st	X, r25
     c6a:	14 97       	sbiw	r26, 0x04	; 4
     c6c:	95 81       	ldd	r25, Z+5	; 0x05
     c6e:	15 96       	adiw	r26, 0x05	; 5
     c70:	9c 93       	st	X, r25
     c72:	15 97       	sbiw	r26, 0x05	; 5
     c74:	96 81       	ldd	r25, Z+6	; 0x06
     c76:	16 96       	adiw	r26, 0x06	; 6
     c78:	9c 93       	st	X, r25
     c7a:	16 97       	sbiw	r26, 0x06	; 6
     c7c:	97 81       	ldd	r25, Z+7	; 0x07
     c7e:	17 96       	adiw	r26, 0x07	; 7
     c80:	9c 93       	st	X, r25
     c82:	17 97       	sbiw	r26, 0x07	; 7

	fcf |= FCF_SET_SOURCE_ADDR_MODE(FCF_LONG_ADDR);
     c84:	40 e0       	ldi	r20, 0x00	; 0
     c86:	50 ec       	ldi	r21, 0xC0	; 192
		temp_value = CCPU_ENDIAN_TO_LE16(SRC_PAN_ID);
		convert_16_bit_to_byte_array(temp_value, frame_ptr);
		#endif

	/* Destination address */
	if (FCF_SHORT_ADDR == dst_addr_mode) {
     c88:	82 30       	cpi	r24, 0x02	; 2
     c8a:	59 f4       	brne	.+22     	; 0xca2 <transmit_frame+0xd0>
		frame_ptr -= SHORT_ADDR_LEN;
		convert_16_bit_to_byte_array(*((uint16_t *)dst_addr),
     c8c:	fb 01       	movw	r30, r22
     c8e:	80 81       	ld	r24, Z
     c90:	91 81       	ldd	r25, Z+1	; 0x01
     c92:	fd 01       	movw	r30, r26
     c94:	92 93       	st	-Z, r25
     c96:	82 93       	st	-Z, r24
     c98:	3f 01       	movw	r6, r30
				frame_ptr);

		fcf |= FCF_SET_DEST_ADDR_MODE(FCF_SHORT_ADDR);
     c9a:	ca 01       	movw	r24, r20
     c9c:	80 64       	ori	r24, 0x40	; 64
     c9e:	98 60       	ori	r25, 0x08	; 8
     ca0:	0f c0       	rjmp	.+30     	; 0xcc0 <transmit_frame+0xee>
	} else {
		frame_ptr -= EXT_ADDR_LEN;
     ca2:	3d 01       	movw	r6, r26
     ca4:	f8 e0       	ldi	r31, 0x08	; 8
     ca6:	6f 1a       	sub	r6, r31
     ca8:	71 08       	sbc	r7, r1
		frame_length += PL_POS_DST_ADDR_START;
     caa:	3a 5f       	subi	r19, 0xFA	; 250

		convert_64_bit_to_byte_array(*((uint64_t *)dst_addr),
     cac:	88 e0       	ldi	r24, 0x08	; 8
     cae:	fb 01       	movw	r30, r22
     cb0:	d3 01       	movw	r26, r6
     cb2:	01 90       	ld	r0, Z+
     cb4:	0d 92       	st	X+, r0
     cb6:	8a 95       	dec	r24
     cb8:	e1 f7       	brne	.-8      	; 0xcb2 <transmit_frame+0xe0>
				frame_ptr);

		fcf |= FCF_SET_DEST_ADDR_MODE(FCF_LONG_ADDR);
     cba:	ca 01       	movw	r24, r20
     cbc:	80 64       	ori	r24, 0x40	; 64
     cbe:	9c 60       	ori	r25, 0x0C	; 12


	/* Destination PAN-Id */
	temp_value = CCPU_ENDIAN_TO_LE16(DST_PAN_ID);
	frame_ptr -= PAN_ID_LEN;
	convert_16_bit_to_byte_array(temp_value, frame_ptr);
     cc0:	4e ef       	ldi	r20, 0xFE	; 254
     cc2:	5a ec       	ldi	r21, 0xCA	; 202
     cc4:	f3 01       	movw	r30, r6
     cc6:	32 97       	sbiw	r30, 0x02	; 2
     cc8:	51 83       	std	Z+1, r21	; 0x01
     cca:	40 83       	st	Z, r20

	/* Set DSN. */
	frame_ptr--;
	*frame_ptr = msdu_handle;
     ccc:	31 97       	sbiw	r30, 0x01	; 1
     cce:	20 83       	st	Z, r18

	/* Set the FCF. */
	fcf |= FCF_FRAMETYPE_DATA;
	if (ack_req) {
     cd0:	c1 10       	cpse	r12, r1
     cd2:	02 c0       	rjmp	.+4      	; 0xcd8 <transmit_frame+0x106>
	/* Set DSN. */
	frame_ptr--;
	*frame_ptr = msdu_handle;

	/* Set the FCF. */
	fcf |= FCF_FRAMETYPE_DATA;
     cd4:	81 60       	ori	r24, 0x01	; 1
     cd6:	01 c0       	rjmp	.+2      	; 0xcda <transmit_frame+0x108>
	if (ack_req) {
	fcf |= FCF_ACK_REQUEST;
     cd8:	81 62       	ori	r24, 0x21	; 33
	}

	frame_ptr -= FCF_LEN;
	convert_16_bit_to_byte_array(CCPU_ENDIAN_TO_LE16(fcf), frame_ptr);
     cda:	f3 01       	movw	r30, r6
     cdc:	35 97       	sbiw	r30, 0x05	; 5
     cde:	91 83       	std	Z+1, r25	; 0x01
     ce0:	80 83       	st	Z, r24

	/* First element shall be length of PHY frame. */
	frame_ptr--;
	*frame_ptr = frame_length;
     ce2:	d3 01       	movw	r26, r6
     ce4:	16 97       	sbiw	r26, 0x06	; 6
     ce6:	3c 93       	st	X, r19

	/* Finished building of frame. */
	tx_frame_info->mpdu = frame_ptr;
     ce8:	b0 93 f5 03 	sts	0x03F5, r27	; 0x8003f5 <storage_buffer+0x8>
     cec:	a0 93 f4 03 	sts	0x03F4, r26	; 0x8003f4 <storage_buffer+0x7>

	return(tal_tx_frame(tx_frame_info, csma_mode, frame_retry));
     cf0:	48 2d       	mov	r20, r8
     cf2:	6a 2d       	mov	r22, r10
     cf4:	8d ee       	ldi	r24, 0xED	; 237
     cf6:	93 e0       	ldi	r25, 0x03	; 3
     cf8:	0e 94 31 14 	call	0x2862	; 0x2862 <tal_tx_frame>
}
     cfc:	df 91       	pop	r29
     cfe:	cf 91       	pop	r28
     d00:	1f 91       	pop	r17
     d02:	0f 91       	pop	r16
     d04:	ef 90       	pop	r14
     d06:	cf 90       	pop	r12
     d08:	af 90       	pop	r10
     d0a:	8f 90       	pop	r8
     d0c:	7f 90       	pop	r7
     d0e:	6f 90       	pop	r6
     d10:	5f 90       	pop	r5
     d12:	4f 90       	pop	r4
     d14:	08 95       	ret

00000d16 <transmit_sample_frame>:
 * \brief This function transmits a sample data frame 
 * \param payload address of the payload to be transmitted
 * \payload_length Length of the payload to be trasnmitted *
 */
void transmit_sample_frame(uint8_t* payload,uint8_t payload_length,int selecDirec) 
{
     d16:	8f 92       	push	r8
     d18:	af 92       	push	r10
     d1a:	cf 92       	push	r12
     d1c:	ef 92       	push	r14
     d1e:	0f 93       	push	r16
     d20:	1f 93       	push	r17
     d22:	cf 93       	push	r28
     d24:	df 93       	push	r29
     d26:	1f 92       	push	r1
     d28:	1f 92       	push	r1
     d2a:	cd b7       	in	r28, 0x3d	; 61
     d2c:	de b7       	in	r29, 0x3e	; 62
	static uint16_t seq_num = 0;   
	bool ack_req = ACK_REQ;
	bool frame_retry = FRAME_RETRY;
	csma_mode_t csma_mode = CSMA_MODE;
	uint16_t dst_addr;
	if (selecDirec==0)
     d2e:	41 15       	cp	r20, r1
     d30:	51 05       	cpc	r21, r1
     d32:	29 f4       	brne	.+10     	; 0xd3e <transmit_sample_frame+0x28>
	{
		dst_addr = CCPU_ENDIAN_TO_LE16((uint16_t)DST_ADDR);
     d34:	22 e0       	ldi	r18, 0x02	; 2
     d36:	30 e0       	ldi	r19, 0x00	; 0
     d38:	3a 83       	std	Y+2, r19	; 0x02
     d3a:	29 83       	std	Y+1, r18	; 0x01
     d3c:	07 c0       	rjmp	.+14     	; 0xd4c <transmit_sample_frame+0x36>
	}
	else if (selecDirec==1)
     d3e:	41 30       	cpi	r20, 0x01	; 1
     d40:	51 05       	cpc	r21, r1
     d42:	21 f4       	brne	.+8      	; 0xd4c <transmit_sample_frame+0x36>
	{
		dst_addr = CCPU_ENDIAN_TO_LE16((uint16_t)0x6A7E);
     d44:	2e e7       	ldi	r18, 0x7E	; 126
     d46:	3a e6       	ldi	r19, 0x6A	; 106
     d48:	3a 83       	std	Y+2, r19	; 0x02
     d4a:	29 83       	std	Y+1, r18	; 0x01

	transmit_frame(
		FCF_SHORT_ADDR,
		(uint8_t*)&dst_addr,
		FCF_SHORT_ADDR,
		seq_num++,
     d4c:	20 91 eb 03 	lds	r18, 0x03EB	; 0x8003eb <seq_num.3033>
     d50:	30 91 ec 03 	lds	r19, 0x03EC	; 0x8003ec <seq_num.3033+0x1>
     d54:	a9 01       	movw	r20, r18
     d56:	4f 5f       	subi	r20, 0xFF	; 255
     d58:	5f 4f       	sbci	r21, 0xFF	; 255
     d5a:	50 93 ec 03 	sts	0x03EC, r21	; 0x8003ec <seq_num.3033+0x1>
     d5e:	40 93 eb 03 	sts	0x03EB, r20	; 0x8003eb <seq_num.3033>
	else if (selecDirec==1)
	{
		dst_addr = CCPU_ENDIAN_TO_LE16((uint16_t)0x6A7E);
	}

	transmit_frame(
     d62:	81 2c       	mov	r8, r1
     d64:	68 94       	set
     d66:	aa 24       	eor	r10, r10
     d68:	a1 f8       	bld	r10, 1
     d6a:	c1 2c       	mov	r12, r1
     d6c:	e6 2e       	mov	r14, r22
     d6e:	8c 01       	movw	r16, r24
     d70:	42 e0       	ldi	r20, 0x02	; 2
     d72:	be 01       	movw	r22, r28
     d74:	6f 5f       	subi	r22, 0xFF	; 255
     d76:	7f 4f       	sbci	r23, 0xFF	; 255
     d78:	82 e0       	ldi	r24, 0x02	; 2
     d7a:	2b df       	rcall	.-426    	; 0xbd2 <transmit_frame>
		payload_length,
		ack_req,
		csma_mode,
		frame_retry);

}
     d7c:	0f 90       	pop	r0
     d7e:	0f 90       	pop	r0
     d80:	df 91       	pop	r29
     d82:	cf 91       	pop	r28
     d84:	1f 91       	pop	r17
     d86:	0f 91       	pop	r16
     d88:	ef 90       	pop	r14
     d8a:	cf 90       	pop	r12
     d8c:	af 90       	pop	r10
     d8e:	8f 90       	pop	r8
     d90:	08 95       	ret

00000d92 <init_data_reception>:
		   bool mode = true;
		   tal_rxaack_prom_mode_ctrl(true);
		   tal_pib_set(macPromiscuousMode, (pib_value_t *)&mode);
       #endif
       /*RX_AACK_ON Mode is enabled if Promiscuous Mode is not used,else RX is switched on in RX_ON Mode*/
       tal_rx_enable(PHY_RX_ON); 
     d92:	86 e0       	ldi	r24, 0x06	; 6
     d94:	0c 94 5e 13 	jmp	0x26bc	; 0x26bc <tal_rx_enable>
     d98:	08 95       	ret

00000d9a <wireless_init>:

/**
 * \brief This Function initializes the Wireless Module and board components i.e clock,irq etc
 */
void wireless_init(void)
{
     d9a:	cf 93       	push	r28
     d9c:	df 93       	push	r29
     d9e:	00 d0       	rcall	.+0      	; 0xda0 <wireless_init+0x6>
     da0:	00 d0       	rcall	.+0      	; 0xda2 <wireless_init+0x8>
     da2:	cd b7       	in	r28, 0x3d	; 61
     da4:	de b7       	in	r29, 0x3e	; 62
	/*Initialize IRQ*/
	irq_initialize_vectors();

  sysclk_init();
     da6:	42 d0       	rcall	.+132    	; 0xe2c <sysclk_init>

	/* Initialize the board.
	 * The board-specific conf_board.h file contains the configuration of
	 * the board initialization.
	 */
	board_init();
     da8:	33 d0       	rcall	.+102    	; 0xe10 <board_init>


	/*Initialize the Stack SW Timer*/
	sw_timer_init();
     daa:	33 d4       	rcall	.+2150   	; 0x1612 <sw_timer_init>
     dac:	eb d7       	rcall	.+4054   	; 0x1d84 <tal_init>
	
	/*Initialize the TAL Layer*/
	if(tal_init()!= MAC_SUCCESS)
     dae:	81 11       	cpse	r24, r1
     db0:	ff cf       	rjmp	.-2      	; 0xdb0 <wireless_init+0x16>
     db2:	78 94       	sei
     db4:	81 e0       	ldi	r24, 0x01	; 1
	{
	//Error in Initializing the TAL Layer
	app_alert();	
	}
	cpu_irq_enable();
     db6:	90 e0       	ldi	r25, 0x00	; 0
	
	uint16_t src_addr = CCPU_ENDIAN_TO_LE16(SRC_ADDR);
     db8:	9a 83       	std	Y+2, r25	; 0x02
     dba:	89 83       	std	Y+1, r24	; 0x01
     dbc:	8e ef       	ldi	r24, 0xFE	; 254
     dbe:	9a ec       	ldi	r25, 0xCA	; 202
	uint16_t pan_id = CCPU_ENDIAN_TO_LE16(SRC_PAN_ID);
     dc0:	9c 83       	std	Y+4, r25	; 0x04
     dc2:	8b 83       	std	Y+3, r24	; 0x03
     dc4:	8b e0       	ldi	r24, 0x0B	; 11
     dc6:	8d 83       	std	Y+5, r24	; 0x05
	uint8_t channel = CHANNEL_TRANSMIT_RECEIVE;
     dc8:	1e 82       	std	Y+6, r1	; 0x06
     dca:	be 01       	movw	r22, r28
	uint8_t channel_page = CHANNEL_PAGE_TRANSMIT_RECEIVE;
     dcc:	6f 5f       	subi	r22, 0xFF	; 255
	
	/* Set Default address. */
	tal_pib_set(macShortAddress, (pib_value_t *)&src_addr);
     dce:	7f 4f       	sbci	r23, 0xFF	; 255
     dd0:	83 e5       	ldi	r24, 0x53	; 83
     dd2:	0e 94 8d 11 	call	0x231a	; 0x231a <tal_pib_set>
     dd6:	be 01       	movw	r22, r28
     dd8:	6d 5f       	subi	r22, 0xFD	; 253

	/* Set PAN ID. */
	tal_pib_set(macPANId, (pib_value_t *)&pan_id);
     dda:	7f 4f       	sbci	r23, 0xFF	; 255
     ddc:	80 e5       	ldi	r24, 0x50	; 80
     dde:	0e 94 8d 11 	call	0x231a	; 0x231a <tal_pib_set>
     de2:	be 01       	movw	r22, r28
     de4:	6b 5f       	subi	r22, 0xFB	; 251

	/* Set channel. */ /* Channel 11  is set as default in tal_init() */
	tal_pib_set(phyCurrentChannel, (pib_value_t *)&channel);
     de6:	7f 4f       	sbci	r23, 0xFF	; 255
     de8:	80 e0       	ldi	r24, 0x00	; 0
     dea:	0e 94 8d 11 	call	0x231a	; 0x231a <tal_pib_set>
     dee:	be 01       	movw	r22, r28
     df0:	6a 5f       	subi	r22, 0xFA	; 250
	
	/* Set Channel Page */ /* Channel Page 0  is set as default in tal_init() */
	tal_pib_set(phyCurrentPage,(pib_value_t *)&channel_page);
     df2:	7f 4f       	sbci	r23, 0xFF	; 255
     df4:	84 e0       	ldi	r24, 0x04	; 4
     df6:	0e 94 8d 11 	call	0x231a	; 0x231a <tal_pib_set>
     dfa:	cb df       	rcall	.-106    	; 0xd92 <init_data_reception>
	    tal_ant_div_config(ANT_DIVERSITY_DISABLE,ANT_SELECT); 
    }
    #endif


	init_data_reception();
     dfc:	26 96       	adiw	r28, 0x06	; 6
     dfe:	0f b6       	in	r0, 0x3f	; 63

}
     e00:	f8 94       	cli
     e02:	de bf       	out	0x3e, r29	; 62
     e04:	0f be       	out	0x3f, r0	; 63
     e06:	cd bf       	out	0x3d, r28	; 61
     e08:	df 91       	pop	r29
     e0a:	cf 91       	pop	r28
     e0c:	08 95       	ret

00000e0e <app_alert>:
     e0e:	ff cf       	rjmp	.-2      	; 0xe0e <app_alert>

00000e10 <board_init>:
			*((uint8_t *)port + 2) &= ~pin_mask;
		}

		*((uint8_t *)port + 1) |= pin_mask;
	} else {
		*((uint8_t *)port + 1) &= ~pin_mask;
     e10:	8d b1       	in	r24, 0x0d	; 13
     e12:	8e 7f       	andi	r24, 0xFE	; 254
		if (flags & IOPORT_PULL_UP) {
			*((uint8_t *)port + 2) |= pin_mask;
     e14:	9e b1       	in	r25, 0x0e	; 14
		port_pin_flags_t flags)
{
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
		if (flags & IOPORT_INIT_HIGH) {
			*((uint8_t *)port + 2) |= pin_mask;
     e16:	5e 9a       	sbi	0x0b, 6	; 11
		} else {
			*((uint8_t *)port + 2) &= ~pin_mask;
		}

		*((uint8_t *)port + 1) |= pin_mask;
     e18:	56 9a       	sbi	0x0a, 6	; 10
		port_pin_flags_t flags)
{
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
		if (flags & IOPORT_INIT_HIGH) {
			*((uint8_t *)port + 2) |= pin_mask;
     e1a:	a2 9a       	sbi	0x14, 2	; 20
		} else {
			*((uint8_t *)port + 2) &= ~pin_mask;
		}

		*((uint8_t *)port + 1) |= pin_mask;
     e1c:	9a 9a       	sbi	0x13, 2	; 19
		port_pin_flags_t flags)
{
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
		if (flags & IOPORT_INIT_HIGH) {
			*((uint8_t *)port + 2) |= pin_mask;
     e1e:	95 60       	ori	r25, 0x05	; 5
     e20:	9e b9       	out	0x0e, r25	; 14
		} else {
			*((uint8_t *)port + 2) &= ~pin_mask;
		}

		*((uint8_t *)port + 1) |= pin_mask;
     e22:	84 60       	ori	r24, 0x04	; 4
     e24:	8d b9       	out	0x0d, r24	; 13
     e26:	08 95       	ret

00000e28 <modules_init>:
/**
 * \brief Initializes the modules added by the Project Wizard
 */
void modules_init(void)
{
	    app_timers_init();
     e28:	ad ce       	rjmp	.-678    	; 0xb84 <app_timers_init>
     e2a:	08 95       	ret

00000e2c <sysclk_init>:

/**
 *  Function to initialize the clock and disable clock for not required modules.
 */
void sysclk_init(void)
{
     e2c:	cf 93       	push	r28
     e2e:	df 93       	push	r29
     e30:	1f 92       	push	r1
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
	/* Turn off all peripheral clocks that can be turned off.
	 * The debugWIRE system of some devices that shares system clock with the SPI module.
	 * Thus the PRSPI bit in the PRR register must not be set when debugging.
	 */
	for (i = 0; i < NUMBER_OF_POWER_REG; i++) {
		*(reg++) = 0xFF;
     e36:	8f ef       	ldi	r24, 0xFF	; 255
     e38:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7c0064>
     e3c:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__TEXT_REGION_LENGTH__+0x7c0065>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     e40:	8f b7       	in	r24, 0x3f	; 63
     e42:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     e44:	f8 94       	cli
	return flags;
     e46:	89 81       	ldd	r24, Y+1	; 0x01
static inline void sysclk_set_prescalers(uint8_t psdiv)
{
#if !MEGA_UNSPECIFIED
	irqflags_t flags = cpu_irq_save();

	ASM(
     e48:	5f 93       	push	r21
     e4a:	50 e8       	ldi	r21, 0x80	; 128
     e4c:	50 93 61 00 	sts	0x0061, r21	; 0x800061 <__TEXT_REGION_LENGTH__+0x7c0061>
     e50:	50 e0       	ldi	r21, 0x00	; 0
     e52:	50 93 61 00 	sts	0x0061, r21	; 0x800061 <__TEXT_REGION_LENGTH__+0x7c0061>
     e56:	5f 91       	pop	r21
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     e58:	8f bf       	out	0x3f, r24	; 63
	if ((CONFIG_SYSCLK_PSDIV != SYSCLK_PSDIV_8) ||
			(SYSCLK_PSDIV_8 != CLKPR)) {
		sysclk_set_prescalers(CONFIG_SYSCLK_PSDIV);
	}
#endif
}
     e5a:	0f 90       	pop	r0
     e5c:	df 91       	pop	r29
     e5e:	cf 91       	pop	r28
     e60:	08 95       	ret

00000e62 <sysclk_enable_module>:
 * \param port ID of the port to which the module is connected (one of
 * the \c power_red_id *definitions).
 * \param id The ID (bitmask) of the peripheral module to be enabled.
 */
void sysclk_enable_module(enum power_red_id port, uint8_t id)
{
     e62:	cf 93       	push	r28
     e64:	df 93       	push	r29
     e66:	1f 92       	push	r1
     e68:	cd b7       	in	r28, 0x3d	; 61
     e6a:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     e6c:	9f b7       	in	r25, 0x3f	; 63
     e6e:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
     e70:	f8 94       	cli
	return flags;
     e72:	99 81       	ldd	r25, Y+1	; 0x01
#if !MEGA_UNSPECIFIED && !MEGA_XX
	uint8_t *reg = (uint8_t *)&(POWER_REG_ADD);
	irqflags_t flags = cpu_irq_save();

	if (port < NUMBER_OF_POWER_REG) {
     e74:	82 30       	cpi	r24, 0x02	; 2
     e76:	40 f4       	brcc	.+16     	; 0xe88 <sysclk_enable_module+0x26>
		*(reg + port)  &= ~id;
     e78:	e8 2f       	mov	r30, r24
     e7a:	f0 e0       	ldi	r31, 0x00	; 0
     e7c:	ec 59       	subi	r30, 0x9C	; 156
     e7e:	ff 4f       	sbci	r31, 0xFF	; 255
     e80:	60 95       	com	r22
     e82:	80 81       	ld	r24, Z
     e84:	68 23       	and	r22, r24
     e86:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     e88:	9f bf       	out	0x3f, r25	; 63
	}
	cpu_irq_restore(flags);
#endif
}
     e8a:	0f 90       	pop	r0
     e8c:	df 91       	pop	r29
     e8e:	cf 91       	pop	r28
     e90:	08 95       	ret

00000e92 <sysclk_disable_module>:
 * \param port ID of the port to which the module is connected (one of
 * the \c power_red_id *definitions).
 * \param id The ID (bit mask) of the peripheral module to be disabled.
 */
void sysclk_disable_module( enum power_red_id port, uint8_t id)
{
     e92:	cf 93       	push	r28
     e94:	df 93       	push	r29
     e96:	1f 92       	push	r1
     e98:	cd b7       	in	r28, 0x3d	; 61
     e9a:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     e9c:	9f b7       	in	r25, 0x3f	; 63
     e9e:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
     ea0:	f8 94       	cli
	return flags;
     ea2:	99 81       	ldd	r25, Y+1	; 0x01
#if !MEGA_UNSPECIFIED && !MEGA_XX
	uint8_t *reg = (uint8_t *)&(POWER_REG_ADD);
	irqflags_t flags = cpu_irq_save();
	if (port < NUMBER_OF_POWER_REG) {
     ea4:	82 30       	cpi	r24, 0x02	; 2
     ea6:	38 f4       	brcc	.+14     	; 0xeb6 <sysclk_disable_module+0x24>
		*(reg + port) |= id;
     ea8:	e8 2f       	mov	r30, r24
     eaa:	f0 e0       	ldi	r31, 0x00	; 0
     eac:	ec 59       	subi	r30, 0x9C	; 156
     eae:	ff 4f       	sbci	r31, 0xFF	; 255
     eb0:	80 81       	ld	r24, Z
     eb2:	68 2b       	or	r22, r24
     eb4:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     eb6:	9f bf       	out	0x3f, r25	; 63
	}
	cpu_irq_restore(flags);
#endif
}
     eb8:	0f 90       	pop	r0
     eba:	df 91       	pop	r29
     ebc:	cf 91       	pop	r28
     ebe:	08 95       	ret

00000ec0 <hw_expiry_cb>:
uint32_t sw_timer_next_timer_expiry_duration(void)
{
	return ((NO_TIMER ==
	       running_timer_queue_head) ? false : (sw_timer_get_residual_time(
	       running_timer_queue_head)));
}
     ec0:	80 91 7c 04 	lds	r24, 0x047C	; 0x80047c <running_timers>
     ec4:	88 23       	and	r24, r24
     ec6:	19 f0       	breq	.+6      	; 0xece <hw_expiry_cb+0xe>
     ec8:	81 e0       	ldi	r24, 0x01	; 1
     eca:	80 93 74 08 	sts	0x0874, r24	; 0x800874 <timer_trigger>
     ece:	08 95       	ret

00000ed0 <hw_overflow_cb>:
     ed0:	1f 93       	push	r17
     ed2:	cf 93       	push	r28
     ed4:	df 93       	push	r29
     ed6:	1f 92       	push	r1
     ed8:	cd b7       	in	r28, 0x3d	; 61
     eda:	de b7       	in	r29, 0x3e	; 62
     edc:	80 91 40 08 	lds	r24, 0x0840	; 0x800840 <sys_time>
     ee0:	90 91 41 08 	lds	r25, 0x0841	; 0x800841 <sys_time+0x1>
     ee4:	01 96       	adiw	r24, 0x01	; 1
     ee6:	90 93 41 08 	sts	0x0841, r25	; 0x800841 <sys_time+0x1>
     eea:	80 93 40 08 	sts	0x0840, r24	; 0x800840 <sys_time>
     eee:	8f b7       	in	r24, 0x3f	; 63
     ef0:	89 83       	std	Y+1, r24	; 0x01
     ef2:	f8 94       	cli
     ef4:	19 81       	ldd	r17, Y+1	; 0x01
     ef6:	80 91 7b 04 	lds	r24, 0x047B	; 0x80047b <running_timer_queue_head>
     efa:	8f 3f       	cpi	r24, 0xFF	; 255
     efc:	e9 f1       	breq	.+122    	; 0xf78 <hw_overflow_cb+0xa8>
     efe:	90 e0       	ldi	r25, 0x00	; 0
     f00:	fc 01       	movw	r30, r24
     f02:	ee 0f       	add	r30, r30
     f04:	ff 1f       	adc	r31, r31
     f06:	9c 01       	movw	r18, r24
     f08:	22 0f       	add	r18, r18
     f0a:	33 1f       	adc	r19, r19
     f0c:	22 0f       	add	r18, r18
     f0e:	33 1f       	adc	r19, r19
     f10:	22 0f       	add	r18, r18
     f12:	33 1f       	adc	r19, r19
     f14:	e2 0f       	add	r30, r18
     f16:	f3 1f       	adc	r31, r19
     f18:	ee 5b       	subi	r30, 0xBE	; 190
     f1a:	f7 4f       	sbci	r31, 0xF7	; 247
     f1c:	21 85       	ldd	r18, Z+9	; 0x09
     f1e:	21 11       	cpse	r18, r1
     f20:	2b c0       	rjmp	.+86     	; 0xf78 <hw_overflow_cb+0xa8>
     f22:	fc 01       	movw	r30, r24
     f24:	ee 0f       	add	r30, r30
     f26:	ff 1f       	adc	r31, r31
     f28:	88 0f       	add	r24, r24
     f2a:	99 1f       	adc	r25, r25
     f2c:	88 0f       	add	r24, r24
     f2e:	99 1f       	adc	r25, r25
     f30:	88 0f       	add	r24, r24
     f32:	99 1f       	adc	r25, r25
     f34:	e8 0f       	add	r30, r24
     f36:	f9 1f       	adc	r31, r25
     f38:	ee 5b       	subi	r30, 0xBE	; 190
     f3a:	f7 4f       	sbci	r31, 0xF7	; 247
     f3c:	80 81       	ld	r24, Z
     f3e:	91 81       	ldd	r25, Z+1	; 0x01
     f40:	a2 81       	ldd	r26, Z+2	; 0x02
     f42:	b3 81       	ldd	r27, Z+3	; 0x03
     f44:	20 91 40 08 	lds	r18, 0x0840	; 0x800840 <sys_time>
     f48:	30 91 41 08 	lds	r19, 0x0841	; 0x800841 <sys_time+0x1>
     f4c:	2a 17       	cp	r18, r26
     f4e:	3b 07       	cpc	r19, r27
     f50:	99 f4       	brne	.+38     	; 0xf78 <hw_overflow_cb+0xa8>
     f52:	74 d9       	rcall	.-3352   	; 0x23c <common_tc_delay>
     f54:	80 91 7b 04 	lds	r24, 0x047B	; 0x80047b <running_timer_queue_head>
     f58:	90 e0       	ldi	r25, 0x00	; 0
     f5a:	fc 01       	movw	r30, r24
     f5c:	ee 0f       	add	r30, r30
     f5e:	ff 1f       	adc	r31, r31
     f60:	88 0f       	add	r24, r24
     f62:	99 1f       	adc	r25, r25
     f64:	88 0f       	add	r24, r24
     f66:	99 1f       	adc	r25, r25
     f68:	88 0f       	add	r24, r24
     f6a:	99 1f       	adc	r25, r25
     f6c:	e8 0f       	add	r30, r24
     f6e:	f9 1f       	adc	r31, r25
     f70:	ee 5b       	subi	r30, 0xBE	; 190
     f72:	f7 4f       	sbci	r31, 0xF7	; 247
     f74:	81 e0       	ldi	r24, 0x01	; 1
     f76:	81 87       	std	Z+9, r24	; 0x09
     f78:	1f bf       	out	0x3f, r17	; 63
     f7a:	0f 90       	pop	r0
     f7c:	df 91       	pop	r29
     f7e:	cf 91       	pop	r28
     f80:	1f 91       	pop	r17
     f82:	08 95       	ret

00000f84 <load_hw_timer>:
     f84:	0f 93       	push	r16
     f86:	1f 93       	push	r17
     f88:	cf 93       	push	r28
     f8a:	df 93       	push	r29
     f8c:	c8 2f       	mov	r28, r24
     f8e:	8f 3f       	cpi	r24, 0xFF	; 255
     f90:	09 f4       	brne	.+2      	; 0xf94 <load_hw_timer+0x10>
     f92:	60 c0       	rjmp	.+192    	; 0x1054 <load_hw_timer+0xd0>
     f94:	00 91 40 08 	lds	r16, 0x0840	; 0x800840 <sys_time>
     f98:	10 91 41 08 	lds	r17, 0x0841	; 0x800841 <sys_time+0x1>
     f9c:	0c d9       	rcall	.-3560   	; 0x1b6 <common_tc_read_count>
     f9e:	40 91 40 08 	lds	r20, 0x0840	; 0x800840 <sys_time>
     fa2:	50 91 41 08 	lds	r21, 0x0841	; 0x800841 <sys_time+0x1>
     fa6:	04 17       	cp	r16, r20
     fa8:	15 07       	cpc	r17, r21
     faa:	a1 f7       	brne	.-24     	; 0xf94 <load_hw_timer+0x10>
     fac:	d0 e0       	ldi	r29, 0x00	; 0
     fae:	60 e0       	ldi	r22, 0x00	; 0
     fb0:	70 e0       	ldi	r23, 0x00	; 0
     fb2:	fe 01       	movw	r30, r28
     fb4:	ee 0f       	add	r30, r30
     fb6:	ff 1f       	adc	r31, r31
     fb8:	9e 01       	movw	r18, r28
     fba:	22 0f       	add	r18, r18
     fbc:	33 1f       	adc	r19, r19
     fbe:	22 0f       	add	r18, r18
     fc0:	33 1f       	adc	r19, r19
     fc2:	22 0f       	add	r18, r18
     fc4:	33 1f       	adc	r19, r19
     fc6:	e2 0f       	add	r30, r18
     fc8:	f3 1f       	adc	r31, r19
     fca:	ee 5b       	subi	r30, 0xBE	; 190
     fcc:	f7 4f       	sbci	r31, 0xF7	; 247
     fce:	ba 01       	movw	r22, r20
     fd0:	55 27       	eor	r21, r21
     fd2:	44 27       	eor	r20, r20
     fd4:	a0 e0       	ldi	r26, 0x00	; 0
     fd6:	b0 e0       	ldi	r27, 0x00	; 0
     fd8:	48 2b       	or	r20, r24
     fda:	59 2b       	or	r21, r25
     fdc:	6a 2b       	or	r22, r26
     fde:	7b 2b       	or	r23, r27
     fe0:	80 81       	ld	r24, Z
     fe2:	91 81       	ldd	r25, Z+1	; 0x01
     fe4:	a2 81       	ldd	r26, Z+2	; 0x02
     fe6:	b3 81       	ldd	r27, Z+3	; 0x03
     fe8:	84 1b       	sub	r24, r20
     fea:	95 0b       	sbc	r25, r21
     fec:	a6 0b       	sbc	r26, r22
     fee:	b7 0b       	sbc	r27, r23
     ff0:	8f 3f       	cpi	r24, 0xFF	; 255
     ff2:	2f ef       	ldi	r18, 0xFF	; 255
     ff4:	92 07       	cpc	r25, r18
     ff6:	a2 07       	cpc	r26, r18
     ff8:	2f e7       	ldi	r18, 0x7F	; 127
     ffa:	b2 07       	cpc	r27, r18
     ffc:	38 f5       	brcc	.+78     	; 0x104c <load_hw_timer+0xc8>
     ffe:	9e 01       	movw	r18, r28
    1000:	22 0f       	add	r18, r18
    1002:	33 1f       	adc	r19, r19
    1004:	22 0f       	add	r18, r18
    1006:	33 1f       	adc	r19, r19
    1008:	22 0f       	add	r18, r18
    100a:	33 1f       	adc	r19, r19
    100c:	fe 01       	movw	r30, r28
    100e:	ee 0f       	add	r30, r30
    1010:	ff 1f       	adc	r31, r31
    1012:	e2 0f       	add	r30, r18
    1014:	f3 1f       	adc	r31, r19
    1016:	ee 5b       	subi	r30, 0xBE	; 190
    1018:	f7 4f       	sbci	r31, 0xF7	; 247
    101a:	21 85       	ldd	r18, Z+9	; 0x09
    101c:	21 11       	cpse	r18, r1
    101e:	1b c0       	rjmp	.+54     	; 0x1056 <load_hw_timer+0xd2>
    1020:	00 97       	sbiw	r24, 0x00	; 0
    1022:	21 e0       	ldi	r18, 0x01	; 1
    1024:	a2 07       	cpc	r26, r18
    1026:	b1 05       	cpc	r27, r1
    1028:	b0 f4       	brcc	.+44     	; 0x1056 <load_hw_timer+0xd2>
    102a:	08 d9       	rcall	.-3568   	; 0x23c <common_tc_delay>
    102c:	ce 01       	movw	r24, r28
    102e:	88 0f       	add	r24, r24
    1030:	99 1f       	adc	r25, r25
    1032:	cc 0f       	add	r28, r28
    1034:	dd 1f       	adc	r29, r29
    1036:	cc 0f       	add	r28, r28
    1038:	dd 1f       	adc	r29, r29
    103a:	cc 0f       	add	r28, r28
    103c:	dd 1f       	adc	r29, r29
    103e:	c8 0f       	add	r28, r24
    1040:	d9 1f       	adc	r29, r25
    1042:	ce 5b       	subi	r28, 0xBE	; 190
    1044:	d7 4f       	sbci	r29, 0xF7	; 247
    1046:	81 e0       	ldi	r24, 0x01	; 1
    1048:	89 87       	std	Y+9, r24	; 0x09
    104a:	05 c0       	rjmp	.+10     	; 0x1056 <load_hw_timer+0xd2>
    104c:	81 e0       	ldi	r24, 0x01	; 1
    104e:	80 93 74 08 	sts	0x0874, r24	; 0x800874 <timer_trigger>
    1052:	01 c0       	rjmp	.+2      	; 0x1056 <load_hw_timer+0xd2>
    1054:	d8 d8       	rcall	.-3664   	; 0x206 <common_tc_compare_stop>
    1056:	df 91       	pop	r29
    1058:	cf 91       	pop	r28
    105a:	1f 91       	pop	r17
    105c:	0f 91       	pop	r16
    105e:	08 95       	ret

00001060 <internal_timer_handler>:
    1060:	80 91 74 08 	lds	r24, 0x0874	; 0x800874 <timer_trigger>
    1064:	88 23       	and	r24, r24
    1066:	09 f4       	brne	.+2      	; 0x106a <internal_timer_handler+0xa>
    1068:	57 c0       	rjmp	.+174    	; 0x1118 <internal_timer_handler+0xb8>
    106a:	10 92 74 08 	sts	0x0874, r1	; 0x800874 <timer_trigger>
    106e:	80 91 7c 04 	lds	r24, 0x047C	; 0x80047c <running_timers>
    1072:	88 23       	and	r24, r24
    1074:	09 f4       	brne	.+2      	; 0x1078 <internal_timer_handler+0x18>
    1076:	50 c0       	rjmp	.+160    	; 0x1118 <internal_timer_handler+0xb8>
    1078:	80 91 7a 04 	lds	r24, 0x047A	; 0x80047a <expired_timer_queue_head>
    107c:	8f 3f       	cpi	r24, 0xFF	; 255
    107e:	59 f4       	brne	.+22     	; 0x1096 <internal_timer_handler+0x36>
    1080:	80 91 79 04 	lds	r24, 0x0479	; 0x800479 <expired_timer_queue_tail>
    1084:	8f 3f       	cpi	r24, 0xFF	; 255
    1086:	39 f4       	brne	.+14     	; 0x1096 <internal_timer_handler+0x36>
    1088:	80 91 7b 04 	lds	r24, 0x047B	; 0x80047b <running_timer_queue_head>
    108c:	80 93 79 04 	sts	0x0479, r24	; 0x800479 <expired_timer_queue_tail>
    1090:	80 93 7a 04 	sts	0x047A, r24	; 0x80047a <expired_timer_queue_head>
    1094:	15 c0       	rjmp	.+42     	; 0x10c0 <internal_timer_handler+0x60>
    1096:	20 91 7b 04 	lds	r18, 0x047B	; 0x80047b <running_timer_queue_head>
    109a:	80 91 79 04 	lds	r24, 0x0479	; 0x800479 <expired_timer_queue_tail>
    109e:	90 e0       	ldi	r25, 0x00	; 0
    10a0:	fc 01       	movw	r30, r24
    10a2:	ee 0f       	add	r30, r30
    10a4:	ff 1f       	adc	r31, r31
    10a6:	88 0f       	add	r24, r24
    10a8:	99 1f       	adc	r25, r25
    10aa:	88 0f       	add	r24, r24
    10ac:	99 1f       	adc	r25, r25
    10ae:	88 0f       	add	r24, r24
    10b0:	99 1f       	adc	r25, r25
    10b2:	e8 0f       	add	r30, r24
    10b4:	f9 1f       	adc	r31, r25
    10b6:	ee 5b       	subi	r30, 0xBE	; 190
    10b8:	f7 4f       	sbci	r31, 0xF7	; 247
    10ba:	20 87       	std	Z+8, r18	; 0x08
    10bc:	20 93 79 04 	sts	0x0479, r18	; 0x800479 <expired_timer_queue_tail>
    10c0:	80 91 7b 04 	lds	r24, 0x047B	; 0x80047b <running_timer_queue_head>
    10c4:	90 e0       	ldi	r25, 0x00	; 0
    10c6:	fc 01       	movw	r30, r24
    10c8:	ee 0f       	add	r30, r30
    10ca:	ff 1f       	adc	r31, r31
    10cc:	88 0f       	add	r24, r24
    10ce:	99 1f       	adc	r25, r25
    10d0:	88 0f       	add	r24, r24
    10d2:	99 1f       	adc	r25, r25
    10d4:	88 0f       	add	r24, r24
    10d6:	99 1f       	adc	r25, r25
    10d8:	e8 0f       	add	r30, r24
    10da:	f9 1f       	adc	r31, r25
    10dc:	ee 5b       	subi	r30, 0xBE	; 190
    10de:	f7 4f       	sbci	r31, 0xF7	; 247
    10e0:	80 85       	ldd	r24, Z+8	; 0x08
    10e2:	80 93 7b 04 	sts	0x047B, r24	; 0x80047b <running_timer_queue_head>
    10e6:	20 91 79 04 	lds	r18, 0x0479	; 0x800479 <expired_timer_queue_tail>
    10ea:	30 e0       	ldi	r19, 0x00	; 0
    10ec:	f9 01       	movw	r30, r18
    10ee:	ee 0f       	add	r30, r30
    10f0:	ff 1f       	adc	r31, r31
    10f2:	22 0f       	add	r18, r18
    10f4:	33 1f       	adc	r19, r19
    10f6:	22 0f       	add	r18, r18
    10f8:	33 1f       	adc	r19, r19
    10fa:	22 0f       	add	r18, r18
    10fc:	33 1f       	adc	r19, r19
    10fe:	e2 0f       	add	r30, r18
    1100:	f3 1f       	adc	r31, r19
    1102:	ee 5b       	subi	r30, 0xBE	; 190
    1104:	f7 4f       	sbci	r31, 0xF7	; 247
    1106:	9f ef       	ldi	r25, 0xFF	; 255
    1108:	90 87       	std	Z+8, r25	; 0x08
    110a:	90 91 7c 04 	lds	r25, 0x047C	; 0x80047c <running_timers>
    110e:	91 50       	subi	r25, 0x01	; 1
    1110:	90 93 7c 04 	sts	0x047C, r25	; 0x80047c <running_timers>
    1114:	91 11       	cpse	r25, r1
    1116:	36 cf       	rjmp	.-404    	; 0xf84 <load_hw_timer>
    1118:	08 95       	ret

0000111a <sw_timer_get_id>:
    111a:	fc 01       	movw	r30, r24
    111c:	90 91 78 04 	lds	r25, 0x0478	; 0x800478 <alloc_timer_id>
    1120:	95 30       	cpi	r25, 0x05	; 5
    1122:	30 f4       	brcc	.+12     	; 0x1130 <sw_timer_get_id+0x16>
    1124:	90 83       	st	Z, r25
    1126:	9f 5f       	subi	r25, 0xFF	; 255
    1128:	90 93 78 04 	sts	0x0478, r25	; 0x800478 <alloc_timer_id>
    112c:	80 e0       	ldi	r24, 0x00	; 0
    112e:	08 95       	ret
    1130:	84 ef       	ldi	r24, 0xF4	; 244
    1132:	08 95       	ret

00001134 <sw_timer_start>:
    1134:	2f 92       	push	r2
    1136:	3f 92       	push	r3
    1138:	4f 92       	push	r4
    113a:	5f 92       	push	r5
    113c:	6f 92       	push	r6
    113e:	7f 92       	push	r7
    1140:	8f 92       	push	r8
    1142:	9f 92       	push	r9
    1144:	af 92       	push	r10
    1146:	bf 92       	push	r11
    1148:	cf 92       	push	r12
    114a:	df 92       	push	r13
    114c:	ef 92       	push	r14
    114e:	ff 92       	push	r15
    1150:	0f 93       	push	r16
    1152:	1f 93       	push	r17
    1154:	cf 93       	push	r28
    1156:	df 93       	push	r29
    1158:	cd b7       	in	r28, 0x3d	; 61
    115a:	de b7       	in	r29, 0x3e	; 62
    115c:	27 97       	sbiw	r28, 0x07	; 7
    115e:	0f b6       	in	r0, 0x3f	; 63
    1160:	f8 94       	cli
    1162:	de bf       	out	0x3e, r29	; 62
    1164:	0f be       	out	0x3f, r0	; 63
    1166:	cd bf       	out	0x3d, r28	; 61
    1168:	38 2e       	mov	r3, r24
    116a:	4a 01       	movw	r8, r20
    116c:	5b 01       	movw	r10, r22
    116e:	22 2e       	mov	r2, r18
    1170:	ff 82       	std	Y+7, r15	; 0x07
    1172:	ee 82       	std	Y+6, r14	; 0x06
    1174:	68 94       	set
    1176:	44 24       	eor	r4, r4
    1178:	42 f8       	bld	r4, 2
    117a:	48 16       	cp	r4, r24
    117c:	08 f4       	brcc	.+2      	; 0x1180 <sw_timer_start+0x4c>
    117e:	00 c1       	rjmp	.+512    	; 0x1380 <sw_timer_start+0x24c>
    1180:	01 15       	cp	r16, r1
    1182:	11 05       	cpc	r17, r1
    1184:	09 f4       	brne	.+2      	; 0x1188 <sw_timer_start+0x54>
    1186:	fe c0       	rjmp	.+508    	; 0x1384 <sw_timer_start+0x250>
    1188:	c8 2e       	mov	r12, r24
    118a:	d1 2c       	mov	r13, r1
    118c:	f6 01       	movw	r30, r12
    118e:	ee 0f       	add	r30, r30
    1190:	ff 1f       	adc	r31, r31
    1192:	c6 01       	movw	r24, r12
    1194:	88 0f       	add	r24, r24
    1196:	99 1f       	adc	r25, r25
    1198:	88 0f       	add	r24, r24
    119a:	99 1f       	adc	r25, r25
    119c:	88 0f       	add	r24, r24
    119e:	99 1f       	adc	r25, r25
    11a0:	e8 0f       	add	r30, r24
    11a2:	f9 1f       	adc	r31, r25
    11a4:	ee 5b       	subi	r30, 0xBE	; 190
    11a6:	f7 4f       	sbci	r31, 0xF7	; 247
    11a8:	84 81       	ldd	r24, Z+4	; 0x04
    11aa:	95 81       	ldd	r25, Z+5	; 0x05
    11ac:	89 2b       	or	r24, r25
    11ae:	09 f0       	breq	.+2      	; 0x11b2 <sw_timer_start+0x7e>
    11b0:	eb c0       	rjmp	.+470    	; 0x1388 <sw_timer_start+0x254>
    11b2:	e0 90 40 08 	lds	r14, 0x0840	; 0x800840 <sys_time>
    11b6:	f0 90 41 08 	lds	r15, 0x0841	; 0x800841 <sys_time+0x1>
    11ba:	0e 94 db 00 	call	0x1b6	; 0x1b6 <common_tc_read_count>
    11be:	40 91 40 08 	lds	r20, 0x0840	; 0x800840 <sys_time>
    11c2:	50 91 41 08 	lds	r21, 0x0841	; 0x800841 <sys_time+0x1>
    11c6:	e4 16       	cp	r14, r20
    11c8:	f5 06       	cpc	r15, r21
    11ca:	99 f7       	brne	.-26     	; 0x11b2 <sw_timer_start+0x7e>
    11cc:	60 e0       	ldi	r22, 0x00	; 0
    11ce:	70 e0       	ldi	r23, 0x00	; 0
    11d0:	ba 01       	movw	r22, r20
    11d2:	55 27       	eor	r21, r21
    11d4:	44 27       	eor	r20, r20
    11d6:	2c 01       	movw	r4, r24
    11d8:	61 2c       	mov	r6, r1
    11da:	71 2c       	mov	r7, r1
    11dc:	4a 82       	std	Y+2, r4	; 0x02
    11de:	5b 82       	std	Y+3, r5	; 0x03
    11e0:	6c 82       	std	Y+4, r6	; 0x04
    11e2:	7d 82       	std	Y+5, r7	; 0x05
    11e4:	44 2a       	or	r4, r20
    11e6:	55 2a       	or	r5, r21
    11e8:	66 2a       	or	r6, r22
    11ea:	77 2a       	or	r7, r23
    11ec:	22 20       	and	r2, r2
    11ee:	21 f0       	breq	.+8      	; 0x11f8 <sw_timer_start+0xc4>
    11f0:	21 e0       	ldi	r18, 0x01	; 1
    11f2:	22 16       	cp	r2, r18
    11f4:	91 f0       	breq	.+36     	; 0x121a <sw_timer_start+0xe6>
    11f6:	ca c0       	rjmp	.+404    	; 0x138c <sw_timer_start+0x258>
    11f8:	b5 01       	movw	r22, r10
    11fa:	a4 01       	movw	r20, r8
    11fc:	40 58       	subi	r20, 0x80	; 128
    11fe:	51 09       	sbc	r21, r1
    1200:	61 09       	sbc	r22, r1
    1202:	71 09       	sbc	r23, r1
    1204:	40 38       	cpi	r20, 0x80	; 128
    1206:	5f 4f       	sbci	r21, 0xFF	; 255
    1208:	6f 4f       	sbci	r22, 0xFF	; 255
    120a:	7f 47       	sbci	r23, 0x7F	; 127
    120c:	08 f0       	brcs	.+2      	; 0x1210 <sw_timer_start+0xdc>
    120e:	c0 c0       	rjmp	.+384    	; 0x1390 <sw_timer_start+0x25c>
    1210:	84 0c       	add	r8, r4
    1212:	95 1c       	adc	r9, r5
    1214:	a6 1c       	adc	r10, r6
    1216:	b7 1c       	adc	r11, r7
    1218:	10 c0       	rjmp	.+32     	; 0x123a <sw_timer_start+0x106>
    121a:	b5 01       	movw	r22, r10
    121c:	a4 01       	movw	r20, r8
    121e:	40 58       	subi	r20, 0x80	; 128
    1220:	51 09       	sbc	r21, r1
    1222:	61 09       	sbc	r22, r1
    1224:	71 09       	sbc	r23, r1
    1226:	44 19       	sub	r20, r4
    1228:	55 09       	sbc	r21, r5
    122a:	66 09       	sbc	r22, r6
    122c:	77 09       	sbc	r23, r7
    122e:	40 38       	cpi	r20, 0x80	; 128
    1230:	5f 4f       	sbci	r21, 0xFF	; 255
    1232:	6f 4f       	sbci	r22, 0xFF	; 255
    1234:	7f 47       	sbci	r23, 0x7F	; 127
    1236:	08 f0       	brcs	.+2      	; 0x123a <sw_timer_start+0x106>
    1238:	ad c0       	rjmp	.+346    	; 0x1394 <sw_timer_start+0x260>
    123a:	8f b7       	in	r24, 0x3f	; 63
    123c:	89 83       	std	Y+1, r24	; 0x01
    123e:	f8 94       	cli
    1240:	f9 80       	ldd	r15, Y+1	; 0x01
    1242:	0e df       	rcall	.-484    	; 0x1060 <internal_timer_handler>
    1244:	c6 01       	movw	r24, r12
    1246:	88 0f       	add	r24, r24
    1248:	99 1f       	adc	r25, r25
    124a:	88 0f       	add	r24, r24
    124c:	99 1f       	adc	r25, r25
    124e:	88 0f       	add	r24, r24
    1250:	99 1f       	adc	r25, r25
    1252:	f6 01       	movw	r30, r12
    1254:	ee 0f       	add	r30, r30
    1256:	ff 1f       	adc	r31, r31
    1258:	e8 0f       	add	r30, r24
    125a:	f9 1f       	adc	r31, r25
    125c:	ee 5b       	subi	r30, 0xBE	; 190
    125e:	f7 4f       	sbci	r31, 0xF7	; 247
    1260:	80 82       	st	Z, r8
    1262:	91 82       	std	Z+1, r9	; 0x01
    1264:	a2 82       	std	Z+2, r10	; 0x02
    1266:	b3 82       	std	Z+3, r11	; 0x03
    1268:	15 83       	std	Z+5, r17	; 0x05
    126a:	04 83       	std	Z+4, r16	; 0x04
    126c:	4e 80       	ldd	r4, Y+6	; 0x06
    126e:	5f 80       	ldd	r5, Y+7	; 0x07
    1270:	57 82       	std	Z+7, r5	; 0x07
    1272:	46 82       	std	Z+6, r4	; 0x06
    1274:	11 86       	std	Z+9, r1	; 0x09
    1276:	b0 91 7c 04 	lds	r27, 0x047C	; 0x80047c <running_timers>
    127a:	bf 5f       	subi	r27, 0xFF	; 255
    127c:	b0 93 7c 04 	sts	0x047C, r27	; 0x80047c <running_timers>
    1280:	a0 91 7b 04 	lds	r26, 0x047B	; 0x80047b <running_timer_queue_head>
    1284:	af 3f       	cpi	r26, 0xFF	; 255
    1286:	21 f0       	breq	.+8      	; 0x1290 <sw_timer_start+0x15c>
    1288:	b1 11       	cpse	r27, r1
    128a:	07 c0       	rjmp	.+14     	; 0x129a <sw_timer_start+0x166>
    128c:	ea 2e       	mov	r14, r26
    128e:	84 c0       	rjmp	.+264    	; 0x1398 <sw_timer_start+0x264>
    1290:	30 92 7b 04 	sts	0x047B, r3	; 0x80047b <running_timer_queue_head>
    1294:	83 2d       	mov	r24, r3
    1296:	76 de       	rcall	.-788    	; 0xf84 <load_hw_timer>
    1298:	70 c0       	rjmp	.+224    	; 0x137a <sw_timer_start+0x246>
    129a:	ea 2e       	mov	r14, r26
    129c:	4a 2f       	mov	r20, r26
    129e:	50 e0       	ldi	r21, 0x00	; 0
    12a0:	4f 3f       	cpi	r20, 0xFF	; 255
    12a2:	09 f4       	brne	.+2      	; 0x12a6 <sw_timer_start+0x172>
    12a4:	66 c0       	rjmp	.+204    	; 0x1372 <sw_timer_start+0x23e>
    12a6:	84 2f       	mov	r24, r20
    12a8:	90 e0       	ldi	r25, 0x00	; 0
    12aa:	bc 01       	movw	r22, r24
    12ac:	66 0f       	add	r22, r22
    12ae:	77 1f       	adc	r23, r23
    12b0:	9c 01       	movw	r18, r24
    12b2:	22 0f       	add	r18, r18
    12b4:	33 1f       	adc	r19, r19
    12b6:	22 0f       	add	r18, r18
    12b8:	33 1f       	adc	r19, r19
    12ba:	22 0f       	add	r18, r18
    12bc:	33 1f       	adc	r19, r19
    12be:	26 0f       	add	r18, r22
    12c0:	37 1f       	adc	r19, r23
    12c2:	f9 01       	movw	r30, r18
    12c4:	ee 5b       	subi	r30, 0xBE	; 190
    12c6:	f7 4f       	sbci	r31, 0xF7	; 247
    12c8:	40 80       	ld	r4, Z
    12ca:	51 80       	ldd	r5, Z+1	; 0x01
    12cc:	62 80       	ldd	r6, Z+2	; 0x02
    12ce:	73 80       	ldd	r7, Z+3	; 0x03
    12d0:	95 01       	movw	r18, r10
    12d2:	84 01       	movw	r16, r8
    12d4:	04 19       	sub	r16, r4
    12d6:	15 09       	sbc	r17, r5
    12d8:	26 09       	sbc	r18, r6
    12da:	37 09       	sbc	r19, r7
    12dc:	28 01       	movw	r4, r16
    12de:	39 01       	movw	r6, r18
    12e0:	1f ef       	ldi	r17, 0xFF	; 255
    12e2:	41 16       	cp	r4, r17
    12e4:	51 06       	cpc	r5, r17
    12e6:	61 06       	cpc	r6, r17
    12e8:	1f e7       	ldi	r17, 0x7F	; 127
    12ea:	71 06       	cpc	r7, r17
    12ec:	70 f4       	brcc	.+28     	; 0x130a <sw_timer_start+0x1d6>
    12ee:	fb 01       	movw	r30, r22
    12f0:	88 0f       	add	r24, r24
    12f2:	99 1f       	adc	r25, r25
    12f4:	88 0f       	add	r24, r24
    12f6:	99 1f       	adc	r25, r25
    12f8:	88 0f       	add	r24, r24
    12fa:	99 1f       	adc	r25, r25
    12fc:	e8 0f       	add	r30, r24
    12fe:	f9 1f       	adc	r31, r25
    1300:	ee 5b       	subi	r30, 0xBE	; 190
    1302:	f7 4f       	sbci	r31, 0xF7	; 247
    1304:	e4 2e       	mov	r14, r20
    1306:	40 85       	ldd	r20, Z+8	; 0x08
    1308:	34 c0       	rjmp	.+104    	; 0x1372 <sw_timer_start+0x23e>
    130a:	f6 01       	movw	r30, r12
    130c:	ee 0f       	add	r30, r30
    130e:	ff 1f       	adc	r31, r31
    1310:	cc 0c       	add	r12, r12
    1312:	dd 1c       	adc	r13, r13
    1314:	cc 0c       	add	r12, r12
    1316:	dd 1c       	adc	r13, r13
    1318:	cc 0c       	add	r12, r12
    131a:	dd 1c       	adc	r13, r13
    131c:	ec 0d       	add	r30, r12
    131e:	fd 1d       	adc	r31, r13
    1320:	ee 5b       	subi	r30, 0xBE	; 190
    1322:	f7 4f       	sbci	r31, 0xF7	; 247
    1324:	40 87       	std	Z+8, r20	; 0x08
    1326:	fc 01       	movw	r30, r24
    1328:	ee 0f       	add	r30, r30
    132a:	ff 1f       	adc	r31, r31
    132c:	88 0f       	add	r24, r24
    132e:	99 1f       	adc	r25, r25
    1330:	88 0f       	add	r24, r24
    1332:	99 1f       	adc	r25, r25
    1334:	88 0f       	add	r24, r24
    1336:	99 1f       	adc	r25, r25
    1338:	e8 0f       	add	r30, r24
    133a:	f9 1f       	adc	r31, r25
    133c:	ee 5b       	subi	r30, 0xBE	; 190
    133e:	f7 4f       	sbci	r31, 0xF7	; 247
    1340:	11 86       	std	Z+9, r1	; 0x09
    1342:	a4 13       	cpse	r26, r20
    1344:	05 c0       	rjmp	.+10     	; 0x1350 <sw_timer_start+0x21c>
    1346:	30 92 7b 04 	sts	0x047B, r3	; 0x80047b <running_timer_queue_head>
    134a:	83 2d       	mov	r24, r3
    134c:	1b de       	rcall	.-970    	; 0xf84 <load_hw_timer>
    134e:	15 c0       	rjmp	.+42     	; 0x137a <sw_timer_start+0x246>
    1350:	8e 2d       	mov	r24, r14
    1352:	90 e0       	ldi	r25, 0x00	; 0
    1354:	fc 01       	movw	r30, r24
    1356:	ee 0f       	add	r30, r30
    1358:	ff 1f       	adc	r31, r31
    135a:	88 0f       	add	r24, r24
    135c:	99 1f       	adc	r25, r25
    135e:	88 0f       	add	r24, r24
    1360:	99 1f       	adc	r25, r25
    1362:	88 0f       	add	r24, r24
    1364:	99 1f       	adc	r25, r25
    1366:	e8 0f       	add	r30, r24
    1368:	f9 1f       	adc	r31, r25
    136a:	ee 5b       	subi	r30, 0xBE	; 190
    136c:	f7 4f       	sbci	r31, 0xF7	; 247
    136e:	30 86       	std	Z+8, r3	; 0x08
    1370:	04 c0       	rjmp	.+8      	; 0x137a <sw_timer_start+0x246>
    1372:	5f 5f       	subi	r21, 0xFF	; 255
    1374:	b5 13       	cpse	r27, r21
    1376:	94 cf       	rjmp	.-216    	; 0x12a0 <sw_timer_start+0x16c>
    1378:	0f c0       	rjmp	.+30     	; 0x1398 <sw_timer_start+0x264>
    137a:	ff be       	out	0x3f, r15	; 63
    137c:	80 e0       	ldi	r24, 0x00	; 0
    137e:	2c c0       	rjmp	.+88     	; 0x13d8 <sw_timer_start+0x2a4>
    1380:	88 ef       	ldi	r24, 0xF8	; 248
    1382:	2a c0       	rjmp	.+84     	; 0x13d8 <sw_timer_start+0x2a4>
    1384:	88 ef       	ldi	r24, 0xF8	; 248
    1386:	28 c0       	rjmp	.+80     	; 0x13d8 <sw_timer_start+0x2a4>
    1388:	83 ef       	ldi	r24, 0xF3	; 243
    138a:	26 c0       	rjmp	.+76     	; 0x13d8 <sw_timer_start+0x2a4>
    138c:	88 ef       	ldi	r24, 0xF8	; 248
    138e:	24 c0       	rjmp	.+72     	; 0x13d8 <sw_timer_start+0x2a4>
    1390:	88 ef       	ldi	r24, 0xF8	; 248
    1392:	22 c0       	rjmp	.+68     	; 0x13d8 <sw_timer_start+0x2a4>
    1394:	88 ef       	ldi	r24, 0xF8	; 248
    1396:	20 c0       	rjmp	.+64     	; 0x13d8 <sw_timer_start+0x2a4>
    1398:	8e 2d       	mov	r24, r14
    139a:	90 e0       	ldi	r25, 0x00	; 0
    139c:	fc 01       	movw	r30, r24
    139e:	ee 0f       	add	r30, r30
    13a0:	ff 1f       	adc	r31, r31
    13a2:	88 0f       	add	r24, r24
    13a4:	99 1f       	adc	r25, r25
    13a6:	88 0f       	add	r24, r24
    13a8:	99 1f       	adc	r25, r25
    13aa:	88 0f       	add	r24, r24
    13ac:	99 1f       	adc	r25, r25
    13ae:	e8 0f       	add	r30, r24
    13b0:	f9 1f       	adc	r31, r25
    13b2:	ee 5b       	subi	r30, 0xBE	; 190
    13b4:	f7 4f       	sbci	r31, 0xF7	; 247
    13b6:	30 86       	std	Z+8, r3	; 0x08
    13b8:	f6 01       	movw	r30, r12
    13ba:	ee 0f       	add	r30, r30
    13bc:	ff 1f       	adc	r31, r31
    13be:	cc 0c       	add	r12, r12
    13c0:	dd 1c       	adc	r13, r13
    13c2:	cc 0c       	add	r12, r12
    13c4:	dd 1c       	adc	r13, r13
    13c6:	cc 0c       	add	r12, r12
    13c8:	dd 1c       	adc	r13, r13
    13ca:	ec 0d       	add	r30, r12
    13cc:	fd 1d       	adc	r31, r13
    13ce:	ee 5b       	subi	r30, 0xBE	; 190
    13d0:	f7 4f       	sbci	r31, 0xF7	; 247
    13d2:	8f ef       	ldi	r24, 0xFF	; 255
    13d4:	80 87       	std	Z+8, r24	; 0x08
    13d6:	d1 cf       	rjmp	.-94     	; 0x137a <sw_timer_start+0x246>
    13d8:	27 96       	adiw	r28, 0x07	; 7
    13da:	0f b6       	in	r0, 0x3f	; 63
    13dc:	f8 94       	cli
    13de:	de bf       	out	0x3e, r29	; 62
    13e0:	0f be       	out	0x3f, r0	; 63
    13e2:	cd bf       	out	0x3d, r28	; 61
    13e4:	df 91       	pop	r29
    13e6:	cf 91       	pop	r28
    13e8:	1f 91       	pop	r17
    13ea:	0f 91       	pop	r16
    13ec:	ff 90       	pop	r15
    13ee:	ef 90       	pop	r14
    13f0:	df 90       	pop	r13
    13f2:	cf 90       	pop	r12
    13f4:	bf 90       	pop	r11
    13f6:	af 90       	pop	r10
    13f8:	9f 90       	pop	r9
    13fa:	8f 90       	pop	r8
    13fc:	7f 90       	pop	r7
    13fe:	6f 90       	pop	r6
    1400:	5f 90       	pop	r5
    1402:	4f 90       	pop	r4
    1404:	3f 90       	pop	r3
    1406:	2f 90       	pop	r2
    1408:	08 95       	ret

0000140a <sw_timer_stop>:
    140a:	0f 93       	push	r16
    140c:	1f 93       	push	r17
    140e:	cf 93       	push	r28
    1410:	df 93       	push	r29
    1412:	1f 92       	push	r1
    1414:	cd b7       	in	r28, 0x3d	; 61
    1416:	de b7       	in	r29, 0x3e	; 62
    1418:	85 30       	cpi	r24, 0x05	; 5
    141a:	08 f0       	brcs	.+2      	; 0x141e <sw_timer_stop+0x14>
    141c:	f1 c0       	rjmp	.+482    	; 0x1600 <sw_timer_stop+0x1f6>
    141e:	08 2f       	mov	r16, r24
    1420:	8f b7       	in	r24, 0x3f	; 63
    1422:	89 83       	std	Y+1, r24	; 0x01
    1424:	f8 94       	cli
    1426:	19 81       	ldd	r17, Y+1	; 0x01
    1428:	1b de       	rcall	.-970    	; 0x1060 <internal_timer_handler>
    142a:	80 91 7c 04 	lds	r24, 0x047C	; 0x80047c <running_timers>
    142e:	88 23       	and	r24, r24
    1430:	09 f4       	brne	.+2      	; 0x1434 <sw_timer_stop+0x2a>
    1432:	66 c0       	rjmp	.+204    	; 0x1500 <sw_timer_stop+0xf6>
    1434:	90 91 7b 04 	lds	r25, 0x047B	; 0x80047b <running_timer_queue_head>
    1438:	09 13       	cpse	r16, r25
    143a:	4e c0       	rjmp	.+156    	; 0x14d8 <sw_timer_stop+0xce>
    143c:	21 c0       	rjmp	.+66     	; 0x1480 <sw_timer_stop+0x76>
    143e:	09 13       	cpse	r16, r25
    1440:	4b c0       	rjmp	.+150    	; 0x14d8 <sw_timer_stop+0xce>
    1442:	80 2f       	mov	r24, r16
    1444:	90 e0       	ldi	r25, 0x00	; 0
    1446:	fc 01       	movw	r30, r24
    1448:	ee 0f       	add	r30, r30
    144a:	ff 1f       	adc	r31, r31
    144c:	88 0f       	add	r24, r24
    144e:	99 1f       	adc	r25, r25
    1450:	88 0f       	add	r24, r24
    1452:	99 1f       	adc	r25, r25
    1454:	88 0f       	add	r24, r24
    1456:	99 1f       	adc	r25, r25
    1458:	e8 0f       	add	r30, r24
    145a:	f9 1f       	adc	r31, r25
    145c:	ee 5b       	subi	r30, 0xBE	; 190
    145e:	f7 4f       	sbci	r31, 0xF7	; 247
    1460:	80 85       	ldd	r24, Z+8	; 0x08
    1462:	fa 01       	movw	r30, r20
    1464:	ee 0f       	add	r30, r30
    1466:	ff 1f       	adc	r31, r31
    1468:	44 0f       	add	r20, r20
    146a:	55 1f       	adc	r21, r21
    146c:	44 0f       	add	r20, r20
    146e:	55 1f       	adc	r21, r21
    1470:	44 0f       	add	r20, r20
    1472:	55 1f       	adc	r21, r21
    1474:	e4 0f       	add	r30, r20
    1476:	f5 1f       	adc	r31, r21
    1478:	ee 5b       	subi	r30, 0xBE	; 190
    147a:	f7 4f       	sbci	r31, 0xF7	; 247
    147c:	80 87       	std	Z+8, r24	; 0x08
    147e:	15 c0       	rjmp	.+42     	; 0x14aa <sw_timer_stop+0xa0>
    1480:	0e 94 03 01 	call	0x206	; 0x206 <common_tc_compare_stop>
    1484:	80 2f       	mov	r24, r16
    1486:	90 e0       	ldi	r25, 0x00	; 0
    1488:	fc 01       	movw	r30, r24
    148a:	ee 0f       	add	r30, r30
    148c:	ff 1f       	adc	r31, r31
    148e:	88 0f       	add	r24, r24
    1490:	99 1f       	adc	r25, r25
    1492:	88 0f       	add	r24, r24
    1494:	99 1f       	adc	r25, r25
    1496:	88 0f       	add	r24, r24
    1498:	99 1f       	adc	r25, r25
    149a:	e8 0f       	add	r30, r24
    149c:	f9 1f       	adc	r31, r25
    149e:	ee 5b       	subi	r30, 0xBE	; 190
    14a0:	f7 4f       	sbci	r31, 0xF7	; 247
    14a2:	80 85       	ldd	r24, Z+8	; 0x08
    14a4:	80 93 7b 04 	sts	0x047B, r24	; 0x80047b <running_timer_queue_head>
    14a8:	6d dd       	rcall	.-1318   	; 0xf84 <load_hw_timer>
    14aa:	80 2f       	mov	r24, r16
    14ac:	90 e0       	ldi	r25, 0x00	; 0
    14ae:	fc 01       	movw	r30, r24
    14b0:	ee 0f       	add	r30, r30
    14b2:	ff 1f       	adc	r31, r31
    14b4:	88 0f       	add	r24, r24
    14b6:	99 1f       	adc	r25, r25
    14b8:	88 0f       	add	r24, r24
    14ba:	99 1f       	adc	r25, r25
    14bc:	88 0f       	add	r24, r24
    14be:	99 1f       	adc	r25, r25
    14c0:	e8 0f       	add	r30, r24
    14c2:	f9 1f       	adc	r31, r25
    14c4:	ee 5b       	subi	r30, 0xBE	; 190
    14c6:	f7 4f       	sbci	r31, 0xF7	; 247
    14c8:	8f ef       	ldi	r24, 0xFF	; 255
    14ca:	80 87       	std	Z+8, r24	; 0x08
    14cc:	80 91 7c 04 	lds	r24, 0x047C	; 0x80047c <running_timers>
    14d0:	81 50       	subi	r24, 0x01	; 1
    14d2:	80 93 7c 04 	sts	0x047C, r24	; 0x80047c <running_timers>
    14d6:	78 c0       	rjmp	.+240    	; 0x15c8 <sw_timer_stop+0x1be>
    14d8:	49 2f       	mov	r20, r25
    14da:	50 e0       	ldi	r21, 0x00	; 0
    14dc:	fa 01       	movw	r30, r20
    14de:	ee 0f       	add	r30, r30
    14e0:	ff 1f       	adc	r31, r31
    14e2:	9a 01       	movw	r18, r20
    14e4:	22 0f       	add	r18, r18
    14e6:	33 1f       	adc	r19, r19
    14e8:	22 0f       	add	r18, r18
    14ea:	33 1f       	adc	r19, r19
    14ec:	22 0f       	add	r18, r18
    14ee:	33 1f       	adc	r19, r19
    14f0:	e2 0f       	add	r30, r18
    14f2:	f3 1f       	adc	r31, r19
    14f4:	ee 5b       	subi	r30, 0xBE	; 190
    14f6:	f7 4f       	sbci	r31, 0xF7	; 247
    14f8:	90 85       	ldd	r25, Z+8	; 0x08
    14fa:	81 50       	subi	r24, 0x01	; 1
    14fc:	09 f0       	breq	.+2      	; 0x1500 <sw_timer_stop+0xf6>
    14fe:	9f cf       	rjmp	.-194    	; 0x143e <sw_timer_stop+0x34>
    1500:	80 91 7a 04 	lds	r24, 0x047A	; 0x80047a <expired_timer_queue_head>
    1504:	8f 3f       	cpi	r24, 0xFF	; 255
    1506:	09 f4       	brne	.+2      	; 0x150a <sw_timer_stop+0x100>
    1508:	75 c0       	rjmp	.+234    	; 0x15f4 <sw_timer_stop+0x1ea>
    150a:	08 13       	cpse	r16, r24
    150c:	47 c0       	rjmp	.+142    	; 0x159c <sw_timer_stop+0x192>
    150e:	25 c0       	rjmp	.+74     	; 0x155a <sw_timer_stop+0x150>
    1510:	09 13       	cpse	r16, r25
    1512:	43 c0       	rjmp	.+134    	; 0x159a <sw_timer_stop+0x190>
    1514:	20 2f       	mov	r18, r16
    1516:	30 e0       	ldi	r19, 0x00	; 0
    1518:	f9 01       	movw	r30, r18
    151a:	ee 0f       	add	r30, r30
    151c:	ff 1f       	adc	r31, r31
    151e:	22 0f       	add	r18, r18
    1520:	33 1f       	adc	r19, r19
    1522:	22 0f       	add	r18, r18
    1524:	33 1f       	adc	r19, r19
    1526:	22 0f       	add	r18, r18
    1528:	33 1f       	adc	r19, r19
    152a:	e2 0f       	add	r30, r18
    152c:	f3 1f       	adc	r31, r19
    152e:	ee 5b       	subi	r30, 0xBE	; 190
    1530:	f7 4f       	sbci	r31, 0xF7	; 247
    1532:	90 85       	ldd	r25, Z+8	; 0x08
    1534:	fa 01       	movw	r30, r20
    1536:	ee 0f       	add	r30, r30
    1538:	ff 1f       	adc	r31, r31
    153a:	44 0f       	add	r20, r20
    153c:	55 1f       	adc	r21, r21
    153e:	44 0f       	add	r20, r20
    1540:	55 1f       	adc	r21, r21
    1542:	44 0f       	add	r20, r20
    1544:	55 1f       	adc	r21, r21
    1546:	e4 0f       	add	r30, r20
    1548:	f5 1f       	adc	r31, r21
    154a:	ee 5b       	subi	r30, 0xBE	; 190
    154c:	f7 4f       	sbci	r31, 0xF7	; 247
    154e:	90 87       	std	Z+8, r25	; 0x08
    1550:	90 91 79 04 	lds	r25, 0x0479	; 0x800479 <expired_timer_queue_tail>
    1554:	09 13       	cpse	r16, r25
    1556:	38 c0       	rjmp	.+112    	; 0x15c8 <sw_timer_stop+0x1be>
    1558:	1d c0       	rjmp	.+58     	; 0x1594 <sw_timer_stop+0x18a>
    155a:	80 91 79 04 	lds	r24, 0x0479	; 0x800479 <expired_timer_queue_tail>
    155e:	08 13       	cpse	r16, r24
    1560:	06 c0       	rjmp	.+12     	; 0x156e <sw_timer_stop+0x164>
    1562:	8f ef       	ldi	r24, 0xFF	; 255
    1564:	80 93 79 04 	sts	0x0479, r24	; 0x800479 <expired_timer_queue_tail>
    1568:	80 93 7a 04 	sts	0x047A, r24	; 0x80047a <expired_timer_queue_head>
    156c:	2d c0       	rjmp	.+90     	; 0x15c8 <sw_timer_stop+0x1be>
    156e:	80 2f       	mov	r24, r16
    1570:	90 e0       	ldi	r25, 0x00	; 0
    1572:	fc 01       	movw	r30, r24
    1574:	ee 0f       	add	r30, r30
    1576:	ff 1f       	adc	r31, r31
    1578:	88 0f       	add	r24, r24
    157a:	99 1f       	adc	r25, r25
    157c:	88 0f       	add	r24, r24
    157e:	99 1f       	adc	r25, r25
    1580:	88 0f       	add	r24, r24
    1582:	99 1f       	adc	r25, r25
    1584:	e8 0f       	add	r30, r24
    1586:	f9 1f       	adc	r31, r25
    1588:	ee 5b       	subi	r30, 0xBE	; 190
    158a:	f7 4f       	sbci	r31, 0xF7	; 247
    158c:	80 85       	ldd	r24, Z+8	; 0x08
    158e:	80 93 7a 04 	sts	0x047A, r24	; 0x80047a <expired_timer_queue_head>
    1592:	1a c0       	rjmp	.+52     	; 0x15c8 <sw_timer_stop+0x1be>
    1594:	80 93 79 04 	sts	0x0479, r24	; 0x800479 <expired_timer_queue_tail>
    1598:	17 c0       	rjmp	.+46     	; 0x15c8 <sw_timer_stop+0x1be>
    159a:	89 2f       	mov	r24, r25
    159c:	48 2f       	mov	r20, r24
    159e:	50 e0       	ldi	r21, 0x00	; 0
    15a0:	fa 01       	movw	r30, r20
    15a2:	ee 0f       	add	r30, r30
    15a4:	ff 1f       	adc	r31, r31
    15a6:	9a 01       	movw	r18, r20
    15a8:	22 0f       	add	r18, r18
    15aa:	33 1f       	adc	r19, r19
    15ac:	22 0f       	add	r18, r18
    15ae:	33 1f       	adc	r19, r19
    15b0:	22 0f       	add	r18, r18
    15b2:	33 1f       	adc	r19, r19
    15b4:	e2 0f       	add	r30, r18
    15b6:	f3 1f       	adc	r31, r19
    15b8:	ee 5b       	subi	r30, 0xBE	; 190
    15ba:	f7 4f       	sbci	r31, 0xF7	; 247
    15bc:	90 85       	ldd	r25, Z+8	; 0x08
    15be:	9f 3f       	cpi	r25, 0xFF	; 255
    15c0:	09 f0       	breq	.+2      	; 0x15c4 <sw_timer_stop+0x1ba>
    15c2:	a6 cf       	rjmp	.-180    	; 0x1510 <sw_timer_stop+0x106>
    15c4:	80 e0       	ldi	r24, 0x00	; 0
    15c6:	17 c0       	rjmp	.+46     	; 0x15f6 <sw_timer_stop+0x1ec>
    15c8:	80 2f       	mov	r24, r16
    15ca:	90 e0       	ldi	r25, 0x00	; 0
    15cc:	fc 01       	movw	r30, r24
    15ce:	ee 0f       	add	r30, r30
    15d0:	ff 1f       	adc	r31, r31
    15d2:	88 0f       	add	r24, r24
    15d4:	99 1f       	adc	r25, r25
    15d6:	88 0f       	add	r24, r24
    15d8:	99 1f       	adc	r25, r25
    15da:	88 0f       	add	r24, r24
    15dc:	99 1f       	adc	r25, r25
    15de:	e8 0f       	add	r30, r24
    15e0:	f9 1f       	adc	r31, r25
    15e2:	ee 5b       	subi	r30, 0xBE	; 190
    15e4:	f7 4f       	sbci	r31, 0xF7	; 247
    15e6:	15 82       	std	Z+5, r1	; 0x05
    15e8:	14 82       	std	Z+4, r1	; 0x04
    15ea:	17 82       	std	Z+7, r1	; 0x07
    15ec:	16 82       	std	Z+6, r1	; 0x06
    15ee:	11 86       	std	Z+9, r1	; 0x09
    15f0:	81 e0       	ldi	r24, 0x01	; 1
    15f2:	01 c0       	rjmp	.+2      	; 0x15f6 <sw_timer_stop+0x1ec>
    15f4:	80 e0       	ldi	r24, 0x00	; 0
    15f6:	1f bf       	out	0x3f, r17	; 63
    15f8:	81 11       	cpse	r24, r1
    15fa:	04 c0       	rjmp	.+8      	; 0x1604 <sw_timer_stop+0x1fa>
    15fc:	82 ef       	ldi	r24, 0xF2	; 242
    15fe:	03 c0       	rjmp	.+6      	; 0x1606 <sw_timer_stop+0x1fc>
    1600:	88 ef       	ldi	r24, 0xF8	; 248
    1602:	01 c0       	rjmp	.+2      	; 0x1606 <sw_timer_stop+0x1fc>
    1604:	80 e0       	ldi	r24, 0x00	; 0
    1606:	0f 90       	pop	r0
    1608:	df 91       	pop	r29
    160a:	cf 91       	pop	r28
    160c:	1f 91       	pop	r17
    160e:	0f 91       	pop	r16
    1610:	08 95       	ret

00001612 <sw_timer_init>:
	 * Initialize the timer resources like timer arrays
	 * queues, timer registers
	 */
	uint8_t index;

	running_timers = 0;
    1612:	10 92 7c 04 	sts	0x047C, r1	; 0x80047c <running_timers>
	timer_trigger = false;
    1616:	10 92 74 08 	sts	0x0874, r1	; 0x800874 <timer_trigger>
	sys_time = 0;
    161a:	10 92 41 08 	sts	0x0841, r1	; 0x800841 <sys_time+0x1>
    161e:	10 92 40 08 	sts	0x0840, r1	; 0x800840 <sys_time>

	running_timer_queue_head = NO_TIMER;
    1622:	8f ef       	ldi	r24, 0xFF	; 255
    1624:	80 93 7b 04 	sts	0x047B, r24	; 0x80047b <running_timer_queue_head>
	expired_timer_queue_head = NO_TIMER;
    1628:	80 93 7a 04 	sts	0x047A, r24	; 0x80047a <expired_timer_queue_head>
	expired_timer_queue_tail = NO_TIMER;
    162c:	80 93 79 04 	sts	0x0479, r24	; 0x800479 <expired_timer_queue_tail>
    1630:	e2 e4       	ldi	r30, 0x42	; 66
    1632:	f8 e0       	ldi	r31, 0x08	; 8
    1634:	24 e7       	ldi	r18, 0x74	; 116
    1636:	38 e0       	ldi	r19, 0x08	; 8

	for (index = 0; index < TOTAL_NUMBER_OF_SW_TIMERS; index++) {
		timer_array[index].next_timer_in_queue = NO_TIMER;
    1638:	80 87       	std	Z+8, r24	; 0x08
		timer_array[index].timer_cb = NULL;
    163a:	15 82       	std	Z+5, r1	; 0x05
    163c:	14 82       	std	Z+4, r1	; 0x04
    163e:	3a 96       	adiw	r30, 0x0a	; 10

	running_timer_queue_head = NO_TIMER;
	expired_timer_queue_head = NO_TIMER;
	expired_timer_queue_tail = NO_TIMER;

	for (index = 0; index < TOTAL_NUMBER_OF_SW_TIMERS; index++) {
    1640:	e2 17       	cp	r30, r18
    1642:	f3 07       	cpc	r31, r19
    1644:	c9 f7       	brne	.-14     	; 0x1638 <sw_timer_init+0x26>
		timer_array[index].next_timer_in_queue = NO_TIMER;
		timer_array[index].timer_cb = NULL;
	}

	alloc_timer_id = 0;
    1646:	10 92 78 04 	sts	0x0478, r1	; 0x800478 <alloc_timer_id>
	set_common_tc_overflow_callback(hw_overflow_cb);
    164a:	88 e6       	ldi	r24, 0x68	; 104
    164c:	97 e0       	ldi	r25, 0x07	; 7
    164e:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <set_common_tc_overflow_callback>
	set_common_tc_expiry_callback(hw_expiry_cb);
    1652:	80 e6       	ldi	r24, 0x60	; 96
    1654:	97 e0       	ldi	r25, 0x07	; 7
    1656:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <set_common_tc_expiry_callback>
	common_tc_init();
    165a:	0c 94 93 01 	jmp	0x326	; 0x326 <common_tc_init>
    165e:	08 95       	ret

00001660 <sw_timer_service>:
#endif /* #if (TOTAL_NUMBER_OF_SW_TIMERS > 0) */
}

void sw_timer_service(void)
{
    1660:	0f 93       	push	r16
    1662:	1f 93       	push	r17
    1664:	cf 93       	push	r28
    1666:	df 93       	push	r29
    1668:	1f 92       	push	r1
    166a:	1f 92       	push	r1
    166c:	cd b7       	in	r28, 0x3d	; 61
    166e:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1670:	8f b7       	in	r24, 0x3f	; 63
    1672:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
    1674:	f8 94       	cli
	return flags;
    1676:	1a 81       	ldd	r17, Y+2	; 0x02
#if (TOTAL_NUMBER_OF_SW_TIMERS > 0)
	uint8_t flags = cpu_irq_save();
	internal_timer_handler();
    1678:	f3 dc       	rcall	.-1562   	; 0x1060 <internal_timer_handler>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    167a:	1f bf       	out	0x3f, r17	; 63
			 * The expired timer's structure elements are updated
			 * and the timer
			 * is taken out of expired timer queue
			 */
			timer_array[expired_timer_queue_head].
			next_timer_in_queue = NO_TIMER;
    167c:	1f ef       	ldi	r17, 0xFF	; 255
    167e:	01 2f       	mov	r16, r17
    1680:	37 c0       	rjmp	.+110    	; 0x16f0 <sw_timer_service+0x90>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1682:	8f b7       	in	r24, 0x3f	; 63
    1684:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    1686:	f8 94       	cli
	return flags;
    1688:	29 81       	ldd	r18, Y+1	; 0x01
		/* Expired timer if any will be processed here */
		while (NO_TIMER != expired_timer_queue_head) {
			flags = cpu_irq_save();

			next_expired_timer
				= timer_array[expired_timer_queue_head].
    168a:	80 91 7a 04 	lds	r24, 0x047A	; 0x80047a <expired_timer_queue_head>
    168e:	90 e0       	ldi	r25, 0x00	; 0
    1690:	dc 01       	movw	r26, r24
    1692:	aa 0f       	add	r26, r26
    1694:	bb 1f       	adc	r27, r27
    1696:	88 0f       	add	r24, r24
    1698:	99 1f       	adc	r25, r25
    169a:	88 0f       	add	r24, r24
    169c:	99 1f       	adc	r25, r25
    169e:	88 0f       	add	r24, r24
    16a0:	99 1f       	adc	r25, r25
    16a2:	a8 0f       	add	r26, r24
    16a4:	b9 1f       	adc	r27, r25
    16a6:	ae 5b       	subi	r26, 0xBE	; 190
    16a8:	b7 4f       	sbci	r27, 0xF7	; 247
    16aa:	18 96       	adiw	r26, 0x08	; 8
    16ac:	9c 91       	ld	r25, X
    16ae:	18 97       	sbiw	r26, 0x08	; 8
					next_timer_in_queue;

			/* Callback is stored */
			callback
				= (timer_expiry_cb_t)timer_array[
    16b0:	14 96       	adiw	r26, 0x04	; 4
    16b2:	ed 91       	ld	r30, X+
    16b4:	fc 91       	ld	r31, X
    16b6:	15 97       	sbiw	r26, 0x05	; 5
				expired_timer_queue_head
					].timer_cb;

			/* Callback parameter is stored */
			callback_param
				= timer_array[expired_timer_queue_head].param_cb;
    16b8:	16 96       	adiw	r26, 0x06	; 6
    16ba:	4d 91       	ld	r20, X+
    16bc:	5c 91       	ld	r21, X
    16be:	17 97       	sbiw	r26, 0x07	; 7
			 * The expired timer's structure elements are updated
			 * and the timer
			 * is taken out of expired timer queue
			 */
			timer_array[expired_timer_queue_head].
			next_timer_in_queue = NO_TIMER;
    16c0:	18 96       	adiw	r26, 0x08	; 8
    16c2:	1c 93       	st	X, r17
    16c4:	18 97       	sbiw	r26, 0x08	; 8
			timer_array[expired_timer_queue_head].timer_cb = NULL;
    16c6:	15 96       	adiw	r26, 0x05	; 5
    16c8:	1c 92       	st	X, r1
    16ca:	1e 92       	st	-X, r1
    16cc:	14 97       	sbiw	r26, 0x04	; 4
			timer_array[expired_timer_queue_head].param_cb = NULL;
    16ce:	17 96       	adiw	r26, 0x07	; 7
    16d0:	1c 92       	st	X, r1
    16d2:	1e 92       	st	-X, r1
    16d4:	16 97       	sbiw	r26, 0x06	; 6
			timer_array[expired_timer_queue_head].loaded = false;
    16d6:	19 96       	adiw	r26, 0x09	; 9
    16d8:	1c 92       	st	X, r1
			/*
			 * The expired timer queue head is updated with the next
			 * timer in the
			 * expired timer queue.
			 */
			expired_timer_queue_head = next_expired_timer;
    16da:	90 93 7a 04 	sts	0x047A, r25	; 0x80047a <expired_timer_queue_head>

			if (NO_TIMER == expired_timer_queue_head) {
    16de:	9f 3f       	cpi	r25, 0xFF	; 255
    16e0:	11 f4       	brne	.+4      	; 0x16e6 <sw_timer_service+0x86>
				expired_timer_queue_tail = NO_TIMER;
    16e2:	00 93 79 04 	sts	0x0479, r16	; 0x800479 <expired_timer_queue_tail>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    16e6:	2f bf       	out	0x3f, r18	; 63
			}

			cpu_irq_restore(flags);

			if (NULL != callback) {
    16e8:	30 97       	sbiw	r30, 0x00	; 0
    16ea:	11 f0       	breq	.+4      	; 0x16f0 <sw_timer_service+0x90>
				/* Callback function is called */
				callback(callback_param);
    16ec:	ca 01       	movw	r24, r20
    16ee:	19 95       	eicall
		timer_expiry_cb_t callback;
		void *callback_param;
		uint8_t next_expired_timer;

		/* Expired timer if any will be processed here */
		while (NO_TIMER != expired_timer_queue_head) {
    16f0:	80 91 7a 04 	lds	r24, 0x047A	; 0x80047a <expired_timer_queue_head>
    16f4:	8f 3f       	cpi	r24, 0xFF	; 255
    16f6:	29 f6       	brne	.-118    	; 0x1682 <sw_timer_service+0x22>
				callback(callback_param);
			}
		}
	}
#endif /* #if (TOTAL_NUMBER_OF_SW_TIMERS > 0) */
}
    16f8:	0f 90       	pop	r0
    16fa:	0f 90       	pop	r0
    16fc:	df 91       	pop	r29
    16fe:	cf 91       	pop	r28
    1700:	1f 91       	pop	r17
    1702:	0f 91       	pop	r16
    1704:	08 95       	ret

00001706 <pal_init>:
}

bool pal_is_timer_running(uint8_t timer_id)
{
	return sw_timer_is_running(timer_id);
}
    1706:	80 e0       	ldi	r24, 0x00	; 0
    1708:	08 95       	ret

0000170a <pal_task>:
 *
 * This function calls sio & timer handling functions.
 */
void pal_task(void)
{
	sw_timer_service();
    170a:	aa cf       	rjmp	.-172    	; 0x1660 <sw_timer_service>
    170c:	08 95       	ret

0000170e <bmm_buffer_init>:
 * This function initializes the buffer module.
 * This function should be called before using any other functionality
 * of buffer module.
 */
void bmm_buffer_init(void)
{
    170e:	cf 93       	push	r28
    1710:	df 93       	push	r29
	/* Initialize free buffer queue for large buffers */
#if (TOTAL_NUMBER_OF_LARGE_BUFS > 0)
    #ifdef ENABLE_QUEUE_CAPACITY
	qmm_queue_init(&free_large_buffer_q, TOTAL_NUMBER_OF_LARGE_BUFS);
    #else
	qmm_queue_init(&free_large_buffer_q);
    1712:	8d e7       	ldi	r24, 0x7D	; 125
    1714:	94 e0       	ldi	r25, 0x04	; 4
    1716:	b0 d0       	rcall	.+352    	; 0x1878 <qmm_queue_init>
	for (index = 0; index < TOTAL_NUMBER_OF_LARGE_BUFS; index++) {
		/*
		 * Initialize the buffer body pointer with address of the
		 * buffer body
		 */
		buf_header[index].body = buf_pool + (index * LARGE_BUFFER_SIZE);
    1718:	c2 e8       	ldi	r28, 0x82	; 130
    171a:	d4 e0       	ldi	r29, 0x04	; 4
    171c:	8e e8       	ldi	r24, 0x8E	; 142
    171e:	94 e0       	ldi	r25, 0x04	; 4
    1720:	99 83       	std	Y+1, r25	; 0x01
    1722:	88 83       	st	Y, r24

		/* Append the buffer to free large buffer queue */
		qmm_queue_append(&free_large_buffer_q, &buf_header[index]);
    1724:	be 01       	movw	r22, r28
    1726:	8d e7       	ldi	r24, 0x7D	; 125
    1728:	94 e0       	ldi	r25, 0x04	; 4
    172a:	ad d0       	rcall	.+346    	; 0x1886 <qmm_queue_append>
	for (index = 0; index < TOTAL_NUMBER_OF_LARGE_BUFS; index++) {
		/*
		 * Initialize the buffer body pointer with address of the
		 * buffer body
		 */
		buf_header[index].body = buf_pool + (index * LARGE_BUFFER_SIZE);
    172c:	89 e1       	ldi	r24, 0x19	; 25
    172e:	95 e0       	ldi	r25, 0x05	; 5
    1730:	9d 83       	std	Y+5, r25	; 0x05
    1732:	8c 83       	std	Y+4, r24	; 0x04

		/* Append the buffer to free large buffer queue */
		qmm_queue_append(&free_large_buffer_q, &buf_header[index]);
    1734:	66 e8       	ldi	r22, 0x86	; 134
    1736:	74 e0       	ldi	r23, 0x04	; 4
    1738:	8d e7       	ldi	r24, 0x7D	; 125
    173a:	94 e0       	ldi	r25, 0x04	; 4
    173c:	a4 d0       	rcall	.+328    	; 0x1886 <qmm_queue_append>
	for (index = 0; index < TOTAL_NUMBER_OF_LARGE_BUFS; index++) {
		/*
		 * Initialize the buffer body pointer with address of the
		 * buffer body
		 */
		buf_header[index].body = buf_pool + (index * LARGE_BUFFER_SIZE);
    173e:	84 ea       	ldi	r24, 0xA4	; 164
    1740:	95 e0       	ldi	r25, 0x05	; 5
    1742:	99 87       	std	Y+9, r25	; 0x09
    1744:	88 87       	std	Y+8, r24	; 0x08

		/* Append the buffer to free large buffer queue */
		qmm_queue_append(&free_large_buffer_q, &buf_header[index]);
    1746:	6a e8       	ldi	r22, 0x8A	; 138
    1748:	74 e0       	ldi	r23, 0x04	; 4
    174a:	8d e7       	ldi	r24, 0x7D	; 125
    174c:	94 e0       	ldi	r25, 0x04	; 4
    174e:	9b d0       	rcall	.+310    	; 0x1886 <qmm_queue_append>
		/* Append the buffer to free small buffer queue */
		qmm_queue_append(&free_small_buffer_q, &buf_header[index + \
				TOTAL_NUMBER_OF_LARGE_BUFS]);
	}
#endif
}
    1750:	df 91       	pop	r29
    1752:	cf 91       	pop	r28
    1754:	08 95       	ret

00001756 <bmm_buffer_alloc>:
			}
		}

#else /* no small buffers available at all */
	/* Allocate buffer from free large buffer queue */
	pfree_buffer = qmm_queue_remove(&free_large_buffer_q, NULL);
    1756:	60 e0       	ldi	r22, 0x00	; 0
    1758:	70 e0       	ldi	r23, 0x00	; 0
    175a:	8d e7       	ldi	r24, 0x7D	; 125
    175c:	94 e0       	ldi	r25, 0x04	; 4
    175e:	b8 c0       	rjmp	.+368    	; 0x18d0 <qmm_queue_remove>

	size = size; /* Keep compiler happy. */
#endif

		return pfree_buffer;
	}
    1760:	08 95       	ret

00001762 <bmm_buffer_free>:
	 *
	 * @param pbuffer Pointer to buffer that has to be freed.
	 */
	void bmm_buffer_free(buffer_t *pbuffer)
	{
		if (NULL == pbuffer) {
    1762:	00 97       	sbiw	r24, 0x00	; 0
    1764:	21 f0       	breq	.+8      	; 0x176e <bmm_buffer_free+0xc>
    1766:	bc 01       	movw	r22, r24
			qmm_queue_append(&free_large_buffer_q, pbuffer);
		}

#else /* no small buffers available at all */
		/* Append the buffer into free large buffer queue */
		qmm_queue_append(&free_large_buffer_q, pbuffer);
    1768:	8d e7       	ldi	r24, 0x7D	; 125
    176a:	94 e0       	ldi	r25, 0x04	; 4
    176c:	8c c0       	rjmp	.+280    	; 0x1886 <qmm_queue_append>
    176e:	08 95       	ret

00001770 <queue_read_or_remove>:
 * \ingroup group_qmm
 */
static buffer_t *queue_read_or_remove(queue_t *q,
		buffer_mode_t mode,
		search_t *search)
{
    1770:	8f 92       	push	r8
    1772:	9f 92       	push	r9
    1774:	af 92       	push	r10
    1776:	bf 92       	push	r11
    1778:	cf 92       	push	r12
    177a:	df 92       	push	r13
    177c:	ef 92       	push	r14
    177e:	ff 92       	push	r15
    1780:	0f 93       	push	r16
    1782:	1f 93       	push	r17
    1784:	cf 93       	push	r28
    1786:	df 93       	push	r29
    1788:	1f 92       	push	r1
    178a:	cd b7       	in	r28, 0x3d	; 61
    178c:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    178e:	2f b7       	in	r18, 0x3f	; 63
    1790:	29 83       	std	Y+1, r18	; 0x01
	cpu_irq_disable();
    1792:	f8 94       	cli
	return flags;
    1794:	89 80       	ldd	r8, Y+1	; 0x01
	buffer_t *buffer_current = NULL;
	buffer_t *buffer_previous;

	ENTER_CRITICAL_REGION();
	/* Check whether queue is empty */
	if (q->size != 0) {
    1796:	dc 01       	movw	r26, r24
    1798:	14 96       	adiw	r26, 0x04	; 4
    179a:	2c 91       	ld	r18, X
    179c:	22 23       	and	r18, r18
    179e:	09 f4       	brne	.+2      	; 0x17a2 <queue_read_or_remove+0x32>
    17a0:	56 c0       	rjmp	.+172    	; 0x184e <queue_read_or_remove+0xde>
    17a2:	7a 01       	movw	r14, r20
    17a4:	96 2e       	mov	r9, r22
    17a6:	5c 01       	movw	r10, r24
		buffer_current = q->head;
    17a8:	fc 01       	movw	r30, r24
    17aa:	00 81       	ld	r16, Z
    17ac:	11 81       	ldd	r17, Z+1	; 0x01
		buffer_previous = q->head;

		/* First get buffer matching with criteria */
		if (NULL != search) {
    17ae:	45 2b       	or	r20, r21
    17b0:	e1 f0       	breq	.+56     	; 0x17ea <queue_read_or_remove+0x7a>
			uint8_t match;
			/* Search for all buffers in the queue */
			while (NULL != buffer_current) {
    17b2:	01 15       	cp	r16, r1
    17b4:	11 05       	cpc	r17, r1
    17b6:	09 f4       	brne	.+2      	; 0x17ba <queue_read_or_remove+0x4a>
    17b8:	4d c0       	rjmp	.+154    	; 0x1854 <queue_read_or_remove+0xe4>
    17ba:	68 01       	movw	r12, r16
    17bc:	01 c0       	rjmp	.+2      	; 0x17c0 <queue_read_or_remove+0x50>
					/* Break, if search criteria matches */
					break;
				}

				buffer_previous = buffer_current;
				buffer_current = buffer_current->next;
    17be:	89 01       	movw	r16, r18
		/* First get buffer matching with criteria */
		if (NULL != search) {
			uint8_t match;
			/* Search for all buffers in the queue */
			while (NULL != buffer_current) {
				match = search->criteria_func(
    17c0:	d7 01       	movw	r26, r14
    17c2:	12 96       	adiw	r26, 0x02	; 2
    17c4:	6d 91       	ld	r22, X+
    17c6:	7c 91       	ld	r23, X
    17c8:	13 97       	sbiw	r26, 0x03	; 3
    17ca:	ed 91       	ld	r30, X+
    17cc:	fc 91       	ld	r31, X
    17ce:	d8 01       	movw	r26, r16
    17d0:	8d 91       	ld	r24, X+
    17d2:	9c 91       	ld	r25, X
    17d4:	19 95       	eicall
						(void *)buffer_current->body,
						search->handle);

				if (match) {
    17d6:	81 11       	cpse	r24, r1
    17d8:	09 c0       	rjmp	.+18     	; 0x17ec <queue_read_or_remove+0x7c>
					/* Break, if search criteria matches */
					break;
				}

				buffer_previous = buffer_current;
				buffer_current = buffer_current->next;
    17da:	f8 01       	movw	r30, r16
    17dc:	22 81       	ldd	r18, Z+2	; 0x02
    17de:	33 81       	ldd	r19, Z+3	; 0x03
    17e0:	68 01       	movw	r12, r16

		/* First get buffer matching with criteria */
		if (NULL != search) {
			uint8_t match;
			/* Search for all buffers in the queue */
			while (NULL != buffer_current) {
    17e2:	21 15       	cp	r18, r1
    17e4:	31 05       	cpc	r19, r1
    17e6:	59 f7       	brne	.-42     	; 0x17be <queue_read_or_remove+0x4e>
    17e8:	35 c0       	rjmp	.+106    	; 0x1854 <queue_read_or_remove+0xe4>

	ENTER_CRITICAL_REGION();
	/* Check whether queue is empty */
	if (q->size != 0) {
		buffer_current = q->head;
		buffer_previous = q->head;
    17ea:	68 01       	movw	r12, r16
				buffer_current = buffer_current->next;
			}
		}

		/* Buffer matching with search criteria found */
		if (NULL != buffer_current) {
    17ec:	01 15       	cp	r16, r1
    17ee:	11 05       	cpc	r17, r1
    17f0:	99 f1       	breq	.+102    	; 0x1858 <queue_read_or_remove+0xe8>
			/* Remove buffer from the queue */
			if (REMOVE_MODE == mode) {
    17f2:	91 10       	cpse	r9, r1
    17f4:	31 c0       	rjmp	.+98     	; 0x1858 <queue_read_or_remove+0xe8>
				/* Update head if buffer removed is first node
				**/
				if (buffer_current == q->head) {
    17f6:	d5 01       	movw	r26, r10
    17f8:	8d 91       	ld	r24, X+
    17fa:	9c 91       	ld	r25, X
    17fc:	11 97       	sbiw	r26, 0x01	; 1
    17fe:	08 17       	cp	r16, r24
    1800:	19 07       	cpc	r17, r25
    1802:	31 f4       	brne	.+12     	; 0x1810 <queue_read_or_remove+0xa0>
					q->head = buffer_current->next;
    1804:	f8 01       	movw	r30, r16
    1806:	82 81       	ldd	r24, Z+2	; 0x02
    1808:	93 81       	ldd	r25, Z+3	; 0x03
    180a:	8d 93       	st	X+, r24
    180c:	9c 93       	st	X, r25
    180e:	08 c0       	rjmp	.+16     	; 0x1820 <queue_read_or_remove+0xb0>
				} else {
					/* Update the link by removing the
					 * buffer */
					buffer_previous->next
						= buffer_current->next;
    1810:	d8 01       	movw	r26, r16
    1812:	12 96       	adiw	r26, 0x02	; 2
    1814:	8d 91       	ld	r24, X+
    1816:	9c 91       	ld	r25, X
    1818:	13 97       	sbiw	r26, 0x03	; 3
    181a:	f6 01       	movw	r30, r12
    181c:	93 83       	std	Z+3, r25	; 0x03
    181e:	82 83       	std	Z+2, r24	; 0x02
				}

				/* Update tail if buffer removed is last node */
				if (buffer_current == q->tail) {
    1820:	d5 01       	movw	r26, r10
    1822:	12 96       	adiw	r26, 0x02	; 2
    1824:	8d 91       	ld	r24, X+
    1826:	9c 91       	ld	r25, X
    1828:	13 97       	sbiw	r26, 0x03	; 3
    182a:	08 17       	cp	r16, r24
    182c:	19 07       	cpc	r17, r25
    182e:	21 f4       	brne	.+8      	; 0x1838 <queue_read_or_remove+0xc8>
					q->tail = buffer_previous;
    1830:	13 96       	adiw	r26, 0x03	; 3
    1832:	dc 92       	st	X, r13
    1834:	ce 92       	st	-X, r12
    1836:	12 97       	sbiw	r26, 0x02	; 2
				}

				/* Update size */
				q->size--;
    1838:	f5 01       	movw	r30, r10
    183a:	84 81       	ldd	r24, Z+4	; 0x04
    183c:	81 50       	subi	r24, 0x01	; 1
    183e:	84 83       	std	Z+4, r24	; 0x04

				if (NULL == q->head) {
    1840:	80 81       	ld	r24, Z
    1842:	91 81       	ldd	r25, Z+1	; 0x01
    1844:	89 2b       	or	r24, r25
    1846:	41 f4       	brne	.+16     	; 0x1858 <queue_read_or_remove+0xe8>
					q->tail = NULL;
    1848:	13 82       	std	Z+3, r1	; 0x03
    184a:	12 82       	std	Z+2, r1	; 0x02
    184c:	05 c0       	rjmp	.+10     	; 0x1858 <queue_read_or_remove+0xe8>
 */
static buffer_t *queue_read_or_remove(queue_t *q,
		buffer_mode_t mode,
		search_t *search)
{
	buffer_t *buffer_current = NULL;
    184e:	00 e0       	ldi	r16, 0x00	; 0
    1850:	10 e0       	ldi	r17, 0x00	; 0
    1852:	02 c0       	rjmp	.+4      	; 0x1858 <queue_read_or_remove+0xe8>
    1854:	00 e0       	ldi	r16, 0x00	; 0
    1856:	10 e0       	ldi	r17, 0x00	; 0
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1858:	8f be       	out	0x3f, r8	; 63
	LEAVE_CRITICAL_REGION();

	/* Return the buffer. note that pointer to header of buffer is returned
	**/
	return (buffer_current);
} /* queue_read_or_remove */
    185a:	c8 01       	movw	r24, r16
    185c:	0f 90       	pop	r0
    185e:	df 91       	pop	r29
    1860:	cf 91       	pop	r28
    1862:	1f 91       	pop	r17
    1864:	0f 91       	pop	r16
    1866:	ff 90       	pop	r15
    1868:	ef 90       	pop	r14
    186a:	df 90       	pop	r13
    186c:	cf 90       	pop	r12
    186e:	bf 90       	pop	r11
    1870:	af 90       	pop	r10
    1872:	9f 90       	pop	r9
    1874:	8f 90       	pop	r8
    1876:	08 95       	ret

00001878 <qmm_queue_init>:
#ifdef ENABLE_QUEUE_CAPACITY
void qmm_queue_init(queue_t *q, uint8_t capacity)
#else
void qmm_queue_init(queue_t *q)
#endif  /* ENABLE_QUEUE_CAPACITY */
{
    1878:	fc 01       	movw	r30, r24
	q->head = NULL;
    187a:	11 82       	std	Z+1, r1	; 0x01
    187c:	10 82       	st	Z, r1
	q->tail = NULL;
    187e:	13 82       	std	Z+3, r1	; 0x03
    1880:	12 82       	std	Z+2, r1	; 0x02
	q->size = 0;
    1882:	14 82       	std	Z+4, r1	; 0x04
    1884:	08 95       	ret

00001886 <qmm_queue_append>:
#ifdef ENABLE_QUEUE_CAPACITY
retval_t qmm_queue_append(queue_t *q, buffer_t *buf)
#else
void qmm_queue_append(queue_t *q, buffer_t *buf)
#endif  /* ENABLE_QUEUE_CAPACITY */
{
    1886:	cf 93       	push	r28
    1888:	df 93       	push	r29
    188a:	1f 92       	push	r1
    188c:	cd b7       	in	r28, 0x3d	; 61
    188e:	de b7       	in	r29, 0x3e	; 62
    1890:	fc 01       	movw	r30, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1892:	8f b7       	in	r24, 0x3f	; 63
    1894:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    1896:	f8 94       	cli
	return flags;
    1898:	99 81       	ldd	r25, Y+1	; 0x01
		status = QUEUE_FULL;
	} else
#endif  /* ENABLE_QUEUE_CAPACITY */
	{
		/* Check whether queue is empty */
		if (q->size == 0) {
    189a:	84 81       	ldd	r24, Z+4	; 0x04
    189c:	81 11       	cpse	r24, r1
    189e:	03 c0       	rjmp	.+6      	; 0x18a6 <qmm_queue_append+0x20>
			/* Add the buffer at the head */
			q->head = buf;
    18a0:	71 83       	std	Z+1, r23	; 0x01
    18a2:	60 83       	st	Z, r22
    18a4:	06 c0       	rjmp	.+12     	; 0x18b2 <qmm_queue_append+0x2c>
		} else {
			/* Add the buffer at the end */
			q->tail->next = buf;
    18a6:	a2 81       	ldd	r26, Z+2	; 0x02
    18a8:	b3 81       	ldd	r27, Z+3	; 0x03
    18aa:	13 96       	adiw	r26, 0x03	; 3
    18ac:	7c 93       	st	X, r23
    18ae:	6e 93       	st	-X, r22
    18b0:	12 97       	sbiw	r26, 0x02	; 2
		}

		/* Update the list */
		q->tail = buf;
    18b2:	73 83       	std	Z+3, r23	; 0x03
    18b4:	62 83       	std	Z+2, r22	; 0x02

		/* Terminate the list */
		buf->next = NULL;
    18b6:	db 01       	movw	r26, r22
    18b8:	13 96       	adiw	r26, 0x03	; 3
    18ba:	1c 92       	st	X, r1
    18bc:	1e 92       	st	-X, r1
    18be:	12 97       	sbiw	r26, 0x02	; 2

		/* Update size */
		q->size++;
    18c0:	84 81       	ldd	r24, Z+4	; 0x04
    18c2:	8f 5f       	subi	r24, 0xFF	; 255
    18c4:	84 83       	std	Z+4, r24	; 0x04
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    18c6:	9f bf       	out	0x3f, r25	; 63
	LEAVE_CRITICAL_REGION();

#ifdef ENABLE_QUEUE_CAPACITY
	return (status);
#endif
} /* qmm_queue_append */
    18c8:	0f 90       	pop	r0
    18ca:	df 91       	pop	r29
    18cc:	cf 91       	pop	r28
    18ce:	08 95       	ret

000018d0 <qmm_queue_remove>:
 *
 * @return Pointer to the buffer header, if the buffer is
 * successfully removed, NULL otherwise.
 */
buffer_t *qmm_queue_remove(queue_t *q, search_t *search)
{
    18d0:	ab 01       	movw	r20, r22
	return (queue_read_or_remove(q, REMOVE_MODE, search));
    18d2:	60 e0       	ldi	r22, 0x00	; 0
    18d4:	4d cf       	rjmp	.-358    	; 0x1770 <queue_read_or_remove>
}
    18d6:	08 95       	ret

000018d8 <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
    18d8:	04 c0       	rjmp	.+8      	; 0x18e2 <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
    18da:	61 50       	subi	r22, 0x01	; 1
    18dc:	71 09       	sbc	r23, r1
    18de:	81 09       	sbc	r24, r1
    18e0:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
    18e2:	61 15       	cp	r22, r1
    18e4:	71 05       	cpc	r23, r1
    18e6:	81 05       	cpc	r24, r1
    18e8:	91 05       	cpc	r25, r1
    18ea:	b9 f7       	brne	.-18     	; 0x18da <__portable_avr_delay_cycles+0x2>
    18ec:	08 95       	ret

000018ee <switch_pll_on>:
/**
 * \brief Switches the PLL on
 * \ingroup group_tal_state_machine_rfr2
 */
static void switch_pll_on(void)
{
    18ee:	0f 93       	push	r16
    18f0:	1f 93       	push	r17
    18f2:	cf 93       	push	r28
	trx_irq_reason_t irq_status;
	uint8_t poll_counter = 0;

	/* Check if trx is in TRX_OFF; only from PLL_ON the following procedure
	 * is applicable */
	if (trx_bit_read(SR_TRX_STATUS) != TRX_OFF) {
    18f4:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7c0141>
    18f8:	8f 71       	andi	r24, 0x1F	; 31
    18fa:	88 30       	cpi	r24, 0x08	; 8
    18fc:	a1 f4       	brne	.+40     	; 0x1926 <switch_pll_on+0x38>
				"Switch PLL_ON failed, because trx is not in TRX_OFF" ==
				0);
		return;
	}

	IRQ_STATUS = _BV(PLL_LOCK); /* clear PLL lock bit */
    18fe:	81 e0       	ldi	r24, 0x01	; 1
    1900:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <__TEXT_REGION_LENGTH__+0x7c014f>
	/* Switch PLL on */
	trx_reg_write(RG_TRX_STATE, CMD_PLL_ON);
    1904:	89 e0       	ldi	r24, 0x09	; 9
    1906:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
    190a:	c3 e0       	ldi	r28, 0x03	; 3

	/* Check if PLL has been locked. */
	do {
		irq_status = (trx_irq_reason_t)trx_reg_read(RG_IRQ_STATUS);
    190c:	0f e4       	ldi	r16, 0x4F	; 79
    190e:	11 e0       	ldi	r17, 0x01	; 1
    1910:	f8 01       	movw	r30, r16
    1912:	80 81       	ld	r24, Z

		if (irq_status & TRX_IRQ_PLL_LOCK) {
    1914:	80 fd       	sbrc	r24, 0
    1916:	07 c0       	rjmp	.+14     	; 0x1926 <switch_pll_on+0x38>
			return; /* PLL is locked now */
		}

		/* Wait a time interval of typical value for timer TR4. */
		pal_timer_delay(TRX_OFF_TO_PLL_ON_TIME_US);
    1918:	63 e9       	ldi	r22, 0x93	; 147
    191a:	70 e0       	ldi	r23, 0x00	; 0
    191c:	80 e0       	ldi	r24, 0x00	; 0
    191e:	90 e0       	ldi	r25, 0x00	; 0
    1920:	db df       	rcall	.-74     	; 0x18d8 <__portable_avr_delay_cycles>
    1922:	c1 50       	subi	r28, 0x01	; 1

		poll_counter++;
	} while (poll_counter < PLL_LOCK_ATTEMPTS);
    1924:	a9 f7       	brne	.-22     	; 0x1910 <switch_pll_on+0x22>

#if (_DEBUG_ > 0)
	Assert("PLL switch failed" == 0);
#endif
}
    1926:	cf 91       	pop	r28
    1928:	1f 91       	pop	r17
    192a:	0f 91       	pop	r16
    192c:	08 95       	ret

0000192e <set_trx_state>:
 * \param trx_cmd needs to be one of the trx commands
 *
 * \return current trx state
 */
tal_trx_status_t set_trx_state(trx_cmd_t trx_cmd)
{
    192e:	1f 93       	push	r17
    1930:	cf 93       	push	r28
    1932:	df 93       	push	r29
    1934:	1f 92       	push	r1
    1936:	cd b7       	in	r28, 0x3d	; 61
    1938:	de b7       	in	r29, 0x3e	; 62
    193a:	18 2f       	mov	r17, r24
	if (tal_trx_status == TRX_SLEEP) {
    193c:	80 91 9c 08 	lds	r24, 0x089C	; 0x80089c <tal_trx_status>
    1940:	8f 30       	cpi	r24, 0x0F	; 15
    1942:	29 f5       	brne	.+74     	; 0x198e <set_trx_state+0x60>
		 * Once the TRX is awake, the original state of the global
		 * interrupts
		 * will be restored.
		 */
		/* Reset wake-up interrupt flag. */
		if (CMD_SLEEP == trx_cmd) {
    1944:	1f 30       	cpi	r17, 0x0F	; 15
    1946:	09 f4       	brne	.+2      	; 0x194a <set_trx_state+0x1c>
    1948:	2e c1       	rjmp	.+604    	; 0x1ba6 <set_trx_state+0x278>
			return TRX_SLEEP;
		}

		tal_awake_end_flag = false;
    194a:	10 92 a0 08 	sts	0x08A0, r1	; 0x8008a0 <tal_awake_end_flag>
		/* Set callback function for the awake interrupt. */
		pal_trx_irq_init_awake((FUNC_PTR)trx_awake_handler_cb);
    194e:	80 eb       	ldi	r24, 0xB0	; 176
    1950:	90 e1       	ldi	r25, 0x10	; 16
    1952:	c5 d2       	rcall	.+1418   	; 0x1ede <pal_trx_irq_init_awake>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1954:	8f b7       	in	r24, 0x3f	; 63
    1956:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    1958:	f8 94       	cli
	return flags;
    195a:	99 81       	ldd	r25, Y+1	; 0x01
		/* Save current state of global interrupts. */
		ENTER_CRITICAL_REGION();
		/* Force enabling of global interrupts. */
		ENABLE_GLOBAL_IRQ();
    195c:	78 94       	sei
		/* Leave trx sleep mode. */
		TRX_SLP_TR_LOW();
    195e:	e9 e3       	ldi	r30, 0x39	; 57
    1960:	f1 e0       	ldi	r31, 0x01	; 1
    1962:	80 81       	ld	r24, Z
    1964:	8d 7f       	andi	r24, 0xFD	; 253
    1966:	80 83       	st	Z, r24
		/* Poll wake-up interrupt flag until set within ISR. */
		while (!tal_awake_end_flag) {
    1968:	80 91 a0 08 	lds	r24, 0x08A0	; 0x8008a0 <tal_awake_end_flag>
    196c:	88 23       	and	r24, r24
    196e:	e1 f3       	breq	.-8      	; 0x1968 <set_trx_state+0x3a>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1970:	9f bf       	out	0x3f, r25	; 63
		}
		/* Restore original state of global interrupts. */
		LEAVE_CRITICAL_REGION();
		/* Clear existing interrupts */
		trx_reg_write(RG_IRQ_STATUS, 0xFF);
    1972:	8f ef       	ldi	r24, 0xFF	; 255
    1974:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <__TEXT_REGION_LENGTH__+0x7c014f>
		/* Re-enable TRX_END interrupt */
		trx_reg_write(RG_IRQ_MASK, TRX_IRQ_DEFAULT);
    1978:	88 e4       	ldi	r24, 0x48	; 72
    197a:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <__TEXT_REGION_LENGTH__+0x7c014e>
#if (ANTENNA_DIVERSITY == 1)
		/* Enable antenna diversity. */
		trx_bit_write(SR_ANT_EXT_SW_EN, ANT_EXT_SW_ENABLE);
#endif

		if ((trx_cmd == CMD_TRX_OFF) ||
    197e:	18 30       	cpi	r17, 0x08	; 8
    1980:	11 f0       	breq	.+4      	; 0x1986 <set_trx_state+0x58>
    1982:	13 30       	cpi	r17, 0x03	; 3
    1984:	21 f4       	brne	.+8      	; 0x198e <set_trx_state+0x60>
				(trx_cmd == CMD_FORCE_TRX_OFF)) {
			tal_trx_status = TRX_OFF;
    1986:	88 e0       	ldi	r24, 0x08	; 8
    1988:	80 93 9c 08 	sts	0x089C, r24	; 0x80089c <tal_trx_status>
			return TRX_OFF;
    198c:	0c c1       	rjmp	.+536    	; 0x1ba6 <set_trx_state+0x278>
		}
	}

	switch (trx_cmd) { /* requested state */
    198e:	81 2f       	mov	r24, r17
    1990:	90 e0       	ldi	r25, 0x00	; 0
    1992:	fc 01       	movw	r30, r24
    1994:	33 97       	sbiw	r30, 0x03	; 3
    1996:	e7 31       	cpi	r30, 0x17	; 23
    1998:	f1 05       	cpc	r31, r1
    199a:	08 f0       	brcs	.+2      	; 0x199e <set_trx_state+0x70>
    199c:	55 c0       	rjmp	.+170    	; 0x1a48 <set_trx_state+0x11a>
    199e:	88 27       	eor	r24, r24
    19a0:	e6 56       	subi	r30, 0x66	; 102
    19a2:	ff 4f       	sbci	r31, 0xFF	; 255
    19a4:	8f 4f       	sbci	r24, 0xFF	; 255
    19a6:	0c 94 52 19 	jmp	0x32a4	; 0x32a4 <__tablejump2__>
	case CMD_SLEEP:
		trx_reg_write(RG_TRX_STATE, CMD_FORCE_TRX_OFF);
    19aa:	83 e0       	ldi	r24, 0x03	; 3
    19ac:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
			uint16_t rand_value;

			/*
			 * Init the SEED value of the CSMA backoff algorithm.
			 */
			rand_value = (uint16_t)rand();
    19b0:	0e 94 d8 19 	call	0x33b0	; 0x33b0 <rand>
			trx_reg_write(RG_CSMA_SEED_0, (uint8_t)rand_value);
    19b4:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <__TEXT_REGION_LENGTH__+0x7c016d>
			trx_bit_write(SR_CSMA_SEED_1,
    19b8:	ee e6       	ldi	r30, 0x6E	; 110
    19ba:	f1 e0       	ldi	r31, 0x01	; 1
    19bc:	80 81       	ld	r24, Z
    19be:	97 70       	andi	r25, 0x07	; 7
    19c0:	88 7f       	andi	r24, 0xF8	; 248
    19c2:	89 2b       	or	r24, r25
    19c4:	80 83       	st	Z, r24

		/*
		 * Clear existing interrupts to have clear interrupt flags
		 * during wake-up.
		 */
		trx_reg_write(RG_IRQ_STATUS, 0xFF);
    19c6:	8f ef       	ldi	r24, 0xFF	; 255
    19c8:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <__TEXT_REGION_LENGTH__+0x7c014f>

		/*
		 * Enable Awake_end interrupt.
		 * This is used for save wake-up from sleep later.
		 */
		trx_reg_write(RG_IRQ_MASK, TRX_IRQ_AWAKE_ONLY);
    19cc:	80 e8       	ldi	r24, 0x80	; 128
    19ce:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <__TEXT_REGION_LENGTH__+0x7c014e>

		PAL_WAIT_1_US();
    19d2:	62 e0       	ldi	r22, 0x02	; 2
    19d4:	70 e0       	ldi	r23, 0x00	; 0
    19d6:	80 e0       	ldi	r24, 0x00	; 0
    19d8:	90 e0       	ldi	r25, 0x00	; 0
    19da:	7e df       	rcall	.-260    	; 0x18d8 <__portable_avr_delay_cycles>
		TRX_SLP_TR_HIGH();
    19dc:	e9 e3       	ldi	r30, 0x39	; 57
    19de:	f1 e0       	ldi	r31, 0x01	; 1
    19e0:	80 81       	ld	r24, Z
    19e2:	82 60       	ori	r24, 0x02	; 2
    19e4:	80 83       	st	Z, r24
		pal_timer_delay(TRX_OFF_TO_SLEEP_TIME_CLKM_CYCLES);
    19e6:	6f e2       	ldi	r22, 0x2F	; 47
    19e8:	70 e0       	ldi	r23, 0x00	; 0
    19ea:	80 e0       	ldi	r24, 0x00	; 0
    19ec:	90 e0       	ldi	r25, 0x00	; 0
    19ee:	74 df       	rcall	.-280    	; 0x18d8 <__portable_avr_delay_cycles>
		tal_trx_status = TRX_SLEEP;
    19f0:	8f e0       	ldi	r24, 0x0F	; 15
    19f2:	80 93 9c 08 	sts	0x089C, r24	; 0x80089c <tal_trx_status>
		return TRX_SLEEP; /* transceiver register cannot be read during
    19f6:	d7 c0       	rjmp	.+430    	; 0x1ba6 <set_trx_state+0x278>
		                   * TRX_SLEEP */

	case CMD_TRX_OFF:
		switch (tal_trx_status) {
    19f8:	80 91 9c 08 	lds	r24, 0x089C	; 0x80089c <tal_trx_status>
    19fc:	88 30       	cpi	r24, 0x08	; 8
    19fe:	21 f1       	breq	.+72     	; 0x1a48 <set_trx_state+0x11a>
		case TRX_OFF:
			break;

		default:
			trx_reg_write(RG_TRX_STATE, CMD_TRX_OFF);
    1a00:	88 e0       	ldi	r24, 0x08	; 8
    1a02:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
			PAL_WAIT_1_US();
    1a06:	62 e0       	ldi	r22, 0x02	; 2
    1a08:	70 e0       	ldi	r23, 0x00	; 0
    1a0a:	80 e0       	ldi	r24, 0x00	; 0
    1a0c:	90 e0       	ldi	r25, 0x00	; 0
    1a0e:	64 df       	rcall	.-312    	; 0x18d8 <__portable_avr_delay_cycles>
			break;
    1a10:	1b c0       	rjmp	.+54     	; 0x1a48 <set_trx_state+0x11a>
		}
		break;

	case CMD_FORCE_TRX_OFF:
		switch (tal_trx_status) {
    1a12:	80 91 9c 08 	lds	r24, 0x089C	; 0x80089c <tal_trx_status>
    1a16:	88 30       	cpi	r24, 0x08	; 8
    1a18:	b9 f0       	breq	.+46     	; 0x1a48 <set_trx_state+0x11a>
		case TRX_OFF:
			break;

		default:
			trx_reg_write(RG_TRX_STATE, CMD_FORCE_TRX_OFF);
    1a1a:	83 e0       	ldi	r24, 0x03	; 3
    1a1c:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
			PAL_WAIT_1_US();
    1a20:	62 e0       	ldi	r22, 0x02	; 2
    1a22:	70 e0       	ldi	r23, 0x00	; 0
    1a24:	80 e0       	ldi	r24, 0x00	; 0
    1a26:	90 e0       	ldi	r25, 0x00	; 0
    1a28:	57 df       	rcall	.-338    	; 0x18d8 <__portable_avr_delay_cycles>
			break;
    1a2a:	0e c0       	rjmp	.+28     	; 0x1a48 <set_trx_state+0x11a>
		}
		break;

	case CMD_PLL_ON:
		switch (tal_trx_status) {
    1a2c:	80 91 9c 08 	lds	r24, 0x089C	; 0x80089c <tal_trx_status>
    1a30:	88 30       	cpi	r24, 0x08	; 8
    1a32:	49 f0       	breq	.+18     	; 0x1a46 <set_trx_state+0x118>
    1a34:	18 f4       	brcc	.+6      	; 0x1a3c <set_trx_state+0x10e>
    1a36:	86 30       	cpi	r24, 0x06	; 6
    1a38:	39 f4       	brne	.+14     	; 0x1a48 <set_trx_state+0x11a>
    1a3a:	09 c0       	rjmp	.+18     	; 0x1a4e <set_trx_state+0x120>
    1a3c:	86 31       	cpi	r24, 0x16	; 22
    1a3e:	39 f0       	breq	.+14     	; 0x1a4e <set_trx_state+0x120>
    1a40:	89 31       	cpi	r24, 0x19	; 25
    1a42:	11 f4       	brne	.+4      	; 0x1a48 <set_trx_state+0x11a>
		case PLL_ON:
			break;

		case TRX_OFF:
			switch_pll_on();
    1a44:	04 c0       	rjmp	.+8      	; 0x1a4e <set_trx_state+0x120>
    1a46:	53 df       	rcall	.-346    	; 0x18ee <switch_pll_on>
		Assert("trx command not handled" == 0);
		break;
	}

	do {
		tal_trx_status = (tal_trx_status_t)trx_bit_read(
    1a48:	e1 e4       	ldi	r30, 0x41	; 65
    1a4a:	f1 e0       	ldi	r31, 0x01	; 1
    1a4c:	a6 c0       	rjmp	.+332    	; 0x1b9a <set_trx_state+0x26c>
			break;

		case RX_ON:
		case RX_AACK_ON:
		case TX_ARET_ON:
			trx_reg_write(RG_TRX_STATE, CMD_PLL_ON);
    1a4e:	89 e0       	ldi	r24, 0x09	; 9
    1a50:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
			PAL_WAIT_1_US();
    1a54:	62 e0       	ldi	r22, 0x02	; 2
    1a56:	70 e0       	ldi	r23, 0x00	; 0
    1a58:	80 e0       	ldi	r24, 0x00	; 0
    1a5a:	90 e0       	ldi	r25, 0x00	; 0
    1a5c:	3d df       	rcall	.-390    	; 0x18d8 <__portable_avr_delay_cycles>
			break;
    1a5e:	f4 cf       	rjmp	.-24     	; 0x1a48 <set_trx_state+0x11a>
			break;
		}
		break;

	case CMD_FORCE_PLL_ON:
		switch (tal_trx_status) {
    1a60:	80 91 9c 08 	lds	r24, 0x089C	; 0x80089c <tal_trx_status>
    1a64:	88 30       	cpi	r24, 0x08	; 8
    1a66:	19 f0       	breq	.+6      	; 0x1a6e <set_trx_state+0x140>
    1a68:	89 30       	cpi	r24, 0x09	; 9
    1a6a:	71 f3       	breq	.-36     	; 0x1a48 <set_trx_state+0x11a>
		case TRX_OFF:
			switch_pll_on();
    1a6c:	02 c0       	rjmp	.+4      	; 0x1a72 <set_trx_state+0x144>
    1a6e:	3f df       	rcall	.-386    	; 0x18ee <switch_pll_on>
			break;
    1a70:	eb cf       	rjmp	.-42     	; 0x1a48 <set_trx_state+0x11a>

		case PLL_ON:
			break;

		default:
			trx_reg_write(RG_TRX_STATE, CMD_FORCE_PLL_ON);
    1a72:	84 e0       	ldi	r24, 0x04	; 4
    1a74:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
			break;
    1a78:	e7 cf       	rjmp	.-50     	; 0x1a48 <set_trx_state+0x11a>
		}
		break;

	case CMD_RX_ON:
		switch (tal_trx_status) {
    1a7a:	80 91 9c 08 	lds	r24, 0x089C	; 0x80089c <tal_trx_status>
    1a7e:	89 30       	cpi	r24, 0x09	; 9
    1a80:	41 f0       	breq	.+16     	; 0x1a92 <set_trx_state+0x164>
    1a82:	18 f4       	brcc	.+6      	; 0x1a8a <set_trx_state+0x15c>
    1a84:	88 30       	cpi	r24, 0x08	; 8
    1a86:	71 f0       	breq	.+28     	; 0x1aa4 <set_trx_state+0x176>
    1a88:	df cf       	rjmp	.-66     	; 0x1a48 <set_trx_state+0x11a>
    1a8a:	86 31       	cpi	r24, 0x16	; 22
    1a8c:	11 f0       	breq	.+4      	; 0x1a92 <set_trx_state+0x164>
    1a8e:	89 31       	cpi	r24, 0x19	; 25
			break;

		case PLL_ON:
		case RX_AACK_ON:
		case TX_ARET_ON:
			trx_reg_write(RG_TRX_STATE, CMD_RX_ON);
    1a90:	d9 f6       	brne	.-74     	; 0x1a48 <set_trx_state+0x11a>
    1a92:	86 e0       	ldi	r24, 0x06	; 6
			PAL_WAIT_1_US();
    1a94:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
    1a98:	62 e0       	ldi	r22, 0x02	; 2
    1a9a:	70 e0       	ldi	r23, 0x00	; 0
    1a9c:	80 e0       	ldi	r24, 0x00	; 0
    1a9e:	90 e0       	ldi	r25, 0x00	; 0
			break;

		case TRX_OFF:
			switch_pll_on();
    1aa0:	1b df       	rcall	.-458    	; 0x18d8 <__portable_avr_delay_cycles>
    1aa2:	d2 cf       	rjmp	.-92     	; 0x1a48 <set_trx_state+0x11a>
			trx_reg_write(RG_TRX_STATE, CMD_RX_ON);
    1aa4:	24 df       	rcall	.-440    	; 0x18ee <switch_pll_on>
    1aa6:	86 e0       	ldi	r24, 0x06	; 6
    1aa8:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
			PAL_WAIT_1_US();
    1aac:	62 e0       	ldi	r22, 0x02	; 2
    1aae:	70 e0       	ldi	r23, 0x00	; 0
    1ab0:	80 e0       	ldi	r24, 0x00	; 0
    1ab2:	90 e0       	ldi	r25, 0x00	; 0
    1ab4:	11 df       	rcall	.-478    	; 0x18d8 <__portable_avr_delay_cycles>
			break;
    1ab6:	c8 cf       	rjmp	.-112    	; 0x1a48 <set_trx_state+0x11a>
			break;
		}
		break;

	case CMD_RX_AACK_ON:
		switch (tal_trx_status) {
    1ab8:	80 91 9c 08 	lds	r24, 0x089C	; 0x80089c <tal_trx_status>
    1abc:	88 30       	cpi	r24, 0x08	; 8
    1abe:	91 f0       	breq	.+36     	; 0x1ae4 <set_trx_state+0x1b6>
    1ac0:	18 f4       	brcc	.+6      	; 0x1ac8 <set_trx_state+0x19a>
    1ac2:	86 30       	cpi	r24, 0x06	; 6
    1ac4:	c9 f0       	breq	.+50     	; 0x1af8 <set_trx_state+0x1ca>
    1ac6:	c0 cf       	rjmp	.-128    	; 0x1a48 <set_trx_state+0x11a>
    1ac8:	89 30       	cpi	r24, 0x09	; 9
    1aca:	19 f0       	breq	.+6      	; 0x1ad2 <set_trx_state+0x1a4>
    1acc:	89 31       	cpi	r24, 0x19	; 25
		case RX_AACK_ON:
			break;

		case TX_ARET_ON:
		case PLL_ON:
			trx_reg_write(RG_TRX_STATE, CMD_RX_AACK_ON);
    1ace:	09 f0       	breq	.+2      	; 0x1ad2 <set_trx_state+0x1a4>
    1ad0:	bb cf       	rjmp	.-138    	; 0x1a48 <set_trx_state+0x11a>
    1ad2:	86 e1       	ldi	r24, 0x16	; 22
			PAL_WAIT_1_US();
    1ad4:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
    1ad8:	62 e0       	ldi	r22, 0x02	; 2
    1ada:	70 e0       	ldi	r23, 0x00	; 0
    1adc:	80 e0       	ldi	r24, 0x00	; 0
			break;
    1ade:	90 e0       	ldi	r25, 0x00	; 0

		case TRX_OFF:
			switch_pll_on(); /* state change from TRX_OFF to
    1ae0:	fb de       	rcall	.-522    	; 0x18d8 <__portable_avr_delay_cycles>
    1ae2:	b2 cf       	rjmp	.-156    	; 0x1a48 <set_trx_state+0x11a>
			                  * RX_AACK_ON can be done directly, too
			                  **/
			trx_reg_write(RG_TRX_STATE, CMD_RX_AACK_ON);
    1ae4:	04 df       	rcall	.-504    	; 0x18ee <switch_pll_on>
    1ae6:	86 e1       	ldi	r24, 0x16	; 22
    1ae8:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
			PAL_WAIT_1_US();
    1aec:	62 e0       	ldi	r22, 0x02	; 2
    1aee:	70 e0       	ldi	r23, 0x00	; 0
    1af0:	80 e0       	ldi	r24, 0x00	; 0
    1af2:	90 e0       	ldi	r25, 0x00	; 0
			break;
    1af4:	f1 de       	rcall	.-542    	; 0x18d8 <__portable_avr_delay_cycles>

		case RX_ON:
			trx_reg_write(RG_TRX_STATE, CMD_PLL_ON);
    1af6:	a8 cf       	rjmp	.-176    	; 0x1a48 <set_trx_state+0x11a>
    1af8:	89 e0       	ldi	r24, 0x09	; 9
    1afa:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
			PAL_WAIT_1_US();
    1afe:	62 e0       	ldi	r22, 0x02	; 2
    1b00:	70 e0       	ldi	r23, 0x00	; 0
    1b02:	80 e0       	ldi	r24, 0x00	; 0
    1b04:	90 e0       	ldi	r25, 0x00	; 0
    1b06:	e8 de       	rcall	.-560    	; 0x18d8 <__portable_avr_delay_cycles>
			/* check if state change could be applied */
			tal_trx_status = (tal_trx_status_t)trx_bit_read(
    1b08:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7c0141>
    1b0c:	8f 71       	andi	r24, 0x1F	; 31
    1b0e:	80 93 9c 08 	sts	0x089C, r24	; 0x80089c <tal_trx_status>
					SR_TRX_STATUS);
			if (tal_trx_status != PLL_ON) {
    1b12:	89 30       	cpi	r24, 0x09	; 9
    1b14:	09 f0       	breq	.+2      	; 0x1b18 <set_trx_state+0x1ea>
				return tal_trx_status;
			}

			trx_reg_write(RG_TRX_STATE, CMD_RX_AACK_ON);
    1b16:	47 c0       	rjmp	.+142    	; 0x1ba6 <set_trx_state+0x278>
    1b18:	86 e1       	ldi	r24, 0x16	; 22
    1b1a:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
			PAL_WAIT_1_US();
    1b1e:	62 e0       	ldi	r22, 0x02	; 2
    1b20:	70 e0       	ldi	r23, 0x00	; 0
    1b22:	80 e0       	ldi	r24, 0x00	; 0
    1b24:	90 e0       	ldi	r25, 0x00	; 0
    1b26:	d8 de       	rcall	.-592    	; 0x18d8 <__portable_avr_delay_cycles>
			break;
    1b28:	8f cf       	rjmp	.-226    	; 0x1a48 <set_trx_state+0x11a>
			break;
		}
		break;

	case CMD_TX_ARET_ON:
		switch (tal_trx_status) {
    1b2a:	80 91 9c 08 	lds	r24, 0x089C	; 0x80089c <tal_trx_status>
    1b2e:	88 30       	cpi	r24, 0x08	; 8
    1b30:	51 f1       	breq	.+84     	; 0x1b86 <set_trx_state+0x258>
    1b32:	18 f4       	brcc	.+6      	; 0x1b3a <set_trx_state+0x20c>
    1b34:	86 30       	cpi	r24, 0x06	; 6
    1b36:	79 f0       	breq	.+30     	; 0x1b56 <set_trx_state+0x228>
    1b38:	87 cf       	rjmp	.-242    	; 0x1a48 <set_trx_state+0x11a>
    1b3a:	89 30       	cpi	r24, 0x09	; 9
    1b3c:	19 f0       	breq	.+6      	; 0x1b44 <set_trx_state+0x216>
    1b3e:	86 31       	cpi	r24, 0x16	; 22
    1b40:	51 f0       	breq	.+20     	; 0x1b56 <set_trx_state+0x228>
		case TX_ARET_ON:
			break;

		case PLL_ON:
			trx_reg_write(RG_TRX_STATE, CMD_TX_ARET_ON);
    1b42:	82 cf       	rjmp	.-252    	; 0x1a48 <set_trx_state+0x11a>
    1b44:	89 e1       	ldi	r24, 0x19	; 25
			PAL_WAIT_1_US();
    1b46:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
    1b4a:	62 e0       	ldi	r22, 0x02	; 2
    1b4c:	70 e0       	ldi	r23, 0x00	; 0
    1b4e:	80 e0       	ldi	r24, 0x00	; 0
    1b50:	90 e0       	ldi	r25, 0x00	; 0
			break;
    1b52:	c2 de       	rcall	.-636    	; 0x18d8 <__portable_avr_delay_cycles>

		case RX_ON:
		case RX_AACK_ON:
			trx_reg_write(RG_TRX_STATE, CMD_PLL_ON);
    1b54:	79 cf       	rjmp	.-270    	; 0x1a48 <set_trx_state+0x11a>
    1b56:	89 e0       	ldi	r24, 0x09	; 9
    1b58:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
			PAL_WAIT_1_US();
    1b5c:	62 e0       	ldi	r22, 0x02	; 2
    1b5e:	70 e0       	ldi	r23, 0x00	; 0
    1b60:	80 e0       	ldi	r24, 0x00	; 0
			/* check if state change could be applied */
			tal_trx_status = (tal_trx_status_t)trx_bit_read(
    1b62:	90 e0       	ldi	r25, 0x00	; 0
    1b64:	b9 de       	rcall	.-654    	; 0x18d8 <__portable_avr_delay_cycles>
    1b66:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7c0141>
    1b6a:	8f 71       	andi	r24, 0x1F	; 31
					SR_TRX_STATUS);
			if (tal_trx_status != PLL_ON) {
    1b6c:	80 93 9c 08 	sts	0x089C, r24	; 0x80089c <tal_trx_status>
				return tal_trx_status;
			}

			trx_reg_write(RG_TRX_STATE, CMD_TX_ARET_ON);
    1b70:	89 30       	cpi	r24, 0x09	; 9
    1b72:	c9 f4       	brne	.+50     	; 0x1ba6 <set_trx_state+0x278>
			PAL_WAIT_1_US();
    1b74:	89 e1       	ldi	r24, 0x19	; 25
    1b76:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
    1b7a:	62 e0       	ldi	r22, 0x02	; 2
    1b7c:	70 e0       	ldi	r23, 0x00	; 0
    1b7e:	80 e0       	ldi	r24, 0x00	; 0
			break;
    1b80:	90 e0       	ldi	r25, 0x00	; 0

		case TRX_OFF:
			switch_pll_on(); /* state change from TRX_OFF to
    1b82:	aa de       	rcall	.-684    	; 0x18d8 <__portable_avr_delay_cycles>
    1b84:	61 cf       	rjmp	.-318    	; 0x1a48 <set_trx_state+0x11a>
			                  * TX_ARET_ON can be done directly, too
			                  **/
			trx_reg_write(RG_TRX_STATE, CMD_TX_ARET_ON);
    1b86:	b3 de       	rcall	.-666    	; 0x18ee <switch_pll_on>
    1b88:	89 e1       	ldi	r24, 0x19	; 25
    1b8a:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
			PAL_WAIT_1_US();
    1b8e:	62 e0       	ldi	r22, 0x02	; 2
    1b90:	70 e0       	ldi	r23, 0x00	; 0
    1b92:	80 e0       	ldi	r24, 0x00	; 0
    1b94:	90 e0       	ldi	r25, 0x00	; 0
    1b96:	a0 de       	rcall	.-704    	; 0x18d8 <__portable_avr_delay_cycles>
			break;
    1b98:	57 cf       	rjmp	.-338    	; 0x1a48 <set_trx_state+0x11a>
		Assert("trx command not handled" == 0);
		break;
	}

	do {
		tal_trx_status = (tal_trx_status_t)trx_bit_read(
    1b9a:	80 81       	ld	r24, Z
    1b9c:	8f 71       	andi	r24, 0x1F	; 31
    1b9e:	80 93 9c 08 	sts	0x089C, r24	; 0x80089c <tal_trx_status>
				SR_TRX_STATUS);
	} while (tal_trx_status == STATE_TRANSITION_IN_PROGRESS);
    1ba2:	8f 31       	cpi	r24, 0x1F	; 31
    1ba4:	d1 f3       	breq	.-12     	; 0x1b9a <set_trx_state+0x26c>

	return tal_trx_status;
} /* set_trx_state() */
    1ba6:	0f 90       	pop	r0
    1ba8:	df 91       	pop	r29
    1baa:	cf 91       	pop	r28
    1bac:	1f 91       	pop	r17
    1bae:	08 95       	ret

00001bb0 <tal_task>:
 * - Checks and allocates the receive buffer.
 * - Processes the TAL incoming frame queue.
 * - Implements the TAL state machine.
 */
void tal_task(void)
{
    1bb0:	cf 93       	push	r28
    1bb2:	df 93       	push	r29
	/* Check if the receiver needs to be switched on. */
	if (tal_rx_on_required && (tal_state == TAL_IDLE)) {
    1bb4:	80 91 75 08 	lds	r24, 0x0875	; 0x800875 <tal_rx_on_required>
    1bb8:	88 23       	and	r24, r24
    1bba:	19 f1       	breq	.+70     	; 0x1c02 <tal_task+0x52>
    1bbc:	80 91 a1 08 	lds	r24, 0x08A1	; 0x8008a1 <tal_state>
    1bc0:	81 11       	cpse	r24, r1
    1bc2:	1f c0       	rjmp	.+62     	; 0x1c02 <tal_task+0x52>
		/* Check if a receive buffer has not been available before. */
		if (tal_rx_buffer == NULL) {
    1bc4:	80 91 2f 06 	lds	r24, 0x062F	; 0x80062f <tal_rx_buffer>
    1bc8:	90 91 30 06 	lds	r25, 0x0630	; 0x800630 <tal_rx_buffer+0x1>
    1bcc:	89 2b       	or	r24, r25
    1bce:	41 f4       	brne	.+16     	; 0x1be0 <tal_task+0x30>
			tal_rx_buffer = bmm_buffer_alloc(LARGE_BUFFER_SIZE);
    1bd0:	8b e8       	ldi	r24, 0x8B	; 139
    1bd2:	c1 dd       	rcall	.-1150   	; 0x1756 <bmm_buffer_alloc>
    1bd4:	90 93 30 06 	sts	0x0630, r25	; 0x800630 <tal_rx_buffer+0x1>
    1bd8:	80 93 2f 06 	sts	0x062F, r24	; 0x80062f <tal_rx_buffer>
		}

		/* Check if buffer could be allocated */
		if (NULL != tal_rx_buffer) {
    1bdc:	89 2b       	or	r24, r25
    1bde:	89 f0       	breq	.+34     	; 0x1c02 <tal_task+0x52>
			/*
			 * Note:
			 * This flag needs to be reset BEFORE the received is
			 * switched on.
			 */
			tal_rx_on_required = false;
    1be0:	10 92 75 08 	sts	0x0875, r1	; 0x800875 <tal_rx_on_required>
			/*
			 * Release the protected buffer and set it again for
			 * further protection
			 * since the buffer is available now.
			 */
			trx_bit_write(SR_RX_SAFE_MODE,
    1be4:	cc e4       	ldi	r28, 0x4C	; 76
    1be6:	d1 e0       	ldi	r29, 0x01	; 1
    1be8:	88 81       	ld	r24, Y
    1bea:	8f 77       	andi	r24, 0x7F	; 127
    1bec:	88 83       	st	Y, r24
			                                                *
			                                                *
			                                                *protection
			                                                * mode
			                                                **/
			pal_timer_delay(2); /* Allow pin change to get effective
    1bee:	63 e0       	ldi	r22, 0x03	; 3
    1bf0:	70 e0       	ldi	r23, 0x00	; 0
    1bf2:	80 e0       	ldi	r24, 0x00	; 0
    1bf4:	90 e0       	ldi	r25, 0x00	; 0
    1bf6:	70 de       	rcall	.-800    	; 0x18d8 <__portable_avr_delay_cycles>
			                    **/
			trx_bit_write(SR_RX_SAFE_MODE, RX_SAFE_MODE_ENABLE); /*
    1bf8:	88 81       	ld	r24, Y
    1bfa:	80 68       	ori	r24, 0x80	; 128
			} else {
				set_trx_state(CMD_RX_AACK_ON);
			}

#else   /* Normal operation */
			set_trx_state(CMD_RX_AACK_ON);
    1bfc:	88 83       	st	Y, r24
    1bfe:	86 e1       	ldi	r24, 0x16	; 22
    1c00:	96 de       	rcall	.-724    	; 0x192e <set_trx_state>

	/*
	 * If the transceiver has received a frame and it has been placed
	 * into the queue of the TAL, the frame needs to be processed further.
	 */
	if (tal_incoming_frame_queue.size > 0) {
    1c02:	80 91 7a 08 	lds	r24, 0x087A	; 0x80087a <tal_incoming_frame_queue+0x4>
    1c06:	88 23       	and	r24, r24
    1c08:	41 f0       	breq	.+16     	; 0x1c1a <tal_task+0x6a>
		buffer_t *rx_frame;

		/* Check if there are any pending data in the
		 * incoming_frame_queue. */
		rx_frame = qmm_queue_remove(&tal_incoming_frame_queue, NULL);
    1c0a:	60 e0       	ldi	r22, 0x00	; 0
    1c0c:	70 e0       	ldi	r23, 0x00	; 0
    1c0e:	86 e7       	ldi	r24, 0x76	; 118
    1c10:	98 e0       	ldi	r25, 0x08	; 8
		if (NULL != rx_frame) {
    1c12:	5e de       	rcall	.-836    	; 0x18d0 <qmm_queue_remove>
    1c14:	00 97       	sbiw	r24, 0x00	; 0
			process_incoming_frame(rx_frame);
    1c16:	09 f0       	breq	.+2      	; 0x1c1a <tal_task+0x6a>
		}
	}

	/* Handle the TAL state machines */
	switch (tal_state) {
    1c18:	12 d5       	rcall	.+2596   	; 0x263e <process_incoming_frame>
    1c1a:	80 91 a1 08 	lds	r24, 0x08A1	; 0x8008a1 <tal_state>
    1c1e:	82 30       	cpi	r24, 0x02	; 2
		/* Wait until state is changed to TAL_TX_DONE inside tx end ISR
		**/
		break;

	case TAL_TX_DONE:
		tx_done_handling(); /* see tal_tx.c */
    1c20:	09 f4       	brne	.+2      	; 0x1c24 <tal_task+0x74>
    1c22:	73 d5       	rcall	.+2790   	; 0x270a <tx_done_handling>
#endif /* (MAC_SCAN_ED_REQUEST_CONFIRM == 1) */
	default:
		Assert("tal_state is not handled" == 0);
		break;
	}
} /* tal_task() */
    1c24:	df 91       	pop	r29
    1c26:	cf 91       	pop	r28
    1c28:	08 95       	ret

00001c2a <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
    1c2a:	04 c0       	rjmp	.+8      	; 0x1c34 <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
    1c2c:	61 50       	subi	r22, 0x01	; 1
    1c2e:	71 09       	sbc	r23, r1
    1c30:	81 09       	sbc	r24, r1
    1c32:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
    1c34:	61 15       	cp	r22, r1
    1c36:	71 05       	cpc	r23, r1
    1c38:	81 05       	cpc	r24, r1
    1c3a:	91 05       	cpc	r25, r1
    1c3c:	b9 f7       	brne	.-18     	; 0x1c2c <__portable_avr_delay_cycles+0x2>
    1c3e:	08 95       	ret

00001c40 <tal_generate_rand_seed>:
 * value and restoring this state after finishing the sequence.
 * Since in our case the function is called from TRX_OFF, this is not required
 * here.
 */
void tal_generate_rand_seed(void)
{
    1c40:	ff 92       	push	r15
    1c42:	0f 93       	push	r16
    1c44:	1f 93       	push	r17
    1c46:	cf 93       	push	r28
    1c48:	df 93       	push	r29
	uint8_t cur_random_val = 0;

	/* Ensure that PLL has locked and receive mode is reached. */
	tal_trx_status_t trx_state;
	do {
		trx_state = set_trx_state(CMD_RX_ON);
    1c4a:	86 e0       	ldi	r24, 0x06	; 6
    1c4c:	70 de       	rcall	.-800    	; 0x192e <set_trx_state>
	} while (trx_state != RX_ON);
    1c4e:	86 30       	cpi	r24, 0x06	; 6
    1c50:	e1 f7       	brne	.-8      	; 0x1c4a <tal_generate_rand_seed+0xa>

	/* Ensure that register bit RX_PDT_DIS is set to 0. */
	trx_bit_write(SR_RX_PDT_DIS, RX_ENABLE);
    1c52:	e5 e5       	ldi	r30, 0x55	; 85
    1c54:	f1 e0       	ldi	r31, 0x01	; 1
    1c56:	80 81       	ld	r24, Z
    1c58:	8f 77       	andi	r24, 0x7F	; 127
    1c5a:	80 83       	st	Z, r24

	/*
	 * We need to disable TRX IRQs while generating random values in RX_ON,
	 * we do not want to receive frames at this point of time at all.
	 */
	trx_reg_write(RG_IRQ_MASK, TRX_IRQ_NONE);
    1c5c:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x7c014e>
    1c60:	68 94       	set
    1c62:	ff 24       	eor	r15, r15
    1c64:	f3 f8       	bld	r15, 3
 * Since in our case the function is called from TRX_OFF, this is not required
 * here.
 */
void tal_generate_rand_seed(void)
{
	uint16_t seed = 0;
    1c66:	c0 e0       	ldi	r28, 0x00	; 0
    1c68:	d0 e0       	ldi	r29, 0x00	; 0
	 * The 16-bit random value is generated from various 2-bit random
	 * values.
	 */
	for (uint8_t i = 0; i < 8; i++) {
		/* Now we can safely read the 2-bit random number. */
		cur_random_val = trx_bit_read(SR_RND_VALUE);
    1c6a:	06 e4       	ldi	r16, 0x46	; 70
    1c6c:	11 e0       	ldi	r17, 0x01	; 1
    1c6e:	f8 01       	movw	r30, r16
    1c70:	90 81       	ld	r25, Z
		seed = seed << 2;
    1c72:	cc 0f       	add	r28, r28
    1c74:	dd 1f       	adc	r29, r29
    1c76:	cc 0f       	add	r28, r28
    1c78:	dd 1f       	adc	r29, r29
		seed |= cur_random_val;
    1c7a:	90 76       	andi	r25, 0x60	; 96
    1c7c:	29 2f       	mov	r18, r25
    1c7e:	30 e0       	ldi	r19, 0x00	; 0
    1c80:	36 95       	lsr	r19
    1c82:	27 95       	ror	r18
    1c84:	32 95       	swap	r19
    1c86:	22 95       	swap	r18
    1c88:	2f 70       	andi	r18, 0x0F	; 15
    1c8a:	23 27       	eor	r18, r19
    1c8c:	3f 70       	andi	r19, 0x0F	; 15
    1c8e:	23 27       	eor	r18, r19
    1c90:	c2 2b       	or	r28, r18
    1c92:	d3 2b       	or	r29, r19
		PAL_WAIT_1_US(); /* wait that the random value gets updated */
    1c94:	62 e0       	ldi	r22, 0x02	; 2
    1c96:	70 e0       	ldi	r23, 0x00	; 0
    1c98:	80 e0       	ldi	r24, 0x00	; 0
    1c9a:	90 e0       	ldi	r25, 0x00	; 0
    1c9c:	c6 df       	rcall	.-116    	; 0x1c2a <__portable_avr_delay_cycles>
    1c9e:	fa 94       	dec	r15

	/*
	 * The 16-bit random value is generated from various 2-bit random
	 * values.
	 */
	for (uint8_t i = 0; i < 8; i++) {
    1ca0:	f1 10       	cpse	r15, r1
		seed = seed << 2;
		seed |= cur_random_val;
		PAL_WAIT_1_US(); /* wait that the random value gets updated */
	}

	set_trx_state(CMD_FORCE_TRX_OFF);
    1ca2:	e5 cf       	rjmp	.-54     	; 0x1c6e <tal_generate_rand_seed+0x2e>
    1ca4:	83 e0       	ldi	r24, 0x03	; 3
    1ca6:	43 de       	rcall	.-890    	; 0x192e <set_trx_state>

	/*
	 * Now we need to clear potential pending TRX IRQs and
	 * enable the TRX IRQs again.
	 */
	trx_reg_write(RG_IRQ_STATUS, 0xFF);
    1ca8:	8f ef       	ldi	r24, 0xFF	; 255
    1caa:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <__TEXT_REGION_LENGTH__+0x7c014f>
	trx_reg_write(RG_IRQ_MASK, TRX_IRQ_DEFAULT);
    1cae:	88 e4       	ldi	r24, 0x48	; 72
    1cb0:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <__TEXT_REGION_LENGTH__+0x7c014e>

	/* Set the seed for the random number generator. */
	srand(seed);
    1cb4:	ce 01       	movw	r24, r28
    1cb6:	0e 94 db 19 	call	0x33b6	; 0x33b6 <srand>
}
    1cba:	df 91       	pop	r29
    1cbc:	cf 91       	pop	r28
    1cbe:	1f 91       	pop	r17
    1cc0:	0f 91       	pop	r16
    1cc2:	ff 90       	pop	r15
    1cc4:	08 95       	ret

00001cc6 <internal_tal_reset>:
 * \return MAC_SUCCESS  if the transceiver state is changed to TRX_OFF and the
 *                 current device part number and version number are correct;
 *         FAILURE otherwise
 */
static retval_t internal_tal_reset(bool set_default_pib)
{
    1cc6:	ff 92       	push	r15
    1cc8:	0f 93       	push	r16
    1cca:	1f 93       	push	r17
    1ccc:	cf 93       	push	r28
    1cce:	df 93       	push	r29
    1cd0:	f8 2e       	mov	r15, r24
{
	tal_trx_status_t trx_status;
	uint8_t poll_counter = 0;

	/* trx might sleep, so wake it up */
	TRX_SLP_TR_LOW();
    1cd2:	c9 e3       	ldi	r28, 0x39	; 57
    1cd4:	d1 e0       	ldi	r29, 0x01	; 1
    1cd6:	88 81       	ld	r24, Y
    1cd8:	8d 7f       	andi	r24, 0xFD	; 253
    1cda:	88 83       	st	Y, r24
	pal_timer_delay(SLEEP_TO_TRX_OFF_TYP_US);
    1cdc:	61 e4       	ldi	r22, 0x41	; 65
    1cde:	71 e0       	ldi	r23, 0x01	; 1
    1ce0:	80 e0       	ldi	r24, 0x00	; 0
    1ce2:	90 e0       	ldi	r25, 0x00	; 0
    1ce4:	a2 df       	rcall	.-188    	; 0x1c2a <__portable_avr_delay_cycles>

	/* Apply reset pulse */
	TRX_RST_LOW();
    1ce6:	88 81       	ld	r24, Y
    1ce8:	8e 7f       	andi	r24, 0xFE	; 254
    1cea:	88 83       	st	Y, r24
	pal_timer_delay(RST_PULSE_WIDTH_US);
    1cec:	62 e0       	ldi	r22, 0x02	; 2
    1cee:	70 e0       	ldi	r23, 0x00	; 0
    1cf0:	80 e0       	ldi	r24, 0x00	; 0
    1cf2:	90 e0       	ldi	r25, 0x00	; 0
    1cf4:	9a df       	rcall	.-204    	; 0x1c2a <__portable_avr_delay_cycles>
	TRX_RST_HIGH();
    1cf6:	88 81       	ld	r24, Y
    1cf8:	81 60       	ori	r24, 0x01	; 1
    1cfa:	88 83       	st	Y, r24

	/* verify that trx has reached TRX_OFF */
	do {
		/* Wait a short time interval. */
		pal_timer_delay(TRX_POLL_WAIT_TIME_US);
    1cfc:	66 e8       	ldi	r22, 0x86	; 134
    1cfe:	70 e0       	ldi	r23, 0x00	; 0
    1d00:	80 e0       	ldi	r24, 0x00	; 0
    1d02:	90 e0       	ldi	r25, 0x00	; 0
    1d04:	92 df       	rcall	.-220    	; 0x1c2a <__portable_avr_delay_cycles>

		trx_status = (tal_trx_status_t)trx_bit_read(SR_TRX_STATUS);
    1d06:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7c0141>
    1d0a:	8f 71       	andi	r24, 0x1F	; 31
    1d0c:	ca e0       	ldi	r28, 0x0A	; 10
    1d0e:	01 e4       	ldi	r16, 0x41	; 65
    1d10:	11 e0       	ldi	r17, 0x01	; 1
    1d12:	0a c0       	rjmp	.+20     	; 0x1d28 <internal_tal_reset+0x62>
	TRX_RST_HIGH();

	/* verify that trx has reached TRX_OFF */
	do {
		/* Wait a short time interval. */
		pal_timer_delay(TRX_POLL_WAIT_TIME_US);
    1d14:	66 e8       	ldi	r22, 0x86	; 134
    1d16:	70 e0       	ldi	r23, 0x00	; 0
    1d18:	80 e0       	ldi	r24, 0x00	; 0
    1d1a:	90 e0       	ldi	r25, 0x00	; 0
    1d1c:	86 df       	rcall	.-244    	; 0x1c2a <__portable_avr_delay_cycles>

		trx_status = (tal_trx_status_t)trx_bit_read(SR_TRX_STATUS);
    1d1e:	f8 01       	movw	r30, r16
    1d20:	80 81       	ld	r24, Z
    1d22:	8f 71       	andi	r24, 0x1F	; 31
    1d24:	c1 50       	subi	r28, 0x01	; 1

		/* Wait not more than max. value of TR2. */
		if (poll_counter == SLEEP_TO_TRX_OFF_ATTEMPTS) {
    1d26:	39 f1       	breq	.+78     	; 0x1d76 <internal_tal_reset+0xb0>
#endif
			return FAILURE;
		}

		poll_counter++;
	} while (trx_status != TRX_OFF);
    1d28:	88 30       	cpi	r24, 0x08	; 8

	tal_trx_status = TRX_OFF;
    1d2a:	a1 f7       	brne	.-24     	; 0x1d14 <internal_tal_reset+0x4e>
    1d2c:	80 93 9c 08 	sts	0x089C, r24	; 0x80089c <tal_trx_status>

	/*
	 * Generate a seed for the random number generator in function rand().
	 * This is required (for example) as seed for the CSMA-CA algorithm.
	 */
	tal_generate_rand_seed();
    1d30:	87 df       	rcall	.-242    	; 0x1c40 <tal_generate_rand_seed>
	 */

	/*
	 * Init the SEED value of the CSMA backoff algorithm.
	 */
	uint16_t rand_value = (uint16_t)rand();
    1d32:	0e 94 d8 19 	call	0x33b0	; 0x33b0 <rand>
	trx_reg_write(RG_CSMA_SEED_0, (uint8_t)rand_value);
    1d36:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <__TEXT_REGION_LENGTH__+0x7c016d>
	trx_bit_write(SR_CSMA_SEED_1, (uint8_t)(rand_value >> 8));
    1d3a:	ee e6       	ldi	r30, 0x6E	; 110
    1d3c:	f1 e0       	ldi	r31, 0x01	; 1
    1d3e:	80 81       	ld	r24, Z
    1d40:	97 70       	andi	r25, 0x07	; 7
    1d42:	88 7f       	andi	r24, 0xF8	; 248
    1d44:	89 2b       	or	r24, r25
    1d46:	80 83       	st	Z, r24

	trx_bit_write(SR_AACK_SET_PD, PD_ACK_BIT_SET_ENABLE); /* ACKs for
    1d48:	80 81       	ld	r24, Z
    1d4a:	80 62       	ori	r24, 0x20	; 32
    1d4c:	80 83       	st	Z, r24
	                                                       * data
	                                                       * requests,
	                                                       * indicate
	                                                       * pending data
	                                                       **/
	trx_bit_write(SR_RX_SAFE_MODE, RX_SAFE_MODE_ENABLE); /* Enable
    1d4e:	ec e4       	ldi	r30, 0x4C	; 76
    1d50:	f1 e0       	ldi	r31, 0x01	; 1
    1d52:	80 81       	ld	r24, Z
    1d54:	80 68       	ori	r24, 0x80	; 128
    1d56:	80 83       	st	Z, r24
	                                                     * buffer
	                                                     * protection
	                                                     * mode */
	trx_reg_write(RG_IRQ_MASK, TRX_IRQ_DEFAULT);
    1d58:	88 e4       	ldi	r24, 0x48	; 72
    1d5a:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <__TEXT_REGION_LENGTH__+0x7c014e>
#if (defined BEACON_SUPPORT) || (defined ENABLE_TSTAMP)
	/* The TX start timestamp is taken by the respective PAL layer */
	trx_reg_write(RG_IRQ_MASK1, (1 << TX_START_EN));
#endif
	trx_reg_write(0x156, 0xFF); /* RPC feature configuration. */
    1d5e:	8f ef       	ldi	r24, 0xFF	; 255
	tal_generate_rand_seed();

	/* Configure the transceiver register values. */
	trx_config();

	if (set_default_pib) {
    1d60:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <__TEXT_REGION_LENGTH__+0x7c0156>
		/* Set the default PIB values */
		init_tal_pib(); /* implementation can be found in 'tal_pib.c' */
    1d64:	f1 10       	cpse	r15, r1

	/*
	 * Write all PIB values to the transceiver
	 * that are needed by the transceiver itself.
	 */
	write_all_tal_pib_to_trx(); /* implementation can be found in
    1d66:	30 d2       	rcall	.+1120   	; 0x21c8 <init_tal_pib>
    1d68:	7d d2       	rcall	.+1274   	; 0x2264 <write_all_tal_pib_to_trx>
	                             *'tal_pib.c' */

	/* Reset TAL variables. */
	tal_state = TAL_IDLE;
    1d6a:	10 92 a1 08 	sts	0x08A1, r1	; 0x8008a1 <tal_state>

#if ((MAC_START_REQUEST_CONFIRM == 1) && (defined BEACON_SUPPORT))
	tal_beacon_transmission = false;
#endif /* ((MAC_START_REQUEST_CONFIRM == 1) && (defined BEACON_SUPPORT)) */

	tal_rx_on_required = false;
    1d6e:	10 92 75 08 	sts	0x0875, r1	; 0x800875 <tal_rx_on_required>

	return MAC_SUCCESS;
    1d72:	80 e0       	ldi	r24, 0x00	; 0
    1d74:	01 c0       	rjmp	.+2      	; 0x1d78 <internal_tal_reset+0xb2>
 *         FAILURE otherwise
 */
static retval_t internal_tal_reset(bool set_default_pib)
{
	if (trx_reset() != MAC_SUCCESS) {
		return FAILURE;
    1d76:	85 e8       	ldi	r24, 0x85	; 133
#endif /* ((MAC_START_REQUEST_CONFIRM == 1) && (defined BEACON_SUPPORT)) */

	tal_rx_on_required = false;

	return MAC_SUCCESS;
}
    1d78:	df 91       	pop	r29
    1d7a:	cf 91       	pop	r28
    1d7c:	1f 91       	pop	r17
    1d7e:	0f 91       	pop	r16
    1d80:	ff 90       	pop	r15
    1d82:	08 95       	ret

00001d84 <tal_init>:
 * \return MAC_SUCCESS  if the transceiver state is changed to TRX_OFF and the
 *                 current device part number and version number are correct;
 *         FAILURE otherwise
 */
retval_t tal_init(void)
{
    1d84:	cf 92       	push	r12
    1d86:	df 92       	push	r13
    1d88:	ef 92       	push	r14
    1d8a:	ff 92       	push	r15
    1d8c:	0f 93       	push	r16
    1d8e:	1f 93       	push	r17
    1d90:	cf 93       	push	r28
    1d92:	df 93       	push	r29
	MCUSR = 0;
    1d94:	14 be       	out	0x34, r1	; 52

	/* Enable SRAM Data Retention */
	DRTRAM0 = _BV(ENDRT);
    1d96:	80 e1       	ldi	r24, 0x10	; 16
    1d98:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <__TEXT_REGION_LENGTH__+0x7c0135>
	DRTRAM1 = _BV(ENDRT);
    1d9c:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <__TEXT_REGION_LENGTH__+0x7c0134>
	DRTRAM2 = _BV(ENDRT);
    1da0:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <__TEXT_REGION_LENGTH__+0x7c0133>
	DRTRAM3 = _BV(ENDRT);
    1da4:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <__TEXT_REGION_LENGTH__+0x7c0132>

	/* Init the PAL and by this means also the transceiver interface */
	if (pal_init() != MAC_SUCCESS) {
    1da8:	ae dc       	rcall	.-1700   	; 0x1706 <pal_init>
    1daa:	81 11       	cpse	r24, r1
    1dac:	6d c0       	rjmp	.+218    	; 0x1e88 <tal_init+0x104>
	} else if (module == &TCCR4A) {
		sysclk_enable_module(POWER_RED_REG1, PRTIM4_bm);
	} else if (module == &TCCR5A) {
		sysclk_enable_module(POWER_RED_REG1, PRTIM5_bm);
	} else if (module == &TRX_CTRL_0) {
		sysclk_enable_module(POWER_RED_REG1, PRTRX24_bm);
    1dae:	60 e4       	ldi	r22, 0x40	; 64
    1db0:	81 e0       	ldi	r24, 0x01	; 1
    1db2:	57 d8       	rcall	.-3922   	; 0xe62 <sysclk_enable_module>
{
	tal_trx_status_t trx_status;
	uint8_t poll_counter = 0;

	sysclk_enable_peripheral_clock(&TRX_CTRL_0);
	TRX_RST_HIGH();
    1db4:	c9 e3       	ldi	r28, 0x39	; 57
    1db6:	d1 e0       	ldi	r29, 0x01	; 1
    1db8:	88 81       	ld	r24, Y
    1dba:	81 60       	ori	r24, 0x01	; 1
    1dbc:	88 83       	st	Y, r24
	TRX_SLP_TR_LOW();
    1dbe:	88 81       	ld	r24, Y
    1dc0:	8d 7f       	andi	r24, 0xFD	; 253
    1dc2:	88 83       	st	Y, r24

	pal_timer_delay(P_ON_TO_CLKM_AVAILABLE_TYP_US);
    1dc4:	6b ef       	ldi	r22, 0xFB	; 251
    1dc6:	71 e0       	ldi	r23, 0x01	; 1
    1dc8:	80 e0       	ldi	r24, 0x00	; 0
    1dca:	90 e0       	ldi	r25, 0x00	; 0
    1dcc:	2e df       	rcall	.-420    	; 0x1c2a <__portable_avr_delay_cycles>

	/* Apply reset pulse */
	TRX_RST_LOW();
    1dce:	88 81       	ld	r24, Y
    1dd0:	8e 7f       	andi	r24, 0xFE	; 254
    1dd2:	88 83       	st	Y, r24
	pal_timer_delay(RST_PULSE_WIDTH_US);
    1dd4:	62 e0       	ldi	r22, 0x02	; 2
    1dd6:	70 e0       	ldi	r23, 0x00	; 0
    1dd8:	80 e0       	ldi	r24, 0x00	; 0
    1dda:	90 e0       	ldi	r25, 0x00	; 0
    1ddc:	26 df       	rcall	.-436    	; 0x1c2a <__portable_avr_delay_cycles>
	TRX_RST_HIGH();
    1dde:	88 81       	ld	r24, Y
    1de0:	81 60       	ori	r24, 0x01	; 1
    1de2:	88 83       	st	Y, r24

	/* Verify that the trx has reached TRX_OFF. */
	poll_counter = 0;
	do {
		/* Wait a short time interval. */
		pal_timer_delay(TRX_POLL_WAIT_TIME_US);
    1de4:	66 e8       	ldi	r22, 0x86	; 134
    1de6:	70 e0       	ldi	r23, 0x00	; 0
    1de8:	80 e0       	ldi	r24, 0x00	; 0
    1dea:	90 e0       	ldi	r25, 0x00	; 0
    1dec:	1e df       	rcall	.-452    	; 0x1c2a <__portable_avr_delay_cycles>

		trx_status = (tal_trx_status_t)trx_bit_read(SR_TRX_STATUS);
    1dee:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7c0141>
    1df2:	8f 71       	andi	r24, 0x1F	; 31
    1df4:	ca e0       	ldi	r28, 0x0A	; 10
    1df6:	01 e4       	ldi	r16, 0x41	; 65
    1df8:	11 e0       	ldi	r17, 0x01	; 1
    1dfa:	0b c0       	rjmp	.+22     	; 0x1e12 <tal_init+0x8e>

	/* Verify that the trx has reached TRX_OFF. */
	poll_counter = 0;
	do {
		/* Wait a short time interval. */
		pal_timer_delay(TRX_POLL_WAIT_TIME_US);
    1dfc:	66 e8       	ldi	r22, 0x86	; 134
    1dfe:	70 e0       	ldi	r23, 0x00	; 0
    1e00:	80 e0       	ldi	r24, 0x00	; 0
    1e02:	90 e0       	ldi	r25, 0x00	; 0
    1e04:	12 df       	rcall	.-476    	; 0x1c2a <__portable_avr_delay_cycles>

		trx_status = (tal_trx_status_t)trx_bit_read(SR_TRX_STATUS);
    1e06:	f8 01       	movw	r30, r16
    1e08:	80 81       	ld	r24, Z
    1e0a:	8f 71       	andi	r24, 0x1F	; 31
    1e0c:	c1 50       	subi	r28, 0x01	; 1

		/* Wait not more than max. value of TR2. */
		if (poll_counter == RESET_TO_TRX_OFF_ATTEMPTS) {
    1e0e:	09 f4       	brne	.+2      	; 0x1e12 <tal_init+0x8e>
    1e10:	51 c0       	rjmp	.+162    	; 0x1eb4 <tal_init+0x130>
#endif
			return FAILURE;
		}

		poll_counter++;
	} while (trx_status != TRX_OFF);
    1e12:	88 30       	cpi	r24, 0x08	; 8
    1e14:	99 f7       	brne	.-26     	; 0x1dfc <tal_init+0x78>

	tal_trx_status = TRX_OFF;
    1e16:	80 93 9c 08 	sts	0x089C, r24	; 0x80089c <tal_trx_status>

#if !defined(FPGA_EMULATION)
	/* Check if actually running on an ATmegaRFR2 device. */
	if (ATMEGARFR2_PART_NUM != trx_reg_read(RG_PART_NUM)) {
    1e1a:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <__TEXT_REGION_LENGTH__+0x7c015c>
    1e1e:	84 39       	cpi	r24, 0x94	; 148
    1e20:	09 f0       	breq	.+2      	; 0x1e24 <tal_init+0xa0>
    1e22:	48 c0       	rjmp	.+144    	; 0x1eb4 <tal_init+0x130>
    1e24:	35 c0       	rjmp	.+106    	; 0x1e90 <tal_init+0x10c>
		 * in function tal_generate_rand_seed().
		 */
		uint8_t *ptr_pib = (uint8_t *)&tal_pib.IeeeAddress;

		for (uint8_t i = 0; i < 8; i++) {
			*ptr_pib++ = (uint8_t)rand();
    1e26:	0e 94 d8 19 	call	0x33b0	; 0x33b0 <rand>
    1e2a:	f8 01       	movw	r30, r16
    1e2c:	81 93       	st	Z+, r24
    1e2e:	8f 01       	movw	r16, r30
		 * generated
		 * in function tal_generate_rand_seed().
		 */
		uint8_t *ptr_pib = (uint8_t *)&tal_pib.IeeeAddress;

		for (uint8_t i = 0; i < 8; i++) {
    1e30:	ec 15       	cp	r30, r12
    1e32:	fd 05       	cpc	r31, r13
    1e34:	c1 f7       	brne	.-16     	; 0x1e26 <tal_init+0xa2>
	/*
	 * This while loop is on purpose, since just in the
	 * rare case that such an address is randomly
	 * generated again, we must repeat this.
	 */
	while ((tal_pib.IeeeAddress == 0x0000000000000000) ||
    1e36:	f7 01       	movw	r30, r14
    1e38:	20 81       	ld	r18, Z
    1e3a:	31 81       	ldd	r19, Z+1	; 0x01
    1e3c:	42 81       	ldd	r20, Z+2	; 0x02
    1e3e:	53 81       	ldd	r21, Z+3	; 0x03
    1e40:	64 81       	ldd	r22, Z+4	; 0x04
    1e42:	75 81       	ldd	r23, Z+5	; 0x05
    1e44:	86 81       	ldd	r24, Z+6	; 0x06
    1e46:	97 81       	ldd	r25, Z+7	; 0x07
    1e48:	af ef       	ldi	r26, 0xFF	; 255
    1e4a:	0e 94 79 19 	call	0x32f2	; 0x32f2 <__adddi3_s8>
    1e4e:	ad ef       	ldi	r26, 0xFD	; 253
    1e50:	0e 94 85 19 	call	0x330a	; 0x330a <__cmpdi2_s8>
    1e54:	21 f0       	breq	.+8      	; 0x1e5e <tal_init+0xda>
    1e56:	18 f0       	brcs	.+6      	; 0x1e5e <tal_init+0xda>
    1e58:	0d e7       	ldi	r16, 0x7D	; 125
    1e5a:	18 e0       	ldi	r17, 0x08	; 8

	/*
	 * Configure interrupt handling.
	 * Install handlers for the transceiver interrupts.
	 */
	pal_trx_irq_init_rx_end((FUNC_PTR)trx_rx_end_handler_cb);
    1e5c:	e4 cf       	rjmp	.-56     	; 0x1e26 <tal_init+0xa2>
    1e5e:	8e e8       	ldi	r24, 0x8E	; 142
    1e60:	90 e1       	ldi	r25, 0x10	; 16
	pal_trx_irq_init_tx_end((FUNC_PTR)trx_tx_end_handler_cb);
    1e62:	38 d0       	rcall	.+112    	; 0x1ed4 <pal_trx_irq_init_rx_end>
    1e64:	8f e9       	ldi	r24, 0x9F	; 159
	pal_trx_irq_init_awake((FUNC_PTR)trx_awake_handler_cb);
    1e66:	90 e1       	ldi	r25, 0x10	; 16
    1e68:	30 d0       	rcall	.+96     	; 0x1eca <pal_trx_irq_init_tx_end>
    1e6a:	80 eb       	ldi	r24, 0xB0	; 176
    1e6c:	90 e1       	ldi	r25, 0x10	; 16
	pal_trx_irq_init_tstamp((FUNC_PTR)trx_irq_timestamp_handler_cb);
#endif /* (defined BEACON_SUPPORT) || (defined ENABLE_TSTAMP) */

	/* Initialize the buffer management module and get a buffer to store
	 * reveived frames. */
	bmm_buffer_init();
    1e6e:	37 d0       	rcall	.+110    	; 0x1ede <pal_trx_irq_init_awake>
	tal_rx_buffer = bmm_buffer_alloc(LARGE_BUFFER_SIZE);
    1e70:	4e dc       	rcall	.-1892   	; 0x170e <bmm_buffer_init>
    1e72:	8b e8       	ldi	r24, 0x8B	; 139
    1e74:	70 dc       	rcall	.-1824   	; 0x1756 <bmm_buffer_alloc>
    1e76:	90 93 30 06 	sts	0x0630, r25	; 0x800630 <tal_rx_buffer+0x1>
    1e7a:	80 93 2f 06 	sts	0x062F, r24	; 0x80062f <tal_rx_buffer>
	/* Init incoming frame queue */
#ifdef ENABLE_QUEUE_CAPACITY
	qmm_queue_init(&tal_incoming_frame_queue,
			TAL_INCOMING_FRAME_QUEUE_CAPACITY);
#else
	qmm_queue_init(&tal_incoming_frame_queue);
    1e7e:	86 e7       	ldi	r24, 0x76	; 118
    1e80:	98 e0       	ldi	r25, 0x08	; 8
#endif  /* ENABLE_QUEUE_CAPACITY */

#ifdef ENABLE_TFA
	tfa_init();
    1e82:	fa dc       	rcall	.-1548   	; 0x1878 <qmm_queue_init>
    1e84:	52 d5       	rcall	.+2724   	; 0x292a <tfa_init>
#endif

	return MAC_SUCCESS;
    1e86:	17 c0       	rjmp	.+46     	; 0x1eb6 <tal_init+0x132>
	DRTRAM2 = _BV(ENDRT);
	DRTRAM3 = _BV(ENDRT);

	/* Init the PAL and by this means also the transceiver interface */
	if (pal_init() != MAC_SUCCESS) {
		return FAILURE;
    1e88:	c5 e8       	ldi	r28, 0x85	; 133
    1e8a:	15 c0       	rjmp	.+42     	; 0x1eb6 <tal_init+0x132>
	 * Do the reset stuff.
	 * Set the default PIBs.
	 * Generate random seed.
	 */
	if (internal_tal_reset(true) != MAC_SUCCESS) {
		return FAILURE;
    1e8c:	c5 e8       	ldi	r28, 0x85	; 133
    1e8e:	13 c0       	rjmp	.+38     	; 0x1eb6 <tal_init+0x132>
	/*
	 * Do the reset stuff.
	 * Set the default PIBs.
	 * Generate random seed.
	 */
	if (internal_tal_reset(true) != MAC_SUCCESS) {
    1e90:	81 e0       	ldi	r24, 0x01	; 1
    1e92:	19 df       	rcall	.-462    	; 0x1cc6 <internal_tal_reset>
    1e94:	c8 2f       	mov	r28, r24
    1e96:	81 11       	cpse	r24, r1
    1e98:	f9 cf       	rjmp	.-14     	; 0x1e8c <tal_init+0x108>
    1e9a:	0f 2e       	mov	r0, r31
	/*
	 * This while loop is on purpose, since just in the
	 * rare case that such an address is randomly
	 * generated again, we must repeat this.
	 */
	while ((tal_pib.IeeeAddress == 0x0000000000000000) ||
    1e9c:	fd e7       	ldi	r31, 0x7D	; 125
    1e9e:	ef 2e       	mov	r14, r31
    1ea0:	f8 e0       	ldi	r31, 0x08	; 8
    1ea2:	ff 2e       	mov	r15, r31
    1ea4:	f0 2d       	mov	r31, r0
    1ea6:	0f 2e       	mov	r0, r31
    1ea8:	f5 e8       	ldi	r31, 0x85	; 133
    1eaa:	cf 2e       	mov	r12, r31
    1eac:	f8 e0       	ldi	r31, 0x08	; 8
    1eae:	df 2e       	mov	r13, r31
    1eb0:	f0 2d       	mov	r31, r0
    1eb2:	c1 cf       	rjmp	.-126    	; 0x1e36 <tal_init+0xb2>
    1eb4:	c5 e8       	ldi	r28, 0x85	; 133
	if (pal_init() != MAC_SUCCESS) {
		return FAILURE;
	}

	if (trx_init() != MAC_SUCCESS) {
		return FAILURE;
    1eb6:	8c 2f       	mov	r24, r28
#ifdef ENABLE_TFA
	tfa_init();
#endif

	return MAC_SUCCESS;
} /* tal_init() */
    1eb8:	df 91       	pop	r29
    1eba:	cf 91       	pop	r28
    1ebc:	1f 91       	pop	r17
    1ebe:	0f 91       	pop	r16
    1ec0:	ff 90       	pop	r15
    1ec2:	ef 90       	pop	r14
    1ec4:	df 90       	pop	r13
    1ec6:	cf 90       	pop	r12
    1ec8:	08 95       	ret

00001eca <pal_trx_irq_init_tx_end>:
    1eca:	90 93 38 06 	sts	0x0638, r25	; 0x800638 <irq_hdl_trx_tx_end+0x1>
 *
 * \param trx_irq_cb Callback function for the transceiver CCA ED END interrupt
 */
void pal_trx_irq_init_cca_ed(FUNC_PTR trx_irq_cb)
{
	irq_hdl_trx_cca_ed = (irq_handler_t)trx_irq_cb;
    1ece:	80 93 37 06 	sts	0x0637, r24	; 0x800637 <irq_hdl_trx_tx_end>
    1ed2:	08 95       	ret

00001ed4 <pal_trx_irq_init_rx_end>:
    1ed4:	90 93 36 06 	sts	0x0636, r25	; 0x800636 <irq_hdl_trx_rx_end+0x1>
    1ed8:	80 93 35 06 	sts	0x0635, r24	; 0x800635 <irq_hdl_trx_rx_end>
    1edc:	08 95       	ret

00001ede <pal_trx_irq_init_awake>:
 *
 * \param trx_irq_cb Callback function for the transceiver AWAKE interrupt
 */
void pal_trx_irq_init_awake(FUNC_PTR trx_irq_cb)
{
	irq_hdl_trx_awake = (irq_handler_t)trx_irq_cb;
    1ede:	90 93 32 06 	sts	0x0632, r25	; 0x800632 <irq_hdl_trx_awake+0x1>
    1ee2:	80 93 31 06 	sts	0x0631, r24	; 0x800631 <irq_hdl_trx_awake>
    1ee6:	08 95       	ret

00001ee8 <__vector_63>:

/**
 * \brief ISR for transceiver's transmit end interrupt
 */
ISR(TRX24_TX_END_vect)
{
    1ee8:	1f 92       	push	r1
    1eea:	0f 92       	push	r0
    1eec:	0f b6       	in	r0, 0x3f	; 63
    1eee:	0f 92       	push	r0
    1ef0:	11 24       	eor	r1, r1
    1ef2:	0b b6       	in	r0, 0x3b	; 59
    1ef4:	0f 92       	push	r0
    1ef6:	2f 93       	push	r18
    1ef8:	3f 93       	push	r19
    1efa:	4f 93       	push	r20
    1efc:	5f 93       	push	r21
    1efe:	6f 93       	push	r22
    1f00:	7f 93       	push	r23
    1f02:	8f 93       	push	r24
    1f04:	9f 93       	push	r25
    1f06:	af 93       	push	r26
    1f08:	bf 93       	push	r27
    1f0a:	ef 93       	push	r30
    1f0c:	ff 93       	push	r31
	irq_hdl_trx_tx_end();
    1f0e:	e0 91 37 06 	lds	r30, 0x0637	; 0x800637 <irq_hdl_trx_tx_end>
    1f12:	f0 91 38 06 	lds	r31, 0x0638	; 0x800638 <irq_hdl_trx_tx_end+0x1>
    1f16:	19 95       	eicall
}
    1f18:	ff 91       	pop	r31
    1f1a:	ef 91       	pop	r30
    1f1c:	bf 91       	pop	r27
    1f1e:	af 91       	pop	r26
    1f20:	9f 91       	pop	r25
    1f22:	8f 91       	pop	r24
    1f24:	7f 91       	pop	r23
    1f26:	6f 91       	pop	r22
    1f28:	5f 91       	pop	r21
    1f2a:	4f 91       	pop	r20
    1f2c:	3f 91       	pop	r19
    1f2e:	2f 91       	pop	r18
    1f30:	0f 90       	pop	r0
    1f32:	0b be       	out	0x3b, r0	; 59
    1f34:	0f 90       	pop	r0
    1f36:	0f be       	out	0x3f, r0	; 63
    1f38:	0f 90       	pop	r0
    1f3a:	1f 90       	pop	r1
    1f3c:	18 95       	reti

00001f3e <__vector_60>:

/**
 * \brief ISR for transceiver's receive end interrupt
 */
ISR(TRX24_RX_END_vect)
{
    1f3e:	1f 92       	push	r1
    1f40:	0f 92       	push	r0
    1f42:	0f b6       	in	r0, 0x3f	; 63
    1f44:	0f 92       	push	r0
    1f46:	11 24       	eor	r1, r1
    1f48:	0b b6       	in	r0, 0x3b	; 59
    1f4a:	0f 92       	push	r0
    1f4c:	2f 93       	push	r18
    1f4e:	3f 93       	push	r19
    1f50:	4f 93       	push	r20
    1f52:	5f 93       	push	r21
    1f54:	6f 93       	push	r22
    1f56:	7f 93       	push	r23
    1f58:	8f 93       	push	r24
    1f5a:	9f 93       	push	r25
    1f5c:	af 93       	push	r26
    1f5e:	bf 93       	push	r27
    1f60:	ef 93       	push	r30
    1f62:	ff 93       	push	r31
	irq_hdl_trx_rx_end();
    1f64:	e0 91 35 06 	lds	r30, 0x0635	; 0x800635 <irq_hdl_trx_rx_end>
    1f68:	f0 91 36 06 	lds	r31, 0x0636	; 0x800636 <irq_hdl_trx_rx_end+0x1>
    1f6c:	19 95       	eicall
}
    1f6e:	ff 91       	pop	r31
    1f70:	ef 91       	pop	r30
    1f72:	bf 91       	pop	r27
    1f74:	af 91       	pop	r26
    1f76:	9f 91       	pop	r25
    1f78:	8f 91       	pop	r24
    1f7a:	7f 91       	pop	r23
    1f7c:	6f 91       	pop	r22
    1f7e:	5f 91       	pop	r21
    1f80:	4f 91       	pop	r20
    1f82:	3f 91       	pop	r19
    1f84:	2f 91       	pop	r18
    1f86:	0f 90       	pop	r0
    1f88:	0b be       	out	0x3b, r0	; 59
    1f8a:	0f 90       	pop	r0
    1f8c:	0f be       	out	0x3f, r0	; 63
    1f8e:	0f 90       	pop	r0
    1f90:	1f 90       	pop	r1
    1f92:	18 95       	reti

00001f94 <__vector_61>:

/**
 * \brief ISR for transceiver's CCA/ED measurement done interrupt
 */
ISR(TRX24_CCA_ED_DONE_vect)
{
    1f94:	1f 92       	push	r1
    1f96:	0f 92       	push	r0
    1f98:	0f b6       	in	r0, 0x3f	; 63
    1f9a:	0f 92       	push	r0
    1f9c:	11 24       	eor	r1, r1
    1f9e:	0b b6       	in	r0, 0x3b	; 59
    1fa0:	0f 92       	push	r0
    1fa2:	2f 93       	push	r18
    1fa4:	3f 93       	push	r19
    1fa6:	4f 93       	push	r20
    1fa8:	5f 93       	push	r21
    1faa:	6f 93       	push	r22
    1fac:	7f 93       	push	r23
    1fae:	8f 93       	push	r24
    1fb0:	9f 93       	push	r25
    1fb2:	af 93       	push	r26
    1fb4:	bf 93       	push	r27
    1fb6:	ef 93       	push	r30
    1fb8:	ff 93       	push	r31
	irq_hdl_trx_cca_ed();
    1fba:	e0 91 33 06 	lds	r30, 0x0633	; 0x800633 <irq_hdl_trx_cca_ed>
    1fbe:	f0 91 34 06 	lds	r31, 0x0634	; 0x800634 <irq_hdl_trx_cca_ed+0x1>
    1fc2:	19 95       	eicall
}
    1fc4:	ff 91       	pop	r31
    1fc6:	ef 91       	pop	r30
    1fc8:	bf 91       	pop	r27
    1fca:	af 91       	pop	r26
    1fcc:	9f 91       	pop	r25
    1fce:	8f 91       	pop	r24
    1fd0:	7f 91       	pop	r23
    1fd2:	6f 91       	pop	r22
    1fd4:	5f 91       	pop	r21
    1fd6:	4f 91       	pop	r20
    1fd8:	3f 91       	pop	r19
    1fda:	2f 91       	pop	r18
    1fdc:	0f 90       	pop	r0
    1fde:	0b be       	out	0x3b, r0	; 59
    1fe0:	0f 90       	pop	r0
    1fe2:	0f be       	out	0x3f, r0	; 63
    1fe4:	0f 90       	pop	r0
    1fe6:	1f 90       	pop	r1
    1fe8:	18 95       	reti

00001fea <__vector_64>:

/**
 * \brief ISR for transceiver's Awake interrupt
 */
ISR(TRX24_AWAKE_vect)
{
    1fea:	1f 92       	push	r1
    1fec:	0f 92       	push	r0
    1fee:	0f b6       	in	r0, 0x3f	; 63
    1ff0:	0f 92       	push	r0
    1ff2:	11 24       	eor	r1, r1
    1ff4:	0b b6       	in	r0, 0x3b	; 59
    1ff6:	0f 92       	push	r0
    1ff8:	2f 93       	push	r18
    1ffa:	3f 93       	push	r19
    1ffc:	4f 93       	push	r20
    1ffe:	5f 93       	push	r21
    2000:	6f 93       	push	r22
    2002:	7f 93       	push	r23
    2004:	8f 93       	push	r24
    2006:	9f 93       	push	r25
    2008:	af 93       	push	r26
    200a:	bf 93       	push	r27
    200c:	ef 93       	push	r30
    200e:	ff 93       	push	r31
	irq_hdl_trx_awake();
    2010:	e0 91 31 06 	lds	r30, 0x0631	; 0x800631 <irq_hdl_trx_awake>
    2014:	f0 91 32 06 	lds	r31, 0x0632	; 0x800632 <irq_hdl_trx_awake+0x1>
    2018:	19 95       	eicall
}
    201a:	ff 91       	pop	r31
    201c:	ef 91       	pop	r30
    201e:	bf 91       	pop	r27
    2020:	af 91       	pop	r26
    2022:	9f 91       	pop	r25
    2024:	8f 91       	pop	r24
    2026:	7f 91       	pop	r23
    2028:	6f 91       	pop	r22
    202a:	5f 91       	pop	r21
    202c:	4f 91       	pop	r20
    202e:	3f 91       	pop	r19
    2030:	2f 91       	pop	r18
    2032:	0f 90       	pop	r0
    2034:	0b be       	out	0x3b, r0	; 59
    2036:	0f 90       	pop	r0
    2038:	0f be       	out	0x3f, r0	; 63
    203a:	0f 90       	pop	r0
    203c:	1f 90       	pop	r1
    203e:	18 95       	reti

00002040 <__vector_59>:
 *
 * By the time the SFD is detected, the hardware timestamps the
 * current frame in the SCTSR register.
 */
ISR(TRX24_RX_START_vect)
{
    2040:	1f 92       	push	r1
    2042:	0f 92       	push	r0
    2044:	0f b6       	in	r0, 0x3f	; 63
    2046:	0f 92       	push	r0
    2048:	11 24       	eor	r1, r1
#if (defined BEACON_SUPPORT) || (defined ENABLE_TSTAMP)
	irq_hdl_trx_tstamp();
#endif  /* #if (defined BEACON_SUPPORT) || (defined ENABLE_TSTAMP) */
}
    204a:	0f 90       	pop	r0
    204c:	0f be       	out	0x3f, r0	; 63
    204e:	0f 90       	pop	r0
    2050:	1f 90       	pop	r1
    2052:	18 95       	reti

00002054 <__vector_57>:

/**
 * \brief ISR for transceiver's PLL lock interrupt
 */
ISR(TRX24_PLL_LOCK_vect)
{
    2054:	1f 92       	push	r1
    2056:	0f 92       	push	r0
    2058:	0f b6       	in	r0, 0x3f	; 63
    205a:	0f 92       	push	r0
    205c:	11 24       	eor	r1, r1
#ifdef ENABLE_ALL_TRX_IRQS
	irq_hdl_trx_pll_lock();
#endif  /*  ENABLE_ALL_TRX_IRQS*/
}
    205e:	0f 90       	pop	r0
    2060:	0f be       	out	0x3f, r0	; 63
    2062:	0f 90       	pop	r0
    2064:	1f 90       	pop	r1
    2066:	18 95       	reti

00002068 <__vector_58>:

/**
 * \brief ISR for transceiver's PLL unlock interrupt
 */
ISR(TRX24_PLL_UNLOCK_vect)
{
    2068:	1f 92       	push	r1
    206a:	0f 92       	push	r0
    206c:	0f b6       	in	r0, 0x3f	; 63
    206e:	0f 92       	push	r0
    2070:	11 24       	eor	r1, r1
#ifdef ENABLE_ALL_TRX_IRQS
	irq_hdl_trx_pll_unlock();
#endif  /*  ENABLE_ALL_TRX_IRQS*/
}
    2072:	0f 90       	pop	r0
    2074:	0f be       	out	0x3f, r0	; 63
    2076:	0f 90       	pop	r0
    2078:	1f 90       	pop	r1
    207a:	18 95       	reti

0000207c <__vector_62>:

/**
 * \brief ISR for transceiver's address match interrupt
 */
ISR(TRX24_XAH_AMI_vect)
{
    207c:	1f 92       	push	r1
    207e:	0f 92       	push	r0
    2080:	0f b6       	in	r0, 0x3f	; 63
    2082:	0f 92       	push	r0
    2084:	11 24       	eor	r1, r1
#ifdef ENABLE_ALL_TRX_IRQS
	irq_hdl_trx_ami();
#endif  /*  ENABLE_ALL_TRX_IRQS*/
}
    2086:	0f 90       	pop	r0
    2088:	0f be       	out	0x3f, r0	; 63
    208a:	0f 90       	pop	r0
    208c:	1f 90       	pop	r1
    208e:	18 95       	reti

00002090 <__vector_71>:

/**
 * \brief ISR for transceiver's battery low interrupt
 */
ISR(BAT_LOW_vect)
{
    2090:	1f 92       	push	r1
    2092:	0f 92       	push	r0
    2094:	0f b6       	in	r0, 0x3f	; 63
    2096:	0f 92       	push	r0
    2098:	11 24       	eor	r1, r1
#ifdef ENABLE_ALL_TRX_IRQS
	irq_hdl_trx_batmon();
#endif  /*  ENABLE_ALL_TRX_IRQS*/
}
    209a:	0f 90       	pop	r0
    209c:	0f be       	out	0x3f, r0	; 63
    209e:	0f 90       	pop	r0
    20a0:	1f 90       	pop	r1
    20a2:	18 95       	reti

000020a4 <__vector_70>:

/**
 * \brief ISR for transceiver's AES interrupt
 */
ISR(AES_READY_vect)
{
    20a4:	1f 92       	push	r1
    20a6:	0f 92       	push	r0
    20a8:	0f b6       	in	r0, 0x3f	; 63
    20aa:	0f 92       	push	r0
    20ac:	11 24       	eor	r1, r1
#ifdef ENABLE_ALL_TRX_IRQS
	irq_hdl_trx_aes_ready();
#endif  /*  ENABLE_ALL_TRX_IRQS*/
}
    20ae:	0f 90       	pop	r0
    20b0:	0f be       	out	0x3f, r0	; 63
    20b2:	0f 90       	pop	r0
    20b4:	1f 90       	pop	r1
    20b6:	18 95       	reti

000020b8 <__vector_72>:

/**
 * \brief ISR for transceiver's TX_START interrupt
 */
ISR(TRX24_TX_START_vect)
{
    20b8:	1f 92       	push	r1
    20ba:	0f 92       	push	r0
    20bc:	0f b6       	in	r0, 0x3f	; 63
    20be:	0f 92       	push	r0
    20c0:	11 24       	eor	r1, r1
	pal_tx_timestamp = PAL_US_PER_SYMBOLS * SC_READ32(SCCNT);
#endif
#ifdef ENABLE_ALL_TRX_IRQS
	irq_hdl_trx_tx_start();
#endif  /*  ENABLE_ALL_TRX_IRQS*/
}
    20c2:	0f 90       	pop	r0
    20c4:	0f be       	out	0x3f, r0	; 63
    20c6:	0f 90       	pop	r0
    20c8:	1f 90       	pop	r1
    20ca:	18 95       	reti

000020cc <__vector_73>:

/**
 * \brief ISR for transceiver's AMI0 interrupt
 */
ISR(TRX24_AMI0_vect)
{
    20cc:	1f 92       	push	r1
    20ce:	0f 92       	push	r0
    20d0:	0f b6       	in	r0, 0x3f	; 63
    20d2:	0f 92       	push	r0
    20d4:	11 24       	eor	r1, r1
#ifdef ENABLE_ALL_TRX_IRQS
	irq_hdl_trx_ami0();
#endif  /*  ENABLE_ALL_TRX_IRQS*/
}
    20d6:	0f 90       	pop	r0
    20d8:	0f be       	out	0x3f, r0	; 63
    20da:	0f 90       	pop	r0
    20dc:	1f 90       	pop	r1
    20de:	18 95       	reti

000020e0 <__vector_74>:

/**
 * \brief ISR for transceiver's AMI1 interrupt
 */
ISR(TRX24_AMI1_vect)
{
    20e0:	1f 92       	push	r1
    20e2:	0f 92       	push	r0
    20e4:	0f b6       	in	r0, 0x3f	; 63
    20e6:	0f 92       	push	r0
    20e8:	11 24       	eor	r1, r1
#ifdef ENABLE_ALL_TRX_IRQS
	irq_hdl_trx_ami1();
#endif  /*  ENABLE_ALL_TRX_IRQS*/
}
    20ea:	0f 90       	pop	r0
    20ec:	0f be       	out	0x3f, r0	; 63
    20ee:	0f 90       	pop	r0
    20f0:	1f 90       	pop	r1
    20f2:	18 95       	reti

000020f4 <__vector_75>:

/**
 * \brief ISR for transceiver's AMI2 interrupt
 */
ISR(TRX24_AMI2_vect)
{
    20f4:	1f 92       	push	r1
    20f6:	0f 92       	push	r0
    20f8:	0f b6       	in	r0, 0x3f	; 63
    20fa:	0f 92       	push	r0
    20fc:	11 24       	eor	r1, r1
#ifdef ENABLE_ALL_TRX_IRQS
	irq_hdl_trx_ami2();
#endif  /*  ENABLE_ALL_TRX_IRQS*/
}
    20fe:	0f 90       	pop	r0
    2100:	0f be       	out	0x3f, r0	; 63
    2102:	0f 90       	pop	r0
    2104:	1f 90       	pop	r1
    2106:	18 95       	reti

00002108 <__vector_76>:

/**
 * \brief ISR for transceiver's AMI3 interrupt
 */
ISR(TRX24_AMI3_vect)
{
    2108:	1f 92       	push	r1
    210a:	0f 92       	push	r0
    210c:	0f b6       	in	r0, 0x3f	; 63
    210e:	0f 92       	push	r0
    2110:	11 24       	eor	r1, r1
#ifdef ENABLE_ALL_TRX_IRQS
	irq_hdl_trx_ami3();
#endif  /*  ENABLE_ALL_TRX_IRQS*/
}
    2112:	0f 90       	pop	r0
    2114:	0f be       	out	0x3f, r0	; 63
    2116:	0f 90       	pop	r0
    2118:	1f 90       	pop	r1
    211a:	18 95       	reti

0000211c <trx_rx_end_handler_cb>:
 * \brief Transceiver interrupt handler
 *
 * This function handles the transceiver generated interrupts for RX end.
 */
void trx_rx_end_handler_cb(void)
{
    211c:	1f 93       	push	r17
    211e:	cf 93       	push	r28
    2120:	df 93       	push	r29
    2122:	1f 92       	push	r1
    2124:	cd b7       	in	r28, 0x3d	; 61
    2126:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    2128:	8f b7       	in	r24, 0x3f	; 63
    212a:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    212c:	f8 94       	cli
	return flags;
    212e:	19 81       	ldd	r17, Y+1	; 0x01
	ENTER_CRITICAL_REGION();

	/* Handle rx interrupt. */
	handle_received_frame_irq(); /* see tal_rx.c */
    2130:	19 d2       	rcall	.+1074   	; 0x2564 <handle_received_frame_irq>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2132:	1f bf       	out	0x3f, r17	; 63

	LEAVE_CRITICAL_REGION();
} /* trx_rx_end_handler_cb() */
    2134:	0f 90       	pop	r0
    2136:	df 91       	pop	r29
    2138:	cf 91       	pop	r28
    213a:	1f 91       	pop	r17
    213c:	08 95       	ret

0000213e <trx_tx_end_handler_cb>:
 * \brief Transceiver interrupt handler
 *
 * This function handles the transceiver generated interrupts for TX end.
 */
void trx_tx_end_handler_cb(void)
{
    213e:	1f 93       	push	r17
    2140:	cf 93       	push	r28
    2142:	df 93       	push	r29
    2144:	1f 92       	push	r1
    2146:	cd b7       	in	r28, 0x3d	; 61
    2148:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    214a:	8f b7       	in	r24, 0x3f	; 63
    214c:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    214e:	f8 94       	cli
	return flags;
    2150:	19 81       	ldd	r17, Y+1	; 0x01
	ENTER_CRITICAL_REGION();

	/* Get the result and push it to the queue. */
	handle_tx_end_irq();        /* see tal_tx.c */
    2152:	a6 d3       	rcall	.+1868   	; 0x28a0 <handle_tx_end_irq>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2154:	1f bf       	out	0x3f, r17	; 63

	LEAVE_CRITICAL_REGION();
} /* trx_tx_end_handler_cb() */
    2156:	0f 90       	pop	r0
    2158:	df 91       	pop	r29
    215a:	cf 91       	pop	r28
    215c:	1f 91       	pop	r17
    215e:	08 95       	ret

00002160 <trx_awake_handler_cb>:
 * This function handles the transceiver awake end interrupt.
 */
void trx_awake_handler_cb(void)
{
	/* Set the wake-up flag. */
	tal_awake_end_flag = true;
    2160:	81 e0       	ldi	r24, 0x01	; 1
    2162:	80 93 a0 08 	sts	0x08A0, r24	; 0x8008a0 <tal_awake_end_flag>
    2166:	08 95       	ret

00002168 <limit_tx_pwr>:
		/* Invalid attribute id */
		return MAC_UNSUPPORTED_ATTRIBUTE;
	}

	return MAC_SUCCESS;
} /* tal_pib_get() */
    2168:	85 fd       	sbrc	r24, 5
    216a:	03 c0       	rjmp	.+6      	; 0x2172 <limit_tx_pwr+0xa>
    216c:	98 2f       	mov	r25, r24
    216e:	9f 73       	andi	r25, 0x3F	; 63
    2170:	04 c0       	rjmp	.+8      	; 0x217a <limit_tx_pwr+0x12>
    2172:	98 2f       	mov	r25, r24
    2174:	91 95       	neg	r25
    2176:	9f 71       	andi	r25, 0x1F	; 31
    2178:	91 95       	neg	r25
    217a:	e2 e6       	ldi	r30, 0x62	; 98
    217c:	f1 e0       	ldi	r31, 0x01	; 1
    217e:	24 91       	lpm	r18, Z
    2180:	29 17       	cp	r18, r25
    2182:	54 f4       	brge	.+20     	; 0x2198 <limit_tx_pwr+0x30>
    2184:	84 91       	lpm	r24, Z
    2186:	80 3e       	cpi	r24, 0xE0	; 224
    2188:	b4 f0       	brlt	.+44     	; 0x21b6 <limit_tx_pwr+0x4e>
    218a:	80 32       	cpi	r24, 0x20	; 32
    218c:	b4 f4       	brge	.+44     	; 0x21ba <limit_tx_pwr+0x52>
    218e:	88 23       	and	r24, r24
    2190:	cc f4       	brge	.+50     	; 0x21c4 <limit_tx_pwr+0x5c>
    2192:	8f 71       	andi	r24, 0x1F	; 31
    2194:	80 62       	ori	r24, 0x20	; 32
    2196:	16 c0       	rjmp	.+44     	; 0x21c4 <limit_tx_pwr+0x5c>
    2198:	e1 e7       	ldi	r30, 0x71	; 113
    219a:	f1 e0       	ldi	r31, 0x01	; 1
    219c:	24 91       	lpm	r18, Z
    219e:	92 17       	cp	r25, r18
    21a0:	8c f4       	brge	.+34     	; 0x21c4 <limit_tx_pwr+0x5c>
    21a2:	84 91       	lpm	r24, Z
    21a4:	80 3e       	cpi	r24, 0xE0	; 224
    21a6:	5c f0       	brlt	.+22     	; 0x21be <limit_tx_pwr+0x56>
    21a8:	80 32       	cpi	r24, 0x20	; 32
    21aa:	5c f4       	brge	.+22     	; 0x21c2 <limit_tx_pwr+0x5a>
    21ac:	88 23       	and	r24, r24
    21ae:	54 f4       	brge	.+20     	; 0x21c4 <limit_tx_pwr+0x5c>
    21b0:	8f 71       	andi	r24, 0x1F	; 31
    21b2:	80 62       	ori	r24, 0x20	; 32
    21b4:	07 c0       	rjmp	.+14     	; 0x21c4 <limit_tx_pwr+0x5c>
    21b6:	80 e2       	ldi	r24, 0x20	; 32
    21b8:	05 c0       	rjmp	.+10     	; 0x21c4 <limit_tx_pwr+0x5c>
    21ba:	8f e1       	ldi	r24, 0x1F	; 31
    21bc:	03 c0       	rjmp	.+6      	; 0x21c4 <limit_tx_pwr+0x5c>
    21be:	80 e2       	ldi	r24, 0x20	; 32
    21c0:	01 c0       	rjmp	.+2      	; 0x21c4 <limit_tx_pwr+0x5c>
    21c2:	8f e1       	ldi	r24, 0x1F	; 31
    21c4:	80 68       	ori	r24, 0x80	; 128
    21c6:	08 95       	ret

000021c8 <init_tal_pib>:
    21c8:	cf 93       	push	r28
    21ca:	df 93       	push	r29
    21cc:	cd e7       	ldi	r28, 0x7D	; 125
    21ce:	d8 e0       	ldi	r29, 0x08	; 8
    21d0:	84 e0       	ldi	r24, 0x04	; 4
    21d2:	8c 8b       	std	Y+20, r24	; 0x14
    21d4:	83 e0       	ldi	r24, 0x03	; 3
    21d6:	8d 8b       	std	Y+21, r24	; 0x15
    21d8:	2f ef       	ldi	r18, 0xFF	; 255
    21da:	3f ef       	ldi	r19, 0xFF	; 255
    21dc:	3f 87       	std	Y+15, r19	; 0x0f
    21de:	2e 87       	std	Y+14, r18	; 0x0e
    21e0:	3d 87       	std	Y+13, r19	; 0x0d
    21e2:	2c 87       	std	Y+12, r18	; 0x0c
    21e4:	9b e0       	ldi	r25, 0x0B	; 11
    21e6:	9b 8b       	std	Y+19, r25	; 0x13
    21e8:	18 8e       	std	Y+24, r1	; 0x18
    21ea:	40 e0       	ldi	r20, 0x00	; 0
    21ec:	58 ef       	ldi	r21, 0xF8	; 248
    21ee:	6f ef       	ldi	r22, 0xFF	; 255
    21f0:	77 e0       	ldi	r23, 0x07	; 7
    21f2:	48 87       	std	Y+8, r20	; 0x08
    21f4:	59 87       	std	Y+9, r21	; 0x09
    21f6:	6a 87       	std	Y+10, r22	; 0x0a
    21f8:	7b 87       	std	Y+11, r23	; 0x0b
    21fa:	2a e0       	ldi	r18, 0x0A	; 10
    21fc:	31 e0       	ldi	r19, 0x01	; 1
    21fe:	39 8b       	std	Y+17, r19	; 0x11
    2200:	28 8b       	std	Y+16, r18	; 0x10
    2202:	9a e0       	ldi	r25, 0x0A	; 10
    2204:	99 8f       	std	Y+25, r25	; 0x19
    2206:	92 e0       	ldi	r25, 0x02	; 2
    2208:	9a 8f       	std	Y+26, r25	; 0x1a
    220a:	95 e0       	ldi	r25, 0x05	; 5
    220c:	9b 8f       	std	Y+27, r25	; 0x1b
    220e:	8c 8f       	std	Y+28, r24	; 0x1c
    2210:	84 e8       	ldi	r24, 0x84	; 132
    2212:	aa df       	rcall	.-172    	; 0x2168 <limit_tx_pwr>
    2214:	8f 8b       	std	Y+23, r24	; 0x17
    2216:	81 e0       	ldi	r24, 0x01	; 1
    2218:	8a 8b       	std	Y+18, r24	; 0x12
    221a:	1e 8a       	std	Y+22, r1	; 0x16
    221c:	df 91       	pop	r29
    221e:	cf 91       	pop	r28
    2220:	08 95       	ret

00002222 <convert_phyTransmitPower_to_reg_value>:
{
	int8_t dbm_value;
	uint8_t i;
	int8_t trx_tx_level;

	dbm_value = CONV_phyTransmitPower_TO_DBM(phyTransmitPower_value);
    2222:	85 fd       	sbrc	r24, 5
    2224:	02 c0       	rjmp	.+4      	; 0x222a <convert_phyTransmitPower_to_reg_value+0x8>
    2226:	8f 73       	andi	r24, 0x3F	; 63
    2228:	03 c0       	rjmp	.+6      	; 0x2230 <convert_phyTransmitPower_to_reg_value+0xe>
    222a:	81 95       	neg	r24
    222c:	8f 71       	andi	r24, 0x1F	; 31
    222e:	81 95       	neg	r24

	/* Compare to the register value to identify the value that matches. */
	for (i = 0; i < sizeof(tx_pwr_table); i++) {
		trx_tx_level = (int8_t)PGM_READ_BYTE(&tx_pwr_table[i]);
    2230:	e2 e6       	ldi	r30, 0x62	; 98
    2232:	f1 e0       	ldi	r31, 0x01	; 1
    2234:	94 91       	lpm	r25, Z
		if (trx_tx_level <= dbm_value) {
    2236:	89 17       	cp	r24, r25
    2238:	3c f4       	brge	.+14     	; 0x2248 <convert_phyTransmitPower_to_reg_value+0x26>
    223a:	e3 e6       	ldi	r30, 0x63	; 99
    223c:	f1 e0       	ldi	r31, 0x01	; 1
	int8_t trx_tx_level;

	dbm_value = CONV_phyTransmitPower_TO_DBM(phyTransmitPower_value);

	/* Compare to the register value to identify the value that matches. */
	for (i = 0; i < sizeof(tx_pwr_table); i++) {
    223e:	21 e0       	ldi	r18, 0x01	; 1
		trx_tx_level = (int8_t)PGM_READ_BYTE(&tx_pwr_table[i]);
    2240:	94 91       	lpm	r25, Z
		if (trx_tx_level <= dbm_value) {
    2242:	89 17       	cp	r24, r25
    2244:	3c f0       	brlt	.+14     	; 0x2254 <convert_phyTransmitPower_to_reg_value+0x32>
    2246:	01 c0       	rjmp	.+2      	; 0x224a <convert_phyTransmitPower_to_reg_value+0x28>
	int8_t trx_tx_level;

	dbm_value = CONV_phyTransmitPower_TO_DBM(phyTransmitPower_value);

	/* Compare to the register value to identify the value that matches. */
	for (i = 0; i < sizeof(tx_pwr_table); i++) {
    2248:	20 e0       	ldi	r18, 0x00	; 0
		trx_tx_level = (int8_t)PGM_READ_BYTE(&tx_pwr_table[i]);
		if (trx_tx_level <= dbm_value) {
			if (trx_tx_level < dbm_value) {
    224a:	98 17       	cp	r25, r24
    224c:	4c f4       	brge	.+18     	; 0x2260 <convert_phyTransmitPower_to_reg_value+0x3e>
				return (i - 1);
    224e:	8f ef       	ldi	r24, 0xFF	; 255
    2250:	82 0f       	add	r24, r18
    2252:	08 95       	ret
	int8_t trx_tx_level;

	dbm_value = CONV_phyTransmitPower_TO_DBM(phyTransmitPower_value);

	/* Compare to the register value to identify the value that matches. */
	for (i = 0; i < sizeof(tx_pwr_table); i++) {
    2254:	2f 5f       	subi	r18, 0xFF	; 255
    2256:	31 96       	adiw	r30, 0x01	; 1
    2258:	20 31       	cpi	r18, 0x10	; 16
    225a:	91 f7       	brne	.-28     	; 0x2240 <convert_phyTransmitPower_to_reg_value+0x1e>
			return i;
		}
	}

	/* This code should never be reached. */
	return 0;
    225c:	80 e0       	ldi	r24, 0x00	; 0
    225e:	08 95       	ret
    2260:	82 2f       	mov	r24, r18
}
    2262:	08 95       	ret

00002264 <write_all_tal_pib_to_trx>:
 *
 * This function writes all shadow PIB variables to the transceiver.
 * It is assumed that the radio does not sleep.
 */
void write_all_tal_pib_to_trx(void)
{
    2264:	cf 93       	push	r28
    2266:	df 93       	push	r29
	uint8_t *ptr_to_reg;

	trx_reg_write(RG_PAN_ID_0, (uint8_t)tal_pib.PANId);
    2268:	ed e7       	ldi	r30, 0x7D	; 125
    226a:	f8 e0       	ldi	r31, 0x08	; 8
    226c:	86 85       	ldd	r24, Z+14	; 0x0e
    226e:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <__TEXT_REGION_LENGTH__+0x7c0162>
	trx_reg_write(RG_PAN_ID_1, (uint8_t)(tal_pib.PANId >> 8));
    2272:	87 85       	ldd	r24, Z+15	; 0x0f
    2274:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <__TEXT_REGION_LENGTH__+0x7c0163>
    2278:	e4 e6       	ldi	r30, 0x64	; 100
    227a:	f1 e0       	ldi	r31, 0x01	; 1

	ptr_to_reg = (uint8_t *)&tal_pib.IeeeAddress;
    227c:	ad e7       	ldi	r26, 0x7D	; 125
    227e:	b8 e0       	ldi	r27, 0x08	; 8
	for (uint8_t i = 0; i < 8; i++) {
		trx_reg_write((RG_IEEE_ADDR_0 + i), *ptr_to_reg);
    2280:	8d 91       	ld	r24, X+
    2282:	81 93       	st	Z+, r24

	trx_reg_write(RG_PAN_ID_0, (uint8_t)tal_pib.PANId);
	trx_reg_write(RG_PAN_ID_1, (uint8_t)(tal_pib.PANId >> 8));

	ptr_to_reg = (uint8_t *)&tal_pib.IeeeAddress;
	for (uint8_t i = 0; i < 8; i++) {
    2284:	ec 36       	cpi	r30, 0x6C	; 108
    2286:	31 e0       	ldi	r19, 0x01	; 1
    2288:	f3 07       	cpc	r31, r19
    228a:	d1 f7       	brne	.-12     	; 0x2280 <write_all_tal_pib_to_trx+0x1c>
		trx_reg_write((RG_IEEE_ADDR_0 + i), *ptr_to_reg);
		ptr_to_reg++;
	}

	trx_reg_write(RG_SHORT_ADDR_0, (uint8_t)tal_pib.ShortAddress);
    228c:	ed e7       	ldi	r30, 0x7D	; 125
    228e:	f8 e0       	ldi	r31, 0x08	; 8
    2290:	84 85       	ldd	r24, Z+12	; 0x0c
    2292:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <__TEXT_REGION_LENGTH__+0x7c0160>
	trx_reg_write(RG_SHORT_ADDR_1,
    2296:	85 85       	ldd	r24, Z+13	; 0x0d
    2298:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <__TEXT_REGION_LENGTH__+0x7c0161>
			(uint8_t)(tal_pib.ShortAddress >> 8));

	/* configure TX_ARET; CSMA and CCA */
	trx_bit_write(SR_CCA_MODE, tal_pib.CCAMode);
    229c:	48 e4       	ldi	r20, 0x48	; 72
    229e:	51 e0       	ldi	r21, 0x01	; 1
    22a0:	da 01       	movw	r26, r20
    22a2:	8c 91       	ld	r24, X
    22a4:	22 89       	ldd	r18, Z+18	; 0x12
    22a6:	b0 e2       	ldi	r27, 0x20	; 32
    22a8:	2b 9f       	mul	r18, r27
    22aa:	90 01       	movw	r18, r0
    22ac:	11 24       	eor	r1, r1
    22ae:	20 76       	andi	r18, 0x60	; 96
    22b0:	8f 79       	andi	r24, 0x9F	; 159
    22b2:	82 2b       	or	r24, r18
    22b4:	da 01       	movw	r26, r20
    22b6:	8c 93       	st	X, r24
	trx_bit_write(SR_MIN_BE, tal_pib.MinBE);
    22b8:	cf e6       	ldi	r28, 0x6F	; 111
    22ba:	d1 e0       	ldi	r29, 0x01	; 1
    22bc:	88 81       	ld	r24, Y
    22be:	95 89       	ldd	r25, Z+21	; 0x15
    22c0:	9f 70       	andi	r25, 0x0F	; 15
    22c2:	80 7f       	andi	r24, 0xF0	; 240
    22c4:	89 2b       	or	r24, r25
    22c6:	88 83       	st	Y, r24

	trx_bit_write(SR_AACK_I_AM_COORD, tal_pib.PrivatePanCoordinator);
    22c8:	2e e6       	ldi	r18, 0x6E	; 110
    22ca:	31 e0       	ldi	r19, 0x01	; 1
    22cc:	d9 01       	movw	r26, r18
    22ce:	8c 91       	ld	r24, X
    22d0:	96 89       	ldd	r25, Z+22	; 0x16
    22d2:	99 0f       	add	r25, r25
    22d4:	99 0f       	add	r25, r25
    22d6:	99 0f       	add	r25, r25
    22d8:	98 70       	andi	r25, 0x08	; 8
    22da:	87 7f       	andi	r24, 0xF7	; 247
    22dc:	89 2b       	or	r24, r25
    22de:	8c 93       	st	X, r24

	/* set phy parameter */
	trx_bit_write(SR_MAX_BE, tal_pib.MaxBE);
    22e0:	28 81       	ld	r18, Y
    22e2:	93 8d       	ldd	r25, Z+27	; 0x1b
    22e4:	b0 e1       	ldi	r27, 0x10	; 16
    22e6:	9b 9f       	mul	r25, r27
    22e8:	c0 01       	movw	r24, r0
    22ea:	11 24       	eor	r1, r1
    22ec:	92 2f       	mov	r25, r18
    22ee:	9f 70       	andi	r25, 0x0F	; 15
    22f0:	89 2b       	or	r24, r25
    22f2:	88 83       	st	Y, r24

#ifdef HIGH_DATA_RATE_SUPPORT
	apply_channel_page_configuration(tal_pib.CurrentPage);
#endif

	trx_bit_write(SR_CHANNEL, tal_pib.CurrentChannel);
    22f4:	da 01       	movw	r26, r20
    22f6:	8c 91       	ld	r24, X
    22f8:	93 89       	ldd	r25, Z+19	; 0x13
    22fa:	9f 71       	andi	r25, 0x1F	; 31
    22fc:	80 7e       	andi	r24, 0xE0	; 224
    22fe:	89 2b       	or	r24, r25
    2300:	8c 93       	st	X, r24
	{
		uint8_t reg_value;

		reg_value = convert_phyTransmitPower_to_reg_value(
    2302:	87 89       	ldd	r24, Z+23	; 0x17
    2304:	8e df       	rcall	.-228    	; 0x2222 <convert_phyTransmitPower_to_reg_value>
				tal_pib.TransmitPower);
		trx_bit_write(SR_TX_PWR, reg_value);
    2306:	e5 e4       	ldi	r30, 0x45	; 69
    2308:	f1 e0       	ldi	r31, 0x01	; 1
    230a:	90 81       	ld	r25, Z
    230c:	90 7f       	andi	r25, 0xF0	; 240
    230e:	8f 70       	andi	r24, 0x0F	; 15
    2310:	89 2b       	or	r24, r25
    2312:	80 83       	st	Z, r24
#ifdef PROMISCUOUS_MODE
	if (tal_pib.PromiscuousMode) {
		set_trx_state(CMD_RX_ON);
	}
#endif
}
    2314:	df 91       	pop	r29
    2316:	cf 91       	pop	r28
    2318:	08 95       	ret

0000231a <tal_pib_set>:
 *         in TAL_IDLE state.
 *         MAC_SUCCESS if the attempt to set the PIB attribute was successful
 *         TAL_TRX_ASLEEP if trx is in SLEEP mode and access to trx is required
 */
retval_t tal_pib_set(uint8_t attribute, pib_value_t *value)
{
    231a:	cf 93       	push	r28
    231c:	df 93       	push	r29
	 * and those that are simple variable udpates.
	 * Ensure that the transceiver is not in SLEEP.
	 * If it is in SLEEP, change it to TRX_OFF.
	 */

	switch (attribute) {
    231e:	8e 34       	cpi	r24, 0x4E	; 78
    2320:	41 f0       	breq	.+16     	; 0x2332 <tal_pib_set+0x18>
    2322:	89 35       	cpi	r24, 0x59	; 89
    2324:	61 f4       	brne	.+24     	; 0x233e <tal_pib_set+0x24>

		/*
		 * The new PIB value is not immediately written to the
		 * transceiver. This is done on a frame-by-frame base.
		 */
		tal_pib.MaxFrameRetries = value->pib_value_8bit;
    2326:	fb 01       	movw	r30, r22
    2328:	80 81       	ld	r24, Z
    232a:	80 93 99 08 	sts	0x0899, r24	; 0x800899 <tal_pib+0x1c>
			return MAC_UNSUPPORTED_ATTRIBUTE;
		}

		break; /* end of 'default' from 'switch (attribute)' */
	}
	return MAC_SUCCESS;
    232e:	80 e0       	ldi	r24, 0x00	; 0
		/*
		 * The new PIB value is not immediately written to the
		 * transceiver. This is done on a frame-by-frame base.
		 */
		tal_pib.MaxFrameRetries = value->pib_value_8bit;
		break;
    2330:	0b c1       	rjmp	.+534    	; 0x2548 <tal_pib_set+0x22e>

		/*
		 * The new PIB value is not immediately written to the
		 * transceiver. This is done on a frame-by-frame base.
		 */
		tal_pib.MaxCSMABackoffs = value->pib_value_8bit;
    2332:	fb 01       	movw	r30, r22
    2334:	80 81       	ld	r24, Z
    2336:	80 93 91 08 	sts	0x0891, r24	; 0x800891 <tal_pib+0x14>
			return MAC_UNSUPPORTED_ATTRIBUTE;
		}

		break; /* end of 'default' from 'switch (attribute)' */
	}
	return MAC_SUCCESS;
    233a:	80 e0       	ldi	r24, 0x00	; 0
		/*
		 * The new PIB value is not immediately written to the
		 * transceiver. This is done on a frame-by-frame base.
		 */
		tal_pib.MaxCSMABackoffs = value->pib_value_8bit;
		break;
    233c:	05 c1       	rjmp	.+522    	; 0x2548 <tal_pib_set+0x22e>
		/*
		 * Following PIBs require access to trx.
		 * Therefore trx must be at least in TRX_OFF.
		 */

		if (tal_trx_status == TRX_SLEEP) {
    233e:	90 91 9c 08 	lds	r25, 0x089C	; 0x80089c <tal_trx_status>
    2342:	9f 30       	cpi	r25, 0x0F	; 15
    2344:	09 f4       	brne	.+2      	; 0x2348 <tal_pib_set+0x2e>
    2346:	dc c0       	rjmp	.+440    	; 0x2500 <tal_pib_set+0x1e6>
			/* While trx is in SLEEP, register cannot be accessed.
			**/
			return TAL_TRX_ASLEEP;
		}

		switch (attribute) {
    2348:	8b 30       	cpi	r24, 0x0B	; 11
    234a:	09 f4       	brne	.+2      	; 0x234e <tal_pib_set+0x34>
    234c:	c9 c0       	rjmp	.+402    	; 0x24e0 <tal_pib_set+0x1c6>
    234e:	80 f4       	brcc	.+32     	; 0x2370 <tal_pib_set+0x56>
    2350:	eb 01       	movw	r28, r22
    2352:	82 30       	cpi	r24, 0x02	; 2
    2354:	09 f4       	brne	.+2      	; 0x2358 <tal_pib_set+0x3e>
    2356:	84 c0       	rjmp	.+264    	; 0x2460 <tal_pib_set+0x146>
    2358:	20 f4       	brcc	.+8      	; 0x2362 <tal_pib_set+0x48>
    235a:	88 23       	and	r24, r24
    235c:	09 f4       	brne	.+2      	; 0x2360 <tal_pib_set+0x46>
    235e:	46 c0       	rjmp	.+140    	; 0x23ec <tal_pib_set+0xd2>
    2360:	d1 c0       	rjmp	.+418    	; 0x2504 <tal_pib_set+0x1ea>
    2362:	83 30       	cpi	r24, 0x03	; 3
    2364:	09 f4       	brne	.+2      	; 0x2368 <tal_pib_set+0x4e>
    2366:	8c c0       	rjmp	.+280    	; 0x2480 <tal_pib_set+0x166>
    2368:	84 30       	cpi	r24, 0x04	; 4
    236a:	09 f4       	brne	.+2      	; 0x236e <tal_pib_set+0x54>
    236c:	5a c0       	rjmp	.+180    	; 0x2422 <tal_pib_set+0x108>
    236e:	ca c0       	rjmp	.+404    	; 0x2504 <tal_pib_set+0x1ea>
    2370:	83 35       	cpi	r24, 0x53	; 83
    2372:	79 f1       	breq	.+94     	; 0x23d2 <tal_pib_set+0xb8>
    2374:	28 f4       	brcc	.+10     	; 0x2380 <tal_pib_set+0x66>
    2376:	8f 34       	cpi	r24, 0x4F	; 79
    2378:	51 f0       	breq	.+20     	; 0x238e <tal_pib_set+0x74>
    237a:	80 35       	cpi	r24, 0x50	; 80
    237c:	e9 f0       	breq	.+58     	; 0x23b8 <tal_pib_set+0x9e>
    237e:	c2 c0       	rjmp	.+388    	; 0x2504 <tal_pib_set+0x1ea>
    2380:	87 35       	cpi	r24, 0x57	; 87
    2382:	09 f4       	brne	.+2      	; 0x2386 <tal_pib_set+0x6c>
    2384:	56 c0       	rjmp	.+172    	; 0x2432 <tal_pib_set+0x118>
    2386:	80 3f       	cpi	r24, 0xF0	; 240
    2388:	09 f4       	brne	.+2      	; 0x238c <tal_pib_set+0x72>
    238a:	8b c0       	rjmp	.+278    	; 0x24a2 <tal_pib_set+0x188>
    238c:	bb c0       	rjmp	.+374    	; 0x2504 <tal_pib_set+0x1ea>
		case macMinBE:
			tal_pib.MinBE = value->pib_value_8bit;
    238e:	fb 01       	movw	r30, r22
    2390:	80 81       	ld	r24, Z
    2392:	ed e7       	ldi	r30, 0x7D	; 125
    2394:	f8 e0       	ldi	r31, 0x08	; 8
    2396:	85 8b       	std	Z+21, r24	; 0x15
			/*
			 * macMinBE must not be larger than macMaxBE or
			 * calculation
			 * of macMaxFrameWaitTotalTime will fail.
			 */
			if (tal_pib.MinBE > tal_pib.MaxBE) {
    2398:	93 8d       	ldd	r25, Z+27	; 0x1b
    239a:	98 17       	cp	r25, r24
    239c:	10 f4       	brcc	.+4      	; 0x23a2 <tal_pib_set+0x88>
				tal_pib.MinBE = tal_pib.MaxBE;
    239e:	90 93 92 08 	sts	0x0892, r25	; 0x800892 <tal_pib+0x15>
			}
#endif  /* REDUCED_PARAM_CHECK */

			trx_bit_write(SR_MIN_BE, tal_pib.MinBE);
    23a2:	ef e6       	ldi	r30, 0x6F	; 111
    23a4:	f1 e0       	ldi	r31, 0x01	; 1
    23a6:	80 81       	ld	r24, Z
    23a8:	90 91 92 08 	lds	r25, 0x0892	; 0x800892 <tal_pib+0x15>
    23ac:	9f 70       	andi	r25, 0x0F	; 15
    23ae:	80 7f       	andi	r24, 0xF0	; 240
    23b0:	89 2b       	or	r24, r25
    23b2:	80 83       	st	Z, r24
			return MAC_UNSUPPORTED_ATTRIBUTE;
		}

		break; /* end of 'default' from 'switch (attribute)' */
	}
	return MAC_SUCCESS;
    23b4:	80 e0       	ldi	r24, 0x00	; 0
				tal_pib.MinBE = tal_pib.MaxBE;
			}
#endif  /* REDUCED_PARAM_CHECK */

			trx_bit_write(SR_MIN_BE, tal_pib.MinBE);
			break;
    23b6:	c8 c0       	rjmp	.+400    	; 0x2548 <tal_pib_set+0x22e>

		case macPANId:
			tal_pib.PANId = value->pib_value_16bit;
    23b8:	fb 01       	movw	r30, r22
    23ba:	90 81       	ld	r25, Z
    23bc:	81 81       	ldd	r24, Z+1	; 0x01
    23be:	ed e7       	ldi	r30, 0x7D	; 125
    23c0:	f8 e0       	ldi	r31, 0x08	; 8
    23c2:	96 87       	std	Z+14, r25	; 0x0e
    23c4:	87 87       	std	Z+15, r24	; 0x0f
			trx_reg_write(RG_PAN_ID_0, (uint8_t)tal_pib.PANId);
    23c6:	90 93 62 01 	sts	0x0162, r25	; 0x800162 <__TEXT_REGION_LENGTH__+0x7c0162>
			trx_reg_write(RG_PAN_ID_1,
    23ca:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <__TEXT_REGION_LENGTH__+0x7c0163>
			return MAC_UNSUPPORTED_ATTRIBUTE;
		}

		break; /* end of 'default' from 'switch (attribute)' */
	}
	return MAC_SUCCESS;
    23ce:	80 e0       	ldi	r24, 0x00	; 0
		case macPANId:
			tal_pib.PANId = value->pib_value_16bit;
			trx_reg_write(RG_PAN_ID_0, (uint8_t)tal_pib.PANId);
			trx_reg_write(RG_PAN_ID_1,
					(uint8_t)(tal_pib.PANId >> 8));
			break;
    23d0:	bb c0       	rjmp	.+374    	; 0x2548 <tal_pib_set+0x22e>

		case macShortAddress:
			tal_pib.ShortAddress = value->pib_value_16bit;
    23d2:	fb 01       	movw	r30, r22
    23d4:	90 81       	ld	r25, Z
    23d6:	81 81       	ldd	r24, Z+1	; 0x01
    23d8:	ed e7       	ldi	r30, 0x7D	; 125
    23da:	f8 e0       	ldi	r31, 0x08	; 8
    23dc:	94 87       	std	Z+12, r25	; 0x0c
    23de:	85 87       	std	Z+13, r24	; 0x0d
			trx_reg_write(RG_SHORT_ADDR_0,
    23e0:	90 93 60 01 	sts	0x0160, r25	; 0x800160 <__TEXT_REGION_LENGTH__+0x7c0160>
					(uint8_t)tal_pib.ShortAddress);
			trx_reg_write(RG_SHORT_ADDR_1,
    23e4:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <__TEXT_REGION_LENGTH__+0x7c0161>
			return MAC_UNSUPPORTED_ATTRIBUTE;
		}

		break; /* end of 'default' from 'switch (attribute)' */
	}
	return MAC_SUCCESS;
    23e8:	80 e0       	ldi	r24, 0x00	; 0
			tal_pib.ShortAddress = value->pib_value_16bit;
			trx_reg_write(RG_SHORT_ADDR_0,
					(uint8_t)tal_pib.ShortAddress);
			trx_reg_write(RG_SHORT_ADDR_1,
					(uint8_t)(tal_pib.ShortAddress >> 8));
			break;
    23ea:	ae c0       	rjmp	.+348    	; 0x2548 <tal_pib_set+0x22e>

		case phyCurrentChannel:
			if (tal_state != TAL_IDLE) {
    23ec:	80 91 a1 08 	lds	r24, 0x08A1	; 0x8008a1 <tal_state>
    23f0:	81 11       	cpse	r24, r1
    23f2:	8a c0       	rjmp	.+276    	; 0x2508 <tal_pib_set+0x1ee>
				return TAL_BUSY;
			}

			if ((uint32_t)TRX_SUPPORTED_CHANNELS &
					((uint32_t)0x01 <<
					value->pib_value_8bit)) {
    23f4:	88 81       	ld	r24, Y
		case phyCurrentChannel:
			if (tal_state != TAL_IDLE) {
				return TAL_BUSY;
			}

			if ((uint32_t)TRX_SUPPORTED_CHANNELS &
    23f6:	40 e0       	ldi	r20, 0x00	; 0
    23f8:	58 ef       	ldi	r21, 0xF8	; 248
    23fa:	6f ef       	ldi	r22, 0xFF	; 255
    23fc:	77 e0       	ldi	r23, 0x07	; 7
    23fe:	08 2e       	mov	r0, r24
    2400:	04 c0       	rjmp	.+8      	; 0x240a <tal_pib_set+0xf0>
    2402:	76 95       	lsr	r23
    2404:	67 95       	ror	r22
    2406:	57 95       	ror	r21
    2408:	47 95       	ror	r20
    240a:	0a 94       	dec	r0
    240c:	d2 f7       	brpl	.-12     	; 0x2402 <tal_pib_set+0xe8>
    240e:	40 ff       	sbrs	r20, 0
    2410:	7d c0       	rjmp	.+250    	; 0x250c <tal_pib_set+0x1f2>

				/*
				 * Set trx to "soft" off avoiding that ongoing
				 * transaction (e.g. ACK) are interrupted.
				 */
				if (tal_trx_status != TRX_OFF) {
    2412:	98 30       	cpi	r25, 0x08	; 8
    2414:	09 f4       	brne	.+2      	; 0x2418 <tal_pib_set+0xfe>
    2416:	80 c0       	rjmp	.+256    	; 0x2518 <tal_pib_set+0x1fe>
					                                   **/
					do {
						/* set TRX_OFF until it could be
						 * set;
						 * trx might be busy */
					} while (set_trx_state(CMD_TRX_OFF) !=
    2418:	88 e0       	ldi	r24, 0x08	; 8
    241a:	89 da       	rcall	.-2798   	; 0x192e <set_trx_state>
							TRX_OFF);
    241c:	88 30       	cpi	r24, 0x08	; 8
    241e:	e1 f7       	brne	.-8      	; 0x2418 <tal_pib_set+0xfe>
    2420:	86 c0       	rjmp	.+268    	; 0x252e <tal_pib_set+0x214>
					return MAC_INVALID_PARAMETER;
				}
			}

#else
			if (tal_state != TAL_IDLE) {
    2422:	80 91 a1 08 	lds	r24, 0x08A1	; 0x8008a1 <tal_state>
    2426:	81 11       	cpse	r24, r1
    2428:	73 c0       	rjmp	.+230    	; 0x2510 <tal_pib_set+0x1f6>
				return TAL_BUSY;
			} else {
				uint8_t page;

				page = value->pib_value_8bit;
				if (page != 0) {
    242a:	88 81       	ld	r24, Y
    242c:	81 11       	cpse	r24, r1
    242e:	72 c0       	rjmp	.+228    	; 0x2514 <tal_pib_set+0x1fa>
    2430:	8b c0       	rjmp	.+278    	; 0x2548 <tal_pib_set+0x22e>
			}
#endif  /* #ifdef HIGH_DATA_RATE_SUPPORT */
			break;

		case macMaxBE:
			tal_pib.MaxBE = value->pib_value_8bit;
    2432:	fb 01       	movw	r30, r22
    2434:	90 81       	ld	r25, Z
    2436:	ed e7       	ldi	r30, 0x7D	; 125
    2438:	f8 e0       	ldi	r31, 0x08	; 8
    243a:	93 8f       	std	Z+27, r25	; 0x1b
			/*
			 * macMinBE must not be larger than macMaxBE or
			 * calculation
			 * of macMaxFrameWaitTotalTime will fail.
			 */
			if (tal_pib.MaxBE < tal_pib.MinBE) {
    243c:	85 89       	ldd	r24, Z+21	; 0x15
    243e:	98 17       	cp	r25, r24
    2440:	10 f4       	brcc	.+4      	; 0x2446 <tal_pib_set+0x12c>
				tal_pib.MinBE = tal_pib.MaxBE;
    2442:	90 93 92 08 	sts	0x0892, r25	; 0x800892 <tal_pib+0x15>
			}
#endif  /* REDUCED_PARAM_CHECK */
			trx_bit_write(SR_MAX_BE, tal_pib.MaxBE);
    2446:	ef e6       	ldi	r30, 0x6F	; 111
    2448:	f1 e0       	ldi	r31, 0x01	; 1
    244a:	80 81       	ld	r24, Z
    244c:	28 2f       	mov	r18, r24
    244e:	2f 70       	andi	r18, 0x0F	; 15
    2450:	30 e1       	ldi	r19, 0x10	; 16
    2452:	93 9f       	mul	r25, r19
    2454:	c0 01       	movw	r24, r0
    2456:	11 24       	eor	r1, r1
    2458:	82 2b       	or	r24, r18
    245a:	80 83       	st	Z, r24
			return MAC_UNSUPPORTED_ATTRIBUTE;
		}

		break; /* end of 'default' from 'switch (attribute)' */
	}
	return MAC_SUCCESS;
    245c:	80 e0       	ldi	r24, 0x00	; 0
			if (tal_pib.MaxBE < tal_pib.MinBE) {
				tal_pib.MinBE = tal_pib.MaxBE;
			}
#endif  /* REDUCED_PARAM_CHECK */
			trx_bit_write(SR_MAX_BE, tal_pib.MaxBE);
			break;
    245e:	74 c0       	rjmp	.+232    	; 0x2548 <tal_pib_set+0x22e>

		case phyTransmitPower:
		{
			uint8_t reg_value;

			tal_pib.TransmitPower = value->pib_value_8bit;
    2460:	88 81       	ld	r24, Y
    2462:	cd e7       	ldi	r28, 0x7D	; 125
    2464:	d8 e0       	ldi	r29, 0x08	; 8

			/* Limit tal_pib.TransmitPower to max/min trx values */
			tal_pib.TransmitPower = limit_tx_pwr(
    2466:	8f 8b       	std	Y+23, r24	; 0x17
    2468:	7f de       	rcall	.-770    	; 0x2168 <limit_tx_pwr>
					tal_pib.TransmitPower);
			reg_value = convert_phyTransmitPower_to_reg_value(
    246a:	8f 8b       	std	Y+23, r24	; 0x17
    246c:	da de       	rcall	.-588    	; 0x2222 <convert_phyTransmitPower_to_reg_value>
					tal_pib.TransmitPower);
			trx_bit_write(SR_TX_PWR, reg_value);
    246e:	e5 e4       	ldi	r30, 0x45	; 69
    2470:	f1 e0       	ldi	r31, 0x01	; 1
    2472:	90 81       	ld	r25, Z
    2474:	90 7f       	andi	r25, 0xF0	; 240
    2476:	8f 70       	andi	r24, 0x0F	; 15
    2478:	89 2b       	or	r24, r25
    247a:	80 83       	st	Z, r24
			return MAC_UNSUPPORTED_ATTRIBUTE;
		}

		break; /* end of 'default' from 'switch (attribute)' */
	}
	return MAC_SUCCESS;
    247c:	80 e0       	ldi	r24, 0x00	; 0
					tal_pib.TransmitPower);
			reg_value = convert_phyTransmitPower_to_reg_value(
					tal_pib.TransmitPower);
			trx_bit_write(SR_TX_PWR, reg_value);
		}
		break;
    247e:	64 c0       	rjmp	.+200    	; 0x2548 <tal_pib_set+0x22e>

		case phyCCAMode:
			tal_pib.CCAMode = value->pib_value_8bit;
    2480:	88 81       	ld	r24, Y
    2482:	80 93 8f 08 	sts	0x088F, r24	; 0x80088f <tal_pib+0x12>
			trx_bit_write(SR_CCA_MODE, tal_pib.CCAMode);
    2486:	e8 e4       	ldi	r30, 0x48	; 72
    2488:	f1 e0       	ldi	r31, 0x01	; 1
    248a:	20 81       	ld	r18, Z
    248c:	30 e2       	ldi	r19, 0x20	; 32
    248e:	83 9f       	mul	r24, r19
    2490:	c0 01       	movw	r24, r0
    2492:	11 24       	eor	r1, r1
    2494:	80 76       	andi	r24, 0x60	; 96
    2496:	92 2f       	mov	r25, r18
    2498:	9f 79       	andi	r25, 0x9F	; 159
    249a:	89 2b       	or	r24, r25
    249c:	80 83       	st	Z, r24
			return MAC_UNSUPPORTED_ATTRIBUTE;
		}

		break; /* end of 'default' from 'switch (attribute)' */
	}
	return MAC_SUCCESS;
    249e:	80 e0       	ldi	r24, 0x00	; 0
		break;

		case phyCCAMode:
			tal_pib.CCAMode = value->pib_value_8bit;
			trx_bit_write(SR_CCA_MODE, tal_pib.CCAMode);
			break;
    24a0:	53 c0       	rjmp	.+166    	; 0x2548 <tal_pib_set+0x22e>

		case macIeeeAddress:
		{
			uint8_t *ptr;

			tal_pib.IeeeAddress = value->pib_value_64bit;
    24a2:	fb 01       	movw	r30, r22
    24a4:	b0 81       	ld	r27, Z
    24a6:	a1 81       	ldd	r26, Z+1	; 0x01
    24a8:	52 81       	ldd	r21, Z+2	; 0x02
    24aa:	43 81       	ldd	r20, Z+3	; 0x03
    24ac:	34 81       	ldd	r19, Z+4	; 0x04
    24ae:	25 81       	ldd	r18, Z+5	; 0x05
    24b0:	96 81       	ldd	r25, Z+6	; 0x06
    24b2:	87 81       	ldd	r24, Z+7	; 0x07
    24b4:	ed e7       	ldi	r30, 0x7D	; 125
    24b6:	f8 e0       	ldi	r31, 0x08	; 8
    24b8:	b0 83       	st	Z, r27
    24ba:	a1 83       	std	Z+1, r26	; 0x01
    24bc:	52 83       	std	Z+2, r21	; 0x02
    24be:	43 83       	std	Z+3, r20	; 0x03
    24c0:	34 83       	std	Z+4, r19	; 0x04
    24c2:	25 83       	std	Z+5, r18	; 0x05
    24c4:	96 83       	std	Z+6, r25	; 0x06
    24c6:	87 83       	std	Z+7, r24	; 0x07
    24c8:	e4 e6       	ldi	r30, 0x64	; 100
    24ca:	f1 e0       	ldi	r31, 0x01	; 1
			ptr = (uint8_t *)&tal_pib.IeeeAddress;
    24cc:	ad e7       	ldi	r26, 0x7D	; 125
    24ce:	b8 e0       	ldi	r27, 0x08	; 8

			for (uint8_t i = 0; i < 8; i++) {
				trx_reg_write((RG_IEEE_ADDR_0 + i), *ptr);
    24d0:	8d 91       	ld	r24, X+
    24d2:	81 93       	st	Z+, r24
			uint8_t *ptr;

			tal_pib.IeeeAddress = value->pib_value_64bit;
			ptr = (uint8_t *)&tal_pib.IeeeAddress;

			for (uint8_t i = 0; i < 8; i++) {
    24d4:	ec 36       	cpi	r30, 0x6C	; 108
    24d6:	31 e0       	ldi	r19, 0x01	; 1
    24d8:	f3 07       	cpc	r31, r19
    24da:	d1 f7       	brne	.-12     	; 0x24d0 <tal_pib_set+0x1b6>
			return MAC_UNSUPPORTED_ATTRIBUTE;
		}

		break; /* end of 'default' from 'switch (attribute)' */
	}
	return MAC_SUCCESS;
    24dc:	80 e0       	ldi	r24, 0x00	; 0
    24de:	34 c0       	rjmp	.+104    	; 0x2548 <tal_pib_set+0x22e>
			}
		}
		break;

		case mac_i_pan_coordinator:
			tal_pib.PrivatePanCoordinator = value->pib_value_bool;
    24e0:	fb 01       	movw	r30, r22
    24e2:	80 81       	ld	r24, Z
    24e4:	80 93 93 08 	sts	0x0893, r24	; 0x800893 <tal_pib+0x16>
			trx_bit_write(SR_AACK_I_AM_COORD,
    24e8:	ee e6       	ldi	r30, 0x6E	; 110
    24ea:	f1 e0       	ldi	r31, 0x01	; 1
    24ec:	90 81       	ld	r25, Z
    24ee:	88 0f       	add	r24, r24
    24f0:	88 0f       	add	r24, r24
    24f2:	88 0f       	add	r24, r24
    24f4:	88 70       	andi	r24, 0x08	; 8
    24f6:	97 7f       	andi	r25, 0xF7	; 247
    24f8:	89 2b       	or	r24, r25
    24fa:	80 83       	st	Z, r24
			return MAC_UNSUPPORTED_ATTRIBUTE;
		}

		break; /* end of 'default' from 'switch (attribute)' */
	}
	return MAC_SUCCESS;
    24fc:	80 e0       	ldi	r24, 0x00	; 0

		case mac_i_pan_coordinator:
			tal_pib.PrivatePanCoordinator = value->pib_value_bool;
			trx_bit_write(SR_AACK_I_AM_COORD,
					tal_pib.PrivatePanCoordinator);
			break;
    24fe:	24 c0       	rjmp	.+72     	; 0x2548 <tal_pib_set+0x22e>
		 */

		if (tal_trx_status == TRX_SLEEP) {
			/* While trx is in SLEEP, register cannot be accessed.
			**/
			return TAL_TRX_ASLEEP;
    2500:	81 e8       	ldi	r24, 0x81	; 129
    2502:	22 c0       	rjmp	.+68     	; 0x2548 <tal_pib_set+0x22e>
			 * w.r.t.
			 * compliance operation.
			 * The ACK timing can be reduced to 2 symbols using TFA
			 * function.
			 */
			return MAC_UNSUPPORTED_ATTRIBUTE;
    2504:	84 ef       	ldi	r24, 0xF4	; 244
    2506:	20 c0       	rjmp	.+64     	; 0x2548 <tal_pib_set+0x22e>
					(uint8_t)(tal_pib.ShortAddress >> 8));
			break;

		case phyCurrentChannel:
			if (tal_state != TAL_IDLE) {
				return TAL_BUSY;
    2508:	86 e8       	ldi	r24, 0x86	; 134
    250a:	1e c0       	rjmp	.+60     	; 0x2548 <tal_pib_set+0x22e>
				if (previous_trx_status != TRX_OFF) {
					/* Set to default state */
					set_trx_state(CMD_RX_AACK_ON);
				}
			} else {
				return MAC_INVALID_PARAMETER;
    250c:	88 ee       	ldi	r24, 0xE8	; 232
    250e:	1c c0       	rjmp	.+56     	; 0x2548 <tal_pib_set+0x22e>
				}
			}

#else
			if (tal_state != TAL_IDLE) {
				return TAL_BUSY;
    2510:	86 e8       	ldi	r24, 0x86	; 134
    2512:	1a c0       	rjmp	.+52     	; 0x2548 <tal_pib_set+0x22e>
			} else {
				uint8_t page;

				page = value->pib_value_8bit;
				if (page != 0) {
					return MAC_INVALID_PARAMETER;
    2514:	88 ee       	ldi	r24, 0xE8	; 232
    2516:	18 c0       	rjmp	.+48     	; 0x2548 <tal_pib_set+0x22e>
						 * trx might be busy */
					} while (set_trx_state(CMD_TRX_OFF) !=
							TRX_OFF);
				}

				tal_pib.CurrentChannel = value->pib_value_8bit;
    2518:	80 93 90 08 	sts	0x0890, r24	; 0x800890 <tal_pib+0x13>
				trx_bit_write(SR_CHANNEL,
    251c:	e8 e4       	ldi	r30, 0x48	; 72
    251e:	f1 e0       	ldi	r31, 0x01	; 1
    2520:	90 81       	ld	r25, Z
    2522:	90 7e       	andi	r25, 0xE0	; 224
    2524:	8f 71       	andi	r24, 0x1F	; 31
    2526:	89 2b       	or	r24, r25
    2528:	80 83       	st	Z, r24
			return MAC_UNSUPPORTED_ATTRIBUTE;
		}

		break; /* end of 'default' from 'switch (attribute)' */
	}
	return MAC_SUCCESS;
    252a:	80 e0       	ldi	r24, 0x00	; 0
    252c:	0d c0       	rjmp	.+26     	; 0x2548 <tal_pib_set+0x22e>
						 * trx might be busy */
					} while (set_trx_state(CMD_TRX_OFF) !=
							TRX_OFF);
				}

				tal_pib.CurrentChannel = value->pib_value_8bit;
    252e:	88 81       	ld	r24, Y
    2530:	80 93 90 08 	sts	0x0890, r24	; 0x800890 <tal_pib+0x13>
				trx_bit_write(SR_CHANNEL,
    2534:	e8 e4       	ldi	r30, 0x48	; 72
    2536:	f1 e0       	ldi	r31, 0x01	; 1
    2538:	90 81       	ld	r25, Z
    253a:	90 7e       	andi	r25, 0xE0	; 224
    253c:	8f 71       	andi	r24, 0x1F	; 31
    253e:	89 2b       	or	r24, r25
						tal_pib.CurrentChannel);
				/* Re-store previous trx state */
				if (previous_trx_status != TRX_OFF) {
					/* Set to default state */
					set_trx_state(CMD_RX_AACK_ON);
    2540:	80 83       	st	Z, r24
    2542:	86 e1       	ldi	r24, 0x16	; 22
    2544:	f4 d9       	rcall	.-3096   	; 0x192e <set_trx_state>
			return MAC_UNSUPPORTED_ATTRIBUTE;
		}

		break; /* end of 'default' from 'switch (attribute)' */
	}
	return MAC_SUCCESS;
    2546:	80 e0       	ldi	r24, 0x00	; 0
} /* tal_pib_set() */
    2548:	df 91       	pop	r29
    254a:	cf 91       	pop	r28
    254c:	08 95       	ret

0000254e <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
    254e:	04 c0       	rjmp	.+8      	; 0x2558 <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
    2550:	61 50       	subi	r22, 0x01	; 1
    2552:	71 09       	sbc	r23, r1
    2554:	81 09       	sbc	r24, r1
    2556:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
    2558:	61 15       	cp	r22, r1
    255a:	71 05       	cpc	r23, r1
    255c:	81 05       	cpc	r24, r1
    255e:	91 05       	cpc	r25, r1
    2560:	b9 f7       	brne	.-18     	; 0x2550 <__portable_avr_delay_cycles+0x2>
    2562:	08 95       	ret

00002564 <handle_received_frame_irq>:
 *
 * This function handles transceiver interrupts for received frames and
 * uploads the frames from the trx.
 */
void handle_received_frame_irq(void)
{
    2564:	cf 92       	push	r12
    2566:	df 92       	push	r13
    2568:	ef 92       	push	r14
    256a:	ff 92       	push	r15
    256c:	0f 93       	push	r16
    256e:	1f 93       	push	r17
    2570:	cf 93       	push	r28
    2572:	df 93       	push	r29
	/* Extended frame length appended by LQI and ED. */
	uint8_t ext_frame_length;
	frame_info_t *receive_frame;
	uint8_t *frame_ptr;

	if (tal_rx_buffer == NULL) {
    2574:	e0 91 2f 06 	lds	r30, 0x062F	; 0x80062f <tal_rx_buffer>
    2578:	f0 91 30 06 	lds	r31, 0x0630	; 0x800630 <tal_rx_buffer+0x1>
    257c:	30 97       	sbiw	r30, 0x00	; 0
    257e:	71 f4       	brne	.+28     	; 0x259c <handle_received_frame_irq+0x38>
		 * Although the buffer protection mode is enabled and the
		 * receiver has
		 * been switched to PLL_ON, the next incoming frame was faster.
		 * It cannot be handled and is discarded.
		 */
		trx_bit_write(SR_RX_SAFE_MODE, RX_SAFE_MODE_DISABLE); /*
    2580:	cc e4       	ldi	r28, 0x4C	; 76
    2582:	d1 e0       	ldi	r29, 0x01	; 1
    2584:	88 81       	ld	r24, Y
    2586:	8f 77       	andi	r24, 0x7F	; 127
    2588:	88 83       	st	Y, r24
		                                                       *
		                                                       *
		                                                       *protection
		                                                       * mode
		                                                       **/
		pal_timer_delay(2); /* Allow pin change to get effective */
    258a:	63 e0       	ldi	r22, 0x03	; 3
    258c:	70 e0       	ldi	r23, 0x00	; 0
    258e:	80 e0       	ldi	r24, 0x00	; 0
    2590:	90 e0       	ldi	r25, 0x00	; 0
    2592:	dd df       	rcall	.-70     	; 0x254e <__portable_avr_delay_cycles>
		trx_bit_write(SR_RX_SAFE_MODE, RX_SAFE_MODE_ENABLE); /*
    2594:	88 81       	ld	r24, Y
    2596:	80 68       	ori	r24, 0x80	; 128
    2598:	88 83       	st	Y, r24
		                                                      *
		                                                      *
		                                                      *protection
		                                                      * mode
		                                                      **/
		return;
    259a:	48 c0       	rjmp	.+144    	; 0x262c <handle_received_frame_irq+0xc8>
		}
	}
#endif

	/* Get ED value; needed to normalize LQI. */
	ed_value = trx_reg_read(RG_PHY_ED_LEVEL);
    259c:	00 91 47 01 	lds	r16, 0x0147	; 0x800147 <__TEXT_REGION_LENGTH__+0x7c0147>

	/* Get frame length from transceiver. */
	phy_frame_len = ext_frame_length = trx_reg_read(RG_TST_RX_LENGTH);
    25a0:	10 91 7b 01 	lds	r17, 0x017B	; 0x80017b <__TEXT_REGION_LENGTH__+0x7c017b>

	/* Check for valid frame length. */
	if (phy_frame_len > 127) {
    25a4:	11 23       	and	r17, r17
    25a6:	0c f4       	brge	.+2      	; 0x25aa <handle_received_frame_irq+0x46>
    25a8:	41 c0       	rjmp	.+130    	; 0x262c <handle_received_frame_irq+0xc8>
		                                                      * mode
		                                                      **/
		return;
	}

	receive_frame = (frame_info_t *)BMM_BUFFER_POINTER(tal_rx_buffer);
    25aa:	e0 80       	ld	r14, Z
    25ac:	f1 80       	ldd	r15, Z+1	; 0x01
	 * In addition to that, the LQI and ED value are uploaded, too.
	 */
	ext_frame_length += LQI_LEN + ED_VAL_LEN;

	/* Update payload pointer to store received frame. */
	frame_ptr = (uint8_t *)receive_frame + LARGE_BUFFER_SIZE -
    25ae:	82 e0       	ldi	r24, 0x02	; 2
    25b0:	81 0f       	add	r24, r17
    25b2:	eb e8       	ldi	r30, 0x8B	; 139
    25b4:	f0 e0       	ldi	r31, 0x00	; 0
    25b6:	e8 1b       	sub	r30, r24
    25b8:	f1 09       	sbc	r31, r1
    25ba:	e7 01       	movw	r28, r14
    25bc:	ce 0f       	add	r28, r30
    25be:	df 1f       	adc	r29, r31
	 * Note: The following code is different from other non-single chip
	 * transceivers, where reading the frame via SPI contains the length
	 * field
	 * in the first octet.
	 */
	trx_frame_read(frame_ptr, phy_frame_len + LQI_LEN);
    25c0:	c1 2e       	mov	r12, r17
    25c2:	d1 2c       	mov	r13, r1
    25c4:	a6 01       	movw	r20, r12
    25c6:	4f 5f       	subi	r20, 0xFF	; 255
    25c8:	5f 4f       	sbci	r21, 0xFF	; 255
    25ca:	60 e8       	ldi	r22, 0x80	; 128
    25cc:	71 e0       	ldi	r23, 0x01	; 1
    25ce:	ce 01       	movw	r24, r28
    25d0:	fd d6       	rcall	.+3578   	; 0x33cc <memcpy>
	frame_ptr--;
    25d2:	fe 01       	movw	r30, r28
	*frame_ptr = phy_frame_len;
    25d4:	12 93       	st	-Z, r17
	receive_frame->mpdu = frame_ptr;
    25d6:	d7 01       	movw	r26, r14
    25d8:	18 96       	adiw	r26, 0x08	; 8
    25da:	fc 93       	st	X, r31
    25dc:	ee 93       	st	-X, r30
    25de:	17 97       	sbiw	r26, 0x07	; 7
	/* Add ED value at the end of the frame buffer. */
	receive_frame->mpdu[phy_frame_len + LQI_LEN + ED_VAL_LEN] = ed_value;
    25e0:	ec 0d       	add	r30, r12
    25e2:	fd 1d       	adc	r31, r13
    25e4:	02 83       	std	Z+2, r16	; 0x02
	receive_frame->time_stamp = tal_rx_timestamp;
#endif  /* #if (defined BEACON_SUPPORT) || (defined ENABLE_TSTAMP) */

	/* Append received frame to incoming_frame_queue and get new rx buffer.
	**/
	qmm_queue_append(&tal_incoming_frame_queue, tal_rx_buffer);
    25e6:	60 91 2f 06 	lds	r22, 0x062F	; 0x80062f <tal_rx_buffer>
    25ea:	70 91 30 06 	lds	r23, 0x0630	; 0x800630 <tal_rx_buffer+0x1>
    25ee:	86 e7       	ldi	r24, 0x76	; 118
    25f0:	98 e0       	ldi	r25, 0x08	; 8

	/* The previous buffer is eaten up and a new buffer is not assigned yet.
	**/
	tal_rx_buffer = bmm_buffer_alloc(LARGE_BUFFER_SIZE);
    25f2:	49 d9       	rcall	.-3438   	; 0x1886 <qmm_queue_append>
    25f4:	8b e8       	ldi	r24, 0x8B	; 139
    25f6:	af d8       	rcall	.-3746   	; 0x1756 <bmm_buffer_alloc>
    25f8:	90 93 30 06 	sts	0x0630, r25	; 0x800630 <tal_rx_buffer+0x1>
    25fc:	80 93 2f 06 	sts	0x062F, r24	; 0x80062f <tal_rx_buffer>

	/* Check if receive buffer is available */
	if (NULL == tal_rx_buffer) {
    2600:	89 2b       	or	r24, r25
    2602:	21 f4       	brne	.+8      	; 0x260c <handle_received_frame_irq+0xa8>
		 * re-enabled yet.
		 * Buffer protection will be re-enabled after buffer becomes
		 * available
		 */
		/* set_trx_state(CMD_PLL_ON); */
		tal_rx_on_required = true;
    2604:	81 e0       	ldi	r24, 0x01	; 1
    2606:	80 93 75 08 	sts	0x0875, r24	; 0x800875 <tal_rx_on_required>
    260a:	0d c0       	rjmp	.+26     	; 0x2626 <handle_received_frame_irq+0xc2>
		/*
		 * Release the protected buffer and set it again for further
		 * protection since
		 * the buffer is available
		 */
		trx_bit_write(SR_RX_SAFE_MODE, RX_SAFE_MODE_DISABLE); /*
    260c:	cc e4       	ldi	r28, 0x4C	; 76
    260e:	d1 e0       	ldi	r29, 0x01	; 1
    2610:	88 81       	ld	r24, Y
    2612:	8f 77       	andi	r24, 0x7F	; 127
    2614:	88 83       	st	Y, r24
		                                                       *
		                                                       *
		                                                       *protection
		                                                       * mode
		                                                       **/
		pal_timer_delay(2); /* Allow pin change to get effective */
    2616:	63 e0       	ldi	r22, 0x03	; 3
    2618:	70 e0       	ldi	r23, 0x00	; 0
    261a:	80 e0       	ldi	r24, 0x00	; 0
    261c:	90 e0       	ldi	r25, 0x00	; 0
    261e:	97 df       	rcall	.-210    	; 0x254e <__portable_avr_delay_cycles>
		trx_bit_write(SR_RX_SAFE_MODE, RX_SAFE_MODE_ENABLE); /*
    2620:	88 81       	ld	r24, Y
    2622:	80 68       	ori	r24, 0x80	; 128
    2624:	88 83       	st	Y, r24
	 * transmission
	 * end of an automatically sent ACK frame. This implementation does not
	 * use
	 * this feature.
	 */
	pal_trx_irq_flag_clr_tx_end();
    2626:	80 e4       	ldi	r24, 0x40	; 64
    2628:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <__TEXT_REGION_LENGTH__+0x7c014f>
}
    262c:	df 91       	pop	r29
    262e:	cf 91       	pop	r28
    2630:	1f 91       	pop	r17
    2632:	0f 91       	pop	r16
    2634:	ff 90       	pop	r15
    2636:	ef 90       	pop	r14
    2638:	df 90       	pop	r13
    263a:	cf 90       	pop	r12
    263c:	08 95       	ret

0000263e <process_incoming_frame>:
 * structure to be sent to the MAC as a parameter of tal_rx_frame_cb().
 *
 * \param buf Pointer to the buffer containing the received frame
 */
void process_incoming_frame(buffer_t *buf_ptr)
{
    263e:	cf 93       	push	r28
    2640:	df 93       	push	r29
    2642:	ac 01       	movw	r20, r24
	uint8_t *frame_ptr;
	uint8_t ed_level;
	uint8_t lqi;
#endif

	frame_info_t *receive_frame
    2644:	fc 01       	movw	r30, r24
    2646:	c0 81       	ld	r28, Z
    2648:	d1 81       	ldd	r29, Z+1	; 0x01

	/*
	 * Store the last frame length for IFS handling.
	 * Substract LQI and length fields.
	 */
	frame_len = last_frame_length = receive_frame->mpdu[0];
    264a:	af 81       	ldd	r26, Y+7	; 0x07
    264c:	b8 85       	ldd	r27, Y+8	; 0x08
    264e:	8c 91       	ld	r24, X
    2650:	80 93 9d 08 	sts	0x089D, r24	; 0x80089d <last_frame_length>

	/*
	 * The LQI is stored after the FCS.
	 * The ED value is stored after the LQI.
	 */
	frame_ptr = &(receive_frame->mpdu[frame_len + LQI_LEN]);
    2654:	e8 2f       	mov	r30, r24
    2656:	f0 e0       	ldi	r31, 0x00	; 0
    2658:	31 96       	adiw	r30, 0x01	; 1
    265a:	ea 0f       	add	r30, r26
    265c:	fb 1f       	adc	r31, r27
	lqi = *frame_ptr++;
    265e:	80 81       	ld	r24, Z
	ed_level = *frame_ptr;
    2660:	31 81       	ldd	r19, Z+1	; 0x01
	uint8_t lqi_star;

#ifdef HIGH_DATA_RATE_SUPPORT
	if (tal_pib.CurrentPage == 0) {
#endif
	if (ed_value > ED_MAX_VAL) {
    2662:	3d 33       	cpi	r19, 0x3D	; 61
    2664:	20 f4       	brcc	.+8      	; 0x266e <process_incoming_frame+0x30>
		ed_value = ED_MAX_VAL;
	} else if (ed_value == 0) {
    2666:	31 11       	cpse	r19, r1
    2668:	03 c0       	rjmp	.+6      	; 0x2670 <process_incoming_frame+0x32>
		ed_value = 1;
    266a:	31 e0       	ldi	r19, 0x01	; 1
    266c:	01 c0       	rjmp	.+2      	; 0x2670 <process_incoming_frame+0x32>

#ifdef HIGH_DATA_RATE_SUPPORT
	if (tal_pib.CurrentPage == 0) {
#endif
	if (ed_value > ED_MAX_VAL) {
		ed_value = ED_MAX_VAL;
    266e:	3c e3       	ldi	r19, 0x3C	; 60
	} else if (ed_value == 0) {
		ed_value = 1;
	}

	lqi_star = lqi >> 6;
	link_quality = (uint16_t)lqi_star * (uint16_t)ed_value * 255 /
    2670:	82 95       	swap	r24
    2672:	86 95       	lsr	r24
    2674:	86 95       	lsr	r24
    2676:	83 70       	andi	r24, 0x03	; 3
    2678:	2f ef       	ldi	r18, 0xFF	; 255
    267a:	82 9f       	mul	r24, r18
    267c:	c0 01       	movw	r24, r0
    267e:	11 24       	eor	r1, r1
    2680:	38 9f       	mul	r19, r24
    2682:	b0 01       	movw	r22, r0
    2684:	39 9f       	mul	r19, r25
    2686:	70 0d       	add	r23, r0
    2688:	11 24       	eor	r1, r1
    268a:	9b 01       	movw	r18, r22
    268c:	a3 e8       	ldi	r26, 0x83	; 131
    268e:	bd e2       	ldi	r27, 0x2D	; 45
    2690:	11 d6       	rcall	.+3106   	; 0x32b4 <__umulhisi3>
    2692:	96 95       	lsr	r25
    2694:	87 95       	ror	r24
    2696:	92 95       	swap	r25
    2698:	82 95       	swap	r24
    269a:	8f 70       	andi	r24, 0x0F	; 15
    269c:	89 27       	eor	r24, r25
    269e:	9f 70       	andi	r25, 0x0F	; 15
    26a0:	89 27       	eor	r24, r25
			(ED_MAX_VAL * LQI_MAX);

	if (link_quality > 255) {
    26a2:	8f 3f       	cpi	r24, 0xFF	; 255
    26a4:	91 05       	cpc	r25, r1
    26a6:	11 f0       	breq	.+4      	; 0x26ac <process_incoming_frame+0x6e>
    26a8:	08 f0       	brcs	.+2      	; 0x26ac <process_incoming_frame+0x6e>
		return 255;
    26aa:	8f ef       	ldi	r24, 0xFF	; 255
	lqi = normalize_lqi(lqi, ed_level);
#endif

	/* Store normalized LQI value again. */
	frame_ptr--;
	*frame_ptr = lqi;
    26ac:	80 83       	st	Z, r24
#endif  /* #ifndef TRX_REG_RAW_VALUE */

	receive_frame->buffer_header = buf_ptr;
    26ae:	5a 83       	std	Y+2, r21	; 0x02
    26b0:	49 83       	std	Y+1, r20	; 0x01
#ifdef ENABLE_RTB
	/* The callback function implemented by RTB is invoked. */
	rtb_rx_frame_cb(receive_frame);
#else
	/* The callback function implemented by MAC is invoked. */
	tal_rx_frame_cb(receive_frame);
    26b2:	ce 01       	movw	r24, r28
    26b4:	b5 d5       	rcall	.+2922   	; 0x3220 <tal_rx_frame_cb>
#endif
} /* process_incoming_frame() */
    26b6:	df 91       	pop	r29
    26b8:	cf 91       	pop	r28
    26ba:	08 95       	ret

000026bc <tal_rx_enable>:
{
	/*
	 * Trx can only be enabled if TAL is not busy;
	 * i.e. if TAL is IDLE.
	 */
	if (TAL_IDLE != tal_state) {
    26bc:	90 91 a1 08 	lds	r25, 0x08A1	; 0x8008a1 <tal_state>
    26c0:	91 11       	cpse	r25, r1
    26c2:	16 c0       	rjmp	.+44     	; 0x26f0 <tal_rx_enable+0x34>
#else
		return TAL_BUSY;
#endif
	}

	if (state == PHY_TRX_OFF) {
    26c4:	88 30       	cpi	r24, 0x08	; 8
    26c6:	29 f4       	brne	.+10     	; 0x26d2 <tal_rx_enable+0x16>
		 * that is currently being received.
		 * This must not be a Forced TRX_OFF (CMD_FORCED_TRX_OFF) since
		 * this could
		 * corrupt an already outoing ACK frame.
		 */
		set_trx_state(CMD_TRX_OFF);
    26c8:	32 d9       	rcall	.-3484   	; 0x192e <set_trx_state>
		tal_rx_on_required = false;
    26ca:	10 92 75 08 	sts	0x0875, r1	; 0x800875 <tal_rx_on_required>
		return TRX_OFF;
    26ce:	88 e0       	ldi	r24, 0x08	; 8
    26d0:	08 95       	ret
	} else {
#ifdef SNIFFER
		set_trx_state(CMD_RX_ON);
#else   /* #ifndef SNIFFER */
		if (NULL != tal_rx_buffer) {
    26d2:	80 91 2f 06 	lds	r24, 0x062F	; 0x80062f <tal_rx_buffer>
    26d6:	90 91 30 06 	lds	r25, 0x0630	; 0x800630 <tal_rx_buffer+0x1>
    26da:	89 2b       	or	r24, r25
    26dc:	21 f0       	breq	.+8      	; 0x26e6 <tal_rx_enable+0x2a>
			} else {
				set_trx_state(CMD_RX_AACK_ON);
			}

#else   /* Normal operation */
			set_trx_state(CMD_RX_AACK_ON);
    26de:	86 e1       	ldi	r24, 0x16	; 22
    26e0:	26 d9       	rcall	.-3508   	; 0x192e <set_trx_state>
			 * receiver.
			 */
			tal_rx_on_required = true;
		}
#endif  /* #ifndef SNIFFER */
		return RX_ON; /* MAC layer assumes RX_ON as return value */
    26e2:	86 e0       	ldi	r24, 0x06	; 6
    26e4:	08 95       	ret
			 * the TAL returns MAC_SUCCESS. The TAL will try to
			 * allocate a receive
			 * buffer as soon as possible and will switch on the
			 * receiver.
			 */
			tal_rx_on_required = true;
    26e6:	81 e0       	ldi	r24, 0x01	; 1
    26e8:	80 93 75 08 	sts	0x0875, r24	; 0x800875 <tal_rx_on_required>
		}
#endif  /* #ifndef SNIFFER */
		return RX_ON; /* MAC layer assumes RX_ON as return value */
    26ec:	86 e0       	ldi	r24, 0x06	; 6
    26ee:	08 95       	ret
		if (tal_state != TAL_SLOTTED_CSMA) {
			return TAL_BUSY;
		}

#else
		return TAL_BUSY;
    26f0:	86 e8       	ldi	r24, 0x86	; 134
			tal_rx_on_required = true;
		}
#endif  /* #ifndef SNIFFER */
		return RX_ON; /* MAC layer assumes RX_ON as return value */
	}
}
    26f2:	08 95       	ret

000026f4 <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
    26f4:	04 c0       	rjmp	.+8      	; 0x26fe <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
    26f6:	61 50       	subi	r22, 0x01	; 1
    26f8:	71 09       	sbc	r23, r1
    26fa:	81 09       	sbc	r24, r1
    26fc:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
    26fe:	61 15       	cp	r22, r1
    2700:	71 05       	cpc	r23, r1
    2702:	81 05       	cpc	r24, r1
    2704:	91 05       	cpc	r25, r1
    2706:	b9 f7       	brne	.-18     	; 0x26f6 <__portable_avr_delay_cycles+0x2>
    2708:	08 95       	ret

0000270a <tx_done_handling>:
 *
 * This function handles the callback for the transmission end.
 */
void tx_done_handling(void)
{
	tal_state = TAL_IDLE;
    270a:	10 92 a1 08 	sts	0x08A1, r1	; 0x8008a1 <tal_state>
	mac_frame_ptr->time_stamp = pal_tx_timestamp;
#endif  /* #if (defined BEACON_SUPPORT) || (defined ENABLE_TSTAMP) */

	retval_t status;

	switch (trx_trac_status) {
    270e:	80 91 39 06 	lds	r24, 0x0639	; 0x800639 <trx_trac_status>
    2712:	83 30       	cpi	r24, 0x03	; 3
    2714:	69 f0       	breq	.+26     	; 0x2730 <tx_done_handling+0x26>
    2716:	28 f4       	brcc	.+10     	; 0x2722 <tx_done_handling+0x18>
    2718:	88 23       	and	r24, r24
    271a:	91 f0       	breq	.+36     	; 0x2740 <tx_done_handling+0x36>
    271c:	81 30       	cpi	r24, 0x01	; 1
    271e:	31 f0       	breq	.+12     	; 0x272c <tx_done_handling+0x22>
    2720:	0d c0       	rjmp	.+26     	; 0x273c <tx_done_handling+0x32>
    2722:	85 30       	cpi	r24, 0x05	; 5
    2724:	39 f0       	breq	.+14     	; 0x2734 <tx_done_handling+0x2a>
    2726:	87 30       	cpi	r24, 0x07	; 7
    2728:	39 f0       	breq	.+14     	; 0x2738 <tx_done_handling+0x2e>
    272a:	08 c0       	rjmp	.+16     	; 0x273c <tx_done_handling+0x32>
	case TRAC_SUCCESS:
		status = MAC_SUCCESS;
		break;

	case TRAC_SUCCESS_DATA_PENDING:
		status = TAL_FRAME_PENDING;
    272c:	87 e8       	ldi	r24, 0x87	; 135
    272e:	09 c0       	rjmp	.+18     	; 0x2742 <tx_done_handling+0x38>
		break;

	case TRAC_CHANNEL_ACCESS_FAILURE:
		status = MAC_CHANNEL_ACCESS_FAILURE;
    2730:	81 ee       	ldi	r24, 0xE1	; 225
		break;
    2732:	07 c0       	rjmp	.+14     	; 0x2742 <tx_done_handling+0x38>

	case TRAC_NO_ACK:
		status = MAC_NO_ACK;
    2734:	89 ee       	ldi	r24, 0xE9	; 233
		break;
    2736:	05 c0       	rjmp	.+10     	; 0x2742 <tx_done_handling+0x38>

	case TRAC_INVALID:
		status = FAILURE;
    2738:	85 e8       	ldi	r24, 0x85	; 133
		break;
    273a:	03 c0       	rjmp	.+6      	; 0x2742 <tx_done_handling+0x38>

	default:
		Assert("Unexpected tal_tx_state" == 0);
		status = FAILURE;
    273c:	85 e8       	ldi	r24, 0x85	; 133
		break;
    273e:	01 c0       	rjmp	.+2      	; 0x2742 <tx_done_handling+0x38>

	retval_t status;

	switch (trx_trac_status) {
	case TRAC_SUCCESS:
		status = MAC_SUCCESS;
    2740:	80 e0       	ldi	r24, 0x00	; 0

#ifdef ENABLE_RTB
	rtb_tx_frame_done_cb(status, mac_frame_ptr);
#else
	/* Regular handling without RTB */
	tal_tx_frame_done_cb(status, mac_frame_ptr);
    2742:	60 91 7b 08 	lds	r22, 0x087B	; 0x80087b <mac_frame_ptr>
    2746:	70 91 7c 08 	lds	r23, 0x087C	; 0x80087c <mac_frame_ptr+0x1>
    274a:	67 c5       	rjmp	.+2766   	; 0x321a <tal_tx_frame_done_cb>
    274c:	08 95       	ret

0000274e <send_frame>:
 * \param use_csma Flag indicating if CSMA is requested
 * \param tx_retries Flag indicating if transmission retries are requested
 *                   by the MAC layer
 */
void send_frame(csma_mode_t csma_mode, bool tx_retries)
{
    274e:	1f 93       	push	r17
    2750:	cf 93       	push	r28
    2752:	df 93       	push	r29
    2754:	1f 92       	push	r1
    2756:	cd b7       	in	r28, 0x3d	; 61
    2758:	de b7       	in	r29, 0x3e	; 62
    275a:	18 2f       	mov	r17, r24
	tal_trx_status_t trx_status;

	/* Configure tx according to tx_retries */
	if (tx_retries) {
    275c:	66 23       	and	r22, r22
    275e:	81 f0       	breq	.+32     	; 0x2780 <send_frame+0x32>
		trx_bit_write(SR_MAX_FRAME_RETRIES,
    2760:	ec e6       	ldi	r30, 0x6C	; 108
    2762:	f1 e0       	ldi	r31, 0x01	; 1
    2764:	20 81       	ld	r18, Z
    2766:	90 91 99 08 	lds	r25, 0x0899	; 0x800899 <tal_pib+0x1c>
    276a:	30 e1       	ldi	r19, 0x10	; 16
    276c:	93 9f       	mul	r25, r19
    276e:	c0 01       	movw	r24, r0
    2770:	11 24       	eor	r1, r1
    2772:	92 2f       	mov	r25, r18
    2774:	9f 70       	andi	r25, 0x0F	; 15
    2776:	89 2b       	or	r24, r25
    2778:	80 83       	st	Z, r24
	} else {
		trx_bit_write(SR_MAX_FRAME_RETRIES, 0);
	}

	/* Configure tx according to csma usage */
	if ((csma_mode == NO_CSMA_NO_IFS) || (csma_mode == NO_CSMA_WITH_IFS)) {
    277a:	12 30       	cpi	r17, 0x02	; 2
    277c:	e0 f4       	brcc	.+56     	; 0x27b6 <send_frame+0x68>
    277e:	08 c0       	rjmp	.+16     	; 0x2790 <send_frame+0x42>
	/* Configure tx according to tx_retries */
	if (tx_retries) {
		trx_bit_write(SR_MAX_FRAME_RETRIES,
				tal_pib.MaxFrameRetries);
	} else {
		trx_bit_write(SR_MAX_FRAME_RETRIES, 0);
    2780:	ec e6       	ldi	r30, 0x6C	; 108
    2782:	f1 e0       	ldi	r31, 0x01	; 1
    2784:	80 81       	ld	r24, Z
    2786:	8f 70       	andi	r24, 0x0F	; 15
    2788:	80 83       	st	Z, r24
	}

	/* Configure tx according to csma usage */
	if ((csma_mode == NO_CSMA_NO_IFS) || (csma_mode == NO_CSMA_WITH_IFS)) {
    278a:	12 30       	cpi	r17, 0x02	; 2
    278c:	a0 f4       	brcc	.+40     	; 0x27b6 <send_frame+0x68>
    278e:	0d c0       	rjmp	.+26     	; 0x27aa <send_frame+0x5c>
		if (tx_retries) {
			trx_bit_write(SR_MAX_CSMA_RETRIES,
    2790:	ec e6       	ldi	r30, 0x6C	; 108
    2792:	f1 e0       	ldi	r31, 0x01	; 1
    2794:	80 81       	ld	r24, Z
    2796:	90 91 91 08 	lds	r25, 0x0891	; 0x800891 <tal_pib+0x14>
    279a:	99 0f       	add	r25, r25
    279c:	9e 70       	andi	r25, 0x0E	; 14
    279e:	81 7f       	andi	r24, 0xF1	; 241
    27a0:	89 2b       	or	r24, r25
    27a2:	80 83       	st	Z, r24
					tal_pib.MaxCSMABackoffs);
			trx_reg_write(RG_CSMA_BE, 0x00);
    27a4:	10 92 6f 01 	sts	0x016F, r1	; 0x80016f <__TEXT_REGION_LENGTH__+0x7c016f>
    27a8:	1a c0       	rjmp	.+52     	; 0x27de <send_frame+0x90>
		} else {
			trx_bit_write(SR_MAX_CSMA_RETRIES, 7);
    27aa:	ec e6       	ldi	r30, 0x6C	; 108
    27ac:	f1 e0       	ldi	r31, 0x01	; 1
    27ae:	80 81       	ld	r24, Z
    27b0:	8e 60       	ori	r24, 0x0E	; 14
    27b2:	80 83       	st	Z, r24
    27b4:	14 c0       	rjmp	.+40     	; 0x27de <send_frame+0x90>
		}
	} else {
		trx_reg_write(RG_CSMA_BE,
    27b6:	ed e7       	ldi	r30, 0x7D	; 125
    27b8:	f8 e0       	ldi	r31, 0x08	; 8
    27ba:	83 8d       	ldd	r24, Z+27	; 0x1b
    27bc:	20 e1       	ldi	r18, 0x10	; 16
    27be:	82 9f       	mul	r24, r18
    27c0:	c0 01       	movw	r24, r0
    27c2:	11 24       	eor	r1, r1
    27c4:	95 89       	ldd	r25, Z+21	; 0x15
    27c6:	89 2b       	or	r24, r25
    27c8:	80 93 6f 01 	sts	0x016F, r24	; 0x80016f <__TEXT_REGION_LENGTH__+0x7c016f>
				((tal_pib.MaxBE << 4) | tal_pib.MinBE));
		trx_bit_write(SR_MAX_CSMA_RETRIES, tal_pib.MaxCSMABackoffs);
    27cc:	ac e6       	ldi	r26, 0x6C	; 108
    27ce:	b1 e0       	ldi	r27, 0x01	; 1
    27d0:	8c 91       	ld	r24, X
    27d2:	94 89       	ldd	r25, Z+20	; 0x14
    27d4:	99 0f       	add	r25, r25
    27d6:	9e 70       	andi	r25, 0x0E	; 14
    27d8:	81 7f       	andi	r24, 0xF1	; 241
    27da:	89 2b       	or	r24, r25
    27dc:	8c 93       	st	X, r24
	}

	do {
		trx_status = set_trx_state(CMD_TX_ARET_ON);
    27de:	89 e1       	ldi	r24, 0x19	; 25
    27e0:	a6 d8       	rcall	.-3764   	; 0x192e <set_trx_state>
	} while (trx_status != TX_ARET_ON);
    27e2:	89 31       	cpi	r24, 0x19	; 25
    27e4:	e1 f7       	brne	.-8      	; 0x27de <send_frame+0x90>

	/* Handle interframe spacing */
	if (csma_mode == NO_CSMA_WITH_IFS) {
    27e6:	11 30       	cpi	r17, 0x01	; 1
    27e8:	a1 f4       	brne	.+40     	; 0x2812 <send_frame+0xc4>
		if (last_frame_length > aMaxSIFSFrameSize) {
    27ea:	80 91 9d 08 	lds	r24, 0x089D	; 0x80089d <last_frame_length>
    27ee:	83 31       	cpi	r24, 0x13	; 19
    27f0:	40 f0       	brcs	.+16     	; 0x2802 <send_frame+0xb4>
			pal_timer_delay(TAL_CONVERT_SYMBOLS_TO_US(
    27f2:	61 e0       	ldi	r22, 0x01	; 1
    27f4:	73 e0       	ldi	r23, 0x03	; 3
    27f6:	80 e0       	ldi	r24, 0x00	; 0
    27f8:	90 e0       	ldi	r25, 0x00	; 0
    27fa:	7c df       	rcall	.-264    	; 0x26f4 <__portable_avr_delay_cycles>
					macMinLIFSPeriod_def)
					- IRQ_PROCESSING_DLY_US -
					PRE_TX_DURATION_US);
			last_frame_length = 0;
    27fc:	10 92 9d 08 	sts	0x089D, r1	; 0x80089d <last_frame_length>
    2800:	0d c0       	rjmp	.+26     	; 0x281c <send_frame+0xce>
		} else {
			pal_timer_delay(TAL_CONVERT_SYMBOLS_TO_US(
    2802:	6b ea       	ldi	r22, 0xAB	; 171
    2804:	70 e0       	ldi	r23, 0x00	; 0
    2806:	80 e0       	ldi	r24, 0x00	; 0
    2808:	90 e0       	ldi	r25, 0x00	; 0
    280a:	74 df       	rcall	.-280    	; 0x26f4 <__portable_avr_delay_cycles>
					macMinSIFSPeriod_def)
					- IRQ_PROCESSING_DLY_US -
					PRE_TX_DURATION_US);
			last_frame_length = 0;
    280c:	10 92 9d 08 	sts	0x089D, r1	; 0x80089d <last_frame_length>
    2810:	05 c0       	rjmp	.+10     	; 0x281c <send_frame+0xce>
		 * If no delay is applied after switching to TX_ARET_ON,
		 * a short delay is required that allows that a pending TX_END
		 * IRQ for
		 * ACK transmission gets served.
		 */
		pal_timer_delay(TRX_IRQ_DELAY_US);
    2812:	6c e0       	ldi	r22, 0x0C	; 12
    2814:	70 e0       	ldi	r23, 0x00	; 0
    2816:	80 e0       	ldi	r24, 0x00	; 0
    2818:	90 e0       	ldi	r25, 0x00	; 0
    281a:	6c df       	rcall	.-296    	; 0x26f4 <__portable_avr_delay_cycles>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    281c:	8f b7       	in	r24, 0x3f	; 63
    281e:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    2820:	f8 94       	cli
	return flags;
    2822:	19 81       	ldd	r17, Y+1	; 0x01
	}

	ENTER_CRITICAL_REGION(); /* prevent from buffer underrun */

	/* Toggle the SLP_TR pin triggering transmission. */
	TRX_SLP_TR_HIGH();
    2824:	e9 e3       	ldi	r30, 0x39	; 57
    2826:	f1 e0       	ldi	r31, 0x01	; 1
    2828:	80 81       	ld	r24, Z
    282a:	82 60       	ori	r24, 0x02	; 2
    282c:	80 83       	st	Z, r24
	PAL_WAIT_65_NS();
    282e:	00 00       	nop
    2830:	00 00       	nop
	TRX_SLP_TR_LOW();
    2832:	80 81       	ld	r24, Z
    2834:	8d 7f       	andi	r24, 0xFD	; 253
    2836:	80 83       	st	Z, r24
	 * is
	 * 1 octet frame length octet
	 * + n octets frame (i.e. value of frame_tx[0])
	 * - 2 octets FCS
	 */
	trx_frame_write(tal_frame_to_tx, tal_frame_to_tx[0] - 1);
    2838:	60 91 9e 08 	lds	r22, 0x089E	; 0x80089e <tal_frame_to_tx>
    283c:	70 91 9f 08 	lds	r23, 0x089F	; 0x80089f <tal_frame_to_tx+0x1>
    2840:	fb 01       	movw	r30, r22
    2842:	40 81       	ld	r20, Z
    2844:	50 e0       	ldi	r21, 0x00	; 0
    2846:	41 50       	subi	r20, 0x01	; 1
    2848:	51 09       	sbc	r21, r1
    284a:	80 e8       	ldi	r24, 0x80	; 128
    284c:	91 e0       	ldi	r25, 0x01	; 1
    284e:	be d5       	rcall	.+2940   	; 0x33cc <memcpy>

	tal_state = TAL_TX_AUTO;
    2850:	81 e0       	ldi	r24, 0x01	; 1
    2852:	80 93 a1 08 	sts	0x08A1, r24	; 0x8008a1 <tal_state>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2856:	1f bf       	out	0x3f, r17	; 63

	LEAVE_CRITICAL_REGION();
}
    2858:	0f 90       	pop	r0
    285a:	df 91       	pop	r29
    285c:	cf 91       	pop	r28
    285e:	1f 91       	pop	r17
    2860:	08 95       	ret

00002862 <tal_tx_frame>:
 *                 transmission
 *         TAL_BUSY if the TAL is busy servicing the previous MAC request
 */
retval_t tal_tx_frame(frame_info_t *tx_frame, csma_mode_t csma_mode,
		bool perform_frame_retry)
{
    2862:	fc 01       	movw	r30, r24
	if (tal_state != TAL_IDLE) {
    2864:	90 91 a1 08 	lds	r25, 0x08A1	; 0x8008a1 <tal_state>
    2868:	91 11       	cpse	r25, r1
    286a:	16 c0       	rjmp	.+44     	; 0x2898 <tal_tx_frame+0x36>

	/*
	 * Store the pointer to the provided frame structure.
	 * This is needed for the callback function.
	 */
	mac_frame_ptr = tx_frame;
    286c:	f0 93 7c 08 	sts	0x087C, r31	; 0x80087c <mac_frame_ptr+0x1>
    2870:	e0 93 7b 08 	sts	0x087B, r30	; 0x80087b <mac_frame_ptr>

	/* Set pointer to actual mpdu to be downloaded to the transceiver. */
	tal_frame_to_tx = tx_frame->mpdu;
    2874:	07 80       	ldd	r0, Z+7	; 0x07
    2876:	f0 85       	ldd	r31, Z+8	; 0x08
    2878:	e0 2d       	mov	r30, r0
    287a:	f0 93 9f 08 	sts	0x089F, r31	; 0x80089f <tal_frame_to_tx+0x1>
    287e:	e0 93 9e 08 	sts	0x089E, r30	; 0x80089e <tal_frame_to_tx>
	last_frame_length = tal_frame_to_tx[0] - 1;
    2882:	80 81       	ld	r24, Z
    2884:	81 50       	subi	r24, 0x01	; 1
    2886:	80 93 9d 08 	sts	0x089D, r24	; 0x80089d <last_frame_length>

	/*
	 * In case the frame is too large, return immediately indicating
	 * invalid status.
	 */
	if (tal_frame_to_tx == NULL) {
    288a:	ef 2b       	or	r30, r31
    288c:	39 f0       	breq	.+14     	; 0x289c <tal_tx_frame+0x3a>
    288e:	86 2f       	mov	r24, r22
#endif  /* #if (MAC_INDIRECT_DATA_FFD == 1) */
		send_frame(csma_mode, perform_frame_retry);
	}

#else   /* No BEACON_SUPPORT */
	send_frame(csma_mode, perform_frame_retry);
    2890:	64 2f       	mov	r22, r20
    2892:	5d df       	rcall	.-326    	; 0x274e <send_frame>
#endif  /* BEACON_SUPPORT / No BEACON_SUPPORT */

	return MAC_SUCCESS;
    2894:	80 e0       	ldi	r24, 0x00	; 0
    2896:	08 95       	ret
 */
retval_t tal_tx_frame(frame_info_t *tx_frame, csma_mode_t csma_mode,
		bool perform_frame_retry)
{
	if (tal_state != TAL_IDLE) {
		return TAL_BUSY;
    2898:	86 e8       	ldi	r24, 0x86	; 134
    289a:	08 95       	ret
	/*
	 * In case the frame is too large, return immediately indicating
	 * invalid status.
	 */
	if (tal_frame_to_tx == NULL) {
		return MAC_INVALID_PARAMETER;
    289c:	88 ee       	ldi	r24, 0xE8	; 232
#else   /* No BEACON_SUPPORT */
	send_frame(csma_mode, perform_frame_retry);
#endif  /* BEACON_SUPPORT / No BEACON_SUPPORT */

	return MAC_SUCCESS;
}
    289e:	08 95       	ret

000028a0 <handle_tx_end_irq>:
	/* Check if TX_END interrupt, is issued due to automatic ACK
	 * transmission. */
#if ((MAC_START_REQUEST_CONFIRM == 1) && (defined BEACON_SUPPORT))
	if ((tal_state != TAL_TX_AUTO) && (!tal_beacon_transmission))
#else
	if (tal_state != TAL_TX_AUTO)
    28a0:	80 91 a1 08 	lds	r24, 0x08A1	; 0x8008a1 <tal_state>
    28a4:	81 30       	cpi	r24, 0x01	; 1
    28a6:	c1 f4       	brne	.+48     	; 0x28d8 <handle_tx_end_irq+0x38>
		}
	} else
#endif /* ((MAC_START_REQUEST_CONFIRM == 1) && (defined BEACON_SUPPORT)) */
	{
		/* Read trac status before enabling RX_AACK_ON. */
		trx_trac_status = (trx_trac_status_t)trx_bit_read(
    28a8:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
    28ac:	82 95       	swap	r24
    28ae:	86 95       	lsr	r24
    28b0:	87 70       	andi	r24, 0x07	; 7
    28b2:	80 93 39 06 	sts	0x0639, r24	; 0x800639 <trx_trac_status>
			PIN_ACK_WAITING_END();
		} else
#endif  /* BEACON_SUPPORT */
		/* Trx has handled the entire transmission incl. CSMA */
		{
			tal_state = TAL_TX_DONE; /* Further handling is done by
    28b6:	82 e0       	ldi	r24, 0x02	; 2
    28b8:	80 93 a1 08 	sts	0x08A1, r24	; 0x8008a1 <tal_state>

	/*
	 * After transmission has finished, switch receiver on again.
	 * Check if receive buffer is available.
	 */
	if (NULL == tal_rx_buffer) {
    28bc:	80 91 2f 06 	lds	r24, 0x062F	; 0x80062f <tal_rx_buffer>
    28c0:	90 91 30 06 	lds	r25, 0x0630	; 0x800630 <tal_rx_buffer+0x1>
    28c4:	89 2b       	or	r24, r25
    28c6:	31 f4       	brne	.+12     	; 0x28d4 <handle_tx_end_irq+0x34>
		set_trx_state(CMD_PLL_ON);
    28c8:	89 e0       	ldi	r24, 0x09	; 9
    28ca:	31 d8       	rcall	.-3998   	; 0x192e <set_trx_state>
		tal_rx_on_required = true;
    28cc:	81 e0       	ldi	r24, 0x01	; 1
    28ce:	80 93 75 08 	sts	0x0875, r24	; 0x800875 <tal_rx_on_required>
    28d2:	08 95       	ret
	} else {
		set_trx_state(CMD_RX_AACK_ON);
    28d4:	86 e1       	ldi	r24, 0x16	; 22
    28d6:	2b c8       	rjmp	.-4010   	; 0x192e <set_trx_state>
    28d8:	08 95       	ret

000028da <tfa_pib_set>:
 *         TAL_BUSY if the TAL is not in TAL_IDLE state.
 *         MAC_SUCCESS if the attempt to set the PIB attribute was successful
 */
retval_t tfa_pib_set(tfa_pib_t tfa_pib_attribute, void *value)
{
	switch (tfa_pib_attribute) {
    28da:	81 11       	cpse	r24, r1
    28dc:	24 c0       	rjmp	.+72     	; 0x2926 <tfa_pib_set+0x4c>
	case TFA_PIB_RX_SENS:
	{
		uint8_t reg_val;

		tfa_pib_rx_sens = *((int8_t *)value);
    28de:	fb 01       	movw	r30, r22
    28e0:	80 81       	ld	r24, Z
		if (tfa_pib_rx_sens > -49) {
    28e2:	80 3d       	cpi	r24, 0xD0	; 208
    28e4:	2c f0       	brlt	.+10     	; 0x28f0 <tfa_pib_set+0x16>
			reg_val = 0xF;
			tfa_pib_rx_sens = -49;
    28e6:	8f ec       	ldi	r24, 0xCF	; 207
    28e8:	80 93 3a 06 	sts	0x063A, r24	; 0x80063a <tfa_pib_rx_sens>
	{
		uint8_t reg_val;

		tfa_pib_rx_sens = *((int8_t *)value);
		if (tfa_pib_rx_sens > -49) {
			reg_val = 0xF;
    28ec:	6f e0       	ldi	r22, 0x0F	; 15
    28ee:	12 c0       	rjmp	.+36     	; 0x2914 <tfa_pib_set+0x3a>
			tfa_pib_rx_sens = -49;
		} else if (tfa_pib_rx_sens <= RSSI_BASE_VAL_DBM) {
    28f0:	87 3a       	cpi	r24, 0xA7	; 167
    28f2:	2c f4       	brge	.+10     	; 0x28fe <tfa_pib_set+0x24>
			reg_val = 0x0;
			tfa_pib_rx_sens = RSSI_BASE_VAL_DBM;
    28f4:	86 ea       	ldi	r24, 0xA6	; 166
    28f6:	80 93 3a 06 	sts	0x063A, r24	; 0x80063a <tfa_pib_rx_sens>
		tfa_pib_rx_sens = *((int8_t *)value);
		if (tfa_pib_rx_sens > -49) {
			reg_val = 0xF;
			tfa_pib_rx_sens = -49;
		} else if (tfa_pib_rx_sens <= RSSI_BASE_VAL_DBM) {
			reg_val = 0x0;
    28fa:	60 e0       	ldi	r22, 0x00	; 0
    28fc:	0b c0       	rjmp	.+22     	; 0x2914 <tfa_pib_set+0x3a>
	switch (tfa_pib_attribute) {
	case TFA_PIB_RX_SENS:
	{
		uint8_t reg_val;

		tfa_pib_rx_sens = *((int8_t *)value);
    28fe:	80 93 3a 06 	sts	0x063A, r24	; 0x80063a <tfa_pib_rx_sens>
		} else if (tfa_pib_rx_sens <= RSSI_BASE_VAL_DBM) {
			reg_val = 0x0;
			tfa_pib_rx_sens = RSSI_BASE_VAL_DBM;
		} else {
			reg_val
				= ((tfa_pib_rx_sens -
    2902:	08 2e       	mov	r0, r24
    2904:	00 0c       	add	r0, r0
    2906:	99 0b       	sbc	r25, r25
    2908:	86 5a       	subi	r24, 0xA6	; 166
    290a:	9f 4f       	sbci	r25, 0xFF	; 255
    290c:	63 e0       	ldi	r22, 0x03	; 3
    290e:	70 e0       	ldi	r23, 0x00	; 0
    2910:	b6 d4       	rcall	.+2412   	; 0x327e <__divmodhi4>
    2912:	6f 5f       	subi	r22, 0xFF	; 255
					(RSSI_BASE_VAL_DBM)) / 3) + 1;
		}

		trx_bit_write(SR_RX_PDT_LEVEL, reg_val);
    2914:	e5 e5       	ldi	r30, 0x55	; 85
    2916:	f1 e0       	ldi	r31, 0x01	; 1
    2918:	80 81       	ld	r24, Z
    291a:	80 7f       	andi	r24, 0xF0	; 240
    291c:	6f 70       	andi	r22, 0x0F	; 15
    291e:	68 2b       	or	r22, r24
    2920:	60 83       	st	Z, r22
	default:
		/* Invalid attribute id */
		return MAC_UNSUPPORTED_ATTRIBUTE;
	}

	return MAC_SUCCESS;
    2922:	80 e0       	ldi	r24, 0x00	; 0
    2924:	08 95       	ret
	}
	break;

	default:
		/* Invalid attribute id */
		return MAC_UNSUPPORTED_ATTRIBUTE;
    2926:	84 ef       	ldi	r24, 0xF4	; 244
	}

	return MAC_SUCCESS;
}
    2928:	08 95       	ret

0000292a <tfa_init>:
 * to their default values.
 * \ingroup group_tfa
 */
static void init_tfa_pib(void)
{
	tfa_pib_rx_sens = TFA_PIB_RX_SENS_DEF;
    292a:	86 ea       	ldi	r24, 0xA6	; 166
    292c:	80 93 3a 06 	sts	0x063A, r24	; 0x80063a <tfa_pib_rx_sens>
 * It is assumed that the radio does not sleep.
 * \ingroup group_tfa
 */
static void write_all_tfa_pibs_to_trx(void)
{
	tfa_pib_set(TFA_PIB_RX_SENS, (void *)&tfa_pib_rx_sens);
    2930:	6a e3       	ldi	r22, 0x3A	; 58
    2932:	76 e0       	ldi	r23, 0x06	; 6
    2934:	80 e0       	ldi	r24, 0x00	; 0
    2936:	d1 df       	rcall	.-94     	; 0x28da <tfa_pib_set>
		Assert(false);
	}

#if !MEGA_XX_UN0 && !MEGA_XX_UN1
	else if (module == &ADC) {
		sysclk_enable_module(POWER_RED_REG0, PRADC_bm);
    2938:	61 e0       	ldi	r22, 0x01	; 1
    293a:	80 e0       	ldi	r24, 0x00	; 0
    293c:	0e 94 31 07 	call	0xe62	; 0xe62 <sysclk_enable_module>
#if MEGA_RF
		sysclk_enable_module(POWER_RED_REG0, PRPGA_bm);
    2940:	60 e1       	ldi	r22, 0x10	; 16
    2942:	80 e0       	ldi	r24, 0x00	; 0
    2944:	0e 94 31 07 	call	0xe62	; 0xe62 <sysclk_enable_module>
{
	init_tfa_pib();
	write_all_tfa_pibs_to_trx();
	sysclk_enable_peripheral_clock(&ADC);
	return MAC_SUCCESS;
}
    2948:	80 e0       	ldi	r24, 0x00	; 0
    294a:	08 95       	ret

0000294c <tc_ovf_callback>:

/*! \brief  hw timer overflow callback
 */
void tc_ovf_callback(void)
{
	tmr_ovf_callback();
    294c:	0c 94 9a 01 	jmp	0x334	; 0x334 <tmr_ovf_callback>
    2950:	08 95       	ret

00002952 <tc_cca_callback>:

/*! \brief  hw timer compare callback
 */
void tc_cca_callback(void)
{
	tmr_cca_callback();
    2952:	0c 94 d2 01 	jmp	0x3a4	; 0x3a4 <tmr_cca_callback>
    2956:	08 95       	ret

00002958 <tmr_read_count>:
 * @return  count  in the register
 */
static inline uint16_t tc_read_count(volatile void *tc)
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
		return TCNT1;
    2958:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7c0084>
    295c:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7c0085>
/*! \brief  read the actual timer count from register
 */
uint16_t tmr_read_count(void)
{
	return tc_read_count(TIMER);
}
    2960:	08 95       	ret

00002962 <tmr_disable_cc_interrupt>:
 * @param tc Timer Address
 */
static inline void tc_disable_compa_int(volatile void *tc)
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
		TIMSK1 &= ~(1 << OCIE1A);
    2962:	ef e6       	ldi	r30, 0x6F	; 111
    2964:	f0 e0       	ldi	r31, 0x00	; 0
    2966:	80 81       	ld	r24, Z
    2968:	8d 7f       	andi	r24, 0xFD	; 253
    296a:	80 83       	st	Z, r24
 * @param tc Timer Address
 */
static inline void clear_compa_flag(volatile void *tc)
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
		TIFR1 |= (1 << OCF1A);
    296c:	b1 9a       	sbi	0x16, 1	; 22
    296e:	08 95       	ret

00002970 <tmr_enable_cc_interrupt>:
    2970:	b1 9a       	sbi	0x16, 1	; 22
 * @param tc Timer Address
 */
static inline void tc_enable_compa_int(volatile void *tc)
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
		TIMSK1 |= (1 << OCIE1A);
    2972:	ef e6       	ldi	r30, 0x6F	; 111
    2974:	f0 e0       	ldi	r31, 0x00	; 0
    2976:	80 81       	ld	r24, Z
    2978:	82 60       	ori	r24, 0x02	; 2
    297a:	80 83       	st	Z, r24
    297c:	08 95       	ret

0000297e <tmr_disable_ovf_interrupt>:
 * @param tc Timer Address
 */
static inline void tc_enable_ovf_int(volatile void *tc)
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
		TIMSK1 |= (1 << TOIE1);
    297e:	ef e6       	ldi	r30, 0x6F	; 111
    2980:	f0 e0       	ldi	r31, 0x00	; 0
    2982:	80 81       	ld	r24, Z
    2984:	81 60       	ori	r24, 0x01	; 1
    2986:	80 83       	st	Z, r24
 * @param tc Timer Address
 */
static inline void clear_ovf_flag(volatile void *tc)
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
		TIFR1 |= (1 << TOV1);
    2988:	b0 9a       	sbi	0x16, 0	; 22
    298a:	08 95       	ret

0000298c <tmr_stop>:

/*! \brief  to stop the running timer
 */
void tmr_stop(void)
{
	tc_disable(TIMER);
    298c:	80 e8       	ldi	r24, 0x80	; 128
    298e:	90 e0       	ldi	r25, 0x00	; 0
    2990:	82 c3       	rjmp	.+1796   	; 0x3096 <tc_disable>
    2992:	08 95       	ret

00002994 <tmr_write_cmpreg>:
 */
static inline void tc_write_cc(volatile void *tc,
		enum tc_cc_channel_t channel_index, uint16_t value)
{
	uint8_t *reg = (uint8_t *)tc;
	*(reg + channel_index + 1) |=  (value >> 8);
    2994:	e9 e8       	ldi	r30, 0x89	; 137
    2996:	f0 e0       	ldi	r31, 0x00	; 0
    2998:	20 81       	ld	r18, Z
    299a:	92 2b       	or	r25, r18
    299c:	90 83       	st	Z, r25
	*(reg + channel_index) |=  value;
    299e:	e8 e8       	ldi	r30, 0x88	; 136
    29a0:	f0 e0       	ldi	r31, 0x00	; 0
    29a2:	90 81       	ld	r25, Z
    29a4:	89 2b       	or	r24, r25
    29a6:	80 83       	st	Z, r24
    29a8:	08 95       	ret

000029aa <save_cpu_interrupt>:
}

/*! \brief  to save current interrupts status
 */
uint8_t save_cpu_interrupt(void)
{
    29aa:	cf 93       	push	r28
    29ac:	df 93       	push	r29
    29ae:	1f 92       	push	r1
    29b0:	cd b7       	in	r28, 0x3d	; 61
    29b2:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    29b4:	8f b7       	in	r24, 0x3f	; 63
    29b6:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    29b8:	f8 94       	cli
	return flags;
    29ba:	89 81       	ldd	r24, Y+1	; 0x01
	return cpu_irq_save();
}
    29bc:	0f 90       	pop	r0
    29be:	df 91       	pop	r29
    29c0:	cf 91       	pop	r28
    29c2:	08 95       	ret

000029c4 <restore_cpu_interrupt>:
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    29c4:	8f bf       	out	0x3f, r24	; 63
    29c6:	08 95       	ret

000029c8 <tmr_init>:
}

/*! \brief  to initialiaze hw timer
 */
uint8_t tmr_init(void)
{
    29c8:	cf 93       	push	r28
    29ca:	df 93       	push	r29
	uint8_t timer_multiplier;

	tc_enable(TIMER);
    29cc:	80 e8       	ldi	r24, 0x80	; 128
    29ce:	90 e0       	ldi	r25, 0x00	; 0
    29d0:	eb d2       	rcall	.+1494   	; 0x2fa8 <tc_enable>

	tc_set_overflow_interrupt_callback(TIMER, tc_ovf_callback);
    29d2:	66 ea       	ldi	r22, 0xA6	; 166
    29d4:	74 e1       	ldi	r23, 0x14	; 20
    29d6:	80 e8       	ldi	r24, 0x80	; 128
    29d8:	90 e0       	ldi	r25, 0x00	; 0
    29da:	d4 d3       	rcall	.+1960   	; 0x3184 <tc_set_overflow_interrupt_callback>
 * @param tc Timer Address
 */
static inline void tc_enable_ovf_int(volatile void *tc)
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
		TIMSK1 |= (1 << TOIE1);
    29dc:	cf e6       	ldi	r28, 0x6F	; 111
    29de:	d0 e0       	ldi	r29, 0x00	; 0
    29e0:	88 81       	ld	r24, Y
    29e2:	81 60       	ori	r24, 0x01	; 1
    29e4:	88 83       	st	Y, r24
 */
static void configure_tc_callback(volatile void *timer)
{
	if ((&TCCR1A == timer) || (&TCCR3A == timer) ||
			(&TCCR4A == timer) || (&TCCR5A == timer)) {
		tc_set_compa_interrupt_callback(TIMER, tc_cca_callback);
    29e6:	69 ea       	ldi	r22, 0xA9	; 169
    29e8:	74 e1       	ldi	r23, 0x14	; 20
    29ea:	80 e8       	ldi	r24, 0x80	; 128
    29ec:	90 e0       	ldi	r25, 0x00	; 0
    29ee:	ea d3       	rcall	.+2004   	; 0x31c4 <tc_set_compa_interrupt_callback>
 * @param tc Timer Address
 */
static inline void tc_disable_compa_int(volatile void *tc)
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
		TIMSK1 &= ~(1 << OCIE1A);
    29f0:	88 81       	ld	r24, Y
    29f2:	8d 7f       	andi	r24, 0xFD	; 253
    29f4:	88 83       	st	Y, r24
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
		TCCR1B |=  TC_CLKSEL_enum;
    29f6:	e1 e8       	ldi	r30, 0x81	; 129
    29f8:	f0 e0       	ldi	r31, 0x00	; 0
    29fa:	80 81       	ld	r24, Z
    29fc:	81 60       	ori	r24, 0x01	; 1
    29fe:	80 83       	st	Z, r24
	tc_write_clock_source(TIMER, TC_CLKSEL_DIV1_gc);

	timer_multiplier = sysclk_get_peripheral_bus_hz(TIMER) / DEF_1MHZ;

	return timer_multiplier;
}
    2a00:	88 e0       	ldi	r24, 0x08	; 8
    2a02:	df 91       	pop	r29
    2a04:	cf 91       	pop	r28
    2a06:	08 95       	ret

00002a08 <__vector_20>:
/**
 * \internal
 * \brief Interrupt handler for Timer Counter  overflow
 */
ISR(TIMER1_OVF_vect)
{
    2a08:	1f 92       	push	r1
    2a0a:	0f 92       	push	r0
    2a0c:	0f b6       	in	r0, 0x3f	; 63
    2a0e:	0f 92       	push	r0
    2a10:	11 24       	eor	r1, r1
    2a12:	0b b6       	in	r0, 0x3b	; 59
    2a14:	0f 92       	push	r0
    2a16:	2f 93       	push	r18
    2a18:	3f 93       	push	r19
    2a1a:	4f 93       	push	r20
    2a1c:	5f 93       	push	r21
    2a1e:	6f 93       	push	r22
    2a20:	7f 93       	push	r23
    2a22:	8f 93       	push	r24
    2a24:	9f 93       	push	r25
    2a26:	af 93       	push	r26
    2a28:	bf 93       	push	r27
    2a2a:	ef 93       	push	r30
    2a2c:	ff 93       	push	r31
	if (tc_tccr1_ovf_callback) {
    2a2e:	e0 91 59 06 	lds	r30, 0x0659	; 0x800659 <tc_tccr1_ovf_callback>
    2a32:	f0 91 5a 06 	lds	r31, 0x065A	; 0x80065a <tc_tccr1_ovf_callback+0x1>
    2a36:	30 97       	sbiw	r30, 0x00	; 0
    2a38:	09 f0       	breq	.+2      	; 0x2a3c <__vector_20+0x34>
		tc_tccr1_ovf_callback();
    2a3a:	19 95       	eicall
	}
}
    2a3c:	ff 91       	pop	r31
    2a3e:	ef 91       	pop	r30
    2a40:	bf 91       	pop	r27
    2a42:	af 91       	pop	r26
    2a44:	9f 91       	pop	r25
    2a46:	8f 91       	pop	r24
    2a48:	7f 91       	pop	r23
    2a4a:	6f 91       	pop	r22
    2a4c:	5f 91       	pop	r21
    2a4e:	4f 91       	pop	r20
    2a50:	3f 91       	pop	r19
    2a52:	2f 91       	pop	r18
    2a54:	0f 90       	pop	r0
    2a56:	0b be       	out	0x3b, r0	; 59
    2a58:	0f 90       	pop	r0
    2a5a:	0f be       	out	0x3f, r0	; 63
    2a5c:	0f 90       	pop	r0
    2a5e:	1f 90       	pop	r1
    2a60:	18 95       	reti

00002a62 <__vector_17>:

/**
 * \brief Interrupt handler for Timer Counter  Compare Match in Channel A
 */
ISR(TIMER1_COMPA_vect)
{
    2a62:	1f 92       	push	r1
    2a64:	0f 92       	push	r0
    2a66:	0f b6       	in	r0, 0x3f	; 63
    2a68:	0f 92       	push	r0
    2a6a:	11 24       	eor	r1, r1
    2a6c:	0b b6       	in	r0, 0x3b	; 59
    2a6e:	0f 92       	push	r0
    2a70:	2f 93       	push	r18
    2a72:	3f 93       	push	r19
    2a74:	4f 93       	push	r20
    2a76:	5f 93       	push	r21
    2a78:	6f 93       	push	r22
    2a7a:	7f 93       	push	r23
    2a7c:	8f 93       	push	r24
    2a7e:	9f 93       	push	r25
    2a80:	af 93       	push	r26
    2a82:	bf 93       	push	r27
    2a84:	ef 93       	push	r30
    2a86:	ff 93       	push	r31
	if (tc_tccr1_compa_callback) {
    2a88:	e0 91 57 06 	lds	r30, 0x0657	; 0x800657 <tc_tccr1_compa_callback>
    2a8c:	f0 91 58 06 	lds	r31, 0x0658	; 0x800658 <tc_tccr1_compa_callback+0x1>
    2a90:	30 97       	sbiw	r30, 0x00	; 0
    2a92:	09 f0       	breq	.+2      	; 0x2a96 <__vector_17+0x34>
		tc_tccr1_compa_callback();
    2a94:	19 95       	eicall
	}
}
    2a96:	ff 91       	pop	r31
    2a98:	ef 91       	pop	r30
    2a9a:	bf 91       	pop	r27
    2a9c:	af 91       	pop	r26
    2a9e:	9f 91       	pop	r25
    2aa0:	8f 91       	pop	r24
    2aa2:	7f 91       	pop	r23
    2aa4:	6f 91       	pop	r22
    2aa6:	5f 91       	pop	r21
    2aa8:	4f 91       	pop	r20
    2aaa:	3f 91       	pop	r19
    2aac:	2f 91       	pop	r18
    2aae:	0f 90       	pop	r0
    2ab0:	0b be       	out	0x3b, r0	; 59
    2ab2:	0f 90       	pop	r0
    2ab4:	0f be       	out	0x3f, r0	; 63
    2ab6:	0f 90       	pop	r0
    2ab8:	1f 90       	pop	r1
    2aba:	18 95       	reti

00002abc <__vector_18>:

/**
 * \brief Interrupt handler for Timer Counter  Compare Match in Channel B
 */
ISR(TIMER1_COMPB_vect)
{
    2abc:	1f 92       	push	r1
    2abe:	0f 92       	push	r0
    2ac0:	0f b6       	in	r0, 0x3f	; 63
    2ac2:	0f 92       	push	r0
    2ac4:	11 24       	eor	r1, r1
    2ac6:	0b b6       	in	r0, 0x3b	; 59
    2ac8:	0f 92       	push	r0
    2aca:	2f 93       	push	r18
    2acc:	3f 93       	push	r19
    2ace:	4f 93       	push	r20
    2ad0:	5f 93       	push	r21
    2ad2:	6f 93       	push	r22
    2ad4:	7f 93       	push	r23
    2ad6:	8f 93       	push	r24
    2ad8:	9f 93       	push	r25
    2ada:	af 93       	push	r26
    2adc:	bf 93       	push	r27
    2ade:	ef 93       	push	r30
    2ae0:	ff 93       	push	r31
	if (tc_tccr1_compb_callback) {
    2ae2:	e0 91 55 06 	lds	r30, 0x0655	; 0x800655 <tc_tccr1_compb_callback>
    2ae6:	f0 91 56 06 	lds	r31, 0x0656	; 0x800656 <tc_tccr1_compb_callback+0x1>
    2aea:	30 97       	sbiw	r30, 0x00	; 0
    2aec:	09 f0       	breq	.+2      	; 0x2af0 <__vector_18+0x34>
		tc_tccr1_compb_callback();
    2aee:	19 95       	eicall
	}
}
    2af0:	ff 91       	pop	r31
    2af2:	ef 91       	pop	r30
    2af4:	bf 91       	pop	r27
    2af6:	af 91       	pop	r26
    2af8:	9f 91       	pop	r25
    2afa:	8f 91       	pop	r24
    2afc:	7f 91       	pop	r23
    2afe:	6f 91       	pop	r22
    2b00:	5f 91       	pop	r21
    2b02:	4f 91       	pop	r20
    2b04:	3f 91       	pop	r19
    2b06:	2f 91       	pop	r18
    2b08:	0f 90       	pop	r0
    2b0a:	0b be       	out	0x3b, r0	; 59
    2b0c:	0f 90       	pop	r0
    2b0e:	0f be       	out	0x3f, r0	; 63
    2b10:	0f 90       	pop	r0
    2b12:	1f 90       	pop	r1
    2b14:	18 95       	reti

00002b16 <__vector_19>:

/**
 * \brief Interrupt handler for Timer Counter  Compare Match in Channel C
 */
ISR(TIMER1_COMPC_vect)
{
    2b16:	1f 92       	push	r1
    2b18:	0f 92       	push	r0
    2b1a:	0f b6       	in	r0, 0x3f	; 63
    2b1c:	0f 92       	push	r0
    2b1e:	11 24       	eor	r1, r1
    2b20:	0b b6       	in	r0, 0x3b	; 59
    2b22:	0f 92       	push	r0
    2b24:	2f 93       	push	r18
    2b26:	3f 93       	push	r19
    2b28:	4f 93       	push	r20
    2b2a:	5f 93       	push	r21
    2b2c:	6f 93       	push	r22
    2b2e:	7f 93       	push	r23
    2b30:	8f 93       	push	r24
    2b32:	9f 93       	push	r25
    2b34:	af 93       	push	r26
    2b36:	bf 93       	push	r27
    2b38:	ef 93       	push	r30
    2b3a:	ff 93       	push	r31
	if (tc_tccr1_compc_callback) {
    2b3c:	e0 91 53 06 	lds	r30, 0x0653	; 0x800653 <tc_tccr1_compc_callback>
    2b40:	f0 91 54 06 	lds	r31, 0x0654	; 0x800654 <tc_tccr1_compc_callback+0x1>
    2b44:	30 97       	sbiw	r30, 0x00	; 0
    2b46:	09 f0       	breq	.+2      	; 0x2b4a <__vector_19+0x34>
		tc_tccr1_compc_callback();
    2b48:	19 95       	eicall
	}
}
    2b4a:	ff 91       	pop	r31
    2b4c:	ef 91       	pop	r30
    2b4e:	bf 91       	pop	r27
    2b50:	af 91       	pop	r26
    2b52:	9f 91       	pop	r25
    2b54:	8f 91       	pop	r24
    2b56:	7f 91       	pop	r23
    2b58:	6f 91       	pop	r22
    2b5a:	5f 91       	pop	r21
    2b5c:	4f 91       	pop	r20
    2b5e:	3f 91       	pop	r19
    2b60:	2f 91       	pop	r18
    2b62:	0f 90       	pop	r0
    2b64:	0b be       	out	0x3b, r0	; 59
    2b66:	0f 90       	pop	r0
    2b68:	0f be       	out	0x3f, r0	; 63
    2b6a:	0f 90       	pop	r0
    2b6c:	1f 90       	pop	r1
    2b6e:	18 95       	reti

00002b70 <__vector_35>:
static tc_callback_t tc_tccr3_compa_callback;
static tc_callback_t tc_tccr3_compb_callback;
static tc_callback_t tc_tccr3_compc_callback;

ISR(TIMER3_OVF_vect)
{
    2b70:	1f 92       	push	r1
    2b72:	0f 92       	push	r0
    2b74:	0f b6       	in	r0, 0x3f	; 63
    2b76:	0f 92       	push	r0
    2b78:	11 24       	eor	r1, r1
    2b7a:	0b b6       	in	r0, 0x3b	; 59
    2b7c:	0f 92       	push	r0
    2b7e:	2f 93       	push	r18
    2b80:	3f 93       	push	r19
    2b82:	4f 93       	push	r20
    2b84:	5f 93       	push	r21
    2b86:	6f 93       	push	r22
    2b88:	7f 93       	push	r23
    2b8a:	8f 93       	push	r24
    2b8c:	9f 93       	push	r25
    2b8e:	af 93       	push	r26
    2b90:	bf 93       	push	r27
    2b92:	ef 93       	push	r30
    2b94:	ff 93       	push	r31
	if (tc_tccr3_ovf_callback) {
    2b96:	e0 91 51 06 	lds	r30, 0x0651	; 0x800651 <tc_tccr3_ovf_callback>
    2b9a:	f0 91 52 06 	lds	r31, 0x0652	; 0x800652 <tc_tccr3_ovf_callback+0x1>
    2b9e:	30 97       	sbiw	r30, 0x00	; 0
    2ba0:	09 f0       	breq	.+2      	; 0x2ba4 <__vector_35+0x34>
		tc_tccr3_ovf_callback();
    2ba2:	19 95       	eicall
	}
}
    2ba4:	ff 91       	pop	r31
    2ba6:	ef 91       	pop	r30
    2ba8:	bf 91       	pop	r27
    2baa:	af 91       	pop	r26
    2bac:	9f 91       	pop	r25
    2bae:	8f 91       	pop	r24
    2bb0:	7f 91       	pop	r23
    2bb2:	6f 91       	pop	r22
    2bb4:	5f 91       	pop	r21
    2bb6:	4f 91       	pop	r20
    2bb8:	3f 91       	pop	r19
    2bba:	2f 91       	pop	r18
    2bbc:	0f 90       	pop	r0
    2bbe:	0b be       	out	0x3b, r0	; 59
    2bc0:	0f 90       	pop	r0
    2bc2:	0f be       	out	0x3f, r0	; 63
    2bc4:	0f 90       	pop	r0
    2bc6:	1f 90       	pop	r1
    2bc8:	18 95       	reti

00002bca <__vector_32>:

ISR(TIMER3_COMPA_vect)
{
    2bca:	1f 92       	push	r1
    2bcc:	0f 92       	push	r0
    2bce:	0f b6       	in	r0, 0x3f	; 63
    2bd0:	0f 92       	push	r0
    2bd2:	11 24       	eor	r1, r1
    2bd4:	0b b6       	in	r0, 0x3b	; 59
    2bd6:	0f 92       	push	r0
    2bd8:	2f 93       	push	r18
    2bda:	3f 93       	push	r19
    2bdc:	4f 93       	push	r20
    2bde:	5f 93       	push	r21
    2be0:	6f 93       	push	r22
    2be2:	7f 93       	push	r23
    2be4:	8f 93       	push	r24
    2be6:	9f 93       	push	r25
    2be8:	af 93       	push	r26
    2bea:	bf 93       	push	r27
    2bec:	ef 93       	push	r30
    2bee:	ff 93       	push	r31
	if (tc_tccr3_compa_callback) {
    2bf0:	e0 91 4f 06 	lds	r30, 0x064F	; 0x80064f <tc_tccr3_compa_callback>
    2bf4:	f0 91 50 06 	lds	r31, 0x0650	; 0x800650 <tc_tccr3_compa_callback+0x1>
    2bf8:	30 97       	sbiw	r30, 0x00	; 0
    2bfa:	09 f0       	breq	.+2      	; 0x2bfe <__vector_32+0x34>
		tc_tccr3_compa_callback();
    2bfc:	19 95       	eicall
	}
}
    2bfe:	ff 91       	pop	r31
    2c00:	ef 91       	pop	r30
    2c02:	bf 91       	pop	r27
    2c04:	af 91       	pop	r26
    2c06:	9f 91       	pop	r25
    2c08:	8f 91       	pop	r24
    2c0a:	7f 91       	pop	r23
    2c0c:	6f 91       	pop	r22
    2c0e:	5f 91       	pop	r21
    2c10:	4f 91       	pop	r20
    2c12:	3f 91       	pop	r19
    2c14:	2f 91       	pop	r18
    2c16:	0f 90       	pop	r0
    2c18:	0b be       	out	0x3b, r0	; 59
    2c1a:	0f 90       	pop	r0
    2c1c:	0f be       	out	0x3f, r0	; 63
    2c1e:	0f 90       	pop	r0
    2c20:	1f 90       	pop	r1
    2c22:	18 95       	reti

00002c24 <__vector_33>:

ISR(TIMER3_COMPB_vect)
{
    2c24:	1f 92       	push	r1
    2c26:	0f 92       	push	r0
    2c28:	0f b6       	in	r0, 0x3f	; 63
    2c2a:	0f 92       	push	r0
    2c2c:	11 24       	eor	r1, r1
    2c2e:	0b b6       	in	r0, 0x3b	; 59
    2c30:	0f 92       	push	r0
    2c32:	2f 93       	push	r18
    2c34:	3f 93       	push	r19
    2c36:	4f 93       	push	r20
    2c38:	5f 93       	push	r21
    2c3a:	6f 93       	push	r22
    2c3c:	7f 93       	push	r23
    2c3e:	8f 93       	push	r24
    2c40:	9f 93       	push	r25
    2c42:	af 93       	push	r26
    2c44:	bf 93       	push	r27
    2c46:	ef 93       	push	r30
    2c48:	ff 93       	push	r31
	if (tc_tccr3_compb_callback) {
    2c4a:	e0 91 4d 06 	lds	r30, 0x064D	; 0x80064d <tc_tccr3_compb_callback>
    2c4e:	f0 91 4e 06 	lds	r31, 0x064E	; 0x80064e <tc_tccr3_compb_callback+0x1>
    2c52:	30 97       	sbiw	r30, 0x00	; 0
    2c54:	09 f0       	breq	.+2      	; 0x2c58 <__vector_33+0x34>
		tc_tccr3_compb_callback();
    2c56:	19 95       	eicall
	}
}
    2c58:	ff 91       	pop	r31
    2c5a:	ef 91       	pop	r30
    2c5c:	bf 91       	pop	r27
    2c5e:	af 91       	pop	r26
    2c60:	9f 91       	pop	r25
    2c62:	8f 91       	pop	r24
    2c64:	7f 91       	pop	r23
    2c66:	6f 91       	pop	r22
    2c68:	5f 91       	pop	r21
    2c6a:	4f 91       	pop	r20
    2c6c:	3f 91       	pop	r19
    2c6e:	2f 91       	pop	r18
    2c70:	0f 90       	pop	r0
    2c72:	0b be       	out	0x3b, r0	; 59
    2c74:	0f 90       	pop	r0
    2c76:	0f be       	out	0x3f, r0	; 63
    2c78:	0f 90       	pop	r0
    2c7a:	1f 90       	pop	r1
    2c7c:	18 95       	reti

00002c7e <__vector_34>:

ISR(TIMER3_COMPC_vect)
{
    2c7e:	1f 92       	push	r1
    2c80:	0f 92       	push	r0
    2c82:	0f b6       	in	r0, 0x3f	; 63
    2c84:	0f 92       	push	r0
    2c86:	11 24       	eor	r1, r1
    2c88:	0b b6       	in	r0, 0x3b	; 59
    2c8a:	0f 92       	push	r0
    2c8c:	2f 93       	push	r18
    2c8e:	3f 93       	push	r19
    2c90:	4f 93       	push	r20
    2c92:	5f 93       	push	r21
    2c94:	6f 93       	push	r22
    2c96:	7f 93       	push	r23
    2c98:	8f 93       	push	r24
    2c9a:	9f 93       	push	r25
    2c9c:	af 93       	push	r26
    2c9e:	bf 93       	push	r27
    2ca0:	ef 93       	push	r30
    2ca2:	ff 93       	push	r31
	if (tc_tccr3_compc_callback) {
    2ca4:	e0 91 4b 06 	lds	r30, 0x064B	; 0x80064b <tc_tccr3_compc_callback>
    2ca8:	f0 91 4c 06 	lds	r31, 0x064C	; 0x80064c <tc_tccr3_compc_callback+0x1>
    2cac:	30 97       	sbiw	r30, 0x00	; 0
    2cae:	09 f0       	breq	.+2      	; 0x2cb2 <__vector_34+0x34>
		tc_tccr3_compc_callback();
    2cb0:	19 95       	eicall
	}
}
    2cb2:	ff 91       	pop	r31
    2cb4:	ef 91       	pop	r30
    2cb6:	bf 91       	pop	r27
    2cb8:	af 91       	pop	r26
    2cba:	9f 91       	pop	r25
    2cbc:	8f 91       	pop	r24
    2cbe:	7f 91       	pop	r23
    2cc0:	6f 91       	pop	r22
    2cc2:	5f 91       	pop	r21
    2cc4:	4f 91       	pop	r20
    2cc6:	3f 91       	pop	r19
    2cc8:	2f 91       	pop	r18
    2cca:	0f 90       	pop	r0
    2ccc:	0b be       	out	0x3b, r0	; 59
    2cce:	0f 90       	pop	r0
    2cd0:	0f be       	out	0x3f, r0	; 63
    2cd2:	0f 90       	pop	r0
    2cd4:	1f 90       	pop	r1
    2cd6:	18 95       	reti

00002cd8 <__vector_45>:
static tc_callback_t tc_tccr4_compa_callback;
static tc_callback_t tc_tccr4_compb_callback;
static tc_callback_t tc_tccr4_compc_callback;

ISR(TIMER4_OVF_vect)
{
    2cd8:	1f 92       	push	r1
    2cda:	0f 92       	push	r0
    2cdc:	0f b6       	in	r0, 0x3f	; 63
    2cde:	0f 92       	push	r0
    2ce0:	11 24       	eor	r1, r1
    2ce2:	0b b6       	in	r0, 0x3b	; 59
    2ce4:	0f 92       	push	r0
    2ce6:	2f 93       	push	r18
    2ce8:	3f 93       	push	r19
    2cea:	4f 93       	push	r20
    2cec:	5f 93       	push	r21
    2cee:	6f 93       	push	r22
    2cf0:	7f 93       	push	r23
    2cf2:	8f 93       	push	r24
    2cf4:	9f 93       	push	r25
    2cf6:	af 93       	push	r26
    2cf8:	bf 93       	push	r27
    2cfa:	ef 93       	push	r30
    2cfc:	ff 93       	push	r31
	if (tc_tccr4_ovf_callback) {
    2cfe:	e0 91 49 06 	lds	r30, 0x0649	; 0x800649 <tc_tccr4_ovf_callback>
    2d02:	f0 91 4a 06 	lds	r31, 0x064A	; 0x80064a <tc_tccr4_ovf_callback+0x1>
    2d06:	30 97       	sbiw	r30, 0x00	; 0
    2d08:	09 f0       	breq	.+2      	; 0x2d0c <__vector_45+0x34>
		tc_tccr4_ovf_callback();
    2d0a:	19 95       	eicall
	}
}
    2d0c:	ff 91       	pop	r31
    2d0e:	ef 91       	pop	r30
    2d10:	bf 91       	pop	r27
    2d12:	af 91       	pop	r26
    2d14:	9f 91       	pop	r25
    2d16:	8f 91       	pop	r24
    2d18:	7f 91       	pop	r23
    2d1a:	6f 91       	pop	r22
    2d1c:	5f 91       	pop	r21
    2d1e:	4f 91       	pop	r20
    2d20:	3f 91       	pop	r19
    2d22:	2f 91       	pop	r18
    2d24:	0f 90       	pop	r0
    2d26:	0b be       	out	0x3b, r0	; 59
    2d28:	0f 90       	pop	r0
    2d2a:	0f be       	out	0x3f, r0	; 63
    2d2c:	0f 90       	pop	r0
    2d2e:	1f 90       	pop	r1
    2d30:	18 95       	reti

00002d32 <__vector_42>:

ISR(TIMER4_COMPA_vect)
{
    2d32:	1f 92       	push	r1
    2d34:	0f 92       	push	r0
    2d36:	0f b6       	in	r0, 0x3f	; 63
    2d38:	0f 92       	push	r0
    2d3a:	11 24       	eor	r1, r1
    2d3c:	0b b6       	in	r0, 0x3b	; 59
    2d3e:	0f 92       	push	r0
    2d40:	2f 93       	push	r18
    2d42:	3f 93       	push	r19
    2d44:	4f 93       	push	r20
    2d46:	5f 93       	push	r21
    2d48:	6f 93       	push	r22
    2d4a:	7f 93       	push	r23
    2d4c:	8f 93       	push	r24
    2d4e:	9f 93       	push	r25
    2d50:	af 93       	push	r26
    2d52:	bf 93       	push	r27
    2d54:	ef 93       	push	r30
    2d56:	ff 93       	push	r31
	if (tc_tccr4_compa_callback) {
    2d58:	e0 91 47 06 	lds	r30, 0x0647	; 0x800647 <tc_tccr4_compa_callback>
    2d5c:	f0 91 48 06 	lds	r31, 0x0648	; 0x800648 <tc_tccr4_compa_callback+0x1>
    2d60:	30 97       	sbiw	r30, 0x00	; 0
    2d62:	09 f0       	breq	.+2      	; 0x2d66 <__vector_42+0x34>
		tc_tccr4_compa_callback();
    2d64:	19 95       	eicall
	}
}
    2d66:	ff 91       	pop	r31
    2d68:	ef 91       	pop	r30
    2d6a:	bf 91       	pop	r27
    2d6c:	af 91       	pop	r26
    2d6e:	9f 91       	pop	r25
    2d70:	8f 91       	pop	r24
    2d72:	7f 91       	pop	r23
    2d74:	6f 91       	pop	r22
    2d76:	5f 91       	pop	r21
    2d78:	4f 91       	pop	r20
    2d7a:	3f 91       	pop	r19
    2d7c:	2f 91       	pop	r18
    2d7e:	0f 90       	pop	r0
    2d80:	0b be       	out	0x3b, r0	; 59
    2d82:	0f 90       	pop	r0
    2d84:	0f be       	out	0x3f, r0	; 63
    2d86:	0f 90       	pop	r0
    2d88:	1f 90       	pop	r1
    2d8a:	18 95       	reti

00002d8c <__vector_43>:

ISR(TIMER4_COMPB_vect)
{
    2d8c:	1f 92       	push	r1
    2d8e:	0f 92       	push	r0
    2d90:	0f b6       	in	r0, 0x3f	; 63
    2d92:	0f 92       	push	r0
    2d94:	11 24       	eor	r1, r1
    2d96:	0b b6       	in	r0, 0x3b	; 59
    2d98:	0f 92       	push	r0
    2d9a:	2f 93       	push	r18
    2d9c:	3f 93       	push	r19
    2d9e:	4f 93       	push	r20
    2da0:	5f 93       	push	r21
    2da2:	6f 93       	push	r22
    2da4:	7f 93       	push	r23
    2da6:	8f 93       	push	r24
    2da8:	9f 93       	push	r25
    2daa:	af 93       	push	r26
    2dac:	bf 93       	push	r27
    2dae:	ef 93       	push	r30
    2db0:	ff 93       	push	r31
	if (tc_tccr4_compb_callback) {
    2db2:	e0 91 45 06 	lds	r30, 0x0645	; 0x800645 <tc_tccr4_compb_callback>
    2db6:	f0 91 46 06 	lds	r31, 0x0646	; 0x800646 <tc_tccr4_compb_callback+0x1>
    2dba:	30 97       	sbiw	r30, 0x00	; 0
    2dbc:	09 f0       	breq	.+2      	; 0x2dc0 <__vector_43+0x34>
		tc_tccr4_compb_callback();
    2dbe:	19 95       	eicall
	}
}
    2dc0:	ff 91       	pop	r31
    2dc2:	ef 91       	pop	r30
    2dc4:	bf 91       	pop	r27
    2dc6:	af 91       	pop	r26
    2dc8:	9f 91       	pop	r25
    2dca:	8f 91       	pop	r24
    2dcc:	7f 91       	pop	r23
    2dce:	6f 91       	pop	r22
    2dd0:	5f 91       	pop	r21
    2dd2:	4f 91       	pop	r20
    2dd4:	3f 91       	pop	r19
    2dd6:	2f 91       	pop	r18
    2dd8:	0f 90       	pop	r0
    2dda:	0b be       	out	0x3b, r0	; 59
    2ddc:	0f 90       	pop	r0
    2dde:	0f be       	out	0x3f, r0	; 63
    2de0:	0f 90       	pop	r0
    2de2:	1f 90       	pop	r1
    2de4:	18 95       	reti

00002de6 <__vector_44>:

ISR(TIMER4_COMPC_vect)
{
    2de6:	1f 92       	push	r1
    2de8:	0f 92       	push	r0
    2dea:	0f b6       	in	r0, 0x3f	; 63
    2dec:	0f 92       	push	r0
    2dee:	11 24       	eor	r1, r1
    2df0:	0b b6       	in	r0, 0x3b	; 59
    2df2:	0f 92       	push	r0
    2df4:	2f 93       	push	r18
    2df6:	3f 93       	push	r19
    2df8:	4f 93       	push	r20
    2dfa:	5f 93       	push	r21
    2dfc:	6f 93       	push	r22
    2dfe:	7f 93       	push	r23
    2e00:	8f 93       	push	r24
    2e02:	9f 93       	push	r25
    2e04:	af 93       	push	r26
    2e06:	bf 93       	push	r27
    2e08:	ef 93       	push	r30
    2e0a:	ff 93       	push	r31
	if (tc_tccr4_compc_callback) {
    2e0c:	e0 91 43 06 	lds	r30, 0x0643	; 0x800643 <tc_tccr4_compc_callback>
    2e10:	f0 91 44 06 	lds	r31, 0x0644	; 0x800644 <tc_tccr4_compc_callback+0x1>
    2e14:	30 97       	sbiw	r30, 0x00	; 0
    2e16:	09 f0       	breq	.+2      	; 0x2e1a <__vector_44+0x34>
		tc_tccr4_compc_callback();
    2e18:	19 95       	eicall
	}
}
    2e1a:	ff 91       	pop	r31
    2e1c:	ef 91       	pop	r30
    2e1e:	bf 91       	pop	r27
    2e20:	af 91       	pop	r26
    2e22:	9f 91       	pop	r25
    2e24:	8f 91       	pop	r24
    2e26:	7f 91       	pop	r23
    2e28:	6f 91       	pop	r22
    2e2a:	5f 91       	pop	r21
    2e2c:	4f 91       	pop	r20
    2e2e:	3f 91       	pop	r19
    2e30:	2f 91       	pop	r18
    2e32:	0f 90       	pop	r0
    2e34:	0b be       	out	0x3b, r0	; 59
    2e36:	0f 90       	pop	r0
    2e38:	0f be       	out	0x3f, r0	; 63
    2e3a:	0f 90       	pop	r0
    2e3c:	1f 90       	pop	r1
    2e3e:	18 95       	reti

00002e40 <__vector_50>:
static tc_callback_t tc_tccr5_compa_callback;
static tc_callback_t tc_tccr5_compb_callback;
static tc_callback_t tc_tccr5_compc_callback;

ISR(TIMER5_OVF_vect)
{
    2e40:	1f 92       	push	r1
    2e42:	0f 92       	push	r0
    2e44:	0f b6       	in	r0, 0x3f	; 63
    2e46:	0f 92       	push	r0
    2e48:	11 24       	eor	r1, r1
    2e4a:	0b b6       	in	r0, 0x3b	; 59
    2e4c:	0f 92       	push	r0
    2e4e:	2f 93       	push	r18
    2e50:	3f 93       	push	r19
    2e52:	4f 93       	push	r20
    2e54:	5f 93       	push	r21
    2e56:	6f 93       	push	r22
    2e58:	7f 93       	push	r23
    2e5a:	8f 93       	push	r24
    2e5c:	9f 93       	push	r25
    2e5e:	af 93       	push	r26
    2e60:	bf 93       	push	r27
    2e62:	ef 93       	push	r30
    2e64:	ff 93       	push	r31
	if (tc_tccr5_ovf_callback) {
    2e66:	e0 91 41 06 	lds	r30, 0x0641	; 0x800641 <tc_tccr5_ovf_callback>
    2e6a:	f0 91 42 06 	lds	r31, 0x0642	; 0x800642 <tc_tccr5_ovf_callback+0x1>
    2e6e:	30 97       	sbiw	r30, 0x00	; 0
    2e70:	09 f0       	breq	.+2      	; 0x2e74 <__vector_50+0x34>
		tc_tccr5_ovf_callback();
    2e72:	19 95       	eicall
	}
}
    2e74:	ff 91       	pop	r31
    2e76:	ef 91       	pop	r30
    2e78:	bf 91       	pop	r27
    2e7a:	af 91       	pop	r26
    2e7c:	9f 91       	pop	r25
    2e7e:	8f 91       	pop	r24
    2e80:	7f 91       	pop	r23
    2e82:	6f 91       	pop	r22
    2e84:	5f 91       	pop	r21
    2e86:	4f 91       	pop	r20
    2e88:	3f 91       	pop	r19
    2e8a:	2f 91       	pop	r18
    2e8c:	0f 90       	pop	r0
    2e8e:	0b be       	out	0x3b, r0	; 59
    2e90:	0f 90       	pop	r0
    2e92:	0f be       	out	0x3f, r0	; 63
    2e94:	0f 90       	pop	r0
    2e96:	1f 90       	pop	r1
    2e98:	18 95       	reti

00002e9a <__vector_47>:

ISR(TIMER5_COMPA_vect)
{
    2e9a:	1f 92       	push	r1
    2e9c:	0f 92       	push	r0
    2e9e:	0f b6       	in	r0, 0x3f	; 63
    2ea0:	0f 92       	push	r0
    2ea2:	11 24       	eor	r1, r1
    2ea4:	0b b6       	in	r0, 0x3b	; 59
    2ea6:	0f 92       	push	r0
    2ea8:	2f 93       	push	r18
    2eaa:	3f 93       	push	r19
    2eac:	4f 93       	push	r20
    2eae:	5f 93       	push	r21
    2eb0:	6f 93       	push	r22
    2eb2:	7f 93       	push	r23
    2eb4:	8f 93       	push	r24
    2eb6:	9f 93       	push	r25
    2eb8:	af 93       	push	r26
    2eba:	bf 93       	push	r27
    2ebc:	ef 93       	push	r30
    2ebe:	ff 93       	push	r31
	if (tc_tccr5_compa_callback) {
    2ec0:	e0 91 3f 06 	lds	r30, 0x063F	; 0x80063f <tc_tccr5_compa_callback>
    2ec4:	f0 91 40 06 	lds	r31, 0x0640	; 0x800640 <tc_tccr5_compa_callback+0x1>
    2ec8:	30 97       	sbiw	r30, 0x00	; 0
    2eca:	09 f0       	breq	.+2      	; 0x2ece <__vector_47+0x34>
		tc_tccr5_compa_callback();
    2ecc:	19 95       	eicall
	}
}
    2ece:	ff 91       	pop	r31
    2ed0:	ef 91       	pop	r30
    2ed2:	bf 91       	pop	r27
    2ed4:	af 91       	pop	r26
    2ed6:	9f 91       	pop	r25
    2ed8:	8f 91       	pop	r24
    2eda:	7f 91       	pop	r23
    2edc:	6f 91       	pop	r22
    2ede:	5f 91       	pop	r21
    2ee0:	4f 91       	pop	r20
    2ee2:	3f 91       	pop	r19
    2ee4:	2f 91       	pop	r18
    2ee6:	0f 90       	pop	r0
    2ee8:	0b be       	out	0x3b, r0	; 59
    2eea:	0f 90       	pop	r0
    2eec:	0f be       	out	0x3f, r0	; 63
    2eee:	0f 90       	pop	r0
    2ef0:	1f 90       	pop	r1
    2ef2:	18 95       	reti

00002ef4 <__vector_48>:

ISR(TIMER5_COMPB_vect)
{
    2ef4:	1f 92       	push	r1
    2ef6:	0f 92       	push	r0
    2ef8:	0f b6       	in	r0, 0x3f	; 63
    2efa:	0f 92       	push	r0
    2efc:	11 24       	eor	r1, r1
    2efe:	0b b6       	in	r0, 0x3b	; 59
    2f00:	0f 92       	push	r0
    2f02:	2f 93       	push	r18
    2f04:	3f 93       	push	r19
    2f06:	4f 93       	push	r20
    2f08:	5f 93       	push	r21
    2f0a:	6f 93       	push	r22
    2f0c:	7f 93       	push	r23
    2f0e:	8f 93       	push	r24
    2f10:	9f 93       	push	r25
    2f12:	af 93       	push	r26
    2f14:	bf 93       	push	r27
    2f16:	ef 93       	push	r30
    2f18:	ff 93       	push	r31
	if (tc_tccr5_compb_callback) {
    2f1a:	e0 91 3d 06 	lds	r30, 0x063D	; 0x80063d <tc_tccr5_compb_callback>
    2f1e:	f0 91 3e 06 	lds	r31, 0x063E	; 0x80063e <tc_tccr5_compb_callback+0x1>
    2f22:	30 97       	sbiw	r30, 0x00	; 0
    2f24:	09 f0       	breq	.+2      	; 0x2f28 <__vector_48+0x34>
		tc_tccr5_compb_callback();
    2f26:	19 95       	eicall
	}
}
    2f28:	ff 91       	pop	r31
    2f2a:	ef 91       	pop	r30
    2f2c:	bf 91       	pop	r27
    2f2e:	af 91       	pop	r26
    2f30:	9f 91       	pop	r25
    2f32:	8f 91       	pop	r24
    2f34:	7f 91       	pop	r23
    2f36:	6f 91       	pop	r22
    2f38:	5f 91       	pop	r21
    2f3a:	4f 91       	pop	r20
    2f3c:	3f 91       	pop	r19
    2f3e:	2f 91       	pop	r18
    2f40:	0f 90       	pop	r0
    2f42:	0b be       	out	0x3b, r0	; 59
    2f44:	0f 90       	pop	r0
    2f46:	0f be       	out	0x3f, r0	; 63
    2f48:	0f 90       	pop	r0
    2f4a:	1f 90       	pop	r1
    2f4c:	18 95       	reti

00002f4e <__vector_49>:

ISR(TIMER5_COMPC_vect)
{
    2f4e:	1f 92       	push	r1
    2f50:	0f 92       	push	r0
    2f52:	0f b6       	in	r0, 0x3f	; 63
    2f54:	0f 92       	push	r0
    2f56:	11 24       	eor	r1, r1
    2f58:	0b b6       	in	r0, 0x3b	; 59
    2f5a:	0f 92       	push	r0
    2f5c:	2f 93       	push	r18
    2f5e:	3f 93       	push	r19
    2f60:	4f 93       	push	r20
    2f62:	5f 93       	push	r21
    2f64:	6f 93       	push	r22
    2f66:	7f 93       	push	r23
    2f68:	8f 93       	push	r24
    2f6a:	9f 93       	push	r25
    2f6c:	af 93       	push	r26
    2f6e:	bf 93       	push	r27
    2f70:	ef 93       	push	r30
    2f72:	ff 93       	push	r31
	if (tc_tccr5_compc_callback) {
    2f74:	e0 91 3b 06 	lds	r30, 0x063B	; 0x80063b <tc_tccr5_compc_callback>
    2f78:	f0 91 3c 06 	lds	r31, 0x063C	; 0x80063c <tc_tccr5_compc_callback+0x1>
    2f7c:	30 97       	sbiw	r30, 0x00	; 0
    2f7e:	09 f0       	breq	.+2      	; 0x2f82 <__vector_49+0x34>
		tc_tccr5_compc_callback();
    2f80:	19 95       	eicall
	}
}
    2f82:	ff 91       	pop	r31
    2f84:	ef 91       	pop	r30
    2f86:	bf 91       	pop	r27
    2f88:	af 91       	pop	r26
    2f8a:	9f 91       	pop	r25
    2f8c:	8f 91       	pop	r24
    2f8e:	7f 91       	pop	r23
    2f90:	6f 91       	pop	r22
    2f92:	5f 91       	pop	r21
    2f94:	4f 91       	pop	r20
    2f96:	3f 91       	pop	r19
    2f98:	2f 91       	pop	r18
    2f9a:	0f 90       	pop	r0
    2f9c:	0b be       	out	0x3b, r0	; 59
    2f9e:	0f 90       	pop	r0
    2fa0:	0f be       	out	0x3f, r0	; 63
    2fa2:	0f 90       	pop	r0
    2fa4:	1f 90       	pop	r1
    2fa6:	18 95       	reti

00002fa8 <tc_enable>:

void tc_enable(volatile void *tc)
{
    2fa8:	1f 93       	push	r17
    2faa:	cf 93       	push	r28
    2fac:	df 93       	push	r29
    2fae:	1f 92       	push	r1
    2fb0:	cd b7       	in	r28, 0x3d	; 61
    2fb2:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    2fb4:	2f b7       	in	r18, 0x3f	; 63
    2fb6:	29 83       	std	Y+1, r18	; 0x01
	cpu_irq_disable();
    2fb8:	f8 94       	cli
	return flags;
    2fba:	19 81       	ldd	r17, Y+1	; 0x01
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
    2fbc:	00 97       	sbiw	r24, 0x00	; 0
    2fbe:	09 f4       	brne	.+2      	; 0x2fc2 <tc_enable+0x1a>
    2fc0:	64 c0       	rjmp	.+200    	; 0x308a <tc_enable+0xe2>
		Assert(false);
	}

#if !MEGA_XX_UN0 && !MEGA_XX_UN1
	else if (module == &ADC) {
    2fc2:	88 37       	cpi	r24, 0x78	; 120
    2fc4:	91 05       	cpc	r25, r1
    2fc6:	49 f4       	brne	.+18     	; 0x2fda <tc_enable+0x32>
		sysclk_enable_module(POWER_RED_REG0, PRADC_bm);
    2fc8:	61 e0       	ldi	r22, 0x01	; 1
    2fca:	80 e0       	ldi	r24, 0x00	; 0
    2fcc:	0e 94 31 07 	call	0xe62	; 0xe62 <sysclk_enable_module>
#if MEGA_RF
		sysclk_enable_module(POWER_RED_REG0, PRPGA_bm);
    2fd0:	60 e1       	ldi	r22, 0x10	; 16
    2fd2:	80 e0       	ldi	r24, 0x00	; 0
    2fd4:	0e 94 31 07 	call	0xe62	; 0xe62 <sysclk_enable_module>
    2fd8:	58 c0       	rjmp	.+176    	; 0x308a <tc_enable+0xe2>
#endif
	}
#if !MEGA_UNCATEGORIZED
	else if (module == &UCSR0A) {
    2fda:	80 3c       	cpi	r24, 0xC0	; 192
    2fdc:	91 05       	cpc	r25, r1
    2fde:	29 f4       	brne	.+10     	; 0x2fea <tc_enable+0x42>
		sysclk_enable_module(POWER_RED_REG0, PRUSART0_bm);
    2fe0:	62 e0       	ldi	r22, 0x02	; 2
    2fe2:	80 e0       	ldi	r24, 0x00	; 0
    2fe4:	0e 94 31 07 	call	0xe62	; 0xe62 <sysclk_enable_module>
    2fe8:	50 c0       	rjmp	.+160    	; 0x308a <tc_enable+0xe2>
	}
#endif
#if MEGA_RF
	else if (module == &SPCR) {
    2fea:	8c 34       	cpi	r24, 0x4C	; 76
    2fec:	91 05       	cpc	r25, r1
    2fee:	29 f4       	brne	.+10     	; 0x2ffa <tc_enable+0x52>
		sysclk_enable_module(POWER_RED_REG0, PRSPI_bm);
    2ff0:	64 e0       	ldi	r22, 0x04	; 4
    2ff2:	80 e0       	ldi	r24, 0x00	; 0
    2ff4:	0e 94 31 07 	call	0xe62	; 0xe62 <sysclk_enable_module>
    2ff8:	48 c0       	rjmp	.+144    	; 0x308a <tc_enable+0xe2>
	}
#endif

	else if (module == &TCCR1A) {
    2ffa:	80 38       	cpi	r24, 0x80	; 128
    2ffc:	91 05       	cpc	r25, r1
    2ffe:	29 f4       	brne	.+10     	; 0x300a <tc_enable+0x62>
		sysclk_enable_module(POWER_RED_REG0, PRTIM1_bm);
    3000:	68 e0       	ldi	r22, 0x08	; 8
    3002:	80 e0       	ldi	r24, 0x00	; 0
    3004:	0e 94 31 07 	call	0xe62	; 0xe62 <sysclk_enable_module>
    3008:	40 c0       	rjmp	.+128    	; 0x308a <tc_enable+0xe2>
		sysclk_enable_module(POWER_RED_REG0, PRLCD_bm);
	}
#endif

#if !MEGA_XX_UN2 && !MEGA_UNCATEGORIZED
	else if (module == &TCCR0A) {
    300a:	84 34       	cpi	r24, 0x44	; 68
    300c:	91 05       	cpc	r25, r1
    300e:	29 f4       	brne	.+10     	; 0x301a <tc_enable+0x72>
		sysclk_enable_module(POWER_RED_REG0, PRTIM0_bm);
    3010:	60 e2       	ldi	r22, 0x20	; 32
    3012:	80 e0       	ldi	r24, 0x00	; 0
    3014:	0e 94 31 07 	call	0xe62	; 0xe62 <sysclk_enable_module>
    3018:	38 c0       	rjmp	.+112    	; 0x308a <tc_enable+0xe2>
	} else if (module == &TCCR2A) {
    301a:	80 3b       	cpi	r24, 0xB0	; 176
    301c:	91 05       	cpc	r25, r1
    301e:	29 f4       	brne	.+10     	; 0x302a <tc_enable+0x82>
		sysclk_enable_module(POWER_RED_REG0, PRTIM2_bm);
    3020:	60 e4       	ldi	r22, 0x40	; 64
    3022:	80 e0       	ldi	r24, 0x00	; 0
    3024:	0e 94 31 07 	call	0xe62	; 0xe62 <sysclk_enable_module>
    3028:	30 c0       	rjmp	.+96     	; 0x308a <tc_enable+0xe2>
#if AVR8_PART_IS_DEFINED(ATmega328PB) || AVR8_PART_IS_DEFINED(ATmega324PB)
	} else if (module == &TWBR0) {
		sysclk_enable_module(POWER_RED_REG0, PRTWI_bm);
	}
#else
	} else if (module == &TWBR) {
    302a:	88 3b       	cpi	r24, 0xB8	; 184
    302c:	91 05       	cpc	r25, r1
    302e:	29 f4       	brne	.+10     	; 0x303a <tc_enable+0x92>
		sysclk_enable_module(POWER_RED_REG0, PRTWI_bm);
    3030:	60 e8       	ldi	r22, 0x80	; 128
    3032:	80 e0       	ldi	r24, 0x00	; 0
    3034:	0e 94 31 07 	call	0xe62	; 0xe62 <sysclk_enable_module>
    3038:	28 c0       	rjmp	.+80     	; 0x308a <tc_enable+0xe2>
	}
#endif
#endif

#if MEGA_RF
	else if (module == &UCSR1A) {
    303a:	88 3c       	cpi	r24, 0xC8	; 200
    303c:	91 05       	cpc	r25, r1
    303e:	29 f4       	brne	.+10     	; 0x304a <tc_enable+0xa2>
		sysclk_enable_module(POWER_RED_REG1, PRUSART1_bm);
    3040:	61 e0       	ldi	r22, 0x01	; 1
    3042:	81 e0       	ldi	r24, 0x01	; 1
    3044:	0e 94 31 07 	call	0xe62	; 0xe62 <sysclk_enable_module>
    3048:	20 c0       	rjmp	.+64     	; 0x308a <tc_enable+0xe2>
	} else if (module == &TCCR3A) {
    304a:	80 39       	cpi	r24, 0x90	; 144
    304c:	91 05       	cpc	r25, r1
    304e:	29 f4       	brne	.+10     	; 0x305a <tc_enable+0xb2>
		sysclk_enable_module(POWER_RED_REG1, PRTIM3_bm);
    3050:	68 e0       	ldi	r22, 0x08	; 8
    3052:	81 e0       	ldi	r24, 0x01	; 1
    3054:	0e 94 31 07 	call	0xe62	; 0xe62 <sysclk_enable_module>
    3058:	18 c0       	rjmp	.+48     	; 0x308a <tc_enable+0xe2>
	} else if (module == &TCCR4A) {
    305a:	80 3a       	cpi	r24, 0xA0	; 160
    305c:	91 05       	cpc	r25, r1
    305e:	29 f4       	brne	.+10     	; 0x306a <tc_enable+0xc2>
		sysclk_enable_module(POWER_RED_REG1, PRTIM4_bm);
    3060:	60 e1       	ldi	r22, 0x10	; 16
    3062:	81 e0       	ldi	r24, 0x01	; 1
    3064:	0e 94 31 07 	call	0xe62	; 0xe62 <sysclk_enable_module>
    3068:	10 c0       	rjmp	.+32     	; 0x308a <tc_enable+0xe2>
	} else if (module == &TCCR5A) {
    306a:	80 32       	cpi	r24, 0x20	; 32
    306c:	21 e0       	ldi	r18, 0x01	; 1
    306e:	92 07       	cpc	r25, r18
    3070:	29 f4       	brne	.+10     	; 0x307c <tc_enable+0xd4>
		sysclk_enable_module(POWER_RED_REG1, PRTIM5_bm);
    3072:	60 e2       	ldi	r22, 0x20	; 32
    3074:	81 e0       	ldi	r24, 0x01	; 1
    3076:	0e 94 31 07 	call	0xe62	; 0xe62 <sysclk_enable_module>
    307a:	07 c0       	rjmp	.+14     	; 0x308a <tc_enable+0xe2>
	} else if (module == &TRX_CTRL_0) {
    307c:	83 34       	cpi	r24, 0x43	; 67
    307e:	91 40       	sbci	r25, 0x01	; 1
    3080:	21 f4       	brne	.+8      	; 0x308a <tc_enable+0xe2>
		sysclk_enable_module(POWER_RED_REG1, PRTRX24_bm);
    3082:	60 e4       	ldi	r22, 0x40	; 64
    3084:	81 e0       	ldi	r24, 0x01	; 1
    3086:	0e 94 31 07 	call	0xe62	; 0xe62 <sysclk_enable_module>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    308a:	1f bf       	out	0x3f, r17	; 63
	irqflags_t iflags = cpu_irq_save();

	sysclk_enable_peripheral_clock(tc);

	cpu_irq_restore(iflags);
}
    308c:	0f 90       	pop	r0
    308e:	df 91       	pop	r29
    3090:	cf 91       	pop	r28
    3092:	1f 91       	pop	r17
    3094:	08 95       	ret

00003096 <tc_disable>:

void tc_disable(volatile void *tc)
{
    3096:	1f 93       	push	r17
    3098:	cf 93       	push	r28
    309a:	df 93       	push	r29
    309c:	1f 92       	push	r1
    309e:	cd b7       	in	r28, 0x3d	; 61
    30a0:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    30a2:	2f b7       	in	r18, 0x3f	; 63
    30a4:	29 83       	std	Y+1, r18	; 0x01
	cpu_irq_disable();
    30a6:	f8 94       	cli
	return flags;
    30a8:	19 81       	ldd	r17, Y+1	; 0x01
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_disable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
    30aa:	00 97       	sbiw	r24, 0x00	; 0
    30ac:	09 f4       	brne	.+2      	; 0x30b0 <tc_disable+0x1a>
    30ae:	64 c0       	rjmp	.+200    	; 0x3178 <tc_disable+0xe2>
		Assert(false);
	}

#if !MEGA_XX_UN0 && !MEGA_XX_UN1
	else if (module == &ADC) {
    30b0:	88 37       	cpi	r24, 0x78	; 120
    30b2:	91 05       	cpc	r25, r1
    30b4:	49 f4       	brne	.+18     	; 0x30c8 <tc_disable+0x32>
		sysclk_disable_module(POWER_RED_REG0, PRADC_bm);
    30b6:	61 e0       	ldi	r22, 0x01	; 1
    30b8:	80 e0       	ldi	r24, 0x00	; 0
    30ba:	0e 94 49 07 	call	0xe92	; 0xe92 <sysclk_disable_module>
#if MEGA_RF
		sysclk_disable_module(POWER_RED_REG0, PRPGA_bm);
    30be:	60 e1       	ldi	r22, 0x10	; 16
    30c0:	80 e0       	ldi	r24, 0x00	; 0
    30c2:	0e 94 49 07 	call	0xe92	; 0xe92 <sysclk_disable_module>
    30c6:	58 c0       	rjmp	.+176    	; 0x3178 <tc_disable+0xe2>
#endif
	} 
#if !MEGA_UNCATEGORIZED
	else if (module == &UCSR0A) {
    30c8:	80 3c       	cpi	r24, 0xC0	; 192
    30ca:	91 05       	cpc	r25, r1
    30cc:	29 f4       	brne	.+10     	; 0x30d8 <tc_disable+0x42>
		sysclk_disable_module(POWER_RED_REG0, PRUSART0_bm);
    30ce:	62 e0       	ldi	r22, 0x02	; 2
    30d0:	80 e0       	ldi	r24, 0x00	; 0
    30d2:	0e 94 49 07 	call	0xe92	; 0xe92 <sysclk_disable_module>
    30d6:	50 c0       	rjmp	.+160    	; 0x3178 <tc_disable+0xe2>
	}
#endif
#if MEGA_RF
	else if (module == &SPCR) {
    30d8:	8c 34       	cpi	r24, 0x4C	; 76
    30da:	91 05       	cpc	r25, r1
    30dc:	29 f4       	brne	.+10     	; 0x30e8 <tc_disable+0x52>
		sysclk_disable_module(POWER_RED_REG0, PRSPI_bm);
    30de:	64 e0       	ldi	r22, 0x04	; 4
    30e0:	80 e0       	ldi	r24, 0x00	; 0
    30e2:	0e 94 49 07 	call	0xe92	; 0xe92 <sysclk_disable_module>
    30e6:	48 c0       	rjmp	.+144    	; 0x3178 <tc_disable+0xe2>
	}
#endif
	else if (module == &TCCR1A) {
    30e8:	80 38       	cpi	r24, 0x80	; 128
    30ea:	91 05       	cpc	r25, r1
    30ec:	29 f4       	brne	.+10     	; 0x30f8 <tc_disable+0x62>
		sysclk_disable_module(POWER_RED_REG0, PRTIM1_bm);
    30ee:	68 e0       	ldi	r22, 0x08	; 8
    30f0:	80 e0       	ldi	r24, 0x00	; 0
    30f2:	0e 94 49 07 	call	0xe92	; 0xe92 <sysclk_disable_module>
    30f6:	40 c0       	rjmp	.+128    	; 0x3178 <tc_disable+0xe2>
	else if (module == &LCDCRA) {
		sysclk_disable_module(POWER_RED_REG0, PRLCD_bm);
	}
#endif
#if !MEGA_XX_UN2 && !MEGA_UNCATEGORIZED
	else if (module == &TCCR0A) {
    30f8:	84 34       	cpi	r24, 0x44	; 68
    30fa:	91 05       	cpc	r25, r1
    30fc:	29 f4       	brne	.+10     	; 0x3108 <tc_disable+0x72>
		sysclk_disable_module(POWER_RED_REG0, PRTIM0_bm);
    30fe:	60 e2       	ldi	r22, 0x20	; 32
    3100:	80 e0       	ldi	r24, 0x00	; 0
    3102:	0e 94 49 07 	call	0xe92	; 0xe92 <sysclk_disable_module>
    3106:	38 c0       	rjmp	.+112    	; 0x3178 <tc_disable+0xe2>
	} else if (module == &TCCR2A) {
    3108:	80 3b       	cpi	r24, 0xB0	; 176
    310a:	91 05       	cpc	r25, r1
    310c:	29 f4       	brne	.+10     	; 0x3118 <tc_disable+0x82>
		sysclk_disable_module(POWER_RED_REG0, PRTIM2_bm);
    310e:	60 e4       	ldi	r22, 0x40	; 64
    3110:	80 e0       	ldi	r24, 0x00	; 0
    3112:	0e 94 49 07 	call	0xe92	; 0xe92 <sysclk_disable_module>
    3116:	30 c0       	rjmp	.+96     	; 0x3178 <tc_disable+0xe2>
#if AVR8_PART_IS_DEFINED(ATmega328PB) || AVR8_PART_IS_DEFINED(ATmega324PB)
	} else if (module == &TWBR0) {
		sysclk_disable_module(POWER_RED_REG0, PRTWI_bm);
	}
#else
	} else if (module == &TWBR) {
    3118:	88 3b       	cpi	r24, 0xB8	; 184
    311a:	91 05       	cpc	r25, r1
    311c:	29 f4       	brne	.+10     	; 0x3128 <tc_disable+0x92>
		sysclk_disable_module(POWER_RED_REG0, PRTWI_bm);
    311e:	60 e8       	ldi	r22, 0x80	; 128
    3120:	80 e0       	ldi	r24, 0x00	; 0
    3122:	0e 94 49 07 	call	0xe92	; 0xe92 <sysclk_disable_module>
    3126:	28 c0       	rjmp	.+80     	; 0x3178 <tc_disable+0xe2>
	}
#endif
#endif

#if MEGA_RF
	else if (module == &UCSR1A) {
    3128:	88 3c       	cpi	r24, 0xC8	; 200
    312a:	91 05       	cpc	r25, r1
    312c:	29 f4       	brne	.+10     	; 0x3138 <tc_disable+0xa2>
		sysclk_disable_module(POWER_RED_REG1, PRUSART1_bm);
    312e:	61 e0       	ldi	r22, 0x01	; 1
    3130:	81 e0       	ldi	r24, 0x01	; 1
    3132:	0e 94 49 07 	call	0xe92	; 0xe92 <sysclk_disable_module>
    3136:	20 c0       	rjmp	.+64     	; 0x3178 <tc_disable+0xe2>
	} else if (module == &TCCR3A) {
    3138:	80 39       	cpi	r24, 0x90	; 144
    313a:	91 05       	cpc	r25, r1
    313c:	29 f4       	brne	.+10     	; 0x3148 <tc_disable+0xb2>
		sysclk_disable_module(POWER_RED_REG1, PRTIM3_bm);
    313e:	68 e0       	ldi	r22, 0x08	; 8
    3140:	81 e0       	ldi	r24, 0x01	; 1
    3142:	0e 94 49 07 	call	0xe92	; 0xe92 <sysclk_disable_module>
    3146:	18 c0       	rjmp	.+48     	; 0x3178 <tc_disable+0xe2>
	} else if (module == &TCCR4A) {
    3148:	80 3a       	cpi	r24, 0xA0	; 160
    314a:	91 05       	cpc	r25, r1
    314c:	29 f4       	brne	.+10     	; 0x3158 <tc_disable+0xc2>
		sysclk_disable_module(POWER_RED_REG1, PRTIM4_bm);
    314e:	60 e1       	ldi	r22, 0x10	; 16
    3150:	81 e0       	ldi	r24, 0x01	; 1
    3152:	0e 94 49 07 	call	0xe92	; 0xe92 <sysclk_disable_module>
    3156:	10 c0       	rjmp	.+32     	; 0x3178 <tc_disable+0xe2>
	} else if (module == &TCCR5A) {
    3158:	80 32       	cpi	r24, 0x20	; 32
    315a:	21 e0       	ldi	r18, 0x01	; 1
    315c:	92 07       	cpc	r25, r18
    315e:	29 f4       	brne	.+10     	; 0x316a <tc_disable+0xd4>
		sysclk_disable_module(POWER_RED_REG1, PRTIM5_bm);
    3160:	60 e2       	ldi	r22, 0x20	; 32
    3162:	81 e0       	ldi	r24, 0x01	; 1
    3164:	0e 94 49 07 	call	0xe92	; 0xe92 <sysclk_disable_module>
    3168:	07 c0       	rjmp	.+14     	; 0x3178 <tc_disable+0xe2>
	} else if (module == &TRX_CTRL_0) {
    316a:	83 34       	cpi	r24, 0x43	; 67
    316c:	91 40       	sbci	r25, 0x01	; 1
    316e:	21 f4       	brne	.+8      	; 0x3178 <tc_disable+0xe2>
		sysclk_disable_module(POWER_RED_REG1, PRTRX24_bm);
    3170:	60 e4       	ldi	r22, 0x40	; 64
    3172:	81 e0       	ldi	r24, 0x01	; 1
    3174:	0e 94 49 07 	call	0xe92	; 0xe92 <sysclk_disable_module>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3178:	1f bf       	out	0x3f, r17	; 63
	irqflags_t iflags = cpu_irq_save();

	sysclk_disable_peripheral_clock(tc);

	cpu_irq_restore(iflags);
}
    317a:	0f 90       	pop	r0
    317c:	df 91       	pop	r29
    317e:	cf 91       	pop	r28
    3180:	1f 91       	pop	r17
    3182:	08 95       	ret

00003184 <tc_set_overflow_interrupt_callback>:

void tc_set_overflow_interrupt_callback(volatile void *tc,
		tc_callback_t callback)
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
    3184:	80 38       	cpi	r24, 0x80	; 128
    3186:	91 05       	cpc	r25, r1
    3188:	29 f4       	brne	.+10     	; 0x3194 <tc_set_overflow_interrupt_callback+0x10>
		tc_tccr1_ovf_callback = callback;
    318a:	70 93 5a 06 	sts	0x065A, r23	; 0x80065a <tc_tccr1_ovf_callback+0x1>
    318e:	60 93 59 06 	sts	0x0659, r22	; 0x800659 <tc_tccr1_ovf_callback>
    3192:	08 95       	ret
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR3A) {
    3194:	80 39       	cpi	r24, 0x90	; 144
    3196:	91 05       	cpc	r25, r1
    3198:	29 f4       	brne	.+10     	; 0x31a4 <tc_set_overflow_interrupt_callback+0x20>
		tc_tccr3_ovf_callback = callback;
    319a:	70 93 52 06 	sts	0x0652, r23	; 0x800652 <tc_tccr3_ovf_callback+0x1>
    319e:	60 93 51 06 	sts	0x0651, r22	; 0x800651 <tc_tccr3_ovf_callback>
    31a2:	08 95       	ret
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR4A) {
    31a4:	80 3a       	cpi	r24, 0xA0	; 160
    31a6:	91 05       	cpc	r25, r1
    31a8:	29 f4       	brne	.+10     	; 0x31b4 <tc_set_overflow_interrupt_callback+0x30>
		tc_tccr4_ovf_callback = callback;
    31aa:	70 93 4a 06 	sts	0x064A, r23	; 0x80064a <tc_tccr4_ovf_callback+0x1>
    31ae:	60 93 49 06 	sts	0x0649, r22	; 0x800649 <tc_tccr4_ovf_callback>
    31b2:	08 95       	ret
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR5A) {
    31b4:	80 32       	cpi	r24, 0x20	; 32
    31b6:	91 40       	sbci	r25, 0x01	; 1
    31b8:	21 f4       	brne	.+8      	; 0x31c2 <tc_set_overflow_interrupt_callback+0x3e>
		tc_tccr5_ovf_callback = callback;
    31ba:	70 93 42 06 	sts	0x0642, r23	; 0x800642 <tc_tccr5_ovf_callback+0x1>
    31be:	60 93 41 06 	sts	0x0641, r22	; 0x800641 <tc_tccr5_ovf_callback>
    31c2:	08 95       	ret

000031c4 <tc_set_compa_interrupt_callback>:
	} else {}
}

void tc_set_compa_interrupt_callback(volatile void *tc, tc_callback_t callback)
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
    31c4:	80 38       	cpi	r24, 0x80	; 128
    31c6:	91 05       	cpc	r25, r1
    31c8:	29 f4       	brne	.+10     	; 0x31d4 <tc_set_compa_interrupt_callback+0x10>
		tc_tccr1_compa_callback = callback;
    31ca:	70 93 58 06 	sts	0x0658, r23	; 0x800658 <tc_tccr1_compa_callback+0x1>
    31ce:	60 93 57 06 	sts	0x0657, r22	; 0x800657 <tc_tccr1_compa_callback>
    31d2:	08 95       	ret
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR3A) {
    31d4:	80 39       	cpi	r24, 0x90	; 144
    31d6:	91 05       	cpc	r25, r1
    31d8:	29 f4       	brne	.+10     	; 0x31e4 <tc_set_compa_interrupt_callback+0x20>
		tc_tccr3_compa_callback = callback;
    31da:	70 93 50 06 	sts	0x0650, r23	; 0x800650 <tc_tccr3_compa_callback+0x1>
    31de:	60 93 4f 06 	sts	0x064F, r22	; 0x80064f <tc_tccr3_compa_callback>
    31e2:	08 95       	ret
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR4A) {
    31e4:	80 3a       	cpi	r24, 0xA0	; 160
    31e6:	91 05       	cpc	r25, r1
    31e8:	29 f4       	brne	.+10     	; 0x31f4 <tc_set_compa_interrupt_callback+0x30>
		tc_tccr4_compa_callback = callback;
    31ea:	70 93 48 06 	sts	0x0648, r23	; 0x800648 <tc_tccr4_compa_callback+0x1>
    31ee:	60 93 47 06 	sts	0x0647, r22	; 0x800647 <tc_tccr4_compa_callback>
    31f2:	08 95       	ret
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR5A) {
    31f4:	80 32       	cpi	r24, 0x20	; 32
    31f6:	91 40       	sbci	r25, 0x01	; 1
    31f8:	21 f4       	brne	.+8      	; 0x3202 <tc_set_compa_interrupt_callback+0x3e>
		tc_tccr5_compa_callback = callback;
    31fa:	70 93 40 06 	sts	0x0640, r23	; 0x800640 <tc_tccr5_compa_callback+0x1>
    31fe:	60 93 3f 06 	sts	0x063F, r22	; 0x80063f <tc_tccr5_compa_callback>
    3202:	08 95       	ret

00003204 <main>:
 * \brief Main function of the application
 */
int main(void)
{	
	/* Inicia todas las funcionalidades del Nodo.*/
	wireless_init();    
    3204:	0e 94 cd 06 	call	0xd9a	; 0xd9a <wireless_init>
	
	modules_init();
    3208:	0e 94 14 07 	call	0xe28	; 0xe28 <modules_init>
 * \brief Tasks Handled By the Stack and application are Performed here,this function is handled in a loop to perform tasks continuously 
 */
void WirelessTask(void)
{
	/* These methods are called to perform the default tasks of the MAC Stack */
	pal_task();
    320c:	0e 94 85 0b 	call	0x170a	; 0x170a <pal_task>
	tal_task();
    3210:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <tal_task>
/**
 * \brief Application task
 */
 void app_task(void)
{
	usr_wireless_app_task();
    3214:	0e 94 af 05 	call	0xb5e	; 0xb5e <usr_wireless_app_task>
    3218:	f9 cf       	rjmp	.-14     	; 0x320c <main+0x8>

0000321a <tal_tx_frame_done_cb>:
 * \param frame pointer to the transmitted frame
 */
void tal_tx_frame_done_cb(retval_t status, frame_info_t *frame)
{
	/*Perform application tasks when a frame is transmitted here*/
	usr_frame_transmitted_cb(status, frame);
    321a:	0c 94 60 02 	jmp	0x4c0	; 0x4c0 <usr_frame_transmitted_cb>
    321e:	08 95       	ret

00003220 <tal_rx_frame_cb>:
 * \brief This method (callback) is called when a frame is received by the transceiver
 * \param frame pointer to the received frame
 *
 */
void tal_rx_frame_cb(frame_info_t *frame)
{
    3220:	cf 93       	push	r28
    3222:	df 93       	push	r29
    3224:	ec 01       	movw	r28, r24
	/*Perform application tasks when a frame is received here*/
	usr_frame_received_cb(frame);
    3226:	0e 94 21 02 	call	0x442	; 0x442 <usr_frame_received_cb>
	// Free-up the buffer which was used for reception once the frame is extracted.
	bmm_buffer_free(frame->buffer_header);
    322a:	89 81       	ldd	r24, Y+1	; 0x01
    322c:	9a 81       	ldd	r25, Y+2	; 0x02
    322e:	0e 94 b1 0b 	call	0x1762	; 0x1762 <bmm_buffer_free>
}
    3232:	df 91       	pop	r29
    3234:	cf 91       	pop	r28
    3236:	08 95       	ret

00003238 <__mulsi3>:
    3238:	db 01       	movw	r26, r22
    323a:	8f 93       	push	r24
    323c:	9f 93       	push	r25
    323e:	49 d0       	rcall	.+146    	; 0x32d2 <__muluhisi3>
    3240:	bf 91       	pop	r27
    3242:	af 91       	pop	r26
    3244:	a2 9f       	mul	r26, r18
    3246:	80 0d       	add	r24, r0
    3248:	91 1d       	adc	r25, r1
    324a:	a3 9f       	mul	r26, r19
    324c:	90 0d       	add	r25, r0
    324e:	b2 9f       	mul	r27, r18
    3250:	90 0d       	add	r25, r0
    3252:	11 24       	eor	r1, r1
    3254:	08 95       	ret

00003256 <__udivmodhi4>:
    3256:	aa 1b       	sub	r26, r26
    3258:	bb 1b       	sub	r27, r27
    325a:	51 e1       	ldi	r21, 0x11	; 17
    325c:	07 c0       	rjmp	.+14     	; 0x326c <__udivmodhi4_ep>

0000325e <__udivmodhi4_loop>:
    325e:	aa 1f       	adc	r26, r26
    3260:	bb 1f       	adc	r27, r27
    3262:	a6 17       	cp	r26, r22
    3264:	b7 07       	cpc	r27, r23
    3266:	10 f0       	brcs	.+4      	; 0x326c <__udivmodhi4_ep>
    3268:	a6 1b       	sub	r26, r22
    326a:	b7 0b       	sbc	r27, r23

0000326c <__udivmodhi4_ep>:
    326c:	88 1f       	adc	r24, r24
    326e:	99 1f       	adc	r25, r25
    3270:	5a 95       	dec	r21
    3272:	a9 f7       	brne	.-22     	; 0x325e <__udivmodhi4_loop>
    3274:	80 95       	com	r24
    3276:	90 95       	com	r25
    3278:	bc 01       	movw	r22, r24
    327a:	cd 01       	movw	r24, r26
    327c:	08 95       	ret

0000327e <__divmodhi4>:
    327e:	97 fb       	bst	r25, 7
    3280:	07 2e       	mov	r0, r23
    3282:	16 f4       	brtc	.+4      	; 0x3288 <__divmodhi4+0xa>
    3284:	00 94       	com	r0
    3286:	06 d0       	rcall	.+12     	; 0x3294 <__divmodhi4_neg1>
    3288:	77 fd       	sbrc	r23, 7
    328a:	08 d0       	rcall	.+16     	; 0x329c <__divmodhi4_neg2>
    328c:	e4 df       	rcall	.-56     	; 0x3256 <__udivmodhi4>
    328e:	07 fc       	sbrc	r0, 7
    3290:	05 d0       	rcall	.+10     	; 0x329c <__divmodhi4_neg2>
    3292:	3e f4       	brtc	.+14     	; 0x32a2 <__divmodhi4_exit>

00003294 <__divmodhi4_neg1>:
    3294:	90 95       	com	r25
    3296:	81 95       	neg	r24
    3298:	9f 4f       	sbci	r25, 0xFF	; 255
    329a:	08 95       	ret

0000329c <__divmodhi4_neg2>:
    329c:	70 95       	com	r23
    329e:	61 95       	neg	r22
    32a0:	7f 4f       	sbci	r23, 0xFF	; 255

000032a2 <__divmodhi4_exit>:
    32a2:	08 95       	ret

000032a4 <__tablejump2__>:
    32a4:	ee 0f       	add	r30, r30
    32a6:	ff 1f       	adc	r31, r31
    32a8:	88 1f       	adc	r24, r24
    32aa:	8b bf       	out	0x3b, r24	; 59
    32ac:	07 90       	elpm	r0, Z+
    32ae:	f6 91       	elpm	r31, Z
    32b0:	e0 2d       	mov	r30, r0
    32b2:	19 94       	eijmp

000032b4 <__umulhisi3>:
    32b4:	a2 9f       	mul	r26, r18
    32b6:	b0 01       	movw	r22, r0
    32b8:	b3 9f       	mul	r27, r19
    32ba:	c0 01       	movw	r24, r0
    32bc:	a3 9f       	mul	r26, r19
    32be:	70 0d       	add	r23, r0
    32c0:	81 1d       	adc	r24, r1
    32c2:	11 24       	eor	r1, r1
    32c4:	91 1d       	adc	r25, r1
    32c6:	b2 9f       	mul	r27, r18
    32c8:	70 0d       	add	r23, r0
    32ca:	81 1d       	adc	r24, r1
    32cc:	11 24       	eor	r1, r1
    32ce:	91 1d       	adc	r25, r1
    32d0:	08 95       	ret

000032d2 <__muluhisi3>:
    32d2:	f0 df       	rcall	.-32     	; 0x32b4 <__umulhisi3>
    32d4:	a5 9f       	mul	r26, r21
    32d6:	90 0d       	add	r25, r0
    32d8:	b4 9f       	mul	r27, r20
    32da:	90 0d       	add	r25, r0
    32dc:	a4 9f       	mul	r26, r20
    32de:	80 0d       	add	r24, r0
    32e0:	91 1d       	adc	r25, r1
    32e2:	11 24       	eor	r1, r1
    32e4:	08 95       	ret

000032e6 <__mulshisi3>:
    32e6:	b7 ff       	sbrs	r27, 7
    32e8:	f4 cf       	rjmp	.-24     	; 0x32d2 <__muluhisi3>

000032ea <__mulohisi3>:
    32ea:	f3 df       	rcall	.-26     	; 0x32d2 <__muluhisi3>
    32ec:	82 1b       	sub	r24, r18
    32ee:	93 0b       	sbc	r25, r19
    32f0:	08 95       	ret

000032f2 <__adddi3_s8>:
    32f2:	00 24       	eor	r0, r0
    32f4:	a7 fd       	sbrc	r26, 7
    32f6:	00 94       	com	r0
    32f8:	2a 0f       	add	r18, r26
    32fa:	30 1d       	adc	r19, r0
    32fc:	40 1d       	adc	r20, r0
    32fe:	50 1d       	adc	r21, r0
    3300:	60 1d       	adc	r22, r0
    3302:	70 1d       	adc	r23, r0
    3304:	80 1d       	adc	r24, r0
    3306:	90 1d       	adc	r25, r0
    3308:	08 95       	ret

0000330a <__cmpdi2_s8>:
    330a:	00 24       	eor	r0, r0
    330c:	a7 fd       	sbrc	r26, 7
    330e:	00 94       	com	r0
    3310:	2a 17       	cp	r18, r26
    3312:	30 05       	cpc	r19, r0
    3314:	40 05       	cpc	r20, r0
    3316:	50 05       	cpc	r21, r0
    3318:	60 05       	cpc	r22, r0
    331a:	70 05       	cpc	r23, r0
    331c:	80 05       	cpc	r24, r0
    331e:	90 05       	cpc	r25, r0
    3320:	08 95       	ret

00003322 <do_rand>:
    3322:	8f 92       	push	r8
    3324:	9f 92       	push	r9
    3326:	af 92       	push	r10
    3328:	bf 92       	push	r11
    332a:	cf 92       	push	r12
    332c:	df 92       	push	r13
    332e:	ef 92       	push	r14
    3330:	ff 92       	push	r15
    3332:	cf 93       	push	r28
    3334:	df 93       	push	r29
    3336:	ec 01       	movw	r28, r24
    3338:	68 81       	ld	r22, Y
    333a:	79 81       	ldd	r23, Y+1	; 0x01
    333c:	8a 81       	ldd	r24, Y+2	; 0x02
    333e:	9b 81       	ldd	r25, Y+3	; 0x03
    3340:	61 15       	cp	r22, r1
    3342:	71 05       	cpc	r23, r1
    3344:	81 05       	cpc	r24, r1
    3346:	91 05       	cpc	r25, r1
    3348:	21 f4       	brne	.+8      	; 0x3352 <do_rand+0x30>
    334a:	64 e2       	ldi	r22, 0x24	; 36
    334c:	79 ed       	ldi	r23, 0xD9	; 217
    334e:	8b e5       	ldi	r24, 0x5B	; 91
    3350:	97 e0       	ldi	r25, 0x07	; 7
    3352:	2d e1       	ldi	r18, 0x1D	; 29
    3354:	33 ef       	ldi	r19, 0xF3	; 243
    3356:	41 e0       	ldi	r20, 0x01	; 1
    3358:	50 e0       	ldi	r21, 0x00	; 0
    335a:	41 d0       	rcall	.+130    	; 0x33de <__divmodsi4>
    335c:	49 01       	movw	r8, r18
    335e:	5a 01       	movw	r10, r20
    3360:	9b 01       	movw	r18, r22
    3362:	ac 01       	movw	r20, r24
    3364:	a7 ea       	ldi	r26, 0xA7	; 167
    3366:	b1 e4       	ldi	r27, 0x41	; 65
    3368:	b4 df       	rcall	.-152    	; 0x32d2 <__muluhisi3>
    336a:	6b 01       	movw	r12, r22
    336c:	7c 01       	movw	r14, r24
    336e:	ac ee       	ldi	r26, 0xEC	; 236
    3370:	b4 ef       	ldi	r27, 0xF4	; 244
    3372:	a5 01       	movw	r20, r10
    3374:	94 01       	movw	r18, r8
    3376:	b9 df       	rcall	.-142    	; 0x32ea <__mulohisi3>
    3378:	dc 01       	movw	r26, r24
    337a:	cb 01       	movw	r24, r22
    337c:	8c 0d       	add	r24, r12
    337e:	9d 1d       	adc	r25, r13
    3380:	ae 1d       	adc	r26, r14
    3382:	bf 1d       	adc	r27, r15
    3384:	b7 ff       	sbrs	r27, 7
    3386:	03 c0       	rjmp	.+6      	; 0x338e <do_rand+0x6c>
    3388:	01 97       	sbiw	r24, 0x01	; 1
    338a:	a1 09       	sbc	r26, r1
    338c:	b0 48       	sbci	r27, 0x80	; 128
    338e:	88 83       	st	Y, r24
    3390:	99 83       	std	Y+1, r25	; 0x01
    3392:	aa 83       	std	Y+2, r26	; 0x02
    3394:	bb 83       	std	Y+3, r27	; 0x03
    3396:	9f 77       	andi	r25, 0x7F	; 127
    3398:	df 91       	pop	r29
    339a:	cf 91       	pop	r28
    339c:	ff 90       	pop	r15
    339e:	ef 90       	pop	r14
    33a0:	df 90       	pop	r13
    33a2:	cf 90       	pop	r12
    33a4:	bf 90       	pop	r11
    33a6:	af 90       	pop	r10
    33a8:	9f 90       	pop	r9
    33aa:	8f 90       	pop	r8
    33ac:	08 95       	ret

000033ae <rand_r>:
    33ae:	b9 cf       	rjmp	.-142    	; 0x3322 <do_rand>

000033b0 <rand>:
    33b0:	80 e0       	ldi	r24, 0x00	; 0
    33b2:	92 e0       	ldi	r25, 0x02	; 2
    33b4:	b6 cf       	rjmp	.-148    	; 0x3322 <do_rand>

000033b6 <srand>:
    33b6:	a0 e0       	ldi	r26, 0x00	; 0
    33b8:	b0 e0       	ldi	r27, 0x00	; 0
    33ba:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
    33be:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    33c2:	a0 93 02 02 	sts	0x0202, r26	; 0x800202 <__DATA_REGION_ORIGIN__+0x2>
    33c6:	b0 93 03 02 	sts	0x0203, r27	; 0x800203 <__DATA_REGION_ORIGIN__+0x3>
    33ca:	08 95       	ret

000033cc <memcpy>:
    33cc:	fb 01       	movw	r30, r22
    33ce:	dc 01       	movw	r26, r24
    33d0:	02 c0       	rjmp	.+4      	; 0x33d6 <memcpy+0xa>
    33d2:	01 90       	ld	r0, Z+
    33d4:	0d 92       	st	X+, r0
    33d6:	41 50       	subi	r20, 0x01	; 1
    33d8:	50 40       	sbci	r21, 0x00	; 0
    33da:	d8 f7       	brcc	.-10     	; 0x33d2 <memcpy+0x6>
    33dc:	08 95       	ret

000033de <__divmodsi4>:
    33de:	05 2e       	mov	r0, r21
    33e0:	97 fb       	bst	r25, 7
    33e2:	16 f4       	brtc	.+4      	; 0x33e8 <__divmodsi4+0xa>
    33e4:	00 94       	com	r0
    33e6:	0f d0       	rcall	.+30     	; 0x3406 <__negsi2>
    33e8:	57 fd       	sbrc	r21, 7
    33ea:	05 d0       	rcall	.+10     	; 0x33f6 <__divmodsi4_neg2>
    33ec:	14 d0       	rcall	.+40     	; 0x3416 <__udivmodsi4>
    33ee:	07 fc       	sbrc	r0, 7
    33f0:	02 d0       	rcall	.+4      	; 0x33f6 <__divmodsi4_neg2>
    33f2:	46 f4       	brtc	.+16     	; 0x3404 <__divmodsi4_exit>
    33f4:	08 c0       	rjmp	.+16     	; 0x3406 <__negsi2>

000033f6 <__divmodsi4_neg2>:
    33f6:	50 95       	com	r21
    33f8:	40 95       	com	r20
    33fa:	30 95       	com	r19
    33fc:	21 95       	neg	r18
    33fe:	3f 4f       	sbci	r19, 0xFF	; 255
    3400:	4f 4f       	sbci	r20, 0xFF	; 255
    3402:	5f 4f       	sbci	r21, 0xFF	; 255

00003404 <__divmodsi4_exit>:
    3404:	08 95       	ret

00003406 <__negsi2>:
    3406:	90 95       	com	r25
    3408:	80 95       	com	r24
    340a:	70 95       	com	r23
    340c:	61 95       	neg	r22
    340e:	7f 4f       	sbci	r23, 0xFF	; 255
    3410:	8f 4f       	sbci	r24, 0xFF	; 255
    3412:	9f 4f       	sbci	r25, 0xFF	; 255
    3414:	08 95       	ret

00003416 <__udivmodsi4>:
    3416:	a1 e2       	ldi	r26, 0x21	; 33
    3418:	1a 2e       	mov	r1, r26
    341a:	aa 1b       	sub	r26, r26
    341c:	bb 1b       	sub	r27, r27
    341e:	fd 01       	movw	r30, r26
    3420:	0d c0       	rjmp	.+26     	; 0x343c <__udivmodsi4_ep>

00003422 <__udivmodsi4_loop>:
    3422:	aa 1f       	adc	r26, r26
    3424:	bb 1f       	adc	r27, r27
    3426:	ee 1f       	adc	r30, r30
    3428:	ff 1f       	adc	r31, r31
    342a:	a2 17       	cp	r26, r18
    342c:	b3 07       	cpc	r27, r19
    342e:	e4 07       	cpc	r30, r20
    3430:	f5 07       	cpc	r31, r21
    3432:	20 f0       	brcs	.+8      	; 0x343c <__udivmodsi4_ep>
    3434:	a2 1b       	sub	r26, r18
    3436:	b3 0b       	sbc	r27, r19
    3438:	e4 0b       	sbc	r30, r20
    343a:	f5 0b       	sbc	r31, r21

0000343c <__udivmodsi4_ep>:
    343c:	66 1f       	adc	r22, r22
    343e:	77 1f       	adc	r23, r23
    3440:	88 1f       	adc	r24, r24
    3442:	99 1f       	adc	r25, r25
    3444:	1a 94       	dec	r1
    3446:	69 f7       	brne	.-38     	; 0x3422 <__udivmodsi4_loop>
    3448:	60 95       	com	r22
    344a:	70 95       	com	r23
    344c:	80 95       	com	r24
    344e:	90 95       	com	r25
    3450:	9b 01       	movw	r18, r22
    3452:	ac 01       	movw	r20, r24
    3454:	bd 01       	movw	r22, r26
    3456:	cf 01       	movw	r24, r30
    3458:	08 95       	ret

0000345a <_exit>:
    345a:	f8 94       	cli

0000345c <__stop_program>:
    345c:	ff cf       	rjmp	.-2      	; 0x345c <__stop_program>
