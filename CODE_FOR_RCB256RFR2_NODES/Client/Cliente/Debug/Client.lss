
Client.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000154  00800200  000033de  00003472  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000033de  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000004db  00800354  00800354  000035c6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000035c6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000035f8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000860  00000000  00000000  00003638  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000c6e7  00000000  00000000  00003e98  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000043b8  00000000  00000000  0001057f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000f1ac  00000000  00000000  00014937  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001a40  00000000  00000000  00023ae4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0001f834  00000000  00000000  00025524  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00007410  00000000  00000000  00044d58  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000007a0  00000000  00000000  0004c168  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000b9a1  00000000  00000000  0004c908  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	b8 c0       	rjmp	.+368    	; 0x172 <__ctors_end>
       2:	00 00       	nop
       4:	d7 c0       	rjmp	.+430    	; 0x1b4 <__bad_interrupt>
       6:	00 00       	nop
       8:	d5 c0       	rjmp	.+426    	; 0x1b4 <__bad_interrupt>
       a:	00 00       	nop
       c:	d3 c0       	rjmp	.+422    	; 0x1b4 <__bad_interrupt>
       e:	00 00       	nop
      10:	d1 c0       	rjmp	.+418    	; 0x1b4 <__bad_interrupt>
      12:	00 00       	nop
      14:	cf c0       	rjmp	.+414    	; 0x1b4 <__bad_interrupt>
      16:	00 00       	nop
      18:	cd c0       	rjmp	.+410    	; 0x1b4 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	cb c0       	rjmp	.+406    	; 0x1b4 <__bad_interrupt>
      1e:	00 00       	nop
      20:	c9 c0       	rjmp	.+402    	; 0x1b4 <__bad_interrupt>
      22:	00 00       	nop
      24:	c7 c0       	rjmp	.+398    	; 0x1b4 <__bad_interrupt>
      26:	00 00       	nop
      28:	c5 c0       	rjmp	.+394    	; 0x1b4 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	c3 c0       	rjmp	.+390    	; 0x1b4 <__bad_interrupt>
      2e:	00 00       	nop
      30:	c1 c0       	rjmp	.+386    	; 0x1b4 <__bad_interrupt>
      32:	00 00       	nop
      34:	bf c0       	rjmp	.+382    	; 0x1b4 <__bad_interrupt>
      36:	00 00       	nop
      38:	bd c0       	rjmp	.+378    	; 0x1b4 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	bb c0       	rjmp	.+374    	; 0x1b4 <__bad_interrupt>
      3e:	00 00       	nop
      40:	b9 c0       	rjmp	.+370    	; 0x1b4 <__bad_interrupt>
      42:	00 00       	nop
      44:	0c 94 f1 14 	jmp	0x29e2	; 0x29e2 <__vector_17>
      48:	0c 94 1e 15 	jmp	0x2a3c	; 0x2a3c <__vector_18>
      4c:	0c 94 4b 15 	jmp	0x2a96	; 0x2a96 <__vector_19>
      50:	0c 94 c4 14 	jmp	0x2988	; 0x2988 <__vector_20>
      54:	af c0       	rjmp	.+350    	; 0x1b4 <__bad_interrupt>
      56:	00 00       	nop
      58:	ad c0       	rjmp	.+346    	; 0x1b4 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	ab c0       	rjmp	.+342    	; 0x1b4 <__bad_interrupt>
      5e:	00 00       	nop
      60:	a9 c0       	rjmp	.+338    	; 0x1b4 <__bad_interrupt>
      62:	00 00       	nop
      64:	a7 c0       	rjmp	.+334    	; 0x1b4 <__bad_interrupt>
      66:	00 00       	nop
      68:	a5 c0       	rjmp	.+330    	; 0x1b4 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	a3 c0       	rjmp	.+326    	; 0x1b4 <__bad_interrupt>
      6e:	00 00       	nop
      70:	a1 c0       	rjmp	.+322    	; 0x1b4 <__bad_interrupt>
      72:	00 00       	nop
      74:	9f c0       	rjmp	.+318    	; 0x1b4 <__bad_interrupt>
      76:	00 00       	nop
      78:	9d c0       	rjmp	.+314    	; 0x1b4 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	9b c0       	rjmp	.+310    	; 0x1b4 <__bad_interrupt>
      7e:	00 00       	nop
      80:	0c 94 a5 15 	jmp	0x2b4a	; 0x2b4a <__vector_32>
      84:	0c 94 d2 15 	jmp	0x2ba4	; 0x2ba4 <__vector_33>
      88:	0c 94 ff 15 	jmp	0x2bfe	; 0x2bfe <__vector_34>
      8c:	0c 94 78 15 	jmp	0x2af0	; 0x2af0 <__vector_35>
      90:	91 c0       	rjmp	.+290    	; 0x1b4 <__bad_interrupt>
      92:	00 00       	nop
      94:	8f c0       	rjmp	.+286    	; 0x1b4 <__bad_interrupt>
      96:	00 00       	nop
      98:	8d c0       	rjmp	.+282    	; 0x1b4 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	8b c0       	rjmp	.+278    	; 0x1b4 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	89 c0       	rjmp	.+274    	; 0x1b4 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	87 c0       	rjmp	.+270    	; 0x1b4 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	0c 94 59 16 	jmp	0x2cb2	; 0x2cb2 <__vector_42>
      ac:	0c 94 86 16 	jmp	0x2d0c	; 0x2d0c <__vector_43>
      b0:	0c 94 b3 16 	jmp	0x2d66	; 0x2d66 <__vector_44>
      b4:	0c 94 2c 16 	jmp	0x2c58	; 0x2c58 <__vector_45>
      b8:	7d c0       	rjmp	.+250    	; 0x1b4 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	0c 94 0d 17 	jmp	0x2e1a	; 0x2e1a <__vector_47>
      c0:	0c 94 3a 17 	jmp	0x2e74	; 0x2e74 <__vector_48>
      c4:	0c 94 67 17 	jmp	0x2ece	; 0x2ece <__vector_49>
      c8:	0c 94 e0 16 	jmp	0x2dc0	; 0x2dc0 <__vector_50>
      cc:	73 c0       	rjmp	.+230    	; 0x1b4 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	71 c0       	rjmp	.+226    	; 0x1b4 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	6f c0       	rjmp	.+222    	; 0x1b4 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	6d c0       	rjmp	.+218    	; 0x1b4 <__bad_interrupt>
      da:	00 00       	nop
      dc:	6b c0       	rjmp	.+214    	; 0x1b4 <__bad_interrupt>
      de:	00 00       	nop
      e0:	69 c0       	rjmp	.+210    	; 0x1b4 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	0c 94 71 0f 	jmp	0x1ee2	; 0x1ee2 <__vector_57>
      e8:	0c 94 7b 0f 	jmp	0x1ef6	; 0x1ef6 <__vector_58>
      ec:	0c 94 67 0f 	jmp	0x1ece	; 0x1ece <__vector_59>
      f0:	0c 94 e6 0e 	jmp	0x1dcc	; 0x1dcc <__vector_60>
      f4:	0c 94 11 0f 	jmp	0x1e22	; 0x1e22 <__vector_61>
      f8:	0c 94 85 0f 	jmp	0x1f0a	; 0x1f0a <__vector_62>
      fc:	0c 94 bb 0e 	jmp	0x1d76	; 0x1d76 <__vector_63>
     100:	0c 94 3c 0f 	jmp	0x1e78	; 0x1e78 <__vector_64>
     104:	57 c0       	rjmp	.+174    	; 0x1b4 <__bad_interrupt>
     106:	00 00       	nop
     108:	55 c0       	rjmp	.+170    	; 0x1b4 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	53 c0       	rjmp	.+166    	; 0x1b4 <__bad_interrupt>
     10e:	00 00       	nop
     110:	51 c0       	rjmp	.+162    	; 0x1b4 <__bad_interrupt>
     112:	00 00       	nop
     114:	4f c0       	rjmp	.+158    	; 0x1b4 <__bad_interrupt>
     116:	00 00       	nop
     118:	0c 94 99 0f 	jmp	0x1f32	; 0x1f32 <__vector_70>
     11c:	0c 94 8f 0f 	jmp	0x1f1e	; 0x1f1e <__vector_71>
     120:	0c 94 a3 0f 	jmp	0x1f46	; 0x1f46 <__vector_72>
     124:	0c 94 ad 0f 	jmp	0x1f5a	; 0x1f5a <__vector_73>
     128:	0c 94 b7 0f 	jmp	0x1f6e	; 0x1f6e <__vector_74>
     12c:	0c 94 c1 0f 	jmp	0x1f82	; 0x1f82 <__vector_75>
     130:	0c 94 cb 0f 	jmp	0x1f96	; 0x1f96 <__vector_76>
     134:	3e 0c       	add	r3, r14
     136:	65 0c       	add	r6, r5
     138:	59 0c       	add	r5, r9
     13a:	72 0c       	add	r7, r2
     13c:	59 0c       	add	r5, r9
     13e:	31 0c       	add	r3, r1
     140:	4b 0c       	add	r4, r11
     142:	59 0c       	add	r5, r9
     144:	59 0c       	add	r5, r9
     146:	59 0c       	add	r5, r9
     148:	59 0c       	add	r5, r9
     14a:	59 0c       	add	r5, r9
     14c:	05 0c       	add	r0, r5
     14e:	59 0c       	add	r5, r9
     150:	59 0c       	add	r5, r9
     152:	59 0c       	add	r5, r9
     154:	59 0c       	add	r5, r9
     156:	59 0c       	add	r5, r9
     158:	59 0c       	add	r5, r9
     15a:	91 0c       	add	r9, r1
     15c:	59 0c       	add	r5, r9
     15e:	59 0c       	add	r5, r9
     160:	ca 0c       	add	r12, r10

00000162 <__trampolines_end>:
     162:	04 03       	mulsu	r16, r20
     164:	03 02       	muls	r16, r19
     166:	02 01       	movw	r0, r4
     168:	00 ff       	sbrs	r16, 0
     16a:	fe fd       	.word	0xfdfe	; ????
     16c:	fc fb       	.word	0xfbfc	; ????
     16e:	f9 f7       	brne	.-2      	; 0x16e <__trampolines_end+0xc>
     170:	f4 ef       	ldi	r31, 0xF4	; 244

00000172 <__ctors_end>:
     172:	11 24       	eor	r1, r1
     174:	1f be       	out	0x3f, r1	; 63
     176:	cf ef       	ldi	r28, 0xFF	; 255
     178:	d1 e8       	ldi	r29, 0x81	; 129
     17a:	de bf       	out	0x3e, r29	; 62
     17c:	cd bf       	out	0x3d, r28	; 61
     17e:	00 e0       	ldi	r16, 0x00	; 0
     180:	0c bf       	out	0x3c, r16	; 60

00000182 <__do_copy_data>:
     182:	13 e0       	ldi	r17, 0x03	; 3
     184:	a0 e0       	ldi	r26, 0x00	; 0
     186:	b2 e0       	ldi	r27, 0x02	; 2
     188:	ee ed       	ldi	r30, 0xDE	; 222
     18a:	f3 e3       	ldi	r31, 0x33	; 51
     18c:	00 e0       	ldi	r16, 0x00	; 0
     18e:	0b bf       	out	0x3b, r16	; 59
     190:	02 c0       	rjmp	.+4      	; 0x196 <__do_copy_data+0x14>
     192:	07 90       	elpm	r0, Z+
     194:	0d 92       	st	X+, r0
     196:	a4 35       	cpi	r26, 0x54	; 84
     198:	b1 07       	cpc	r27, r17
     19a:	d9 f7       	brne	.-10     	; 0x192 <__do_copy_data+0x10>

0000019c <__do_clear_bss>:
     19c:	28 e0       	ldi	r18, 0x08	; 8
     19e:	a4 e5       	ldi	r26, 0x54	; 84
     1a0:	b3 e0       	ldi	r27, 0x03	; 3
     1a2:	01 c0       	rjmp	.+2      	; 0x1a6 <.do_clear_bss_start>

000001a4 <.do_clear_bss_loop>:
     1a4:	1d 92       	st	X+, r1

000001a6 <.do_clear_bss_start>:
     1a6:	af 32       	cpi	r26, 0x2F	; 47
     1a8:	b2 07       	cpc	r27, r18
     1aa:	e1 f7       	brne	.-8      	; 0x1a4 <.do_clear_bss_loop>
     1ac:	0e 94 c2 18 	call	0x3184	; 0x3184 <main>
     1b0:	0c 94 ed 19 	jmp	0x33da	; 0x33da <_exit>

000001b4 <__bad_interrupt>:
     1b4:	25 cf       	rjmp	.-438    	; 0x0 <__vectors>

000001b6 <common_tc_read_count>:
     1b6:	0e 94 6c 14 	call	0x28d8	; 0x28d8 <tmr_read_count>
     1ba:	20 91 58 03 	lds	r18, 0x0358	; 0x800358 <timer_mul_var>
     1be:	22 23       	and	r18, r18
     1c0:	d9 f0       	breq	.+54     	; 0x1f8 <common_tc_read_count+0x42>
     1c2:	40 91 2e 08 	lds	r20, 0x082E	; 0x80082e <timer_multiplier>
     1c6:	30 e0       	ldi	r19, 0x00	; 0
     1c8:	20 91 58 03 	lds	r18, 0x0358	; 0x800358 <timer_mul_var>
     1cc:	64 2f       	mov	r22, r20
     1ce:	73 2f       	mov	r23, r19
     1d0:	0e 94 eb 18 	call	0x31d6	; 0x31d6 <__udivmodhi4>
     1d4:	fb 01       	movw	r30, r22
     1d6:	8f ef       	ldi	r24, 0xFF	; 255
     1d8:	9f ef       	ldi	r25, 0xFF	; 255
     1da:	64 2f       	mov	r22, r20
     1dc:	73 2f       	mov	r23, r19
     1de:	0e 94 eb 18 	call	0x31d6	; 0x31d6 <__udivmodhi4>
     1e2:	30 e0       	ldi	r19, 0x00	; 0
     1e4:	62 9f       	mul	r22, r18
     1e6:	c0 01       	movw	r24, r0
     1e8:	63 9f       	mul	r22, r19
     1ea:	90 0d       	add	r25, r0
     1ec:	72 9f       	mul	r23, r18
     1ee:	90 0d       	add	r25, r0
     1f0:	11 24       	eor	r1, r1
     1f2:	8e 0f       	add	r24, r30
     1f4:	9f 1f       	adc	r25, r31
     1f6:	08 95       	ret
     1f8:	60 91 2e 08 	lds	r22, 0x082E	; 0x80082e <timer_multiplier>
     1fc:	70 e0       	ldi	r23, 0x00	; 0
     1fe:	0e 94 eb 18 	call	0x31d6	; 0x31d6 <__udivmodhi4>
     202:	cb 01       	movw	r24, r22
     204:	08 95       	ret

00000206 <common_tc_compare_stop>:
     206:	0e 94 71 14 	call	0x28e2	; 0x28e2 <tmr_disable_cc_interrupt>
     20a:	0e 94 95 14 	call	0x292a	; 0x292a <save_cpu_interrupt>
     20e:	10 92 54 03 	sts	0x0354, r1	; 0x800354 <__data_end>
     212:	10 92 55 03 	sts	0x0355, r1	; 0x800355 <__data_end+0x1>
     216:	10 92 56 03 	sts	0x0356, r1	; 0x800356 <__data_end+0x2>
     21a:	10 92 57 03 	sts	0x0357, r1	; 0x800357 <__data_end+0x3>
     21e:	10 92 5a 03 	sts	0x035A, r1	; 0x80035a <compare_value+0x1>
     222:	10 92 59 03 	sts	0x0359, r1	; 0x800359 <compare_value>
     226:	0c 94 a2 14 	jmp	0x2944	; 0x2944 <restore_cpu_interrupt>

0000022a <common_tc_overflow_stop>:
     22a:	0e 94 7f 14 	call	0x28fe	; 0x28fe <tmr_disable_ovf_interrupt>
     22e:	10 92 58 03 	sts	0x0358, r1	; 0x800358 <timer_mul_var>
     232:	08 95       	ret

00000234 <common_tc_stop>:
     234:	e8 df       	rcall	.-48     	; 0x206 <common_tc_compare_stop>
     236:	f9 df       	rcall	.-14     	; 0x22a <common_tc_overflow_stop>
     238:	0c 94 86 14 	jmp	0x290c	; 0x290c <tmr_stop>

0000023c <common_tc_delay>:
     23c:	0f 93       	push	r16
     23e:	1f 93       	push	r17
     240:	cf 93       	push	r28
     242:	df 93       	push	r29
     244:	ec 01       	movw	r28, r24
     246:	0e 94 6c 14 	call	0x28d8	; 0x28d8 <tmr_read_count>
     24a:	8c 01       	movw	r16, r24
     24c:	be 01       	movw	r22, r28
     24e:	80 e0       	ldi	r24, 0x00	; 0
     250:	90 e0       	ldi	r25, 0x00	; 0
     252:	20 91 2e 08 	lds	r18, 0x082E	; 0x80082e <timer_multiplier>
     256:	30 e0       	ldi	r19, 0x00	; 0
     258:	40 e0       	ldi	r20, 0x00	; 0
     25a:	50 e0       	ldi	r21, 0x00	; 0
     25c:	0e 94 dc 18 	call	0x31b8	; 0x31b8 <__mulsi3>
     260:	dc 01       	movw	r26, r24
     262:	cb 01       	movw	r24, r22
     264:	a8 01       	movw	r20, r16
     266:	60 e0       	ldi	r22, 0x00	; 0
     268:	70 e0       	ldi	r23, 0x00	; 0
     26a:	48 0f       	add	r20, r24
     26c:	59 1f       	adc	r21, r25
     26e:	6a 1f       	adc	r22, r26
     270:	7b 1f       	adc	r23, r27
     272:	40 93 54 03 	sts	0x0354, r20	; 0x800354 <__data_end>
     276:	50 93 55 03 	sts	0x0355, r21	; 0x800355 <__data_end+0x1>
     27a:	60 93 56 03 	sts	0x0356, r22	; 0x800356 <__data_end+0x2>
     27e:	70 93 57 03 	sts	0x0357, r23	; 0x800357 <__data_end+0x3>
     282:	40 91 54 03 	lds	r20, 0x0354	; 0x800354 <__data_end>
     286:	50 91 55 03 	lds	r21, 0x0355	; 0x800355 <__data_end+0x1>
     28a:	60 91 56 03 	lds	r22, 0x0356	; 0x800356 <__data_end+0x2>
     28e:	70 91 57 03 	lds	r23, 0x0357	; 0x800357 <__data_end+0x3>
     292:	ab 01       	movw	r20, r22
     294:	66 27       	eor	r22, r22
     296:	77 27       	eor	r23, r23
     298:	40 93 54 03 	sts	0x0354, r20	; 0x800354 <__data_end>
     29c:	50 93 55 03 	sts	0x0355, r21	; 0x800355 <__data_end+0x1>
     2a0:	60 93 56 03 	sts	0x0356, r22	; 0x800356 <__data_end+0x2>
     2a4:	70 93 57 03 	sts	0x0357, r23	; 0x800357 <__data_end+0x3>
     2a8:	40 91 54 03 	lds	r20, 0x0354	; 0x800354 <__data_end>
     2ac:	50 91 55 03 	lds	r21, 0x0355	; 0x800355 <__data_end+0x1>
     2b0:	60 91 56 03 	lds	r22, 0x0356	; 0x800356 <__data_end+0x2>
     2b4:	70 91 57 03 	lds	r23, 0x0357	; 0x800357 <__data_end+0x3>
     2b8:	41 15       	cp	r20, r1
     2ba:	51 05       	cpc	r21, r1
     2bc:	61 05       	cpc	r22, r1
     2be:	71 05       	cpc	r23, r1
     2c0:	91 f0       	breq	.+36     	; 0x2e6 <common_tc_delay+0xaa>
     2c2:	40 91 54 03 	lds	r20, 0x0354	; 0x800354 <__data_end>
     2c6:	50 91 55 03 	lds	r21, 0x0355	; 0x800355 <__data_end+0x1>
     2ca:	60 91 56 03 	lds	r22, 0x0356	; 0x800356 <__data_end+0x2>
     2ce:	70 91 57 03 	lds	r23, 0x0357	; 0x800357 <__data_end+0x3>
     2d2:	01 96       	adiw	r24, 0x01	; 1
     2d4:	08 0f       	add	r16, r24
     2d6:	19 1f       	adc	r17, r25
     2d8:	10 93 5a 03 	sts	0x035A, r17	; 0x80035a <compare_value+0x1>
     2dc:	00 93 59 03 	sts	0x0359, r16	; 0x800359 <compare_value>
     2e0:	0e 94 71 14 	call	0x28e2	; 0x28e2 <tmr_disable_cc_interrupt>
     2e4:	08 c0       	rjmp	.+16     	; 0x2f6 <common_tc_delay+0xba>
     2e6:	08 0f       	add	r16, r24
     2e8:	19 1f       	adc	r17, r25
     2ea:	10 93 5a 03 	sts	0x035A, r17	; 0x80035a <compare_value+0x1>
     2ee:	00 93 59 03 	sts	0x0359, r16	; 0x800359 <compare_value>
     2f2:	0e 94 78 14 	call	0x28f0	; 0x28f0 <tmr_enable_cc_interrupt>
     2f6:	80 91 59 03 	lds	r24, 0x0359	; 0x800359 <compare_value>
     2fa:	90 91 5a 03 	lds	r25, 0x035A	; 0x80035a <compare_value+0x1>
     2fe:	84 36       	cpi	r24, 0x64	; 100
     300:	91 05       	cpc	r25, r1
     302:	30 f4       	brcc	.+12     	; 0x310 <common_tc_delay+0xd4>
     304:	8c 59       	subi	r24, 0x9C	; 156
     306:	9f 4f       	sbci	r25, 0xFF	; 255
     308:	90 93 5a 03 	sts	0x035A, r25	; 0x80035a <compare_value+0x1>
     30c:	80 93 59 03 	sts	0x0359, r24	; 0x800359 <compare_value>
     310:	80 91 59 03 	lds	r24, 0x0359	; 0x800359 <compare_value>
     314:	90 91 5a 03 	lds	r25, 0x035A	; 0x80035a <compare_value+0x1>
     318:	0e 94 8a 14 	call	0x2914	; 0x2914 <tmr_write_cmpreg>
     31c:	df 91       	pop	r29
     31e:	cf 91       	pop	r28
     320:	1f 91       	pop	r17
     322:	0f 91       	pop	r16
     324:	08 95       	ret

00000326 <common_tc_init>:
     326:	10 92 58 03 	sts	0x0358, r1	; 0x800358 <timer_mul_var>
     32a:	0e 94 a4 14 	call	0x2948	; 0x2948 <tmr_init>
     32e:	80 93 2e 08 	sts	0x082E, r24	; 0x80082e <timer_multiplier>
     332:	08 95       	ret

00000334 <tmr_ovf_callback>:
     334:	80 91 54 03 	lds	r24, 0x0354	; 0x800354 <__data_end>
     338:	90 91 55 03 	lds	r25, 0x0355	; 0x800355 <__data_end+0x1>
     33c:	a0 91 56 03 	lds	r26, 0x0356	; 0x800356 <__data_end+0x2>
     340:	b0 91 57 03 	lds	r27, 0x0357	; 0x800357 <__data_end+0x3>
     344:	00 97       	sbiw	r24, 0x00	; 0
     346:	a1 05       	cpc	r26, r1
     348:	b1 05       	cpc	r27, r1
     34a:	c9 f0       	breq	.+50     	; 0x37e <tmr_ovf_callback+0x4a>
     34c:	80 91 54 03 	lds	r24, 0x0354	; 0x800354 <__data_end>
     350:	90 91 55 03 	lds	r25, 0x0355	; 0x800355 <__data_end+0x1>
     354:	a0 91 56 03 	lds	r26, 0x0356	; 0x800356 <__data_end+0x2>
     358:	b0 91 57 03 	lds	r27, 0x0357	; 0x800357 <__data_end+0x3>
     35c:	01 97       	sbiw	r24, 0x01	; 1
     35e:	a1 09       	sbc	r26, r1
     360:	b1 09       	sbc	r27, r1
     362:	80 93 54 03 	sts	0x0354, r24	; 0x800354 <__data_end>
     366:	90 93 55 03 	sts	0x0355, r25	; 0x800355 <__data_end+0x1>
     36a:	a0 93 56 03 	sts	0x0356, r26	; 0x800356 <__data_end+0x2>
     36e:	b0 93 57 03 	sts	0x0357, r27	; 0x800357 <__data_end+0x3>
     372:	00 97       	sbiw	r24, 0x00	; 0
     374:	a1 05       	cpc	r26, r1
     376:	b1 05       	cpc	r27, r1
     378:	11 f4       	brne	.+4      	; 0x37e <tmr_ovf_callback+0x4a>
     37a:	0e 94 78 14 	call	0x28f0	; 0x28f0 <tmr_enable_cc_interrupt>
     37e:	80 91 58 03 	lds	r24, 0x0358	; 0x800358 <timer_mul_var>
     382:	8f 5f       	subi	r24, 0xFF	; 255
     384:	80 93 58 03 	sts	0x0358, r24	; 0x800358 <timer_mul_var>
     388:	90 91 2e 08 	lds	r25, 0x082E	; 0x80082e <timer_multiplier>
     38c:	89 17       	cp	r24, r25
     38e:	48 f0       	brcs	.+18     	; 0x3a2 <tmr_ovf_callback+0x6e>
     390:	10 92 58 03 	sts	0x0358, r1	; 0x800358 <timer_mul_var>
     394:	e0 91 5b 03 	lds	r30, 0x035B	; 0x80035b <common_tc_ovf_callback>
     398:	f0 91 5c 03 	lds	r31, 0x035C	; 0x80035c <common_tc_ovf_callback+0x1>
     39c:	30 97       	sbiw	r30, 0x00	; 0
     39e:	09 f0       	breq	.+2      	; 0x3a2 <tmr_ovf_callback+0x6e>
     3a0:	19 95       	eicall
     3a2:	08 95       	ret

000003a4 <tmr_cca_callback>:
     3a4:	0e 94 71 14 	call	0x28e2	; 0x28e2 <tmr_disable_cc_interrupt>
     3a8:	e0 91 5d 03 	lds	r30, 0x035D	; 0x80035d <common_tc_cca_callback>
     3ac:	f0 91 5e 03 	lds	r31, 0x035E	; 0x80035e <common_tc_cca_callback+0x1>
     3b0:	30 97       	sbiw	r30, 0x00	; 0
     3b2:	09 f0       	breq	.+2      	; 0x3b6 <tmr_cca_callback+0x12>
     3b4:	19 95       	eicall
     3b6:	08 95       	ret

000003b8 <set_common_tc_overflow_callback>:
     3b8:	90 93 5c 03 	sts	0x035C, r25	; 0x80035c <common_tc_ovf_callback+0x1>
     3bc:	80 93 5b 03 	sts	0x035B, r24	; 0x80035b <common_tc_ovf_callback>
     3c0:	08 95       	ret

000003c2 <set_common_tc_expiry_callback>:
     3c2:	90 93 5e 03 	sts	0x035E, r25	; 0x80035e <common_tc_cca_callback+0x1>
     3c6:	80 93 5d 03 	sts	0x035D, r24	; 0x80035d <common_tc_cca_callback>
     3ca:	08 95       	ret

000003cc <funcionSEARCHGW>:
     3cc:	fc 01       	movw	r30, r24
     3ce:	83 e0       	ldi	r24, 0x03	; 3
     3d0:	80 83       	st	Z, r24
     3d2:	81 e0       	ldi	r24, 0x01	; 1
int funcionSEARCHGW(uint8_t *msg){
	uint8_t Length=0x03;
	uint8_t MsgType=0x01;
	uint8_t Radius=0x01;
	msg[0]=Length;
	msg[1]=MsgType;
     3d4:	81 83       	std	Z+1, r24	; 0x01
	msg[2]=Radius;
     3d6:	82 83       	std	Z+2, r24	; 0x02
	return sizeof(SEARCHGW);
}
     3d8:	83 e0       	ldi	r24, 0x03	; 3
     3da:	90 e0       	ldi	r25, 0x00	; 0
     3dc:	08 95       	ret

000003de <usr_app_timer_cb>:
#include "usr_periodic_timer.h"
#include "periodic_timer.h"//Para acceder a las variables utilizadas por los temporizadores.

void usr_app_timer_cb(void *parameter)
{
	TimerEnd=1;
     3de:	81 e0       	ldi	r24, 0x01	; 1
     3e0:	90 e0       	ldi	r25, 0x00	; 0
     3e2:	90 93 ca 07 	sts	0x07CA, r25	; 0x8007ca <TimerEnd+0x1>
     3e6:	80 93 c9 07 	sts	0x07C9, r24	; 0x8007c9 <TimerEnd>
     3ea:	08 95       	ret

000003ec <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
     3ec:	04 c0       	rjmp	.+8      	; 0x3f6 <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
     3ee:	61 50       	subi	r22, 0x01	; 1
     3f0:	71 09       	sbc	r23, r1
     3f2:	81 09       	sbc	r24, r1
     3f4:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
     3f6:	61 15       	cp	r22, r1
     3f8:	71 05       	cpc	r23, r1
     3fa:	81 05       	cpc	r24, r1
     3fc:	91 05       	cpc	r25, r1
     3fe:	b9 f7       	brne	.-18     	; 0x3ee <__portable_avr_delay_cycles+0x2>
     400:	08 95       	ret

00000402 <usr_frame_received_cb>:
	}
}

// Function to receive MQTT-SN messages over IEEE802.15.4 frames //
void usr_frame_received_cb(frame_info_t *frame)
{
     402:	0f 93       	push	r16
     404:	1f 93       	push	r17
     406:	cf 93       	push	r28
     408:	df 93       	push	r29
	if (enableReception == 1) // State index
     40a:	20 91 6f 03 	lds	r18, 0x036F	; 0x80036f <enableReception>
     40e:	30 91 70 03 	lds	r19, 0x0370	; 0x800370 <enableReception+0x1>
     412:	21 30       	cpi	r18, 0x01	; 1
     414:	31 05       	cpc	r19, r1
     416:	69 f5       	brne	.+90     	; 0x472 <usr_frame_received_cb+0x70>
     418:	ec 01       	movw	r28, r24
	{

		memset(&receivedFrame, 0, sizeof(receivedFrame)); // Reserve memory space
     41a:	09 ee       	ldi	r16, 0xE9	; 233
     41c:	15 e0       	ldi	r17, 0x05	; 5
     41e:	81 e7       	ldi	r24, 0x71	; 113
     420:	f8 01       	movw	r30, r16
     422:	11 92       	st	Z+, r1
     424:	8a 95       	dec	r24
     426:	e9 f7       	brne	.-6      	; 0x422 <usr_frame_received_cb+0x20>
		memcpy(&receivedFrame, frame->mpdu, sizeof(receivedFrame)); // Copy information from source buffer to destination
     428:	ef 81       	ldd	r30, Y+7	; 0x07
     42a:	f8 85       	ldd	r31, Y+8	; 0x08
     42c:	81 e7       	ldi	r24, 0x71	; 113
     42e:	d8 01       	movw	r26, r16
     430:	01 90       	ld	r0, Z+
     432:	0d 92       	st	X+, r0
     434:	8a 95       	dec	r24
     436:	e1 f7       	brne	.-8      	; 0x430 <usr_frame_received_cb+0x2e>
		bmm_buffer_free(frame->buffer_header); // Free buffer data to avoid overlap.
     438:	89 81       	ldd	r24, Y+1	; 0x01
     43a:	9a 81       	ldd	r25, Y+2	; 0x02
     43c:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <bmm_buffer_free>

		uint8_t msgTypeMQTT_SN;
		msgTypeMQTT_SN = receivedFrame.MQTT_SN_message[1];
     440:	f8 01       	movw	r30, r16
     442:	83 85       	ldd	r24, Z+11	; 0x0b

		if (msgTypeMQTT_SN == 0x00) // RX ADVERTISE
     444:	81 11       	cpse	r24, r1
     446:	09 c0       	rjmp	.+18     	; 0x45a <usr_frame_received_cb+0x58>
		{
			enableReception = 0; // Disable reception to avoid interference in state change.
     448:	10 92 70 03 	sts	0x0370, r1	; 0x800370 <enableReception+0x1>
     44c:	10 92 6f 03 	sts	0x036F, r1	; 0x80036f <enableReception>
			successfulReceptionControl = 0; // This variable allows the node to exit the reception loop
     450:	10 92 0e 02 	sts	0x020E, r1	; 0x80020e <successfulReceptionControl+0x1>
     454:	10 92 0d 02 	sts	0x020D, r1	; 0x80020d <successfulReceptionControl>
     458:	0c c0       	rjmp	.+24     	; 0x472 <usr_frame_received_cb+0x70>
			// it is in and allows the state to continue with its operation.
		}
		else if (msgTypeMQTT_SN == 0x02) // RX GWINFO
     45a:	82 30       	cpi	r24, 0x02	; 2
     45c:	51 f4       	brne	.+20     	; 0x472 <usr_frame_received_cb+0x70>
		{
			enableReception = 0; // Disable reception to avoid interference in state change.
     45e:	10 92 70 03 	sts	0x0370, r1	; 0x800370 <enableReception+0x1>
     462:	10 92 6f 03 	sts	0x036F, r1	; 0x80036f <enableReception>
			successfulReceptionControl = 2; // This variable allows the node to exit the reception loop
     466:	82 e0       	ldi	r24, 0x02	; 2
     468:	90 e0       	ldi	r25, 0x00	; 0
     46a:	90 93 0e 02 	sts	0x020E, r25	; 0x80020e <successfulReceptionControl+0x1>
     46e:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <successfulReceptionControl>
			// it is in and allows the state to continue with its operation.
		}
	}
}
     472:	df 91       	pop	r29
     474:	cf 91       	pop	r28
     476:	1f 91       	pop	r17
     478:	0f 91       	pop	r16
     47a:	08 95       	ret

0000047c <usr_frame_transmitted_cb>:

// Predefined Function //
void usr_frame_transmitted_cb(retval_t status, frame_info_t *frame)
{
     47c:	08 95       	ret

0000047e <controlLED>:
// ****************************************************************************************************************************** //

// Aditional Funtion//
// ****************************************************************************************************************************** //
void controlLED(int led_on){
	if (led_on==0)
     47e:	00 97       	sbiw	r24, 0x00	; 0
     480:	21 f4       	brne	.+8      	; 0x48a <controlLED+0xc>
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
     482:	5e 9a       	sbi	0x0b, 6	; 11
     484:	a2 9a       	sbi	0x14, 2	; 20
     486:	72 9a       	sbi	0x0e, 2	; 14
     488:	08 95       	ret
	{
		LED_Off(LED0);
		LED_Off(LED1);
		LED_Off(LED2);
	}
	else if (led_on==1)
     48a:	81 30       	cpi	r24, 0x01	; 1
     48c:	91 05       	cpc	r25, r1
     48e:	21 f4       	brne	.+8      	; 0x498 <controlLED+0x1a>
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
     490:	5e 98       	cbi	0x0b, 6	; 11
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
     492:	a2 9a       	sbi	0x14, 2	; 20
     494:	72 9a       	sbi	0x0e, 2	; 14
     496:	08 95       	ret
	{
		LED_On(LED0);
		LED_Off(LED1);
		LED_Off(LED2);
	}
	else if (led_on==2)
     498:	82 30       	cpi	r24, 0x02	; 2
     49a:	91 05       	cpc	r25, r1
     49c:	21 f4       	brne	.+8      	; 0x4a6 <controlLED+0x28>
     49e:	5e 9a       	sbi	0x0b, 6	; 11
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
     4a0:	a2 98       	cbi	0x14, 2	; 20
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
     4a2:	72 9a       	sbi	0x0e, 2	; 14
     4a4:	08 95       	ret
	{
		LED_Off(LED0);
		LED_On(LED1);
		LED_Off(LED2);
	}
	else if (led_on==3)
     4a6:	83 30       	cpi	r24, 0x03	; 3
     4a8:	91 05       	cpc	r25, r1
     4aa:	21 f4       	brne	.+8      	; 0x4b4 <controlLED+0x36>
     4ac:	5e 9a       	sbi	0x0b, 6	; 11
     4ae:	a2 9a       	sbi	0x14, 2	; 20
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
     4b0:	72 98       	cbi	0x0e, 2	; 14
     4b2:	08 95       	ret
	{
		LED_Off(LED0);
		LED_Off(LED1);
		LED_On(LED2);
	}
	else if (led_on==4)
     4b4:	04 97       	sbiw	r24, 0x04	; 4
     4b6:	19 f4       	brne	.+6      	; 0x4be <controlLED+0x40>
     4b8:	5e 98       	cbi	0x0b, 6	; 11
     4ba:	a2 98       	cbi	0x14, 2	; 20
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
     4bc:	72 9a       	sbi	0x0e, 2	; 14
     4be:	08 95       	ret

000004c0 <initialState>:
}

// State Function Implementation //
// ============================================================================================================================= //
void initialState(void) // DISCOVERY S0
{
     4c0:	cf 93       	push	r28
     4c2:	df 93       	push	r29
     4c4:	cd b7       	in	r28, 0x3d	; 61
     4c6:	de b7       	in	r29, 0x3e	; 62
     4c8:	e0 97       	sbiw	r28, 0x30	; 48
     4ca:	0f b6       	in	r0, 0x3f	; 63
     4cc:	f8 94       	cli
     4ce:	de bf       	out	0x3e, r29	; 62
     4d0:	0f be       	out	0x3f, r0	; 63
     4d2:	cd bf       	out	0x3d, r28	; 61
	uint8_t State[48] = "|======DISCOVERY=======||        S-00          |";
     4d4:	80 e3       	ldi	r24, 0x30	; 48
     4d6:	ef e0       	ldi	r30, 0x0F	; 15
     4d8:	f2 e0       	ldi	r31, 0x02	; 2
     4da:	de 01       	movw	r26, r28
     4dc:	11 96       	adiw	r26, 0x01	; 1
     4de:	01 90       	ld	r0, Z+
     4e0:	0d 92       	st	X+, r0
     4e2:	8a 95       	dec	r24
     4e4:	e1 f7       	brne	.-8      	; 0x4de <initialState+0x1e>
	//|        S-00          |
	if (stateControl == 1)
     4e6:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <stateControl>
     4ea:	90 91 0c 02 	lds	r25, 0x020C	; 0x80020c <stateControl+0x1>
     4ee:	81 30       	cpi	r24, 0x01	; 1
     4f0:	91 05       	cpc	r25, r1
     4f2:	61 f4       	brne	.+24     	; 0x50c <initialState+0x4c>
	{
		stateControl = 2;
     4f4:	82 e0       	ldi	r24, 0x02	; 2
     4f6:	90 e0       	ldi	r25, 0x00	; 0
     4f8:	90 93 0c 02 	sts	0x020C, r25	; 0x80020c <stateControl+0x1>
     4fc:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <stateControl>
		delay_ms(1500); // Wait time to appreciate the start of state
     500:	61 e8       	ldi	r22, 0x81	; 129
     502:	74 e8       	ldi	r23, 0x84	; 132
     504:	8e e1       	ldi	r24, 0x1E	; 30
     506:	90 e0       	ldi	r25, 0x00	; 0
     508:	71 df       	rcall	.-286    	; 0x3ec <__portable_avr_delay_cycles>
     50a:	27 c1       	rjmp	.+590    	; 0x75a <initialState+0x29a>
	}
	else if (stateControl == 2)
     50c:	82 30       	cpi	r24, 0x02	; 2
     50e:	91 05       	cpc	r25, r1
     510:	99 f4       	brne	.+38     	; 0x538 <initialState+0x78>
	{
		stateControl = 3;
     512:	83 e0       	ldi	r24, 0x03	; 3
     514:	90 e0       	ldi	r25, 0x00	; 0
     516:	90 93 0c 02 	sts	0x020C, r25	; 0x80020c <stateControl+0x1>
     51a:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <stateControl>
		transmit_sample_frame(State, 48, 1); // State indicator
     51e:	41 e0       	ldi	r20, 0x01	; 1
     520:	50 e0       	ldi	r21, 0x00	; 0
     522:	60 e3       	ldi	r22, 0x30	; 48
     524:	ce 01       	movw	r24, r28
     526:	01 96       	adiw	r24, 0x01	; 1
     528:	1d d3       	rcall	.+1594   	; 0xb64 <transmit_sample_frame>
		enableReception = 1; // Variable that enables the function that receives messages
     52a:	81 e0       	ldi	r24, 0x01	; 1
     52c:	90 e0       	ldi	r25, 0x00	; 0
     52e:	90 93 70 03 	sts	0x0370, r25	; 0x800370 <enableReception+0x1>
     532:	80 93 6f 03 	sts	0x036F, r24	; 0x80036f <enableReception>
     536:	11 c1       	rjmp	.+546    	; 0x75a <initialState+0x29a>
	}
	else if (stateControl == 3)
     538:	83 30       	cpi	r24, 0x03	; 3
     53a:	91 05       	cpc	r25, r1
     53c:	09 f0       	breq	.+2      	; 0x540 <initialState+0x80>
     53e:	e2 c0       	rjmp	.+452    	; 0x704 <initialState+0x244>
	{   // ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////// //
		// The node will remain in this state until it receives an ADVERTISE message,
		// the NADVTADV timer finishes, or the TSEARCHGW timer finishes.
		// ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////// //
		// RX ADVERTISE //////////////////////////////////////////////////////////////////////////////////////////////////////// //
		if (successfulReceptionControl == 0)
     540:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <successfulReceptionControl>
     544:	90 91 0e 02 	lds	r25, 0x020E	; 0x80020e <successfulReceptionControl+0x1>
     548:	89 2b       	or	r24, r25
     54a:	a9 f4       	brne	.+42     	; 0x576 <initialState+0xb6>
		{
			successfulReceptionControl = -1; // Reception is disabled to avoid blocking
     54c:	8f ef       	ldi	r24, 0xFF	; 255
     54e:	9f ef       	ldi	r25, 0xFF	; 255
     550:	90 93 0e 02 	sts	0x020E, r25	; 0x80020e <successfulReceptionControl+0x1>
     554:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <successfulReceptionControl>
			stop_timer1(); // The timer is stopped when an ADVERTISE arrives to restart it.
     558:	5f d2       	rcall	.+1214   	; 0xa18 <stop_timer1>
			updatedGwTable = 2;
     55a:	82 e0       	ldi	r24, 0x02	; 2
     55c:	90 e0       	ldi	r25, 0x00	; 0
     55e:	90 93 62 03 	sts	0x0362, r25	; 0x800362 <updatedGwTable+0x1>
     562:	80 93 61 03 	sts	0x0361, r24	; 0x800361 <updatedGwTable>
			controlLED(updatedGwTable); // Indicates how a GW table should be updated
     566:	8b df       	rcall	.-234    	; 0x47e <controlLED>
			addTimer = 1; // Move to add Timer
     568:	81 e0       	ldi	r24, 0x01	; 1
     56a:	90 e0       	ldi	r25, 0x00	; 0
     56c:	90 93 6c 03 	sts	0x036C, r25	; 0x80036c <addTimer+0x1>
     570:	80 93 6b 03 	sts	0x036B, r24	; 0x80036b <addTimer>
     574:	f2 c0       	rjmp	.+484    	; 0x75a <initialState+0x29a>
		}
		else if (addTimer == 1) // Adding NADVTADV Timer
     576:	80 91 6b 03 	lds	r24, 0x036B	; 0x80036b <addTimer>
     57a:	90 91 6c 03 	lds	r25, 0x036C	; 0x80036c <addTimer+0x1>
     57e:	81 30       	cpi	r24, 0x01	; 1
     580:	91 05       	cpc	r25, r1
     582:	69 f5       	brne	.+90     	; 0x5de <initialState+0x11e>
		{
			addTimer = 0; // The timer is only assigned once so the variable returns to 0
     584:	10 92 6c 03 	sts	0x036C, r1	; 0x80036c <addTimer+0x1>
     588:	10 92 6b 03 	sts	0x036B, r1	; 0x80036b <addTimer>
			NTadv = NADV * durationRx; // Assigning the duration of the NADVTADV timer
     58c:	40 91 07 02 	lds	r20, 0x0207	; 0x800207 <NADV>
     590:	50 91 08 02 	lds	r21, 0x0208	; 0x800208 <NADV+0x1>
     594:	20 91 05 02 	lds	r18, 0x0205	; 0x800205 <durationRx>
     598:	30 91 06 02 	lds	r19, 0x0206	; 0x800206 <durationRx+0x1>
     59c:	42 9f       	mul	r20, r18
     59e:	c0 01       	movw	r24, r0
     5a0:	43 9f       	mul	r20, r19
     5a2:	90 0d       	add	r25, r0
     5a4:	52 9f       	mul	r21, r18
     5a6:	90 0d       	add	r25, r0
     5a8:	11 24       	eor	r1, r1
     5aa:	90 93 60 03 	sts	0x0360, r25	; 0x800360 <NTadv+0x1>
     5ae:	80 93 5f 03 	sts	0x035F, r24	; 0x80035f <NTadv>
			timerDurationTime = NTadv; // The timer has a duration of 15 seconds*NADV for testing (TADV should have a duration of 15min)
     5b2:	90 93 76 03 	sts	0x0376, r25	; 0x800376 <timerDurationTime+0x1>
     5b6:	80 93 75 03 	sts	0x0375, r24	; 0x800375 <timerDurationTime>
			start_timer1(); // The timer restarts its operation
     5ba:	11 d2       	rcall	.+1058   	; 0x9de <start_timer1>
			// STATE CHANGE
			auxTimer = 1;
     5bc:	81 e0       	ldi	r24, 0x01	; 1
     5be:	90 e0       	ldi	r25, 0x00	; 0
     5c0:	90 93 68 03 	sts	0x0368, r25	; 0x800368 <auxTimer+0x1>
     5c4:	80 93 67 03 	sts	0x0367, r24	; 0x800367 <auxTimer>
			temporaryStateIndex = 0; // Variable that stores the next state
     5c8:	10 92 72 03 	sts	0x0372, r1	; 0x800372 <temporaryStateIndex+0x1>
     5cc:	10 92 71 03 	sts	0x0371, r1	; 0x800371 <temporaryStateIndex>
			stateControl = 4; // Exit state
     5d0:	84 e0       	ldi	r24, 0x04	; 4
     5d2:	90 e0       	ldi	r25, 0x00	; 0
     5d4:	90 93 0c 02 	sts	0x020C, r25	; 0x80020c <stateControl+0x1>
     5d8:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <stateControl>
     5dc:	be c0       	rjmp	.+380    	; 0x75a <initialState+0x29a>
		}
		// ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////// //
		// NADVTADV Timer Ends //////////////////////////////////////////////////////////////////////////////////////////////// //
		else if (TimerEnd == 1 && auxTimer == 1) // If the condition indicating that Nadv*Tadv time has ended is met
     5de:	20 91 c9 07 	lds	r18, 0x07C9	; 0x8007c9 <TimerEnd>
     5e2:	30 91 ca 07 	lds	r19, 0x07CA	; 0x8007ca <TimerEnd+0x1>
     5e6:	21 30       	cpi	r18, 0x01	; 1
     5e8:	31 05       	cpc	r19, r1
     5ea:	09 f0       	breq	.+2      	; 0x5ee <initialState+0x12e>
     5ec:	44 c0       	rjmp	.+136    	; 0x676 <initialState+0x1b6>
     5ee:	20 91 67 03 	lds	r18, 0x0367	; 0x800367 <auxTimer>
     5f2:	30 91 68 03 	lds	r19, 0x0368	; 0x800368 <auxTimer+0x1>
     5f6:	21 30       	cpi	r18, 0x01	; 1
     5f8:	31 05       	cpc	r19, r1
     5fa:	01 f5       	brne	.+64     	; 0x63c <initialState+0x17c>
		{
			TimerEnd = 0; auxTimer = 0; // Disable reception of the timer signal since it has ended
     5fc:	10 92 ca 07 	sts	0x07CA, r1	; 0x8007ca <TimerEnd+0x1>
     600:	10 92 c9 07 	sts	0x07C9, r1	; 0x8007c9 <TimerEnd>
     604:	10 92 68 03 	sts	0x0368, r1	; 0x800368 <auxTimer+0x1>
     608:	10 92 67 03 	sts	0x0367, r1	; 0x800367 <auxTimer>
			transmit_sample_frame((uint8_t*)"|     Nadv*Tadv     ||       Finish      |", 42, 1); // Message indicating the end of Nadv*Tadv
     60c:	41 e0       	ldi	r20, 0x01	; 1
     60e:	50 e0       	ldi	r21, 0x00	; 0
     610:	6a e2       	ldi	r22, 0x2A	; 42
     612:	81 e7       	ldi	r24, 0x71	; 113
     614:	92 e0       	ldi	r25, 0x02	; 2
     616:	a6 d2       	rcall	.+1356   	; 0xb64 <transmit_sample_frame>
			updatedGwTable = 1; // |      Finish     |
     618:	81 e0       	ldi	r24, 0x01	; 1
     61a:	90 e0       	ldi	r25, 0x00	; 0
     61c:	90 93 62 03 	sts	0x0362, r25	; 0x800362 <updatedGwTable+0x1>
     620:	80 93 61 03 	sts	0x0361, r24	; 0x800361 <updatedGwTable>
			controlLED(updatedGwTable); // Indicates how a GW table should be updated
     624:	2c df       	rcall	.-424    	; 0x47e <controlLED>
			//No new timers will be added until a new ADVERTISE is received
			temporaryStateIndex = 0; // Variable that stores the next state
     626:	10 92 72 03 	sts	0x0372, r1	; 0x800372 <temporaryStateIndex+0x1>
     62a:	10 92 71 03 	sts	0x0371, r1	; 0x800371 <temporaryStateIndex>
			stateControl = 4; // Exit state
     62e:	84 e0       	ldi	r24, 0x04	; 4
     630:	90 e0       	ldi	r25, 0x00	; 0
     632:	90 93 0c 02 	sts	0x020C, r25	; 0x80020c <stateControl+0x1>
     636:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <stateControl>
     63a:	8f c0       	rjmp	.+286    	; 0x75a <initialState+0x29a>
		}
		// ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////// //
		// TSEARCHGW Timer Ends //////////////////////////////////////////////////////////////////////////////////////////////// //
		else if (TimerEnd == 1 && auxTimer == 2) // If the client does not want to wait for an ADVERTISE, a timer is activated, when it ends, a SEARCHGW will be sent
     63c:	22 30       	cpi	r18, 0x02	; 2
     63e:	31 05       	cpc	r19, r1
     640:	d1 f4       	brne	.+52     	; 0x676 <initialState+0x1b6>
		{
			TimerEnd = 0; auxTimer = 0;
     642:	10 92 ca 07 	sts	0x07CA, r1	; 0x8007ca <TimerEnd+0x1>
     646:	10 92 c9 07 	sts	0x07C9, r1	; 0x8007c9 <TimerEnd>
     64a:	10 92 68 03 	sts	0x0368, r1	; 0x800368 <auxTimer+0x1>
     64e:	10 92 67 03 	sts	0x0367, r1	; 0x800367 <auxTimer>
			transmit_sample_frame((uint8_t*)"|    T_SEARCHGW     ||       Finish      |", 42, 1); // Message indicating the end of Nadv*Tadv
     652:	41 e0       	ldi	r20, 0x01	; 1
     654:	50 e0       	ldi	r21, 0x00	; 0
     656:	6a e2       	ldi	r22, 0x2A	; 42
     658:	8c e9       	ldi	r24, 0x9C	; 156
     65a:	92 e0       	ldi	r25, 0x02	; 2
			delay_ms(200); // Delay for button to work
     65c:	83 d2       	rcall	.+1286   	; 0xb64 <transmit_sample_frame>
     65e:	6b ea       	ldi	r22, 0xAB	; 171
     660:	71 e1       	ldi	r23, 0x11	; 17
     662:	84 e0       	ldi	r24, 0x04	; 4
     664:	90 e0       	ldi	r25, 0x00	; 0
     666:	c2 de       	rcall	.-636    	; 0x3ec <__portable_avr_delay_cycles>
			addTimer = 2; // Move to add a second Timer
     668:	82 e0       	ldi	r24, 0x02	; 2
     66a:	90 e0       	ldi	r25, 0x00	; 0
     66c:	90 93 6c 03 	sts	0x036C, r25	; 0x80036c <addTimer+0x1>
     670:	80 93 6b 03 	sts	0x036B, r24	; 0x80036b <addTimer>
     674:	72 c0       	rjmp	.+228    	; 0x75a <initialState+0x29a>
		}
		else if (addTimer == 2) // TIMER TRTX
     676:	02 97       	sbiw	r24, 0x02	; 2
     678:	d1 f4       	brne	.+52     	; 0x6ae <initialState+0x1ee>
		{
			addTimer = 0; // The timer is only assigned once so the variable returns to 0
     67a:	10 92 6c 03 	sts	0x036C, r1	; 0x80036c <addTimer+0x1>
     67e:	10 92 6b 03 	sts	0x036B, r1	; 0x80036b <addTimer>
			trtx = 2 * trtx;
     682:	80 91 63 03 	lds	r24, 0x0363	; 0x800363 <trtx>
     686:	90 91 64 03 	lds	r25, 0x0364	; 0x800364 <trtx+0x1>
     68a:	88 0f       	add	r24, r24
     68c:	99 1f       	adc	r25, r25
     68e:	90 93 64 03 	sts	0x0364, r25	; 0x800364 <trtx+0x1>
     692:	80 93 63 03 	sts	0x0363, r24	; 0x800363 <trtx>
			timerDurationTime = trtx; // The timer has a duration of 5 seconds for testing (should be random)
     696:	90 93 76 03 	sts	0x0376, r25	; 0x800376 <timerDurationTime+0x1>
     69a:	80 93 75 03 	sts	0x0375, r24	; 0x800375 <timerDurationTime>
			start_timer1(); // The timer starts its operation
     69e:	9f d1       	rcall	.+830    	; 0x9de <start_timer1>
			enableTransmission = 1; // Move to transmit SEARCHGW
     6a0:	81 e0       	ldi	r24, 0x01	; 1
     6a2:	90 e0       	ldi	r25, 0x00	; 0
     6a4:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <enableTransmission+0x1>
     6a8:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <enableTransmission>
     6ac:	56 c0       	rjmp	.+172    	; 0x75a <initialState+0x29a>
		}   // TX SEARCHGW
		else if (enableTransmission == 1) // Proceed to transmit a SEARCHGW as indicated by the value of the variable
     6ae:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <enableTransmission>
     6b2:	90 91 0a 02 	lds	r25, 0x020A	; 0x80020a <enableTransmission+0x1>
     6b6:	01 97       	sbiw	r24, 0x01	; 1
     6b8:	09 f0       	breq	.+2      	; 0x6bc <initialState+0x1fc>
		{
			enableTransmission = -1; // Transmission is disabled because only a SEARCHGW message is needed
     6ba:	4f c0       	rjmp	.+158    	; 0x75a <initialState+0x29a>
     6bc:	8f ef       	ldi	r24, 0xFF	; 255
     6be:	9f ef       	ldi	r25, 0xFF	; 255
     6c0:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <enableTransmission+0x1>
     6c4:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <enableTransmission>
			messageLength = funcionSEARCHGW(SEARCHGW); // Invocation of the function that creates the message to be sent, returns the message length
     6c8:	85 e9       	ldi	r24, 0x95	; 149
     6ca:	97 e0       	ldi	r25, 0x07	; 7
     6cc:	7f de       	rcall	.-770    	; 0x3cc <funcionSEARCHGW>
     6ce:	80 93 6d 03 	sts	0x036D, r24	; 0x80036d <messageLength>
     6d2:	90 93 6e 03 	sts	0x036E, r25	; 0x80036e <messageLength+0x1>
			transmit_sample_frame(SEARCHGW, messageLength, 0); // Message sending
     6d6:	40 e0       	ldi	r20, 0x00	; 0
     6d8:	50 e0       	ldi	r21, 0x00	; 0
     6da:	68 2f       	mov	r22, r24
     6dc:	85 e9       	ldi	r24, 0x95	; 149
     6de:	97 e0       	ldi	r25, 0x07	; 7
     6e0:	41 d2       	rcall	.+1154   	; 0xb64 <transmit_sample_frame>
			messageLength = 0;
     6e2:	10 92 6e 03 	sts	0x036E, r1	; 0x80036e <messageLength+0x1>
     6e6:	10 92 6d 03 	sts	0x036D, r1	; 0x80036d <messageLength>
			// STATE CHANGE
			temporaryStateIndex = 1; // Variable that stores the next state
     6ea:	81 e0       	ldi	r24, 0x01	; 1
     6ec:	90 e0       	ldi	r25, 0x00	; 0
     6ee:	90 93 72 03 	sts	0x0372, r25	; 0x800372 <temporaryStateIndex+0x1>
     6f2:	80 93 71 03 	sts	0x0371, r24	; 0x800371 <temporaryStateIndex>
			stateControl = 4; // Exit state
     6f6:	84 e0       	ldi	r24, 0x04	; 4
     6f8:	90 e0       	ldi	r25, 0x00	; 0
     6fa:	90 93 0c 02 	sts	0x020C, r25	; 0x80020c <stateControl+0x1>
     6fe:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <stateControl>
     702:	2b c0       	rjmp	.+86     	; 0x75a <initialState+0x29a>
		}
		// ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////// //
	}
	else if (stateControl == 4)
     704:	84 30       	cpi	r24, 0x04	; 4
     706:	91 05       	cpc	r25, r1
	{
		stateControl = 5;
     708:	61 f4       	brne	.+24     	; 0x722 <initialState+0x262>
     70a:	85 e0       	ldi	r24, 0x05	; 5
     70c:	90 e0       	ldi	r25, 0x00	; 0
     70e:	90 93 0c 02 	sts	0x020C, r25	; 0x80020c <stateControl+0x1>
     712:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <stateControl>
		delay_ms(1500); // Wait time to appreciate the end of the state
     716:	61 e8       	ldi	r22, 0x81	; 129
     718:	74 e8       	ldi	r23, 0x84	; 132
     71a:	8e e1       	ldi	r24, 0x1E	; 30
     71c:	90 e0       	ldi	r25, 0x00	; 0
     71e:	66 de       	rcall	.-820    	; 0x3ec <__portable_avr_delay_cycles>
	}
	else if (stateControl == 5)
     720:	1c c0       	rjmp	.+56     	; 0x75a <initialState+0x29a>
     722:	05 97       	sbiw	r24, 0x05	; 5
	{
		transmit_sample_frame((uint8_t*)"|       CL_END         ||---------S-00---------|", 48, 1); // State indicator
     724:	d1 f4       	brne	.+52     	; 0x75a <initialState+0x29a>
     726:	41 e0       	ldi	r20, 0x01	; 1
     728:	50 e0       	ldi	r21, 0x00	; 0
     72a:	60 e3       	ldi	r22, 0x30	; 48
     72c:	87 ec       	ldi	r24, 0xC7	; 199
     72e:	92 e0       	ldi	r25, 0x02	; 2
     730:	19 d2       	rcall	.+1074   	; 0xb64 <transmit_sample_frame>
		stateControl = 1; // This control variable is set to one so that the following states can start their operation.
     732:	81 e0       	ldi	r24, 0x01	; 1
     734:	90 e0       	ldi	r25, 0x00	; 0
     736:	90 93 0c 02 	sts	0x020C, r25	; 0x80020c <stateControl+0x1>
     73a:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <stateControl>
		stateIndex = temporaryStateIndex; // State change
     73e:	80 91 71 03 	lds	r24, 0x0371	; 0x800371 <temporaryStateIndex>
     742:	90 91 72 03 	lds	r25, 0x0372	; 0x800372 <temporaryStateIndex+0x1>
     746:	90 93 74 03 	sts	0x0374, r25	; 0x800374 <stateIndex+0x1>
     74a:	80 93 73 03 	sts	0x0373, r24	; 0x800373 <stateIndex>
		temporaryStateIndex = -1; // It is set to -1 to be able to use it later.
     74e:	8f ef       	ldi	r24, 0xFF	; 255
     750:	9f ef       	ldi	r25, 0xFF	; 255
     752:	90 93 72 03 	sts	0x0372, r25	; 0x800372 <temporaryStateIndex+0x1>
     756:	80 93 71 03 	sts	0x0371, r24	; 0x800371 <temporaryStateIndex>
	}
}
     75a:	e0 96       	adiw	r28, 0x30	; 48
     75c:	0f b6       	in	r0, 0x3f	; 63
     75e:	f8 94       	cli
     760:	de bf       	out	0x3e, r29	; 62
     762:	0f be       	out	0x3f, r0	; 63
     764:	cd bf       	out	0x3d, r28	; 61
     766:	df 91       	pop	r29
     768:	cf 91       	pop	r28
     76a:	08 95       	ret

0000076c <state_1>:
// ============================================================================================================================= //
void state_1(void) // RX_GWINFO
{
     76c:	cf 93       	push	r28
     76e:	df 93       	push	r29
     770:	cd b7       	in	r28, 0x3d	; 61
     772:	de b7       	in	r29, 0x3e	; 62
     774:	e0 97       	sbiw	r28, 0x30	; 48
     776:	0f b6       	in	r0, 0x3f	; 63
     778:	f8 94       	cli
     77a:	de bf       	out	0x3e, r29	; 62
     77c:	0f be       	out	0x3f, r0	; 63
     77e:	cd bf       	out	0x3d, r28	; 61
	uint8_t State[48] = "|======RX_GWINFO=======||        S-01          |";
     780:	80 e3       	ldi	r24, 0x30	; 48
     782:	e0 e4       	ldi	r30, 0x40	; 64
     784:	f2 e0       	ldi	r31, 0x02	; 2
     786:	de 01       	movw	r26, r28
     788:	11 96       	adiw	r26, 0x01	; 1
     78a:	01 90       	ld	r0, Z+
     78c:	0d 92       	st	X+, r0
     78e:	8a 95       	dec	r24
     790:	e1 f7       	brne	.-8      	; 0x78a <state_1+0x1e>
	                   //|       CL_END         |
	if (stateControl == 1)
     792:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <stateControl>
     796:	90 91 0c 02 	lds	r25, 0x020C	; 0x80020c <stateControl+0x1>
     79a:	81 30       	cpi	r24, 0x01	; 1
     79c:	91 05       	cpc	r25, r1
     79e:	61 f4       	brne	.+24     	; 0x7b8 <state_1+0x4c>
	{
		stateControl = 2;
     7a0:	82 e0       	ldi	r24, 0x02	; 2
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	90 93 0c 02 	sts	0x020C, r25	; 0x80020c <stateControl+0x1>
     7a8:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <stateControl>
		delay_ms(1500); // Wait time to appreciate the start of the state
     7ac:	61 e8       	ldi	r22, 0x81	; 129
     7ae:	74 e8       	ldi	r23, 0x84	; 132
     7b0:	8e e1       	ldi	r24, 0x1E	; 30
     7b2:	90 e0       	ldi	r25, 0x00	; 0
     7b4:	1b de       	rcall	.-970    	; 0x3ec <__portable_avr_delay_cycles>
     7b6:	da c0       	rjmp	.+436    	; 0x96c <state_1+0x200>
	}
	else if (stateControl == 2)
     7b8:	82 30       	cpi	r24, 0x02	; 2
     7ba:	91 05       	cpc	r25, r1
     7bc:	99 f4       	brne	.+38     	; 0x7e4 <state_1+0x78>
	{
		stateControl = 3;
     7be:	83 e0       	ldi	r24, 0x03	; 3
     7c0:	90 e0       	ldi	r25, 0x00	; 0
     7c2:	90 93 0c 02 	sts	0x020C, r25	; 0x80020c <stateControl+0x1>
     7c6:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <stateControl>
		transmit_sample_frame(State, 48, 1); // State indicator
     7ca:	41 e0       	ldi	r20, 0x01	; 1
     7cc:	50 e0       	ldi	r21, 0x00	; 0
     7ce:	60 e3       	ldi	r22, 0x30	; 48
     7d0:	ce 01       	movw	r24, r28
     7d2:	01 96       	adiw	r24, 0x01	; 1
     7d4:	c7 d1       	rcall	.+910    	; 0xb64 <transmit_sample_frame>
		enableReception = 1;
     7d6:	81 e0       	ldi	r24, 0x01	; 1
     7d8:	90 e0       	ldi	r25, 0x00	; 0
     7da:	90 93 70 03 	sts	0x0370, r25	; 0x800370 <enableReception+0x1>
     7de:	80 93 6f 03 	sts	0x036F, r24	; 0x80036f <enableReception>
     7e2:	c4 c0       	rjmp	.+392    	; 0x96c <state_1+0x200>
	}
	else if (stateControl == 3)
     7e4:	83 30       	cpi	r24, 0x03	; 3
     7e6:	91 05       	cpc	r25, r1
     7e8:	09 f0       	breq	.+2      	; 0x7ec <state_1+0x80>
     7ea:	95 c0       	rjmp	.+298    	; 0x916 <state_1+0x1aa>
		// ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////// //
		// The node will remain in this state until a GWINFO message arrives
		// or the TRTX timer ends.
		// ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////// //
		// RX GWINFO /////////////////////////////////////////////////////////////////////////////////////////////////////////// //
		if (successfulReceptionControl == 2) // The condition is activated when a GWINFO is received
     7ec:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <successfulReceptionControl>
     7f0:	90 91 0e 02 	lds	r25, 0x020E	; 0x80020e <successfulReceptionControl+0x1>
     7f4:	02 97       	sbiw	r24, 0x02	; 2
     7f6:	b9 f4       	brne	.+46     	; 0x826 <state_1+0xba>
		{
			successfulReceptionControl = 0; // Reception is disabled to avoid blocking
     7f8:	10 92 0e 02 	sts	0x020E, r1	; 0x80020e <successfulReceptionControl+0x1>
     7fc:	10 92 0d 02 	sts	0x020D, r1	; 0x80020d <successfulReceptionControl>
			stop_timer1(); // Timer is stopped to avoid inconvenience
     800:	0b d1       	rcall	.+534    	; 0xa18 <stop_timer1>
			updatedGwTable = 2; // GW table update
     802:	82 e0       	ldi	r24, 0x02	; 2
     804:	90 e0       	ldi	r25, 0x00	; 0
     806:	90 93 62 03 	sts	0x0362, r25	; 0x800362 <updatedGwTable+0x1>
     80a:	80 93 61 03 	sts	0x0361, r24	; 0x800361 <updatedGwTable>
			controlLED(updatedGwTable); // Indicates how a GW table should be updated
     80e:	37 de       	rcall	.-914    	; 0x47e <controlLED>
			// STATE CHANGE
			temporaryStateIndex = 0; // State change
     810:	10 92 72 03 	sts	0x0372, r1	; 0x800372 <temporaryStateIndex+0x1>
     814:	10 92 71 03 	sts	0x0371, r1	; 0x800371 <temporaryStateIndex>
			stateControl = 4;
     818:	84 e0       	ldi	r24, 0x04	; 4
     81a:	90 e0       	ldi	r25, 0x00	; 0
     81c:	90 93 0c 02 	sts	0x020C, r25	; 0x80020c <stateControl+0x1>
     820:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <stateControl>
     824:	a3 c0       	rjmp	.+326    	; 0x96c <state_1+0x200>
		}
		// ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////// //
		// TRTX Timer Ends ///////////////////////////////////////////////////////////////////////////////////////////// //
		else if (TimerEnd == 1) // If the condition indicating that the time Tretry has ended is met
     826:	80 91 c9 07 	lds	r24, 0x07C9	; 0x8007c9 <TimerEnd>
     82a:	90 91 ca 07 	lds	r25, 0x07CA	; 0x8007ca <TimerEnd+0x1>
     82e:	01 97       	sbiw	r24, 0x01	; 1
     830:	89 f4       	brne	.+34     	; 0x854 <state_1+0xe8>
		{
			TimerEnd = 0; // Disable reception of the timer signal since it has ended
     832:	10 92 ca 07 	sts	0x07CA, r1	; 0x8007ca <TimerEnd+0x1>
     836:	10 92 c9 07 	sts	0x07C9, r1	; 0x8007c9 <TimerEnd>
			transmit_sample_frame((uint8_t*)"|       T_RTX       ||       Finish      |", 42, 1);
     83a:	41 e0       	ldi	r20, 0x01	; 1
     83c:	50 e0       	ldi	r21, 0x00	; 0
     83e:	6a e2       	ldi	r22, 0x2A	; 42
     840:	88 ef       	ldi	r24, 0xF8	; 248
     842:	92 e0       	ldi	r25, 0x02	; 2
     844:	8f d1       	rcall	.+798    	; 0xb64 <transmit_sample_frame>
			           //:    GFinaliza    : :       Tadv        :// A message is transmitted indicating that the Tadv Timer has ended
			jump = 1; // Move to use a delay
     846:	81 e0       	ldi	r24, 0x01	; 1
     848:	90 e0       	ldi	r25, 0x00	; 0
     84a:	90 93 6a 03 	sts	0x036A, r25	; 0x80036a <jump+0x1>
     84e:	80 93 69 03 	sts	0x0369, r24	; 0x800369 <jump>
     852:	8c c0       	rjmp	.+280    	; 0x96c <state_1+0x200>
		}
		else if (jump == 1) // A delay is added to be able to transmit another message afterwards
     854:	80 91 69 03 	lds	r24, 0x0369	; 0x800369 <jump>
     858:	90 91 6a 03 	lds	r25, 0x036A	; 0x80036a <jump+0x1>
     85c:	01 97       	sbiw	r24, 0x01	; 1
     85e:	81 f4       	brne	.+32     	; 0x880 <state_1+0x114>
		{
			jump = 0;
     860:	10 92 6a 03 	sts	0x036A, r1	; 0x80036a <jump+0x1>
     864:	10 92 69 03 	sts	0x0369, r1	; 0x800369 <jump>
			delay_ms(200); // Delay
     868:	6b ea       	ldi	r22, 0xAB	; 171
     86a:	71 e1       	ldi	r23, 0x11	; 17
     86c:	84 e0       	ldi	r24, 0x04	; 4
     86e:	90 e0       	ldi	r25, 0x00	; 0
     870:	bd dd       	rcall	.-1158   	; 0x3ec <__portable_avr_delay_cycles>
			enableTransmission = 1;
     872:	81 e0       	ldi	r24, 0x01	; 1
     874:	90 e0       	ldi	r25, 0x00	; 0
     876:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <enableTransmission+0x1>
     87a:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <enableTransmission>
     87e:	76 c0       	rjmp	.+236    	; 0x96c <state_1+0x200>
		}
		//RTX SEARCHGW
		else if (enableTransmission == 1) // Once the signal from the timer is received, a MSG SEARCHGW with aT = 0 is transmitted
     880:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <enableTransmission>
     884:	90 91 0a 02 	lds	r25, 0x020A	; 0x80020a <enableTransmission+0x1>
     888:	01 97       	sbiw	r24, 0x01	; 1
     88a:	f1 f4       	brne	.+60     	; 0x8c8 <state_1+0x15c>
		{
			enableTransmission = -1; // Transmission is disabled because only TX a SEARCHGW message is needed
     88c:	8f ef       	ldi	r24, 0xFF	; 255
     88e:	9f ef       	ldi	r25, 0xFF	; 255
     890:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <enableTransmission+0x1>
     894:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <enableTransmission>
			messageLength = funcionSEARCHGW(SEARCHGW); // Invocation of the function that creates the message to be sent, returns the message length
     898:	85 e9       	ldi	r24, 0x95	; 149
     89a:	97 e0       	ldi	r25, 0x07	; 7
     89c:	97 dd       	rcall	.-1234   	; 0x3cc <funcionSEARCHGW>
     89e:	80 93 6d 03 	sts	0x036D, r24	; 0x80036d <messageLength>
     8a2:	90 93 6e 03 	sts	0x036E, r25	; 0x80036e <messageLength+0x1>
			transmit_sample_frame(SEARCHGW, messageLength, 0); // Message sending
     8a6:	40 e0       	ldi	r20, 0x00	; 0
     8a8:	50 e0       	ldi	r21, 0x00	; 0
     8aa:	68 2f       	mov	r22, r24
     8ac:	85 e9       	ldi	r24, 0x95	; 149
     8ae:	97 e0       	ldi	r25, 0x07	; 7
     8b0:	59 d1       	rcall	.+690    	; 0xb64 <transmit_sample_frame>
			messageLength = 0;
     8b2:	10 92 6e 03 	sts	0x036E, r1	; 0x80036e <messageLength+0x1>
     8b6:	10 92 6d 03 	sts	0x036D, r1	; 0x80036d <messageLength>
			addTimer = 3; // Move to restart the timer
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	90 e0       	ldi	r25, 0x00	; 0
     8be:	90 93 6c 03 	sts	0x036C, r25	; 0x80036c <addTimer+0x1>
     8c2:	80 93 6b 03 	sts	0x036B, r24	; 0x80036b <addTimer>
     8c6:	52 c0       	rjmp	.+164    	; 0x96c <state_1+0x200>
		}
		else if (addTimer == 3) // The timer is restarted
     8c8:	80 91 6b 03 	lds	r24, 0x036B	; 0x80036b <addTimer>
     8cc:	90 91 6c 03 	lds	r25, 0x036C	; 0x80036c <addTimer+0x1>
     8d0:	03 97       	sbiw	r24, 0x03	; 3
     8d2:	09 f0       	breq	.+2      	; 0x8d6 <state_1+0x16a>
     8d4:	4b c0       	rjmp	.+150    	; 0x96c <state_1+0x200>
		{
			addTimer = 0;
     8d6:	10 92 6c 03 	sts	0x036C, r1	; 0x80036c <addTimer+0x1>
     8da:	10 92 6b 03 	sts	0x036B, r1	; 0x80036b <addTimer>
			trtx = 2 * trtx;
     8de:	80 91 63 03 	lds	r24, 0x0363	; 0x800363 <trtx>
     8e2:	90 91 64 03 	lds	r25, 0x0364	; 0x800364 <trtx+0x1>
     8e6:	88 0f       	add	r24, r24
     8e8:	99 1f       	adc	r25, r25
     8ea:	90 93 64 03 	sts	0x0364, r25	; 0x800364 <trtx+0x1>
     8ee:	80 93 63 03 	sts	0x0363, r24	; 0x800363 <trtx>
			timerDurationTime = trtx; // The timer has a duration of 10*n seconds for testing (should increase exponentially)
     8f2:	90 93 76 03 	sts	0x0376, r25	; 0x800376 <timerDurationTime+0x1>
     8f6:	80 93 75 03 	sts	0x0375, r24	; 0x800375 <timerDurationTime>
			start_timer1();
     8fa:	71 d0       	rcall	.+226    	; 0x9de <start_timer1>
			// EXIT STATE
			temporaryStateIndex = 1; // State change
     8fc:	81 e0       	ldi	r24, 0x01	; 1
     8fe:	90 e0       	ldi	r25, 0x00	; 0
     900:	90 93 72 03 	sts	0x0372, r25	; 0x800372 <temporaryStateIndex+0x1>
     904:	80 93 71 03 	sts	0x0371, r24	; 0x800371 <temporaryStateIndex>
			stateControl = 4; // Exit the loop
     908:	84 e0       	ldi	r24, 0x04	; 4
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	90 93 0c 02 	sts	0x020C, r25	; 0x80020c <stateControl+0x1>
     910:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <stateControl>
     914:	2b c0       	rjmp	.+86     	; 0x96c <state_1+0x200>
		}
		// ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////// //
	}
	else if (stateControl == 4)
     916:	84 30       	cpi	r24, 0x04	; 4
     918:	91 05       	cpc	r25, r1
     91a:	61 f4       	brne	.+24     	; 0x934 <state_1+0x1c8>
	{
		stateControl = 5;
     91c:	85 e0       	ldi	r24, 0x05	; 5
     91e:	90 e0       	ldi	r25, 0x00	; 0
     920:	90 93 0c 02 	sts	0x020C, r25	; 0x80020c <stateControl+0x1>
     924:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <stateControl>
		delay_ms(1500); // Wait time to appreciate the end of the state
     928:	61 e8       	ldi	r22, 0x81	; 129
     92a:	74 e8       	ldi	r23, 0x84	; 132
     92c:	8e e1       	ldi	r24, 0x1E	; 30
     92e:	90 e0       	ldi	r25, 0x00	; 0
     930:	5d dd       	rcall	.-1350   	; 0x3ec <__portable_avr_delay_cycles>
     932:	1c c0       	rjmp	.+56     	; 0x96c <state_1+0x200>
	}
	else if (stateControl == 5)
     934:	05 97       	sbiw	r24, 0x05	; 5
     936:	d1 f4       	brne	.+52     	; 0x96c <state_1+0x200>
	{
		stateControl = 1;
     938:	81 e0       	ldi	r24, 0x01	; 1
     93a:	90 e0       	ldi	r25, 0x00	; 0
     93c:	90 93 0c 02 	sts	0x020C, r25	; 0x80020c <stateControl+0x1>
     940:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <stateControl>
		transmit_sample_frame((uint8_t*)"|       CL_END         ||---------S-01---------|", 48, 1); // State indicator
     944:	41 e0       	ldi	r20, 0x01	; 1
     946:	50 e0       	ldi	r21, 0x00	; 0
     948:	60 e3       	ldi	r22, 0x30	; 48
     94a:	83 e2       	ldi	r24, 0x23	; 35
     94c:	93 e0       	ldi	r25, 0x03	; 3
     94e:	0a d1       	rcall	.+532    	; 0xb64 <transmit_sample_frame>
		stateIndex = temporaryStateIndex; // State change
     950:	80 91 71 03 	lds	r24, 0x0371	; 0x800371 <temporaryStateIndex>
     954:	90 91 72 03 	lds	r25, 0x0372	; 0x800372 <temporaryStateIndex+0x1>
     958:	90 93 74 03 	sts	0x0374, r25	; 0x800374 <stateIndex+0x1>
     95c:	80 93 73 03 	sts	0x0373, r24	; 0x800373 <stateIndex>
		temporaryStateIndex = -1; // It is set to -1 to be able to use it later.
     960:	8f ef       	ldi	r24, 0xFF	; 255
     962:	9f ef       	ldi	r25, 0xFF	; 255
     964:	90 93 72 03 	sts	0x0372, r25	; 0x800372 <temporaryStateIndex+0x1>
     968:	80 93 71 03 	sts	0x0371, r24	; 0x800371 <temporaryStateIndex>
	}
}
     96c:	e0 96       	adiw	r28, 0x30	; 48
     96e:	0f b6       	in	r0, 0x3f	; 63
     970:	f8 94       	cli
     972:	de bf       	out	0x3e, r29	; 62
     974:	0f be       	out	0x3f, r0	; 63
     976:	cd bf       	out	0x3d, r28	; 61
     978:	df 91       	pop	r29
     97a:	cf 91       	pop	r28
     97c:	08 95       	ret

0000097e <usr_wireless_app_task>:
void state_1(void); // RX_GWINFO

// Function where state functions are executed //
void usr_wireless_app_task(void)
{
	if (random1 == true) // Assignment of timer TSEARCHGW
     97e:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <random1>
     982:	88 23       	and	r24, r24
     984:	c1 f0       	breq	.+48     	; 0x9b6 <usr_wireless_app_task+0x38>
	{
		random1 = false;
     986:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <random1>
		// Assignment of retransmission times
		tini = 5; // tini=rand() % (tsearchgw+1);
     98a:	85 e0       	ldi	r24, 0x05	; 5
     98c:	90 e0       	ldi	r25, 0x00	; 0
     98e:	90 93 66 03 	sts	0x0366, r25	; 0x800366 <tini+0x1>
     992:	80 93 65 03 	sts	0x0365, r24	; 0x800365 <tini>
		trtx = tini;
     996:	90 93 64 03 	sts	0x0364, r25	; 0x800364 <trtx+0x1>
     99a:	80 93 63 03 	sts	0x0363, r24	; 0x800363 <trtx>
		timerDurationTime = tini; // The timer has a duration of 15 seconds*NADV for testing (TADV should have a duration of 15min)
     99e:	90 93 76 03 	sts	0x0376, r25	; 0x800376 <timerDurationTime+0x1>
     9a2:	80 93 75 03 	sts	0x0375, r24	; 0x800375 <timerDurationTime>
		start_timer1(); // The timer starts its operation
     9a6:	1b d0       	rcall	.+54     	; 0x9de <start_timer1>
		auxTimer = 2;
     9a8:	82 e0       	ldi	r24, 0x02	; 2
     9aa:	90 e0       	ldi	r25, 0x00	; 0
     9ac:	90 93 68 03 	sts	0x0368, r25	; 0x800368 <auxTimer+0x1>
     9b0:	80 93 67 03 	sts	0x0367, r24	; 0x800367 <auxTimer>
     9b4:	08 95       	ret
	}
	else if (stateIndex == 0) // DISCOVERY
     9b6:	80 91 73 03 	lds	r24, 0x0373	; 0x800373 <stateIndex>
     9ba:	90 91 74 03 	lds	r25, 0x0374	; 0x800374 <stateIndex+0x1>
     9be:	00 97       	sbiw	r24, 0x00	; 0
	{
		initialState();
     9c0:	11 f4       	brne	.+4      	; 0x9c6 <usr_wireless_app_task+0x48>
     9c2:	7e cd       	rjmp	.-1284   	; 0x4c0 <initialState>
     9c4:	08 95       	ret
	}
	else if (stateIndex == 1) // RX_GWINFO
     9c6:	01 97       	sbiw	r24, 0x01	; 1
	{
		state_1();
     9c8:	09 f4       	brne	.+2      	; 0x9cc <usr_wireless_app_task+0x4e>
     9ca:	d0 ce       	rjmp	.-608    	; 0x76c <state_1>
     9cc:	08 95       	ret

000009ce <app_timer_cb>:
/**
 \brief Callback called once the timer expires
*/
void app_timer_cb(void *parameter)
{
	usr_app_timer_cb(parameter);
     9ce:	07 cd       	rjmp	.-1522   	; 0x3de <usr_app_timer_cb>
     9d0:	08 95       	ret

000009d2 <app_timers_init>:
 * \brief This function initializes the App timers
 * (T_APP_TIMER1 is the only timer added by the project wizard,add extra timers based on the application requirement)
 */
void app_timers_init(void)
{
	if (STATUS_OK != sw_timer_get_id(&T_APP_TIMER1)) {
     9d2:	8b ec       	ldi	r24, 0xCB	; 203
     9d4:	97 e0       	ldi	r25, 0x07	; 7
     9d6:	cd d2       	rcall	.+1434   	; 0xf72 <sw_timer_get_id>
     9d8:	81 11       	cpse	r24, r1
		app_alert();
     9da:	45 c1       	rjmp	.+650    	; 0xc66 <app_alert>
     9dc:	08 95       	ret

000009de <start_timer1>:
     9de:	ef 92       	push	r14
 \brief This function starts a timer T-APP_TIMER with timeout TIMER_DURATION  with callback id app_timer_cb
 * New timers can be added by defeining ex. start_timer2 by adding a new timer id T_APP_TIMER2 and a different call back name based on the requirement ,
 * max no of timers to be added is based on *the  count  TOTAL_NUMBER_OF_TIMERS in conf_common_sw_timer.h
 */
void start_timer1(void)
{
     9e0:	ff 92       	push	r15
     9e2:	0f 93       	push	r16
     9e4:	1f 93       	push	r17
	sw_timer_start(T_APP_TIMER1,TIMER_DURATION,SW_TIMEOUT_RELATIVE,(FUNC_PTR)app_timer_cb,NULL)	;
     9e6:	a0 91 75 03 	lds	r26, 0x0375	; 0x800375 <timerDurationTime>
     9ea:	b0 91 76 03 	lds	r27, 0x0376	; 0x800376 <timerDurationTime+0x1>
     9ee:	20 e4       	ldi	r18, 0x40	; 64
     9f0:	32 e4       	ldi	r19, 0x42	; 66
     9f2:	4f e0       	ldi	r20, 0x0F	; 15
     9f4:	50 e0       	ldi	r21, 0x00	; 0
     9f6:	0e 94 33 19 	call	0x3266	; 0x3266 <__mulshisi3>
     9fa:	ab 01       	movw	r20, r22
     9fc:	bc 01       	movw	r22, r24
     9fe:	e1 2c       	mov	r14, r1
     a00:	f1 2c       	mov	r15, r1
     a02:	07 ee       	ldi	r16, 0xE7	; 231
     a04:	14 e0       	ldi	r17, 0x04	; 4
     a06:	20 e0       	ldi	r18, 0x00	; 0
     a08:	80 91 cb 07 	lds	r24, 0x07CB	; 0x8007cb <T_APP_TIMER1>
     a0c:	bf d2       	rcall	.+1406   	; 0xf8c <sw_timer_start>
}
     a0e:	1f 91       	pop	r17
     a10:	0f 91       	pop	r16
     a12:	ff 90       	pop	r15
     a14:	ef 90       	pop	r14
     a16:	08 95       	ret

00000a18 <stop_timer1>:
 * To add stop timer functions for other timer, add defenitions stop_timer2 with sw_timer_stop(NEW ID) inside it
 */
void stop_timer1(void)
{

	sw_timer_stop(T_APP_TIMER1);
     a18:	80 91 cb 07 	lds	r24, 0x07CB	; 0x8007cb <T_APP_TIMER1>
     a1c:	21 c4       	rjmp	.+2114   	; 0x1260 <sw_timer_stop>
     a1e:	08 95       	ret

00000a20 <transmit_frame>:
		uint8_t src_addr_mode,
		uint8_t msdu_handle,
		uint8_t *payload,
		uint8_t payload_length,
		bool ack_req,csma_mode_t csma_mode ,bool frame_retry)
{
     a20:	4f 92       	push	r4
     a22:	5f 92       	push	r5
     a24:	6f 92       	push	r6
     a26:	7f 92       	push	r7
     a28:	8f 92       	push	r8
     a2a:	af 92       	push	r10
     a2c:	cf 92       	push	r12
     a2e:	ef 92       	push	r14
     a30:	0f 93       	push	r16
     a32:	1f 93       	push	r17
     a34:	cf 93       	push	r28
     a36:	df 93       	push	r29
     a38:	cd b7       	in	r28, 0x3d	; 61
     a3a:	de b7       	in	r29, 0x3e	; 62
	tx_frame_info = (frame_info_t *)storage_buffer;
	/* Get length of current frame. */
	frame_length = (FRAME_OVERHEAD + payload_length); 

	/* Set payload pointer. */     
	frame_ptr = temp_frame_ptr = (uint8_t *)tx_frame_info +
     a3c:	a9 e8       	ldi	r26, 0x89	; 137
     a3e:	b0 e0       	ldi	r27, 0x00	; 0
     a40:	ae 19       	sub	r26, r14
     a42:	b1 09       	sbc	r27, r1
     a44:	fd 01       	movw	r30, r26
     a46:	e7 58       	subi	r30, 0x87	; 135
     a48:	fc 4f       	sbci	r31, 0xFC	; 252
     a4a:	3f 01       	movw	r6, r30

	/*
	* Payload is stored to the end of the buffer avoiding payload
	* copying by TAL.
	*/
	for (i = 0; i < payload_length; i++) {
     a4c:	ee 20       	and	r14, r14
     a4e:	79 f0       	breq	.+30     	; 0xa6e <transmit_frame+0x4e>
     a50:	d8 01       	movw	r26, r16
     a52:	44 24       	eor	r4, r4
     a54:	4a 94       	dec	r4
     a56:	4e 0c       	add	r4, r14
     a58:	51 2c       	mov	r5, r1
     a5a:	9f ef       	ldi	r25, 0xFF	; 255
     a5c:	49 1a       	sub	r4, r25
     a5e:	59 0a       	sbc	r5, r25
     a60:	04 0d       	add	r16, r4
     a62:	15 1d       	adc	r17, r5
	*temp_frame_ptr++ = *(payload + i);
     a64:	9d 91       	ld	r25, X+
     a66:	91 93       	st	Z+, r25

	/*
	* Payload is stored to the end of the buffer avoiding payload
	* copying by TAL.
	*/
	for (i = 0; i < payload_length; i++) {
     a68:	a0 17       	cp	r26, r16
     a6a:	b1 07       	cpc	r27, r17
     a6c:	d9 f7       	brne	.-10     	; 0xa64 <transmit_frame+0x44>
	*temp_frame_ptr++ = *(payload + i);
	}


	/* Source address */
	if (FCF_SHORT_ADDR == src_addr_mode) {
     a6e:	42 30       	cpi	r20, 0x02	; 2
     a70:	61 f4       	brne	.+24     	; 0xa8a <transmit_frame+0x6a>
	uint16_t temp_value,fcf = 0;
	/* Get length of current frame. */

	tx_frame_info = (frame_info_t *)storage_buffer;
	/* Get length of current frame. */
	frame_length = (FRAME_OVERHEAD + payload_length); 
     a72:	3b e0       	ldi	r19, 0x0B	; 11
     a74:	3e 0d       	add	r19, r14
	}


	/* Source address */
	if (FCF_SHORT_ADDR == src_addr_mode) {
	frame_ptr -= SHORT_ADDR_LEN;
     a76:	d3 01       	movw	r26, r6
	convert_16_bit_to_byte_array(tal_pib.ShortAddress, frame_ptr);
     a78:	40 91 15 08 	lds	r20, 0x0815	; 0x800815 <tal_pib+0xc>
     a7c:	50 91 16 08 	lds	r21, 0x0816	; 0x800816 <tal_pib+0xd>
     a80:	5e 93       	st	-X, r21
     a82:	4e 93       	st	-X, r20

	fcf |= FCF_SET_SOURCE_ADDR_MODE(FCF_SHORT_ADDR);
     a84:	40 e0       	ldi	r20, 0x00	; 0
     a86:	50 e8       	ldi	r21, 0x80	; 128
     a88:	26 c0       	rjmp	.+76     	; 0xad6 <transmit_frame+0xb6>
	} else {
	frame_ptr -= EXT_ADDR_LEN;
     a8a:	d3 01       	movw	r26, r6
     a8c:	18 97       	sbiw	r26, 0x08	; 8
	frame_length += FCF_2_SOURCE_ADDR_OFFSET;
     a8e:	31 e1       	ldi	r19, 0x11	; 17
     a90:	3e 0d       	add	r19, r14

	convert_64_bit_to_byte_array(tal_pib.IeeeAddress, frame_ptr);
     a92:	e9 e0       	ldi	r30, 0x09	; 9
     a94:	f8 e0       	ldi	r31, 0x08	; 8
     a96:	90 81       	ld	r25, Z
     a98:	9c 93       	st	X, r25
     a9a:	91 81       	ldd	r25, Z+1	; 0x01
     a9c:	11 96       	adiw	r26, 0x01	; 1
     a9e:	9c 93       	st	X, r25
     aa0:	11 97       	sbiw	r26, 0x01	; 1
     aa2:	92 81       	ldd	r25, Z+2	; 0x02
     aa4:	12 96       	adiw	r26, 0x02	; 2
     aa6:	9c 93       	st	X, r25
     aa8:	12 97       	sbiw	r26, 0x02	; 2
     aaa:	93 81       	ldd	r25, Z+3	; 0x03
     aac:	13 96       	adiw	r26, 0x03	; 3
     aae:	9c 93       	st	X, r25
     ab0:	13 97       	sbiw	r26, 0x03	; 3
     ab2:	94 81       	ldd	r25, Z+4	; 0x04
     ab4:	14 96       	adiw	r26, 0x04	; 4
     ab6:	9c 93       	st	X, r25
     ab8:	14 97       	sbiw	r26, 0x04	; 4
     aba:	95 81       	ldd	r25, Z+5	; 0x05
     abc:	15 96       	adiw	r26, 0x05	; 5
     abe:	9c 93       	st	X, r25
     ac0:	15 97       	sbiw	r26, 0x05	; 5
     ac2:	96 81       	ldd	r25, Z+6	; 0x06
     ac4:	16 96       	adiw	r26, 0x06	; 6
     ac6:	9c 93       	st	X, r25
     ac8:	16 97       	sbiw	r26, 0x06	; 6
     aca:	97 81       	ldd	r25, Z+7	; 0x07
     acc:	17 96       	adiw	r26, 0x07	; 7
     ace:	9c 93       	st	X, r25
     ad0:	17 97       	sbiw	r26, 0x07	; 7

	fcf |= FCF_SET_SOURCE_ADDR_MODE(FCF_LONG_ADDR);
     ad2:	40 e0       	ldi	r20, 0x00	; 0
     ad4:	50 ec       	ldi	r21, 0xC0	; 192
		temp_value = CCPU_ENDIAN_TO_LE16(SRC_PAN_ID);
		convert_16_bit_to_byte_array(temp_value, frame_ptr);
		#endif

	/* Destination address */
	if (FCF_SHORT_ADDR == dst_addr_mode) {
     ad6:	82 30       	cpi	r24, 0x02	; 2
     ad8:	59 f4       	brne	.+22     	; 0xaf0 <transmit_frame+0xd0>
		frame_ptr -= SHORT_ADDR_LEN;
		convert_16_bit_to_byte_array(*((uint16_t *)dst_addr),
     ada:	fb 01       	movw	r30, r22
     adc:	80 81       	ld	r24, Z
     ade:	91 81       	ldd	r25, Z+1	; 0x01
     ae0:	fd 01       	movw	r30, r26
     ae2:	92 93       	st	-Z, r25
     ae4:	82 93       	st	-Z, r24
     ae6:	3f 01       	movw	r6, r30
				frame_ptr);

		fcf |= FCF_SET_DEST_ADDR_MODE(FCF_SHORT_ADDR);
     ae8:	ca 01       	movw	r24, r20
     aea:	80 64       	ori	r24, 0x40	; 64
     aec:	98 60       	ori	r25, 0x08	; 8
     aee:	0f c0       	rjmp	.+30     	; 0xb0e <transmit_frame+0xee>
	} else {
		frame_ptr -= EXT_ADDR_LEN;
     af0:	3d 01       	movw	r6, r26
     af2:	f8 e0       	ldi	r31, 0x08	; 8
     af4:	6f 1a       	sub	r6, r31
     af6:	71 08       	sbc	r7, r1
		frame_length += PL_POS_DST_ADDR_START;
     af8:	3a 5f       	subi	r19, 0xFA	; 250

		convert_64_bit_to_byte_array(*((uint64_t *)dst_addr),
     afa:	88 e0       	ldi	r24, 0x08	; 8
     afc:	fb 01       	movw	r30, r22
     afe:	d3 01       	movw	r26, r6
     b00:	01 90       	ld	r0, Z+
     b02:	0d 92       	st	X+, r0
     b04:	8a 95       	dec	r24
     b06:	e1 f7       	brne	.-8      	; 0xb00 <transmit_frame+0xe0>
				frame_ptr);

		fcf |= FCF_SET_DEST_ADDR_MODE(FCF_LONG_ADDR);
     b08:	ca 01       	movw	r24, r20
     b0a:	80 64       	ori	r24, 0x40	; 64
     b0c:	9c 60       	ori	r25, 0x0C	; 12


	/* Destination PAN-Id */
	temp_value = CCPU_ENDIAN_TO_LE16(DST_PAN_ID);
	frame_ptr -= PAN_ID_LEN;
	convert_16_bit_to_byte_array(temp_value, frame_ptr);
     b0e:	4e ef       	ldi	r20, 0xFE	; 254
     b10:	5a ec       	ldi	r21, 0xCA	; 202
     b12:	f3 01       	movw	r30, r6
     b14:	32 97       	sbiw	r30, 0x02	; 2
     b16:	51 83       	std	Z+1, r21	; 0x01
     b18:	40 83       	st	Z, r20

	/* Set DSN. */
	frame_ptr--;
	*frame_ptr = msdu_handle;
     b1a:	31 97       	sbiw	r30, 0x01	; 1
     b1c:	20 83       	st	Z, r18

	/* Set the FCF. */
	fcf |= FCF_FRAMETYPE_DATA;
	if (ack_req) {
     b1e:	c1 10       	cpse	r12, r1
     b20:	02 c0       	rjmp	.+4      	; 0xb26 <transmit_frame+0x106>
	/* Set DSN. */
	frame_ptr--;
	*frame_ptr = msdu_handle;

	/* Set the FCF. */
	fcf |= FCF_FRAMETYPE_DATA;
     b22:	81 60       	ori	r24, 0x01	; 1
     b24:	01 c0       	rjmp	.+2      	; 0xb28 <transmit_frame+0x108>
	if (ack_req) {
	fcf |= FCF_ACK_REQUEST;
     b26:	81 62       	ori	r24, 0x21	; 33
	}

	frame_ptr -= FCF_LEN;
	convert_16_bit_to_byte_array(CCPU_ENDIAN_TO_LE16(fcf), frame_ptr);
     b28:	f3 01       	movw	r30, r6
     b2a:	35 97       	sbiw	r30, 0x05	; 5
     b2c:	91 83       	std	Z+1, r25	; 0x01
     b2e:	80 83       	st	Z, r24

	/* First element shall be length of PHY frame. */
	frame_ptr--;
	*frame_ptr = frame_length;
     b30:	d3 01       	movw	r26, r6
     b32:	16 97       	sbiw	r26, 0x06	; 6
     b34:	3c 93       	st	X, r19

	/* Finished building of frame. */
	tx_frame_info->mpdu = frame_ptr;
     b36:	b0 93 81 03 	sts	0x0381, r27	; 0x800381 <storage_buffer+0x8>
     b3a:	a0 93 80 03 	sts	0x0380, r26	; 0x800380 <storage_buffer+0x7>

	return(tal_tx_frame(tx_frame_info, csma_mode, frame_retry));
     b3e:	48 2d       	mov	r20, r8
     b40:	6a 2d       	mov	r22, r10
     b42:	89 e7       	ldi	r24, 0x79	; 121
     b44:	93 e0       	ldi	r25, 0x03	; 3
     b46:	0e 94 78 13 	call	0x26f0	; 0x26f0 <tal_tx_frame>
}
     b4a:	df 91       	pop	r29
     b4c:	cf 91       	pop	r28
     b4e:	1f 91       	pop	r17
     b50:	0f 91       	pop	r16
     b52:	ef 90       	pop	r14
     b54:	cf 90       	pop	r12
     b56:	af 90       	pop	r10
     b58:	8f 90       	pop	r8
     b5a:	7f 90       	pop	r7
     b5c:	6f 90       	pop	r6
     b5e:	5f 90       	pop	r5
     b60:	4f 90       	pop	r4
     b62:	08 95       	ret

00000b64 <transmit_sample_frame>:
 * \brief This function transmits a sample data frame 
 * \param payload address of the payload to be transmitted
 * \payload_length Length of the payload to be trasnmitted *
 */
void transmit_sample_frame(uint8_t* payload,uint8_t payload_length,int selecDirec) 
{
     b64:	8f 92       	push	r8
     b66:	af 92       	push	r10
     b68:	cf 92       	push	r12
     b6a:	ef 92       	push	r14
     b6c:	0f 93       	push	r16
     b6e:	1f 93       	push	r17
     b70:	cf 93       	push	r28
     b72:	df 93       	push	r29
     b74:	1f 92       	push	r1
     b76:	1f 92       	push	r1
     b78:	cd b7       	in	r28, 0x3d	; 61
     b7a:	de b7       	in	r29, 0x3e	; 62
	static uint16_t seq_num = 0;   
	bool ack_req = ACK_REQ;
	bool frame_retry = FRAME_RETRY;
	csma_mode_t csma_mode = CSMA_MODE;
	uint16_t dst_addr;
	if (selecDirec==0)
     b7c:	41 15       	cp	r20, r1
     b7e:	51 05       	cpc	r21, r1
     b80:	29 f4       	brne	.+10     	; 0xb8c <transmit_sample_frame+0x28>
	{
		dst_addr = CCPU_ENDIAN_TO_LE16((uint16_t)DST_ADDR);
     b82:	23 e0       	ldi	r18, 0x03	; 3
     b84:	30 e0       	ldi	r19, 0x00	; 0
     b86:	3a 83       	std	Y+2, r19	; 0x02
     b88:	29 83       	std	Y+1, r18	; 0x01
     b8a:	07 c0       	rjmp	.+14     	; 0xb9a <transmit_sample_frame+0x36>
	}
	else if (selecDirec==1)
     b8c:	41 30       	cpi	r20, 0x01	; 1
     b8e:	51 05       	cpc	r21, r1
     b90:	21 f4       	brne	.+8      	; 0xb9a <transmit_sample_frame+0x36>
	{
		dst_addr = CCPU_ENDIAN_TO_LE16((uint16_t)0xC11E);
     b92:	2e e1       	ldi	r18, 0x1E	; 30
     b94:	31 ec       	ldi	r19, 0xC1	; 193
     b96:	3a 83       	std	Y+2, r19	; 0x02
     b98:	29 83       	std	Y+1, r18	; 0x01
	}
	transmit_frame(
		FCF_SHORT_ADDR,
		(uint8_t*)&dst_addr,
		FCF_SHORT_ADDR,
		seq_num++,
     b9a:	20 91 77 03 	lds	r18, 0x0377	; 0x800377 <seq_num.3033>
     b9e:	30 91 78 03 	lds	r19, 0x0378	; 0x800378 <seq_num.3033+0x1>
     ba2:	a9 01       	movw	r20, r18
     ba4:	4f 5f       	subi	r20, 0xFF	; 255
     ba6:	5f 4f       	sbci	r21, 0xFF	; 255
     ba8:	50 93 78 03 	sts	0x0378, r21	; 0x800378 <seq_num.3033+0x1>
     bac:	40 93 77 03 	sts	0x0377, r20	; 0x800377 <seq_num.3033>
	}
	else if (selecDirec==1)
	{
		dst_addr = CCPU_ENDIAN_TO_LE16((uint16_t)0xC11E);
	}
	transmit_frame(
     bb0:	81 2c       	mov	r8, r1
     bb2:	68 94       	set
     bb4:	aa 24       	eor	r10, r10
     bb6:	a1 f8       	bld	r10, 1
     bb8:	c1 2c       	mov	r12, r1
     bba:	e6 2e       	mov	r14, r22
     bbc:	8c 01       	movw	r16, r24
     bbe:	42 e0       	ldi	r20, 0x02	; 2
     bc0:	be 01       	movw	r22, r28
     bc2:	6f 5f       	subi	r22, 0xFF	; 255
     bc4:	7f 4f       	sbci	r23, 0xFF	; 255
     bc6:	82 e0       	ldi	r24, 0x02	; 2
     bc8:	2b df       	rcall	.-426    	; 0xa20 <transmit_frame>
		payload_length,
		ack_req,
		csma_mode,
		frame_retry);

}
     bca:	0f 90       	pop	r0
     bcc:	0f 90       	pop	r0
     bce:	df 91       	pop	r29
     bd0:	cf 91       	pop	r28
     bd2:	1f 91       	pop	r17
     bd4:	0f 91       	pop	r16
     bd6:	ef 90       	pop	r14
     bd8:	cf 90       	pop	r12
     bda:	af 90       	pop	r10
     bdc:	8f 90       	pop	r8
     bde:	08 95       	ret

00000be0 <init_data_reception>:
		   bool mode = true;
		   tal_rxaack_prom_mode_ctrl(true);
		   tal_pib_set(macPromiscuousMode, (pib_value_t *)&mode);
       #endif
       /*RX_AACK_ON Mode is enabled if Promiscuous Mode is not used,else RX is switched on in RX_ON Mode*/
       tal_rx_enable(PHY_RX_ON); 
     be0:	86 e0       	ldi	r24, 0x06	; 6
     be2:	0c 94 a5 12 	jmp	0x254a	; 0x254a <tal_rx_enable>
     be6:	08 95       	ret

00000be8 <wireless_init>:

/**
 * \brief This Function initializes the Wireless Module and board components i.e clock,irq etc
 */
void wireless_init(void)
{
     be8:	cf 93       	push	r28
     bea:	df 93       	push	r29
     bec:	00 d0       	rcall	.+0      	; 0xbee <wireless_init+0x6>
     bee:	00 d0       	rcall	.+0      	; 0xbf0 <wireless_init+0x8>
     bf0:	cd b7       	in	r28, 0x3d	; 61
     bf2:	de b7       	in	r29, 0x3e	; 62
	/*Initialize IRQ*/
	irq_initialize_vectors();

  sysclk_init();
     bf4:	47 d0       	rcall	.+142    	; 0xc84 <sysclk_init>

	/* Initialize the board.
	 * The board-specific conf_board.h file contains the configuration of
	 * the board initialization.
	 */
	board_init();
     bf6:	38 d0       	rcall	.+112    	; 0xc68 <board_init>


	/*Initialize the Stack SW Timer*/
	sw_timer_init();
     bf8:	37 d4       	rcall	.+2158   	; 0x1468 <sw_timer_init>
     bfa:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <tal_init>
	
	/*Initialize the TAL Layer*/
	if(tal_init()!= MAC_SUCCESS)
     bfe:	81 11       	cpse	r24, r1
     c00:	ff cf       	rjmp	.-2      	; 0xc00 <wireless_init+0x18>
     c02:	78 94       	sei
	{
	//Error in Initializing the TAL Layer
	app_alert();	
	}
	cpu_irq_enable();
     c04:	84 e0       	ldi	r24, 0x04	; 4
	
	uint16_t src_addr = CCPU_ENDIAN_TO_LE16(SRC_ADDR);
     c06:	90 e0       	ldi	r25, 0x00	; 0
     c08:	9a 83       	std	Y+2, r25	; 0x02
     c0a:	89 83       	std	Y+1, r24	; 0x01
     c0c:	8e ef       	ldi	r24, 0xFE	; 254
	uint16_t pan_id = CCPU_ENDIAN_TO_LE16(SRC_PAN_ID);
     c0e:	9a ec       	ldi	r25, 0xCA	; 202
     c10:	9c 83       	std	Y+4, r25	; 0x04
     c12:	8b 83       	std	Y+3, r24	; 0x03
     c14:	8b e0       	ldi	r24, 0x0B	; 11
	uint8_t channel = CHANNEL_TRANSMIT_RECEIVE;
     c16:	8d 83       	std	Y+5, r24	; 0x05
     c18:	1e 82       	std	Y+6, r1	; 0x06
	uint8_t channel_page = CHANNEL_PAGE_TRANSMIT_RECEIVE;
     c1a:	be 01       	movw	r22, r28
	
	/* Set Default address. */
	tal_pib_set(macShortAddress, (pib_value_t *)&src_addr);
     c1c:	6f 5f       	subi	r22, 0xFF	; 255
     c1e:	7f 4f       	sbci	r23, 0xFF	; 255
     c20:	83 e5       	ldi	r24, 0x53	; 83
     c22:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <tal_pib_set>
     c26:	be 01       	movw	r22, r28

	/* Set PAN ID. */
	tal_pib_set(macPANId, (pib_value_t *)&pan_id);
     c28:	6d 5f       	subi	r22, 0xFD	; 253
     c2a:	7f 4f       	sbci	r23, 0xFF	; 255
     c2c:	80 e5       	ldi	r24, 0x50	; 80
     c2e:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <tal_pib_set>
     c32:	be 01       	movw	r22, r28

	/* Set channel. */ /* Channel 11  is set as default in tal_init() */
	tal_pib_set(phyCurrentChannel, (pib_value_t *)&channel);
     c34:	6b 5f       	subi	r22, 0xFB	; 251
     c36:	7f 4f       	sbci	r23, 0xFF	; 255
     c38:	80 e0       	ldi	r24, 0x00	; 0
     c3a:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <tal_pib_set>
     c3e:	be 01       	movw	r22, r28
	
	/* Set Channel Page */ /* Channel Page 0  is set as default in tal_init() */
	tal_pib_set(phyCurrentPage,(pib_value_t *)&channel_page);
     c40:	6a 5f       	subi	r22, 0xFA	; 250
     c42:	7f 4f       	sbci	r23, 0xFF	; 255
     c44:	84 e0       	ldi	r24, 0x04	; 4
     c46:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <tal_pib_set>
     c4a:	62 e0       	ldi	r22, 0x02	; 2
    {
	    tal_ant_div_config(ANT_DIVERSITY_ENABLE,ANTENNA_DEFAULT);
    }
    else
    {
	    tal_ant_div_config(ANT_DIVERSITY_DISABLE,ANT_SELECT); 
     c4c:	80 e0       	ldi	r24, 0x00	; 0
     c4e:	0e 94 b4 13 	call	0x2768	; 0x2768 <tal_ant_div_config>
    }
    #endif


	init_data_reception();
     c52:	c6 df       	rcall	.-116    	; 0xbe0 <init_data_reception>
     c54:	26 96       	adiw	r28, 0x06	; 6

}
     c56:	0f b6       	in	r0, 0x3f	; 63
     c58:	f8 94       	cli
     c5a:	de bf       	out	0x3e, r29	; 62
     c5c:	0f be       	out	0x3f, r0	; 63
     c5e:	cd bf       	out	0x3d, r28	; 61
     c60:	df 91       	pop	r29
     c62:	cf 91       	pop	r28
     c64:	08 95       	ret

00000c66 <app_alert>:
     c66:	ff cf       	rjmp	.-2      	; 0xc66 <app_alert>

00000c68 <board_init>:
			*((uint8_t *)port + 2) &= ~pin_mask;
		}

		*((uint8_t *)port + 1) |= pin_mask;
	} else {
		*((uint8_t *)port + 1) &= ~pin_mask;
     c68:	8d b1       	in	r24, 0x0d	; 13
     c6a:	8e 7f       	andi	r24, 0xFE	; 254
		if (flags & IOPORT_PULL_UP) {
			*((uint8_t *)port + 2) |= pin_mask;
     c6c:	9e b1       	in	r25, 0x0e	; 14
		port_pin_flags_t flags)
{
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
		if (flags & IOPORT_INIT_HIGH) {
			*((uint8_t *)port + 2) |= pin_mask;
     c6e:	5e 9a       	sbi	0x0b, 6	; 11
		} else {
			*((uint8_t *)port + 2) &= ~pin_mask;
		}

		*((uint8_t *)port + 1) |= pin_mask;
     c70:	56 9a       	sbi	0x0a, 6	; 10
		port_pin_flags_t flags)
{
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
		if (flags & IOPORT_INIT_HIGH) {
			*((uint8_t *)port + 2) |= pin_mask;
     c72:	a2 9a       	sbi	0x14, 2	; 20
		} else {
			*((uint8_t *)port + 2) &= ~pin_mask;
		}

		*((uint8_t *)port + 1) |= pin_mask;
     c74:	9a 9a       	sbi	0x13, 2	; 19
		port_pin_flags_t flags)
{
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
		if (flags & IOPORT_INIT_HIGH) {
			*((uint8_t *)port + 2) |= pin_mask;
     c76:	95 60       	ori	r25, 0x05	; 5
     c78:	9e b9       	out	0x0e, r25	; 14
		} else {
			*((uint8_t *)port + 2) &= ~pin_mask;
		}

		*((uint8_t *)port + 1) |= pin_mask;
     c7a:	84 60       	ori	r24, 0x04	; 4
     c7c:	8d b9       	out	0x0d, r24	; 13
     c7e:	08 95       	ret

00000c80 <modules_init>:
/**
 * \brief Initializes the modules added by the Project Wizard
 */
void modules_init(void)
{
	    app_timers_init();
     c80:	a8 ce       	rjmp	.-688    	; 0x9d2 <app_timers_init>
     c82:	08 95       	ret

00000c84 <sysclk_init>:

/**
 *  Function to initialize the clock and disable clock for not required modules.
 */
void sysclk_init(void)
{
     c84:	cf 93       	push	r28
     c86:	df 93       	push	r29
     c88:	1f 92       	push	r1
     c8a:	cd b7       	in	r28, 0x3d	; 61
     c8c:	de b7       	in	r29, 0x3e	; 62
	/* Turn off all peripheral clocks that can be turned off.
	 * The debugWIRE system of some devices that shares system clock with the SPI module.
	 * Thus the PRSPI bit in the PRR register must not be set when debugging.
	 */
	for (i = 0; i < NUMBER_OF_POWER_REG; i++) {
		*(reg++) = 0xFF;
     c8e:	8f ef       	ldi	r24, 0xFF	; 255
     c90:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7c0064>
     c94:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__TEXT_REGION_LENGTH__+0x7c0065>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     c98:	8f b7       	in	r24, 0x3f	; 63
     c9a:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     c9c:	f8 94       	cli
	return flags;
     c9e:	89 81       	ldd	r24, Y+1	; 0x01
static inline void sysclk_set_prescalers(uint8_t psdiv)
{
#if !MEGA_UNSPECIFIED
	irqflags_t flags = cpu_irq_save();

	ASM(
     ca0:	5f 93       	push	r21
     ca2:	50 e8       	ldi	r21, 0x80	; 128
     ca4:	50 93 61 00 	sts	0x0061, r21	; 0x800061 <__TEXT_REGION_LENGTH__+0x7c0061>
     ca8:	50 e0       	ldi	r21, 0x00	; 0
     caa:	50 93 61 00 	sts	0x0061, r21	; 0x800061 <__TEXT_REGION_LENGTH__+0x7c0061>
     cae:	5f 91       	pop	r21
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     cb0:	8f bf       	out	0x3f, r24	; 63
	if ((CONFIG_SYSCLK_PSDIV != SYSCLK_PSDIV_8) ||
			(SYSCLK_PSDIV_8 != CLKPR)) {
		sysclk_set_prescalers(CONFIG_SYSCLK_PSDIV);
	}
#endif
}
     cb2:	0f 90       	pop	r0
     cb4:	df 91       	pop	r29
     cb6:	cf 91       	pop	r28
     cb8:	08 95       	ret

00000cba <sysclk_enable_module>:
 * \param port ID of the port to which the module is connected (one of
 * the \c power_red_id *definitions).
 * \param id The ID (bitmask) of the peripheral module to be enabled.
 */
void sysclk_enable_module(enum power_red_id port, uint8_t id)
{
     cba:	cf 93       	push	r28
     cbc:	df 93       	push	r29
     cbe:	1f 92       	push	r1
     cc0:	cd b7       	in	r28, 0x3d	; 61
     cc2:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     cc4:	9f b7       	in	r25, 0x3f	; 63
     cc6:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
     cc8:	f8 94       	cli
	return flags;
     cca:	99 81       	ldd	r25, Y+1	; 0x01
#if !MEGA_UNSPECIFIED && !MEGA_XX
	uint8_t *reg = (uint8_t *)&(POWER_REG_ADD);
	irqflags_t flags = cpu_irq_save();

	if (port < NUMBER_OF_POWER_REG) {
     ccc:	82 30       	cpi	r24, 0x02	; 2
     cce:	40 f4       	brcc	.+16     	; 0xce0 <sysclk_enable_module+0x26>
		*(reg + port)  &= ~id;
     cd0:	e8 2f       	mov	r30, r24
     cd2:	f0 e0       	ldi	r31, 0x00	; 0
     cd4:	ec 59       	subi	r30, 0x9C	; 156
     cd6:	ff 4f       	sbci	r31, 0xFF	; 255
     cd8:	60 95       	com	r22
     cda:	80 81       	ld	r24, Z
     cdc:	68 23       	and	r22, r24
     cde:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     ce0:	9f bf       	out	0x3f, r25	; 63
	}
	cpu_irq_restore(flags);
#endif
}
     ce2:	0f 90       	pop	r0
     ce4:	df 91       	pop	r29
     ce6:	cf 91       	pop	r28
     ce8:	08 95       	ret

00000cea <sysclk_disable_module>:
 * \param port ID of the port to which the module is connected (one of
 * the \c power_red_id *definitions).
 * \param id The ID (bit mask) of the peripheral module to be disabled.
 */
void sysclk_disable_module( enum power_red_id port, uint8_t id)
{
     cea:	cf 93       	push	r28
     cec:	df 93       	push	r29
     cee:	1f 92       	push	r1
     cf0:	cd b7       	in	r28, 0x3d	; 61
     cf2:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     cf4:	9f b7       	in	r25, 0x3f	; 63
     cf6:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
     cf8:	f8 94       	cli
	return flags;
     cfa:	99 81       	ldd	r25, Y+1	; 0x01
#if !MEGA_UNSPECIFIED && !MEGA_XX
	uint8_t *reg = (uint8_t *)&(POWER_REG_ADD);
	irqflags_t flags = cpu_irq_save();
	if (port < NUMBER_OF_POWER_REG) {
     cfc:	82 30       	cpi	r24, 0x02	; 2
     cfe:	38 f4       	brcc	.+14     	; 0xd0e <sysclk_disable_module+0x24>
		*(reg + port) |= id;
     d00:	e8 2f       	mov	r30, r24
     d02:	f0 e0       	ldi	r31, 0x00	; 0
     d04:	ec 59       	subi	r30, 0x9C	; 156
     d06:	ff 4f       	sbci	r31, 0xFF	; 255
     d08:	80 81       	ld	r24, Z
     d0a:	68 2b       	or	r22, r24
     d0c:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     d0e:	9f bf       	out	0x3f, r25	; 63
	}
	cpu_irq_restore(flags);
#endif
}
     d10:	0f 90       	pop	r0
     d12:	df 91       	pop	r29
     d14:	cf 91       	pop	r28
     d16:	08 95       	ret

00000d18 <hw_expiry_cb>:
uint32_t sw_timer_next_timer_expiry_duration(void)
{
	return ((NO_TIMER ==
	       running_timer_queue_head) ? false : (sw_timer_get_residual_time(
	       running_timer_queue_head)));
}
     d18:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <running_timers>
     d1c:	88 23       	and	r24, r24
     d1e:	19 f0       	breq	.+6      	; 0xd26 <hw_expiry_cb+0xe>
     d20:	81 e0       	ldi	r24, 0x01	; 1
     d22:	80 93 00 08 	sts	0x0800, r24	; 0x800800 <timer_trigger>
     d26:	08 95       	ret

00000d28 <hw_overflow_cb>:
     d28:	1f 93       	push	r17
     d2a:	cf 93       	push	r28
     d2c:	df 93       	push	r29
     d2e:	1f 92       	push	r1
     d30:	cd b7       	in	r28, 0x3d	; 61
     d32:	de b7       	in	r29, 0x3e	; 62
     d34:	80 91 cc 07 	lds	r24, 0x07CC	; 0x8007cc <sys_time>
     d38:	90 91 cd 07 	lds	r25, 0x07CD	; 0x8007cd <sys_time+0x1>
     d3c:	01 96       	adiw	r24, 0x01	; 1
     d3e:	90 93 cd 07 	sts	0x07CD, r25	; 0x8007cd <sys_time+0x1>
     d42:	80 93 cc 07 	sts	0x07CC, r24	; 0x8007cc <sys_time>
     d46:	8f b7       	in	r24, 0x3f	; 63
     d48:	89 83       	std	Y+1, r24	; 0x01
     d4a:	f8 94       	cli
     d4c:	19 81       	ldd	r17, Y+1	; 0x01
     d4e:	80 91 07 04 	lds	r24, 0x0407	; 0x800407 <running_timer_queue_head>
     d52:	8f 3f       	cpi	r24, 0xFF	; 255
     d54:	e9 f1       	breq	.+122    	; 0xdd0 <hw_overflow_cb+0xa8>
     d56:	90 e0       	ldi	r25, 0x00	; 0
     d58:	fc 01       	movw	r30, r24
     d5a:	ee 0f       	add	r30, r30
     d5c:	ff 1f       	adc	r31, r31
     d5e:	9c 01       	movw	r18, r24
     d60:	22 0f       	add	r18, r18
     d62:	33 1f       	adc	r19, r19
     d64:	22 0f       	add	r18, r18
     d66:	33 1f       	adc	r19, r19
     d68:	22 0f       	add	r18, r18
     d6a:	33 1f       	adc	r19, r19
     d6c:	e2 0f       	add	r30, r18
     d6e:	f3 1f       	adc	r31, r19
     d70:	e2 53       	subi	r30, 0x32	; 50
     d72:	f8 4f       	sbci	r31, 0xF8	; 248
     d74:	21 85       	ldd	r18, Z+9	; 0x09
     d76:	21 11       	cpse	r18, r1
     d78:	2b c0       	rjmp	.+86     	; 0xdd0 <hw_overflow_cb+0xa8>
     d7a:	fc 01       	movw	r30, r24
     d7c:	ee 0f       	add	r30, r30
     d7e:	ff 1f       	adc	r31, r31
     d80:	88 0f       	add	r24, r24
     d82:	99 1f       	adc	r25, r25
     d84:	88 0f       	add	r24, r24
     d86:	99 1f       	adc	r25, r25
     d88:	88 0f       	add	r24, r24
     d8a:	99 1f       	adc	r25, r25
     d8c:	e8 0f       	add	r30, r24
     d8e:	f9 1f       	adc	r31, r25
     d90:	e2 53       	subi	r30, 0x32	; 50
     d92:	f8 4f       	sbci	r31, 0xF8	; 248
     d94:	80 81       	ld	r24, Z
     d96:	91 81       	ldd	r25, Z+1	; 0x01
     d98:	a2 81       	ldd	r26, Z+2	; 0x02
     d9a:	b3 81       	ldd	r27, Z+3	; 0x03
     d9c:	20 91 cc 07 	lds	r18, 0x07CC	; 0x8007cc <sys_time>
     da0:	30 91 cd 07 	lds	r19, 0x07CD	; 0x8007cd <sys_time+0x1>
     da4:	2a 17       	cp	r18, r26
     da6:	3b 07       	cpc	r19, r27
     da8:	99 f4       	brne	.+38     	; 0xdd0 <hw_overflow_cb+0xa8>
     daa:	48 da       	rcall	.-2928   	; 0x23c <common_tc_delay>
     dac:	80 91 07 04 	lds	r24, 0x0407	; 0x800407 <running_timer_queue_head>
     db0:	90 e0       	ldi	r25, 0x00	; 0
     db2:	fc 01       	movw	r30, r24
     db4:	ee 0f       	add	r30, r30
     db6:	ff 1f       	adc	r31, r31
     db8:	88 0f       	add	r24, r24
     dba:	99 1f       	adc	r25, r25
     dbc:	88 0f       	add	r24, r24
     dbe:	99 1f       	adc	r25, r25
     dc0:	88 0f       	add	r24, r24
     dc2:	99 1f       	adc	r25, r25
     dc4:	e8 0f       	add	r30, r24
     dc6:	f9 1f       	adc	r31, r25
     dc8:	e2 53       	subi	r30, 0x32	; 50
     dca:	f8 4f       	sbci	r31, 0xF8	; 248
     dcc:	81 e0       	ldi	r24, 0x01	; 1
     dce:	81 87       	std	Z+9, r24	; 0x09
     dd0:	1f bf       	out	0x3f, r17	; 63
     dd2:	0f 90       	pop	r0
     dd4:	df 91       	pop	r29
     dd6:	cf 91       	pop	r28
     dd8:	1f 91       	pop	r17
     dda:	08 95       	ret

00000ddc <load_hw_timer>:
     ddc:	0f 93       	push	r16
     dde:	1f 93       	push	r17
     de0:	cf 93       	push	r28
     de2:	df 93       	push	r29
     de4:	c8 2f       	mov	r28, r24
     de6:	8f 3f       	cpi	r24, 0xFF	; 255
     de8:	09 f4       	brne	.+2      	; 0xdec <load_hw_timer+0x10>
     dea:	60 c0       	rjmp	.+192    	; 0xeac <load_hw_timer+0xd0>
     dec:	00 91 cc 07 	lds	r16, 0x07CC	; 0x8007cc <sys_time>
     df0:	10 91 cd 07 	lds	r17, 0x07CD	; 0x8007cd <sys_time+0x1>
     df4:	e0 d9       	rcall	.-3136   	; 0x1b6 <common_tc_read_count>
     df6:	40 91 cc 07 	lds	r20, 0x07CC	; 0x8007cc <sys_time>
     dfa:	50 91 cd 07 	lds	r21, 0x07CD	; 0x8007cd <sys_time+0x1>
     dfe:	04 17       	cp	r16, r20
     e00:	15 07       	cpc	r17, r21
     e02:	a1 f7       	brne	.-24     	; 0xdec <load_hw_timer+0x10>
     e04:	d0 e0       	ldi	r29, 0x00	; 0
     e06:	60 e0       	ldi	r22, 0x00	; 0
     e08:	70 e0       	ldi	r23, 0x00	; 0
     e0a:	fe 01       	movw	r30, r28
     e0c:	ee 0f       	add	r30, r30
     e0e:	ff 1f       	adc	r31, r31
     e10:	9e 01       	movw	r18, r28
     e12:	22 0f       	add	r18, r18
     e14:	33 1f       	adc	r19, r19
     e16:	22 0f       	add	r18, r18
     e18:	33 1f       	adc	r19, r19
     e1a:	22 0f       	add	r18, r18
     e1c:	33 1f       	adc	r19, r19
     e1e:	e2 0f       	add	r30, r18
     e20:	f3 1f       	adc	r31, r19
     e22:	e2 53       	subi	r30, 0x32	; 50
     e24:	f8 4f       	sbci	r31, 0xF8	; 248
     e26:	ba 01       	movw	r22, r20
     e28:	55 27       	eor	r21, r21
     e2a:	44 27       	eor	r20, r20
     e2c:	a0 e0       	ldi	r26, 0x00	; 0
     e2e:	b0 e0       	ldi	r27, 0x00	; 0
     e30:	48 2b       	or	r20, r24
     e32:	59 2b       	or	r21, r25
     e34:	6a 2b       	or	r22, r26
     e36:	7b 2b       	or	r23, r27
     e38:	80 81       	ld	r24, Z
     e3a:	91 81       	ldd	r25, Z+1	; 0x01
     e3c:	a2 81       	ldd	r26, Z+2	; 0x02
     e3e:	b3 81       	ldd	r27, Z+3	; 0x03
     e40:	84 1b       	sub	r24, r20
     e42:	95 0b       	sbc	r25, r21
     e44:	a6 0b       	sbc	r26, r22
     e46:	b7 0b       	sbc	r27, r23
     e48:	8f 3f       	cpi	r24, 0xFF	; 255
     e4a:	2f ef       	ldi	r18, 0xFF	; 255
     e4c:	92 07       	cpc	r25, r18
     e4e:	a2 07       	cpc	r26, r18
     e50:	2f e7       	ldi	r18, 0x7F	; 127
     e52:	b2 07       	cpc	r27, r18
     e54:	38 f5       	brcc	.+78     	; 0xea4 <load_hw_timer+0xc8>
     e56:	9e 01       	movw	r18, r28
     e58:	22 0f       	add	r18, r18
     e5a:	33 1f       	adc	r19, r19
     e5c:	22 0f       	add	r18, r18
     e5e:	33 1f       	adc	r19, r19
     e60:	22 0f       	add	r18, r18
     e62:	33 1f       	adc	r19, r19
     e64:	fe 01       	movw	r30, r28
     e66:	ee 0f       	add	r30, r30
     e68:	ff 1f       	adc	r31, r31
     e6a:	e2 0f       	add	r30, r18
     e6c:	f3 1f       	adc	r31, r19
     e6e:	e2 53       	subi	r30, 0x32	; 50
     e70:	f8 4f       	sbci	r31, 0xF8	; 248
     e72:	21 85       	ldd	r18, Z+9	; 0x09
     e74:	21 11       	cpse	r18, r1
     e76:	1b c0       	rjmp	.+54     	; 0xeae <load_hw_timer+0xd2>
     e78:	00 97       	sbiw	r24, 0x00	; 0
     e7a:	21 e0       	ldi	r18, 0x01	; 1
     e7c:	a2 07       	cpc	r26, r18
     e7e:	b1 05       	cpc	r27, r1
     e80:	b0 f4       	brcc	.+44     	; 0xeae <load_hw_timer+0xd2>
     e82:	dc d9       	rcall	.-3144   	; 0x23c <common_tc_delay>
     e84:	ce 01       	movw	r24, r28
     e86:	88 0f       	add	r24, r24
     e88:	99 1f       	adc	r25, r25
     e8a:	cc 0f       	add	r28, r28
     e8c:	dd 1f       	adc	r29, r29
     e8e:	cc 0f       	add	r28, r28
     e90:	dd 1f       	adc	r29, r29
     e92:	cc 0f       	add	r28, r28
     e94:	dd 1f       	adc	r29, r29
     e96:	c8 0f       	add	r28, r24
     e98:	d9 1f       	adc	r29, r25
     e9a:	c2 53       	subi	r28, 0x32	; 50
     e9c:	d8 4f       	sbci	r29, 0xF8	; 248
     e9e:	81 e0       	ldi	r24, 0x01	; 1
     ea0:	89 87       	std	Y+9, r24	; 0x09
     ea2:	05 c0       	rjmp	.+10     	; 0xeae <load_hw_timer+0xd2>
     ea4:	81 e0       	ldi	r24, 0x01	; 1
     ea6:	80 93 00 08 	sts	0x0800, r24	; 0x800800 <timer_trigger>
     eaa:	01 c0       	rjmp	.+2      	; 0xeae <load_hw_timer+0xd2>
     eac:	ac d9       	rcall	.-3240   	; 0x206 <common_tc_compare_stop>
     eae:	df 91       	pop	r29
     eb0:	cf 91       	pop	r28
     eb2:	1f 91       	pop	r17
     eb4:	0f 91       	pop	r16
     eb6:	08 95       	ret

00000eb8 <internal_timer_handler>:
     eb8:	80 91 00 08 	lds	r24, 0x0800	; 0x800800 <timer_trigger>
     ebc:	88 23       	and	r24, r24
     ebe:	09 f4       	brne	.+2      	; 0xec2 <internal_timer_handler+0xa>
     ec0:	57 c0       	rjmp	.+174    	; 0xf70 <internal_timer_handler+0xb8>
     ec2:	10 92 00 08 	sts	0x0800, r1	; 0x800800 <timer_trigger>
     ec6:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <running_timers>
     eca:	88 23       	and	r24, r24
     ecc:	09 f4       	brne	.+2      	; 0xed0 <internal_timer_handler+0x18>
     ece:	50 c0       	rjmp	.+160    	; 0xf70 <internal_timer_handler+0xb8>
     ed0:	80 91 06 04 	lds	r24, 0x0406	; 0x800406 <expired_timer_queue_head>
     ed4:	8f 3f       	cpi	r24, 0xFF	; 255
     ed6:	59 f4       	brne	.+22     	; 0xeee <internal_timer_handler+0x36>
     ed8:	80 91 05 04 	lds	r24, 0x0405	; 0x800405 <expired_timer_queue_tail>
     edc:	8f 3f       	cpi	r24, 0xFF	; 255
     ede:	39 f4       	brne	.+14     	; 0xeee <internal_timer_handler+0x36>
     ee0:	80 91 07 04 	lds	r24, 0x0407	; 0x800407 <running_timer_queue_head>
     ee4:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <expired_timer_queue_tail>
     ee8:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <expired_timer_queue_head>
     eec:	15 c0       	rjmp	.+42     	; 0xf18 <internal_timer_handler+0x60>
     eee:	20 91 07 04 	lds	r18, 0x0407	; 0x800407 <running_timer_queue_head>
     ef2:	80 91 05 04 	lds	r24, 0x0405	; 0x800405 <expired_timer_queue_tail>
     ef6:	90 e0       	ldi	r25, 0x00	; 0
     ef8:	fc 01       	movw	r30, r24
     efa:	ee 0f       	add	r30, r30
     efc:	ff 1f       	adc	r31, r31
     efe:	88 0f       	add	r24, r24
     f00:	99 1f       	adc	r25, r25
     f02:	88 0f       	add	r24, r24
     f04:	99 1f       	adc	r25, r25
     f06:	88 0f       	add	r24, r24
     f08:	99 1f       	adc	r25, r25
     f0a:	e8 0f       	add	r30, r24
     f0c:	f9 1f       	adc	r31, r25
     f0e:	e2 53       	subi	r30, 0x32	; 50
     f10:	f8 4f       	sbci	r31, 0xF8	; 248
     f12:	20 87       	std	Z+8, r18	; 0x08
     f14:	20 93 05 04 	sts	0x0405, r18	; 0x800405 <expired_timer_queue_tail>
     f18:	80 91 07 04 	lds	r24, 0x0407	; 0x800407 <running_timer_queue_head>
     f1c:	90 e0       	ldi	r25, 0x00	; 0
     f1e:	fc 01       	movw	r30, r24
     f20:	ee 0f       	add	r30, r30
     f22:	ff 1f       	adc	r31, r31
     f24:	88 0f       	add	r24, r24
     f26:	99 1f       	adc	r25, r25
     f28:	88 0f       	add	r24, r24
     f2a:	99 1f       	adc	r25, r25
     f2c:	88 0f       	add	r24, r24
     f2e:	99 1f       	adc	r25, r25
     f30:	e8 0f       	add	r30, r24
     f32:	f9 1f       	adc	r31, r25
     f34:	e2 53       	subi	r30, 0x32	; 50
     f36:	f8 4f       	sbci	r31, 0xF8	; 248
     f38:	80 85       	ldd	r24, Z+8	; 0x08
     f3a:	80 93 07 04 	sts	0x0407, r24	; 0x800407 <running_timer_queue_head>
     f3e:	20 91 05 04 	lds	r18, 0x0405	; 0x800405 <expired_timer_queue_tail>
     f42:	30 e0       	ldi	r19, 0x00	; 0
     f44:	f9 01       	movw	r30, r18
     f46:	ee 0f       	add	r30, r30
     f48:	ff 1f       	adc	r31, r31
     f4a:	22 0f       	add	r18, r18
     f4c:	33 1f       	adc	r19, r19
     f4e:	22 0f       	add	r18, r18
     f50:	33 1f       	adc	r19, r19
     f52:	22 0f       	add	r18, r18
     f54:	33 1f       	adc	r19, r19
     f56:	e2 0f       	add	r30, r18
     f58:	f3 1f       	adc	r31, r19
     f5a:	e2 53       	subi	r30, 0x32	; 50
     f5c:	f8 4f       	sbci	r31, 0xF8	; 248
     f5e:	9f ef       	ldi	r25, 0xFF	; 255
     f60:	90 87       	std	Z+8, r25	; 0x08
     f62:	90 91 08 04 	lds	r25, 0x0408	; 0x800408 <running_timers>
     f66:	91 50       	subi	r25, 0x01	; 1
     f68:	90 93 08 04 	sts	0x0408, r25	; 0x800408 <running_timers>
     f6c:	91 11       	cpse	r25, r1
     f6e:	36 cf       	rjmp	.-404    	; 0xddc <load_hw_timer>
     f70:	08 95       	ret

00000f72 <sw_timer_get_id>:
     f72:	fc 01       	movw	r30, r24
     f74:	90 91 04 04 	lds	r25, 0x0404	; 0x800404 <alloc_timer_id>
     f78:	95 30       	cpi	r25, 0x05	; 5
     f7a:	30 f4       	brcc	.+12     	; 0xf88 <sw_timer_get_id+0x16>
     f7c:	90 83       	st	Z, r25
     f7e:	9f 5f       	subi	r25, 0xFF	; 255
     f80:	90 93 04 04 	sts	0x0404, r25	; 0x800404 <alloc_timer_id>
     f84:	80 e0       	ldi	r24, 0x00	; 0
     f86:	08 95       	ret
     f88:	84 ef       	ldi	r24, 0xF4	; 244
     f8a:	08 95       	ret

00000f8c <sw_timer_start>:
     f8c:	2f 92       	push	r2
     f8e:	3f 92       	push	r3
     f90:	4f 92       	push	r4
     f92:	5f 92       	push	r5
     f94:	6f 92       	push	r6
     f96:	7f 92       	push	r7
     f98:	8f 92       	push	r8
     f9a:	9f 92       	push	r9
     f9c:	af 92       	push	r10
     f9e:	bf 92       	push	r11
     fa0:	cf 92       	push	r12
     fa2:	df 92       	push	r13
     fa4:	ef 92       	push	r14
     fa6:	ff 92       	push	r15
     fa8:	0f 93       	push	r16
     faa:	1f 93       	push	r17
     fac:	cf 93       	push	r28
     fae:	df 93       	push	r29
     fb0:	cd b7       	in	r28, 0x3d	; 61
     fb2:	de b7       	in	r29, 0x3e	; 62
     fb4:	27 97       	sbiw	r28, 0x07	; 7
     fb6:	0f b6       	in	r0, 0x3f	; 63
     fb8:	f8 94       	cli
     fba:	de bf       	out	0x3e, r29	; 62
     fbc:	0f be       	out	0x3f, r0	; 63
     fbe:	cd bf       	out	0x3d, r28	; 61
     fc0:	38 2e       	mov	r3, r24
     fc2:	4a 01       	movw	r8, r20
     fc4:	5b 01       	movw	r10, r22
     fc6:	22 2e       	mov	r2, r18
     fc8:	ff 82       	std	Y+7, r15	; 0x07
     fca:	ee 82       	std	Y+6, r14	; 0x06
     fcc:	68 94       	set
     fce:	44 24       	eor	r4, r4
     fd0:	42 f8       	bld	r4, 2
     fd2:	48 16       	cp	r4, r24
     fd4:	08 f4       	brcc	.+2      	; 0xfd8 <sw_timer_start+0x4c>
     fd6:	ff c0       	rjmp	.+510    	; 0x11d6 <sw_timer_start+0x24a>
     fd8:	01 15       	cp	r16, r1
     fda:	11 05       	cpc	r17, r1
     fdc:	09 f4       	brne	.+2      	; 0xfe0 <sw_timer_start+0x54>
     fde:	fd c0       	rjmp	.+506    	; 0x11da <sw_timer_start+0x24e>
     fe0:	c8 2e       	mov	r12, r24
     fe2:	d1 2c       	mov	r13, r1
     fe4:	f6 01       	movw	r30, r12
     fe6:	ee 0f       	add	r30, r30
     fe8:	ff 1f       	adc	r31, r31
     fea:	c6 01       	movw	r24, r12
     fec:	88 0f       	add	r24, r24
     fee:	99 1f       	adc	r25, r25
     ff0:	88 0f       	add	r24, r24
     ff2:	99 1f       	adc	r25, r25
     ff4:	88 0f       	add	r24, r24
     ff6:	99 1f       	adc	r25, r25
     ff8:	e8 0f       	add	r30, r24
     ffa:	f9 1f       	adc	r31, r25
     ffc:	e2 53       	subi	r30, 0x32	; 50
     ffe:	f8 4f       	sbci	r31, 0xF8	; 248
    1000:	84 81       	ldd	r24, Z+4	; 0x04
    1002:	95 81       	ldd	r25, Z+5	; 0x05
    1004:	89 2b       	or	r24, r25
    1006:	09 f0       	breq	.+2      	; 0x100a <sw_timer_start+0x7e>
    1008:	ea c0       	rjmp	.+468    	; 0x11de <sw_timer_start+0x252>
    100a:	e0 90 cc 07 	lds	r14, 0x07CC	; 0x8007cc <sys_time>
    100e:	f0 90 cd 07 	lds	r15, 0x07CD	; 0x8007cd <sys_time+0x1>
    1012:	d1 d8       	rcall	.-3678   	; 0x1b6 <common_tc_read_count>
    1014:	40 91 cc 07 	lds	r20, 0x07CC	; 0x8007cc <sys_time>
    1018:	50 91 cd 07 	lds	r21, 0x07CD	; 0x8007cd <sys_time+0x1>
    101c:	e4 16       	cp	r14, r20
    101e:	f5 06       	cpc	r15, r21
    1020:	a1 f7       	brne	.-24     	; 0x100a <sw_timer_start+0x7e>
    1022:	60 e0       	ldi	r22, 0x00	; 0
    1024:	70 e0       	ldi	r23, 0x00	; 0
    1026:	ba 01       	movw	r22, r20
    1028:	55 27       	eor	r21, r21
    102a:	44 27       	eor	r20, r20
    102c:	2c 01       	movw	r4, r24
    102e:	61 2c       	mov	r6, r1
    1030:	71 2c       	mov	r7, r1
    1032:	4a 82       	std	Y+2, r4	; 0x02
    1034:	5b 82       	std	Y+3, r5	; 0x03
    1036:	6c 82       	std	Y+4, r6	; 0x04
    1038:	7d 82       	std	Y+5, r7	; 0x05
    103a:	44 2a       	or	r4, r20
    103c:	55 2a       	or	r5, r21
    103e:	66 2a       	or	r6, r22
    1040:	77 2a       	or	r7, r23
    1042:	22 20       	and	r2, r2
    1044:	21 f0       	breq	.+8      	; 0x104e <sw_timer_start+0xc2>
    1046:	21 e0       	ldi	r18, 0x01	; 1
    1048:	22 16       	cp	r2, r18
    104a:	91 f0       	breq	.+36     	; 0x1070 <sw_timer_start+0xe4>
    104c:	ca c0       	rjmp	.+404    	; 0x11e2 <sw_timer_start+0x256>
    104e:	b5 01       	movw	r22, r10
    1050:	a4 01       	movw	r20, r8
    1052:	40 58       	subi	r20, 0x80	; 128
    1054:	51 09       	sbc	r21, r1
    1056:	61 09       	sbc	r22, r1
    1058:	71 09       	sbc	r23, r1
    105a:	40 38       	cpi	r20, 0x80	; 128
    105c:	5f 4f       	sbci	r21, 0xFF	; 255
    105e:	6f 4f       	sbci	r22, 0xFF	; 255
    1060:	7f 47       	sbci	r23, 0x7F	; 127
    1062:	08 f0       	brcs	.+2      	; 0x1066 <sw_timer_start+0xda>
    1064:	c0 c0       	rjmp	.+384    	; 0x11e6 <sw_timer_start+0x25a>
    1066:	84 0c       	add	r8, r4
    1068:	95 1c       	adc	r9, r5
    106a:	a6 1c       	adc	r10, r6
    106c:	b7 1c       	adc	r11, r7
    106e:	10 c0       	rjmp	.+32     	; 0x1090 <sw_timer_start+0x104>
    1070:	b5 01       	movw	r22, r10
    1072:	a4 01       	movw	r20, r8
    1074:	40 58       	subi	r20, 0x80	; 128
    1076:	51 09       	sbc	r21, r1
    1078:	61 09       	sbc	r22, r1
    107a:	71 09       	sbc	r23, r1
    107c:	44 19       	sub	r20, r4
    107e:	55 09       	sbc	r21, r5
    1080:	66 09       	sbc	r22, r6
    1082:	77 09       	sbc	r23, r7
    1084:	40 38       	cpi	r20, 0x80	; 128
    1086:	5f 4f       	sbci	r21, 0xFF	; 255
    1088:	6f 4f       	sbci	r22, 0xFF	; 255
    108a:	7f 47       	sbci	r23, 0x7F	; 127
    108c:	08 f0       	brcs	.+2      	; 0x1090 <sw_timer_start+0x104>
    108e:	ad c0       	rjmp	.+346    	; 0x11ea <sw_timer_start+0x25e>
    1090:	8f b7       	in	r24, 0x3f	; 63
    1092:	89 83       	std	Y+1, r24	; 0x01
    1094:	f8 94       	cli
    1096:	f9 80       	ldd	r15, Y+1	; 0x01
    1098:	0f df       	rcall	.-482    	; 0xeb8 <internal_timer_handler>
    109a:	c6 01       	movw	r24, r12
    109c:	88 0f       	add	r24, r24
    109e:	99 1f       	adc	r25, r25
    10a0:	88 0f       	add	r24, r24
    10a2:	99 1f       	adc	r25, r25
    10a4:	88 0f       	add	r24, r24
    10a6:	99 1f       	adc	r25, r25
    10a8:	f6 01       	movw	r30, r12
    10aa:	ee 0f       	add	r30, r30
    10ac:	ff 1f       	adc	r31, r31
    10ae:	e8 0f       	add	r30, r24
    10b0:	f9 1f       	adc	r31, r25
    10b2:	e2 53       	subi	r30, 0x32	; 50
    10b4:	f8 4f       	sbci	r31, 0xF8	; 248
    10b6:	80 82       	st	Z, r8
    10b8:	91 82       	std	Z+1, r9	; 0x01
    10ba:	a2 82       	std	Z+2, r10	; 0x02
    10bc:	b3 82       	std	Z+3, r11	; 0x03
    10be:	15 83       	std	Z+5, r17	; 0x05
    10c0:	04 83       	std	Z+4, r16	; 0x04
    10c2:	4e 80       	ldd	r4, Y+6	; 0x06
    10c4:	5f 80       	ldd	r5, Y+7	; 0x07
    10c6:	57 82       	std	Z+7, r5	; 0x07
    10c8:	46 82       	std	Z+6, r4	; 0x06
    10ca:	11 86       	std	Z+9, r1	; 0x09
    10cc:	b0 91 08 04 	lds	r27, 0x0408	; 0x800408 <running_timers>
    10d0:	bf 5f       	subi	r27, 0xFF	; 255
    10d2:	b0 93 08 04 	sts	0x0408, r27	; 0x800408 <running_timers>
    10d6:	a0 91 07 04 	lds	r26, 0x0407	; 0x800407 <running_timer_queue_head>
    10da:	af 3f       	cpi	r26, 0xFF	; 255
    10dc:	21 f0       	breq	.+8      	; 0x10e6 <sw_timer_start+0x15a>
    10de:	b1 11       	cpse	r27, r1
    10e0:	07 c0       	rjmp	.+14     	; 0x10f0 <sw_timer_start+0x164>
    10e2:	ea 2e       	mov	r14, r26
    10e4:	84 c0       	rjmp	.+264    	; 0x11ee <sw_timer_start+0x262>
    10e6:	30 92 07 04 	sts	0x0407, r3	; 0x800407 <running_timer_queue_head>
    10ea:	83 2d       	mov	r24, r3
    10ec:	77 de       	rcall	.-786    	; 0xddc <load_hw_timer>
    10ee:	70 c0       	rjmp	.+224    	; 0x11d0 <sw_timer_start+0x244>
    10f0:	ea 2e       	mov	r14, r26
    10f2:	4a 2f       	mov	r20, r26
    10f4:	50 e0       	ldi	r21, 0x00	; 0
    10f6:	4f 3f       	cpi	r20, 0xFF	; 255
    10f8:	09 f4       	brne	.+2      	; 0x10fc <sw_timer_start+0x170>
    10fa:	66 c0       	rjmp	.+204    	; 0x11c8 <sw_timer_start+0x23c>
    10fc:	84 2f       	mov	r24, r20
    10fe:	90 e0       	ldi	r25, 0x00	; 0
    1100:	bc 01       	movw	r22, r24
    1102:	66 0f       	add	r22, r22
    1104:	77 1f       	adc	r23, r23
    1106:	9c 01       	movw	r18, r24
    1108:	22 0f       	add	r18, r18
    110a:	33 1f       	adc	r19, r19
    110c:	22 0f       	add	r18, r18
    110e:	33 1f       	adc	r19, r19
    1110:	22 0f       	add	r18, r18
    1112:	33 1f       	adc	r19, r19
    1114:	26 0f       	add	r18, r22
    1116:	37 1f       	adc	r19, r23
    1118:	f9 01       	movw	r30, r18
    111a:	e2 53       	subi	r30, 0x32	; 50
    111c:	f8 4f       	sbci	r31, 0xF8	; 248
    111e:	40 80       	ld	r4, Z
    1120:	51 80       	ldd	r5, Z+1	; 0x01
    1122:	62 80       	ldd	r6, Z+2	; 0x02
    1124:	73 80       	ldd	r7, Z+3	; 0x03
    1126:	95 01       	movw	r18, r10
    1128:	84 01       	movw	r16, r8
    112a:	04 19       	sub	r16, r4
    112c:	15 09       	sbc	r17, r5
    112e:	26 09       	sbc	r18, r6
    1130:	37 09       	sbc	r19, r7
    1132:	28 01       	movw	r4, r16
    1134:	39 01       	movw	r6, r18
    1136:	1f ef       	ldi	r17, 0xFF	; 255
    1138:	41 16       	cp	r4, r17
    113a:	51 06       	cpc	r5, r17
    113c:	61 06       	cpc	r6, r17
    113e:	1f e7       	ldi	r17, 0x7F	; 127
    1140:	71 06       	cpc	r7, r17
    1142:	70 f4       	brcc	.+28     	; 0x1160 <sw_timer_start+0x1d4>
    1144:	fb 01       	movw	r30, r22
    1146:	88 0f       	add	r24, r24
    1148:	99 1f       	adc	r25, r25
    114a:	88 0f       	add	r24, r24
    114c:	99 1f       	adc	r25, r25
    114e:	88 0f       	add	r24, r24
    1150:	99 1f       	adc	r25, r25
    1152:	e8 0f       	add	r30, r24
    1154:	f9 1f       	adc	r31, r25
    1156:	e2 53       	subi	r30, 0x32	; 50
    1158:	f8 4f       	sbci	r31, 0xF8	; 248
    115a:	e4 2e       	mov	r14, r20
    115c:	40 85       	ldd	r20, Z+8	; 0x08
    115e:	34 c0       	rjmp	.+104    	; 0x11c8 <sw_timer_start+0x23c>
    1160:	f6 01       	movw	r30, r12
    1162:	ee 0f       	add	r30, r30
    1164:	ff 1f       	adc	r31, r31
    1166:	cc 0c       	add	r12, r12
    1168:	dd 1c       	adc	r13, r13
    116a:	cc 0c       	add	r12, r12
    116c:	dd 1c       	adc	r13, r13
    116e:	cc 0c       	add	r12, r12
    1170:	dd 1c       	adc	r13, r13
    1172:	ec 0d       	add	r30, r12
    1174:	fd 1d       	adc	r31, r13
    1176:	e2 53       	subi	r30, 0x32	; 50
    1178:	f8 4f       	sbci	r31, 0xF8	; 248
    117a:	40 87       	std	Z+8, r20	; 0x08
    117c:	fc 01       	movw	r30, r24
    117e:	ee 0f       	add	r30, r30
    1180:	ff 1f       	adc	r31, r31
    1182:	88 0f       	add	r24, r24
    1184:	99 1f       	adc	r25, r25
    1186:	88 0f       	add	r24, r24
    1188:	99 1f       	adc	r25, r25
    118a:	88 0f       	add	r24, r24
    118c:	99 1f       	adc	r25, r25
    118e:	e8 0f       	add	r30, r24
    1190:	f9 1f       	adc	r31, r25
    1192:	e2 53       	subi	r30, 0x32	; 50
    1194:	f8 4f       	sbci	r31, 0xF8	; 248
    1196:	11 86       	std	Z+9, r1	; 0x09
    1198:	a4 13       	cpse	r26, r20
    119a:	05 c0       	rjmp	.+10     	; 0x11a6 <sw_timer_start+0x21a>
    119c:	30 92 07 04 	sts	0x0407, r3	; 0x800407 <running_timer_queue_head>
    11a0:	83 2d       	mov	r24, r3
    11a2:	1c de       	rcall	.-968    	; 0xddc <load_hw_timer>
    11a4:	15 c0       	rjmp	.+42     	; 0x11d0 <sw_timer_start+0x244>
    11a6:	8e 2d       	mov	r24, r14
    11a8:	90 e0       	ldi	r25, 0x00	; 0
    11aa:	fc 01       	movw	r30, r24
    11ac:	ee 0f       	add	r30, r30
    11ae:	ff 1f       	adc	r31, r31
    11b0:	88 0f       	add	r24, r24
    11b2:	99 1f       	adc	r25, r25
    11b4:	88 0f       	add	r24, r24
    11b6:	99 1f       	adc	r25, r25
    11b8:	88 0f       	add	r24, r24
    11ba:	99 1f       	adc	r25, r25
    11bc:	e8 0f       	add	r30, r24
    11be:	f9 1f       	adc	r31, r25
    11c0:	e2 53       	subi	r30, 0x32	; 50
    11c2:	f8 4f       	sbci	r31, 0xF8	; 248
    11c4:	30 86       	std	Z+8, r3	; 0x08
    11c6:	04 c0       	rjmp	.+8      	; 0x11d0 <sw_timer_start+0x244>
    11c8:	5f 5f       	subi	r21, 0xFF	; 255
    11ca:	b5 13       	cpse	r27, r21
    11cc:	94 cf       	rjmp	.-216    	; 0x10f6 <sw_timer_start+0x16a>
    11ce:	0f c0       	rjmp	.+30     	; 0x11ee <sw_timer_start+0x262>
    11d0:	ff be       	out	0x3f, r15	; 63
    11d2:	80 e0       	ldi	r24, 0x00	; 0
    11d4:	2c c0       	rjmp	.+88     	; 0x122e <sw_timer_start+0x2a2>
    11d6:	88 ef       	ldi	r24, 0xF8	; 248
    11d8:	2a c0       	rjmp	.+84     	; 0x122e <sw_timer_start+0x2a2>
    11da:	88 ef       	ldi	r24, 0xF8	; 248
    11dc:	28 c0       	rjmp	.+80     	; 0x122e <sw_timer_start+0x2a2>
    11de:	83 ef       	ldi	r24, 0xF3	; 243
    11e0:	26 c0       	rjmp	.+76     	; 0x122e <sw_timer_start+0x2a2>
    11e2:	88 ef       	ldi	r24, 0xF8	; 248
    11e4:	24 c0       	rjmp	.+72     	; 0x122e <sw_timer_start+0x2a2>
    11e6:	88 ef       	ldi	r24, 0xF8	; 248
    11e8:	22 c0       	rjmp	.+68     	; 0x122e <sw_timer_start+0x2a2>
    11ea:	88 ef       	ldi	r24, 0xF8	; 248
    11ec:	20 c0       	rjmp	.+64     	; 0x122e <sw_timer_start+0x2a2>
    11ee:	8e 2d       	mov	r24, r14
    11f0:	90 e0       	ldi	r25, 0x00	; 0
    11f2:	fc 01       	movw	r30, r24
    11f4:	ee 0f       	add	r30, r30
    11f6:	ff 1f       	adc	r31, r31
    11f8:	88 0f       	add	r24, r24
    11fa:	99 1f       	adc	r25, r25
    11fc:	88 0f       	add	r24, r24
    11fe:	99 1f       	adc	r25, r25
    1200:	88 0f       	add	r24, r24
    1202:	99 1f       	adc	r25, r25
    1204:	e8 0f       	add	r30, r24
    1206:	f9 1f       	adc	r31, r25
    1208:	e2 53       	subi	r30, 0x32	; 50
    120a:	f8 4f       	sbci	r31, 0xF8	; 248
    120c:	30 86       	std	Z+8, r3	; 0x08
    120e:	f6 01       	movw	r30, r12
    1210:	ee 0f       	add	r30, r30
    1212:	ff 1f       	adc	r31, r31
    1214:	cc 0c       	add	r12, r12
    1216:	dd 1c       	adc	r13, r13
    1218:	cc 0c       	add	r12, r12
    121a:	dd 1c       	adc	r13, r13
    121c:	cc 0c       	add	r12, r12
    121e:	dd 1c       	adc	r13, r13
    1220:	ec 0d       	add	r30, r12
    1222:	fd 1d       	adc	r31, r13
    1224:	e2 53       	subi	r30, 0x32	; 50
    1226:	f8 4f       	sbci	r31, 0xF8	; 248
    1228:	8f ef       	ldi	r24, 0xFF	; 255
    122a:	80 87       	std	Z+8, r24	; 0x08
    122c:	d1 cf       	rjmp	.-94     	; 0x11d0 <sw_timer_start+0x244>
    122e:	27 96       	adiw	r28, 0x07	; 7
    1230:	0f b6       	in	r0, 0x3f	; 63
    1232:	f8 94       	cli
    1234:	de bf       	out	0x3e, r29	; 62
    1236:	0f be       	out	0x3f, r0	; 63
    1238:	cd bf       	out	0x3d, r28	; 61
    123a:	df 91       	pop	r29
    123c:	cf 91       	pop	r28
    123e:	1f 91       	pop	r17
    1240:	0f 91       	pop	r16
    1242:	ff 90       	pop	r15
    1244:	ef 90       	pop	r14
    1246:	df 90       	pop	r13
    1248:	cf 90       	pop	r12
    124a:	bf 90       	pop	r11
    124c:	af 90       	pop	r10
    124e:	9f 90       	pop	r9
    1250:	8f 90       	pop	r8
    1252:	7f 90       	pop	r7
    1254:	6f 90       	pop	r6
    1256:	5f 90       	pop	r5
    1258:	4f 90       	pop	r4
    125a:	3f 90       	pop	r3
    125c:	2f 90       	pop	r2
    125e:	08 95       	ret

00001260 <sw_timer_stop>:
    1260:	0f 93       	push	r16
    1262:	1f 93       	push	r17
    1264:	cf 93       	push	r28
    1266:	df 93       	push	r29
    1268:	1f 92       	push	r1
    126a:	cd b7       	in	r28, 0x3d	; 61
    126c:	de b7       	in	r29, 0x3e	; 62
    126e:	85 30       	cpi	r24, 0x05	; 5
    1270:	08 f0       	brcs	.+2      	; 0x1274 <sw_timer_stop+0x14>
    1272:	f1 c0       	rjmp	.+482    	; 0x1456 <sw_timer_stop+0x1f6>
    1274:	08 2f       	mov	r16, r24
    1276:	8f b7       	in	r24, 0x3f	; 63
    1278:	89 83       	std	Y+1, r24	; 0x01
    127a:	f8 94       	cli
    127c:	19 81       	ldd	r17, Y+1	; 0x01
    127e:	1c de       	rcall	.-968    	; 0xeb8 <internal_timer_handler>
    1280:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <running_timers>
    1284:	88 23       	and	r24, r24
    1286:	09 f4       	brne	.+2      	; 0x128a <sw_timer_stop+0x2a>
    1288:	66 c0       	rjmp	.+204    	; 0x1356 <sw_timer_stop+0xf6>
    128a:	90 91 07 04 	lds	r25, 0x0407	; 0x800407 <running_timer_queue_head>
    128e:	09 13       	cpse	r16, r25
    1290:	4e c0       	rjmp	.+156    	; 0x132e <sw_timer_stop+0xce>
    1292:	21 c0       	rjmp	.+66     	; 0x12d6 <sw_timer_stop+0x76>
    1294:	09 13       	cpse	r16, r25
    1296:	4b c0       	rjmp	.+150    	; 0x132e <sw_timer_stop+0xce>
    1298:	80 2f       	mov	r24, r16
    129a:	90 e0       	ldi	r25, 0x00	; 0
    129c:	fc 01       	movw	r30, r24
    129e:	ee 0f       	add	r30, r30
    12a0:	ff 1f       	adc	r31, r31
    12a2:	88 0f       	add	r24, r24
    12a4:	99 1f       	adc	r25, r25
    12a6:	88 0f       	add	r24, r24
    12a8:	99 1f       	adc	r25, r25
    12aa:	88 0f       	add	r24, r24
    12ac:	99 1f       	adc	r25, r25
    12ae:	e8 0f       	add	r30, r24
    12b0:	f9 1f       	adc	r31, r25
    12b2:	e2 53       	subi	r30, 0x32	; 50
    12b4:	f8 4f       	sbci	r31, 0xF8	; 248
    12b6:	80 85       	ldd	r24, Z+8	; 0x08
    12b8:	fa 01       	movw	r30, r20
    12ba:	ee 0f       	add	r30, r30
    12bc:	ff 1f       	adc	r31, r31
    12be:	44 0f       	add	r20, r20
    12c0:	55 1f       	adc	r21, r21
    12c2:	44 0f       	add	r20, r20
    12c4:	55 1f       	adc	r21, r21
    12c6:	44 0f       	add	r20, r20
    12c8:	55 1f       	adc	r21, r21
    12ca:	e4 0f       	add	r30, r20
    12cc:	f5 1f       	adc	r31, r21
    12ce:	e2 53       	subi	r30, 0x32	; 50
    12d0:	f8 4f       	sbci	r31, 0xF8	; 248
    12d2:	80 87       	std	Z+8, r24	; 0x08
    12d4:	15 c0       	rjmp	.+42     	; 0x1300 <sw_timer_stop+0xa0>
    12d6:	0e 94 03 01 	call	0x206	; 0x206 <common_tc_compare_stop>
    12da:	80 2f       	mov	r24, r16
    12dc:	90 e0       	ldi	r25, 0x00	; 0
    12de:	fc 01       	movw	r30, r24
    12e0:	ee 0f       	add	r30, r30
    12e2:	ff 1f       	adc	r31, r31
    12e4:	88 0f       	add	r24, r24
    12e6:	99 1f       	adc	r25, r25
    12e8:	88 0f       	add	r24, r24
    12ea:	99 1f       	adc	r25, r25
    12ec:	88 0f       	add	r24, r24
    12ee:	99 1f       	adc	r25, r25
    12f0:	e8 0f       	add	r30, r24
    12f2:	f9 1f       	adc	r31, r25
    12f4:	e2 53       	subi	r30, 0x32	; 50
    12f6:	f8 4f       	sbci	r31, 0xF8	; 248
    12f8:	80 85       	ldd	r24, Z+8	; 0x08
    12fa:	80 93 07 04 	sts	0x0407, r24	; 0x800407 <running_timer_queue_head>
    12fe:	6e dd       	rcall	.-1316   	; 0xddc <load_hw_timer>
    1300:	80 2f       	mov	r24, r16
    1302:	90 e0       	ldi	r25, 0x00	; 0
    1304:	fc 01       	movw	r30, r24
    1306:	ee 0f       	add	r30, r30
    1308:	ff 1f       	adc	r31, r31
    130a:	88 0f       	add	r24, r24
    130c:	99 1f       	adc	r25, r25
    130e:	88 0f       	add	r24, r24
    1310:	99 1f       	adc	r25, r25
    1312:	88 0f       	add	r24, r24
    1314:	99 1f       	adc	r25, r25
    1316:	e8 0f       	add	r30, r24
    1318:	f9 1f       	adc	r31, r25
    131a:	e2 53       	subi	r30, 0x32	; 50
    131c:	f8 4f       	sbci	r31, 0xF8	; 248
    131e:	8f ef       	ldi	r24, 0xFF	; 255
    1320:	80 87       	std	Z+8, r24	; 0x08
    1322:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <running_timers>
    1326:	81 50       	subi	r24, 0x01	; 1
    1328:	80 93 08 04 	sts	0x0408, r24	; 0x800408 <running_timers>
    132c:	78 c0       	rjmp	.+240    	; 0x141e <sw_timer_stop+0x1be>
    132e:	49 2f       	mov	r20, r25
    1330:	50 e0       	ldi	r21, 0x00	; 0
    1332:	fa 01       	movw	r30, r20
    1334:	ee 0f       	add	r30, r30
    1336:	ff 1f       	adc	r31, r31
    1338:	9a 01       	movw	r18, r20
    133a:	22 0f       	add	r18, r18
    133c:	33 1f       	adc	r19, r19
    133e:	22 0f       	add	r18, r18
    1340:	33 1f       	adc	r19, r19
    1342:	22 0f       	add	r18, r18
    1344:	33 1f       	adc	r19, r19
    1346:	e2 0f       	add	r30, r18
    1348:	f3 1f       	adc	r31, r19
    134a:	e2 53       	subi	r30, 0x32	; 50
    134c:	f8 4f       	sbci	r31, 0xF8	; 248
    134e:	90 85       	ldd	r25, Z+8	; 0x08
    1350:	81 50       	subi	r24, 0x01	; 1
    1352:	09 f0       	breq	.+2      	; 0x1356 <sw_timer_stop+0xf6>
    1354:	9f cf       	rjmp	.-194    	; 0x1294 <sw_timer_stop+0x34>
    1356:	80 91 06 04 	lds	r24, 0x0406	; 0x800406 <expired_timer_queue_head>
    135a:	8f 3f       	cpi	r24, 0xFF	; 255
    135c:	09 f4       	brne	.+2      	; 0x1360 <sw_timer_stop+0x100>
    135e:	75 c0       	rjmp	.+234    	; 0x144a <sw_timer_stop+0x1ea>
    1360:	08 13       	cpse	r16, r24
    1362:	47 c0       	rjmp	.+142    	; 0x13f2 <sw_timer_stop+0x192>
    1364:	25 c0       	rjmp	.+74     	; 0x13b0 <sw_timer_stop+0x150>
    1366:	09 13       	cpse	r16, r25
    1368:	43 c0       	rjmp	.+134    	; 0x13f0 <sw_timer_stop+0x190>
    136a:	20 2f       	mov	r18, r16
    136c:	30 e0       	ldi	r19, 0x00	; 0
    136e:	f9 01       	movw	r30, r18
    1370:	ee 0f       	add	r30, r30
    1372:	ff 1f       	adc	r31, r31
    1374:	22 0f       	add	r18, r18
    1376:	33 1f       	adc	r19, r19
    1378:	22 0f       	add	r18, r18
    137a:	33 1f       	adc	r19, r19
    137c:	22 0f       	add	r18, r18
    137e:	33 1f       	adc	r19, r19
    1380:	e2 0f       	add	r30, r18
    1382:	f3 1f       	adc	r31, r19
    1384:	e2 53       	subi	r30, 0x32	; 50
    1386:	f8 4f       	sbci	r31, 0xF8	; 248
    1388:	90 85       	ldd	r25, Z+8	; 0x08
    138a:	fa 01       	movw	r30, r20
    138c:	ee 0f       	add	r30, r30
    138e:	ff 1f       	adc	r31, r31
    1390:	44 0f       	add	r20, r20
    1392:	55 1f       	adc	r21, r21
    1394:	44 0f       	add	r20, r20
    1396:	55 1f       	adc	r21, r21
    1398:	44 0f       	add	r20, r20
    139a:	55 1f       	adc	r21, r21
    139c:	e4 0f       	add	r30, r20
    139e:	f5 1f       	adc	r31, r21
    13a0:	e2 53       	subi	r30, 0x32	; 50
    13a2:	f8 4f       	sbci	r31, 0xF8	; 248
    13a4:	90 87       	std	Z+8, r25	; 0x08
    13a6:	90 91 05 04 	lds	r25, 0x0405	; 0x800405 <expired_timer_queue_tail>
    13aa:	09 13       	cpse	r16, r25
    13ac:	38 c0       	rjmp	.+112    	; 0x141e <sw_timer_stop+0x1be>
    13ae:	1d c0       	rjmp	.+58     	; 0x13ea <sw_timer_stop+0x18a>
    13b0:	80 91 05 04 	lds	r24, 0x0405	; 0x800405 <expired_timer_queue_tail>
    13b4:	08 13       	cpse	r16, r24
    13b6:	06 c0       	rjmp	.+12     	; 0x13c4 <sw_timer_stop+0x164>
    13b8:	8f ef       	ldi	r24, 0xFF	; 255
    13ba:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <expired_timer_queue_tail>
    13be:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <expired_timer_queue_head>
    13c2:	2d c0       	rjmp	.+90     	; 0x141e <sw_timer_stop+0x1be>
    13c4:	80 2f       	mov	r24, r16
    13c6:	90 e0       	ldi	r25, 0x00	; 0
    13c8:	fc 01       	movw	r30, r24
    13ca:	ee 0f       	add	r30, r30
    13cc:	ff 1f       	adc	r31, r31
    13ce:	88 0f       	add	r24, r24
    13d0:	99 1f       	adc	r25, r25
    13d2:	88 0f       	add	r24, r24
    13d4:	99 1f       	adc	r25, r25
    13d6:	88 0f       	add	r24, r24
    13d8:	99 1f       	adc	r25, r25
    13da:	e8 0f       	add	r30, r24
    13dc:	f9 1f       	adc	r31, r25
    13de:	e2 53       	subi	r30, 0x32	; 50
    13e0:	f8 4f       	sbci	r31, 0xF8	; 248
    13e2:	80 85       	ldd	r24, Z+8	; 0x08
    13e4:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <expired_timer_queue_head>
    13e8:	1a c0       	rjmp	.+52     	; 0x141e <sw_timer_stop+0x1be>
    13ea:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <expired_timer_queue_tail>
    13ee:	17 c0       	rjmp	.+46     	; 0x141e <sw_timer_stop+0x1be>
    13f0:	89 2f       	mov	r24, r25
    13f2:	48 2f       	mov	r20, r24
    13f4:	50 e0       	ldi	r21, 0x00	; 0
    13f6:	fa 01       	movw	r30, r20
    13f8:	ee 0f       	add	r30, r30
    13fa:	ff 1f       	adc	r31, r31
    13fc:	9a 01       	movw	r18, r20
    13fe:	22 0f       	add	r18, r18
    1400:	33 1f       	adc	r19, r19
    1402:	22 0f       	add	r18, r18
    1404:	33 1f       	adc	r19, r19
    1406:	22 0f       	add	r18, r18
    1408:	33 1f       	adc	r19, r19
    140a:	e2 0f       	add	r30, r18
    140c:	f3 1f       	adc	r31, r19
    140e:	e2 53       	subi	r30, 0x32	; 50
    1410:	f8 4f       	sbci	r31, 0xF8	; 248
    1412:	90 85       	ldd	r25, Z+8	; 0x08
    1414:	9f 3f       	cpi	r25, 0xFF	; 255
    1416:	09 f0       	breq	.+2      	; 0x141a <sw_timer_stop+0x1ba>
    1418:	a6 cf       	rjmp	.-180    	; 0x1366 <sw_timer_stop+0x106>
    141a:	80 e0       	ldi	r24, 0x00	; 0
    141c:	17 c0       	rjmp	.+46     	; 0x144c <sw_timer_stop+0x1ec>
    141e:	80 2f       	mov	r24, r16
    1420:	90 e0       	ldi	r25, 0x00	; 0
    1422:	fc 01       	movw	r30, r24
    1424:	ee 0f       	add	r30, r30
    1426:	ff 1f       	adc	r31, r31
    1428:	88 0f       	add	r24, r24
    142a:	99 1f       	adc	r25, r25
    142c:	88 0f       	add	r24, r24
    142e:	99 1f       	adc	r25, r25
    1430:	88 0f       	add	r24, r24
    1432:	99 1f       	adc	r25, r25
    1434:	e8 0f       	add	r30, r24
    1436:	f9 1f       	adc	r31, r25
    1438:	e2 53       	subi	r30, 0x32	; 50
    143a:	f8 4f       	sbci	r31, 0xF8	; 248
    143c:	15 82       	std	Z+5, r1	; 0x05
    143e:	14 82       	std	Z+4, r1	; 0x04
    1440:	17 82       	std	Z+7, r1	; 0x07
    1442:	16 82       	std	Z+6, r1	; 0x06
    1444:	11 86       	std	Z+9, r1	; 0x09
    1446:	81 e0       	ldi	r24, 0x01	; 1
    1448:	01 c0       	rjmp	.+2      	; 0x144c <sw_timer_stop+0x1ec>
    144a:	80 e0       	ldi	r24, 0x00	; 0
    144c:	1f bf       	out	0x3f, r17	; 63
    144e:	81 11       	cpse	r24, r1
    1450:	04 c0       	rjmp	.+8      	; 0x145a <sw_timer_stop+0x1fa>
    1452:	82 ef       	ldi	r24, 0xF2	; 242
    1454:	03 c0       	rjmp	.+6      	; 0x145c <sw_timer_stop+0x1fc>
    1456:	88 ef       	ldi	r24, 0xF8	; 248
    1458:	01 c0       	rjmp	.+2      	; 0x145c <sw_timer_stop+0x1fc>
    145a:	80 e0       	ldi	r24, 0x00	; 0
    145c:	0f 90       	pop	r0
    145e:	df 91       	pop	r29
    1460:	cf 91       	pop	r28
    1462:	1f 91       	pop	r17
    1464:	0f 91       	pop	r16
    1466:	08 95       	ret

00001468 <sw_timer_init>:
	 * Initialize the timer resources like timer arrays
	 * queues, timer registers
	 */
	uint8_t index;

	running_timers = 0;
    1468:	10 92 08 04 	sts	0x0408, r1	; 0x800408 <running_timers>
	timer_trigger = false;
    146c:	10 92 00 08 	sts	0x0800, r1	; 0x800800 <timer_trigger>
	sys_time = 0;
    1470:	10 92 cd 07 	sts	0x07CD, r1	; 0x8007cd <sys_time+0x1>
    1474:	10 92 cc 07 	sts	0x07CC, r1	; 0x8007cc <sys_time>

	running_timer_queue_head = NO_TIMER;
    1478:	8f ef       	ldi	r24, 0xFF	; 255
    147a:	80 93 07 04 	sts	0x0407, r24	; 0x800407 <running_timer_queue_head>
	expired_timer_queue_head = NO_TIMER;
    147e:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <expired_timer_queue_head>
	expired_timer_queue_tail = NO_TIMER;
    1482:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <expired_timer_queue_tail>
    1486:	ee ec       	ldi	r30, 0xCE	; 206
    1488:	f7 e0       	ldi	r31, 0x07	; 7
    148a:	20 e0       	ldi	r18, 0x00	; 0
    148c:	38 e0       	ldi	r19, 0x08	; 8

	for (index = 0; index < TOTAL_NUMBER_OF_SW_TIMERS; index++) {
		timer_array[index].next_timer_in_queue = NO_TIMER;
    148e:	80 87       	std	Z+8, r24	; 0x08
		timer_array[index].timer_cb = NULL;
    1490:	15 82       	std	Z+5, r1	; 0x05
    1492:	14 82       	std	Z+4, r1	; 0x04
    1494:	3a 96       	adiw	r30, 0x0a	; 10

	running_timer_queue_head = NO_TIMER;
	expired_timer_queue_head = NO_TIMER;
	expired_timer_queue_tail = NO_TIMER;

	for (index = 0; index < TOTAL_NUMBER_OF_SW_TIMERS; index++) {
    1496:	e2 17       	cp	r30, r18
    1498:	f3 07       	cpc	r31, r19
    149a:	c9 f7       	brne	.-14     	; 0x148e <sw_timer_init+0x26>
		timer_array[index].next_timer_in_queue = NO_TIMER;
		timer_array[index].timer_cb = NULL;
	}

	alloc_timer_id = 0;
    149c:	10 92 04 04 	sts	0x0404, r1	; 0x800404 <alloc_timer_id>
	set_common_tc_overflow_callback(hw_overflow_cb);
    14a0:	84 e9       	ldi	r24, 0x94	; 148
    14a2:	96 e0       	ldi	r25, 0x06	; 6
    14a4:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <set_common_tc_overflow_callback>
	set_common_tc_expiry_callback(hw_expiry_cb);
    14a8:	8c e8       	ldi	r24, 0x8C	; 140
    14aa:	96 e0       	ldi	r25, 0x06	; 6
    14ac:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <set_common_tc_expiry_callback>
	common_tc_init();
    14b0:	0c 94 93 01 	jmp	0x326	; 0x326 <common_tc_init>
    14b4:	08 95       	ret

000014b6 <sw_timer_service>:
#endif /* #if (TOTAL_NUMBER_OF_SW_TIMERS > 0) */
}

void sw_timer_service(void)
{
    14b6:	0f 93       	push	r16
    14b8:	1f 93       	push	r17
    14ba:	cf 93       	push	r28
    14bc:	df 93       	push	r29
    14be:	1f 92       	push	r1
    14c0:	1f 92       	push	r1
    14c2:	cd b7       	in	r28, 0x3d	; 61
    14c4:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    14c6:	8f b7       	in	r24, 0x3f	; 63
    14c8:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
    14ca:	f8 94       	cli
	return flags;
    14cc:	1a 81       	ldd	r17, Y+2	; 0x02
#if (TOTAL_NUMBER_OF_SW_TIMERS > 0)
	uint8_t flags = cpu_irq_save();
	internal_timer_handler();
    14ce:	f4 dc       	rcall	.-1560   	; 0xeb8 <internal_timer_handler>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    14d0:	1f bf       	out	0x3f, r17	; 63
			 * The expired timer's structure elements are updated
			 * and the timer
			 * is taken out of expired timer queue
			 */
			timer_array[expired_timer_queue_head].
			next_timer_in_queue = NO_TIMER;
    14d2:	1f ef       	ldi	r17, 0xFF	; 255
    14d4:	01 2f       	mov	r16, r17
    14d6:	37 c0       	rjmp	.+110    	; 0x1546 <sw_timer_service+0x90>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    14d8:	8f b7       	in	r24, 0x3f	; 63
    14da:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    14dc:	f8 94       	cli
	return flags;
    14de:	29 81       	ldd	r18, Y+1	; 0x01
		/* Expired timer if any will be processed here */
		while (NO_TIMER != expired_timer_queue_head) {
			flags = cpu_irq_save();

			next_expired_timer
				= timer_array[expired_timer_queue_head].
    14e0:	80 91 06 04 	lds	r24, 0x0406	; 0x800406 <expired_timer_queue_head>
    14e4:	90 e0       	ldi	r25, 0x00	; 0
    14e6:	dc 01       	movw	r26, r24
    14e8:	aa 0f       	add	r26, r26
    14ea:	bb 1f       	adc	r27, r27
    14ec:	88 0f       	add	r24, r24
    14ee:	99 1f       	adc	r25, r25
    14f0:	88 0f       	add	r24, r24
    14f2:	99 1f       	adc	r25, r25
    14f4:	88 0f       	add	r24, r24
    14f6:	99 1f       	adc	r25, r25
    14f8:	a8 0f       	add	r26, r24
    14fa:	b9 1f       	adc	r27, r25
    14fc:	a2 53       	subi	r26, 0x32	; 50
    14fe:	b8 4f       	sbci	r27, 0xF8	; 248
    1500:	18 96       	adiw	r26, 0x08	; 8
    1502:	9c 91       	ld	r25, X
    1504:	18 97       	sbiw	r26, 0x08	; 8
					next_timer_in_queue;

			/* Callback is stored */
			callback
				= (timer_expiry_cb_t)timer_array[
    1506:	14 96       	adiw	r26, 0x04	; 4
    1508:	ed 91       	ld	r30, X+
    150a:	fc 91       	ld	r31, X
    150c:	15 97       	sbiw	r26, 0x05	; 5
				expired_timer_queue_head
					].timer_cb;

			/* Callback parameter is stored */
			callback_param
				= timer_array[expired_timer_queue_head].param_cb;
    150e:	16 96       	adiw	r26, 0x06	; 6
    1510:	4d 91       	ld	r20, X+
    1512:	5c 91       	ld	r21, X
    1514:	17 97       	sbiw	r26, 0x07	; 7
			 * The expired timer's structure elements are updated
			 * and the timer
			 * is taken out of expired timer queue
			 */
			timer_array[expired_timer_queue_head].
			next_timer_in_queue = NO_TIMER;
    1516:	18 96       	adiw	r26, 0x08	; 8
    1518:	1c 93       	st	X, r17
    151a:	18 97       	sbiw	r26, 0x08	; 8
			timer_array[expired_timer_queue_head].timer_cb = NULL;
    151c:	15 96       	adiw	r26, 0x05	; 5
    151e:	1c 92       	st	X, r1
    1520:	1e 92       	st	-X, r1
    1522:	14 97       	sbiw	r26, 0x04	; 4
			timer_array[expired_timer_queue_head].param_cb = NULL;
    1524:	17 96       	adiw	r26, 0x07	; 7
    1526:	1c 92       	st	X, r1
    1528:	1e 92       	st	-X, r1
    152a:	16 97       	sbiw	r26, 0x06	; 6
			timer_array[expired_timer_queue_head].loaded = false;
    152c:	19 96       	adiw	r26, 0x09	; 9
    152e:	1c 92       	st	X, r1
			/*
			 * The expired timer queue head is updated with the next
			 * timer in the
			 * expired timer queue.
			 */
			expired_timer_queue_head = next_expired_timer;
    1530:	90 93 06 04 	sts	0x0406, r25	; 0x800406 <expired_timer_queue_head>

			if (NO_TIMER == expired_timer_queue_head) {
    1534:	9f 3f       	cpi	r25, 0xFF	; 255
    1536:	11 f4       	brne	.+4      	; 0x153c <sw_timer_service+0x86>
				expired_timer_queue_tail = NO_TIMER;
    1538:	00 93 05 04 	sts	0x0405, r16	; 0x800405 <expired_timer_queue_tail>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    153c:	2f bf       	out	0x3f, r18	; 63
			}

			cpu_irq_restore(flags);

			if (NULL != callback) {
    153e:	30 97       	sbiw	r30, 0x00	; 0
    1540:	11 f0       	breq	.+4      	; 0x1546 <sw_timer_service+0x90>
				/* Callback function is called */
				callback(callback_param);
    1542:	ca 01       	movw	r24, r20
    1544:	19 95       	eicall
		timer_expiry_cb_t callback;
		void *callback_param;
		uint8_t next_expired_timer;

		/* Expired timer if any will be processed here */
		while (NO_TIMER != expired_timer_queue_head) {
    1546:	80 91 06 04 	lds	r24, 0x0406	; 0x800406 <expired_timer_queue_head>
    154a:	8f 3f       	cpi	r24, 0xFF	; 255
    154c:	29 f6       	brne	.-118    	; 0x14d8 <sw_timer_service+0x22>
				callback(callback_param);
			}
		}
	}
#endif /* #if (TOTAL_NUMBER_OF_SW_TIMERS > 0) */
}
    154e:	0f 90       	pop	r0
    1550:	0f 90       	pop	r0
    1552:	df 91       	pop	r29
    1554:	cf 91       	pop	r28
    1556:	1f 91       	pop	r17
    1558:	0f 91       	pop	r16
    155a:	08 95       	ret

0000155c <pal_init>:
}

bool pal_is_timer_running(uint8_t timer_id)
{
	return sw_timer_is_running(timer_id);
}
    155c:	80 e0       	ldi	r24, 0x00	; 0
    155e:	08 95       	ret

00001560 <pal_task>:
 *
 * This function calls sio & timer handling functions.
 */
void pal_task(void)
{
	sw_timer_service();
    1560:	aa cf       	rjmp	.-172    	; 0x14b6 <sw_timer_service>
    1562:	08 95       	ret

00001564 <bmm_buffer_init>:
 * This function initializes the buffer module.
 * This function should be called before using any other functionality
 * of buffer module.
 */
void bmm_buffer_init(void)
{
    1564:	cf 93       	push	r28
    1566:	df 93       	push	r29
	/* Initialize free buffer queue for large buffers */
#if (TOTAL_NUMBER_OF_LARGE_BUFS > 0)
    #ifdef ENABLE_QUEUE_CAPACITY
	qmm_queue_init(&free_large_buffer_q, TOTAL_NUMBER_OF_LARGE_BUFS);
    #else
	qmm_queue_init(&free_large_buffer_q);
    1568:	89 e0       	ldi	r24, 0x09	; 9
    156a:	94 e0       	ldi	r25, 0x04	; 4
    156c:	b0 d0       	rcall	.+352    	; 0x16ce <qmm_queue_init>
	for (index = 0; index < TOTAL_NUMBER_OF_LARGE_BUFS; index++) {
		/*
		 * Initialize the buffer body pointer with address of the
		 * buffer body
		 */
		buf_header[index].body = buf_pool + (index * LARGE_BUFFER_SIZE);
    156e:	ce e0       	ldi	r28, 0x0E	; 14
    1570:	d4 e0       	ldi	r29, 0x04	; 4
    1572:	8a e1       	ldi	r24, 0x1A	; 26
    1574:	94 e0       	ldi	r25, 0x04	; 4
    1576:	99 83       	std	Y+1, r25	; 0x01
    1578:	88 83       	st	Y, r24

		/* Append the buffer to free large buffer queue */
		qmm_queue_append(&free_large_buffer_q, &buf_header[index]);
    157a:	be 01       	movw	r22, r28
    157c:	89 e0       	ldi	r24, 0x09	; 9
    157e:	94 e0       	ldi	r25, 0x04	; 4
    1580:	ad d0       	rcall	.+346    	; 0x16dc <qmm_queue_append>
	for (index = 0; index < TOTAL_NUMBER_OF_LARGE_BUFS; index++) {
		/*
		 * Initialize the buffer body pointer with address of the
		 * buffer body
		 */
		buf_header[index].body = buf_pool + (index * LARGE_BUFFER_SIZE);
    1582:	85 ea       	ldi	r24, 0xA5	; 165
    1584:	94 e0       	ldi	r25, 0x04	; 4
    1586:	9d 83       	std	Y+5, r25	; 0x05
    1588:	8c 83       	std	Y+4, r24	; 0x04

		/* Append the buffer to free large buffer queue */
		qmm_queue_append(&free_large_buffer_q, &buf_header[index]);
    158a:	62 e1       	ldi	r22, 0x12	; 18
    158c:	74 e0       	ldi	r23, 0x04	; 4
    158e:	89 e0       	ldi	r24, 0x09	; 9
    1590:	94 e0       	ldi	r25, 0x04	; 4
    1592:	a4 d0       	rcall	.+328    	; 0x16dc <qmm_queue_append>
	for (index = 0; index < TOTAL_NUMBER_OF_LARGE_BUFS; index++) {
		/*
		 * Initialize the buffer body pointer with address of the
		 * buffer body
		 */
		buf_header[index].body = buf_pool + (index * LARGE_BUFFER_SIZE);
    1594:	80 e3       	ldi	r24, 0x30	; 48
    1596:	95 e0       	ldi	r25, 0x05	; 5
    1598:	99 87       	std	Y+9, r25	; 0x09
    159a:	88 87       	std	Y+8, r24	; 0x08

		/* Append the buffer to free large buffer queue */
		qmm_queue_append(&free_large_buffer_q, &buf_header[index]);
    159c:	66 e1       	ldi	r22, 0x16	; 22
    159e:	74 e0       	ldi	r23, 0x04	; 4
    15a0:	89 e0       	ldi	r24, 0x09	; 9
    15a2:	94 e0       	ldi	r25, 0x04	; 4
    15a4:	9b d0       	rcall	.+310    	; 0x16dc <qmm_queue_append>
		/* Append the buffer to free small buffer queue */
		qmm_queue_append(&free_small_buffer_q, &buf_header[index + \
				TOTAL_NUMBER_OF_LARGE_BUFS]);
	}
#endif
}
    15a6:	df 91       	pop	r29
    15a8:	cf 91       	pop	r28
    15aa:	08 95       	ret

000015ac <bmm_buffer_alloc>:
			}
		}

#else /* no small buffers available at all */
	/* Allocate buffer from free large buffer queue */
	pfree_buffer = qmm_queue_remove(&free_large_buffer_q, NULL);
    15ac:	60 e0       	ldi	r22, 0x00	; 0
    15ae:	70 e0       	ldi	r23, 0x00	; 0
    15b0:	89 e0       	ldi	r24, 0x09	; 9
    15b2:	94 e0       	ldi	r25, 0x04	; 4
    15b4:	b8 c0       	rjmp	.+368    	; 0x1726 <qmm_queue_remove>

	size = size; /* Keep compiler happy. */
#endif

		return pfree_buffer;
	}
    15b6:	08 95       	ret

000015b8 <bmm_buffer_free>:
	 *
	 * @param pbuffer Pointer to buffer that has to be freed.
	 */
	void bmm_buffer_free(buffer_t *pbuffer)
	{
		if (NULL == pbuffer) {
    15b8:	00 97       	sbiw	r24, 0x00	; 0
    15ba:	21 f0       	breq	.+8      	; 0x15c4 <bmm_buffer_free+0xc>
    15bc:	bc 01       	movw	r22, r24
			qmm_queue_append(&free_large_buffer_q, pbuffer);
		}

#else /* no small buffers available at all */
		/* Append the buffer into free large buffer queue */
		qmm_queue_append(&free_large_buffer_q, pbuffer);
    15be:	89 e0       	ldi	r24, 0x09	; 9
    15c0:	94 e0       	ldi	r25, 0x04	; 4
    15c2:	8c c0       	rjmp	.+280    	; 0x16dc <qmm_queue_append>
    15c4:	08 95       	ret

000015c6 <queue_read_or_remove>:
 * \ingroup group_qmm
 */
static buffer_t *queue_read_or_remove(queue_t *q,
		buffer_mode_t mode,
		search_t *search)
{
    15c6:	8f 92       	push	r8
    15c8:	9f 92       	push	r9
    15ca:	af 92       	push	r10
    15cc:	bf 92       	push	r11
    15ce:	cf 92       	push	r12
    15d0:	df 92       	push	r13
    15d2:	ef 92       	push	r14
    15d4:	ff 92       	push	r15
    15d6:	0f 93       	push	r16
    15d8:	1f 93       	push	r17
    15da:	cf 93       	push	r28
    15dc:	df 93       	push	r29
    15de:	1f 92       	push	r1
    15e0:	cd b7       	in	r28, 0x3d	; 61
    15e2:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    15e4:	2f b7       	in	r18, 0x3f	; 63
    15e6:	29 83       	std	Y+1, r18	; 0x01
	cpu_irq_disable();
    15e8:	f8 94       	cli
	return flags;
    15ea:	89 80       	ldd	r8, Y+1	; 0x01
	buffer_t *buffer_current = NULL;
	buffer_t *buffer_previous;

	ENTER_CRITICAL_REGION();
	/* Check whether queue is empty */
	if (q->size != 0) {
    15ec:	dc 01       	movw	r26, r24
    15ee:	14 96       	adiw	r26, 0x04	; 4
    15f0:	2c 91       	ld	r18, X
    15f2:	22 23       	and	r18, r18
    15f4:	09 f4       	brne	.+2      	; 0x15f8 <queue_read_or_remove+0x32>
    15f6:	56 c0       	rjmp	.+172    	; 0x16a4 <queue_read_or_remove+0xde>
    15f8:	7a 01       	movw	r14, r20
    15fa:	96 2e       	mov	r9, r22
    15fc:	5c 01       	movw	r10, r24
		buffer_current = q->head;
    15fe:	fc 01       	movw	r30, r24
    1600:	00 81       	ld	r16, Z
    1602:	11 81       	ldd	r17, Z+1	; 0x01
		buffer_previous = q->head;

		/* First get buffer matching with criteria */
		if (NULL != search) {
    1604:	45 2b       	or	r20, r21
    1606:	e1 f0       	breq	.+56     	; 0x1640 <queue_read_or_remove+0x7a>
			uint8_t match;
			/* Search for all buffers in the queue */
			while (NULL != buffer_current) {
    1608:	01 15       	cp	r16, r1
    160a:	11 05       	cpc	r17, r1
    160c:	09 f4       	brne	.+2      	; 0x1610 <queue_read_or_remove+0x4a>
    160e:	4d c0       	rjmp	.+154    	; 0x16aa <queue_read_or_remove+0xe4>
    1610:	68 01       	movw	r12, r16
    1612:	01 c0       	rjmp	.+2      	; 0x1616 <queue_read_or_remove+0x50>
					/* Break, if search criteria matches */
					break;
				}

				buffer_previous = buffer_current;
				buffer_current = buffer_current->next;
    1614:	89 01       	movw	r16, r18
		/* First get buffer matching with criteria */
		if (NULL != search) {
			uint8_t match;
			/* Search for all buffers in the queue */
			while (NULL != buffer_current) {
				match = search->criteria_func(
    1616:	d7 01       	movw	r26, r14
    1618:	12 96       	adiw	r26, 0x02	; 2
    161a:	6d 91       	ld	r22, X+
    161c:	7c 91       	ld	r23, X
    161e:	13 97       	sbiw	r26, 0x03	; 3
    1620:	ed 91       	ld	r30, X+
    1622:	fc 91       	ld	r31, X
    1624:	d8 01       	movw	r26, r16
    1626:	8d 91       	ld	r24, X+
    1628:	9c 91       	ld	r25, X
    162a:	19 95       	eicall
						(void *)buffer_current->body,
						search->handle);

				if (match) {
    162c:	81 11       	cpse	r24, r1
    162e:	09 c0       	rjmp	.+18     	; 0x1642 <queue_read_or_remove+0x7c>
					/* Break, if search criteria matches */
					break;
				}

				buffer_previous = buffer_current;
				buffer_current = buffer_current->next;
    1630:	f8 01       	movw	r30, r16
    1632:	22 81       	ldd	r18, Z+2	; 0x02
    1634:	33 81       	ldd	r19, Z+3	; 0x03
    1636:	68 01       	movw	r12, r16

		/* First get buffer matching with criteria */
		if (NULL != search) {
			uint8_t match;
			/* Search for all buffers in the queue */
			while (NULL != buffer_current) {
    1638:	21 15       	cp	r18, r1
    163a:	31 05       	cpc	r19, r1
    163c:	59 f7       	brne	.-42     	; 0x1614 <queue_read_or_remove+0x4e>
    163e:	35 c0       	rjmp	.+106    	; 0x16aa <queue_read_or_remove+0xe4>

	ENTER_CRITICAL_REGION();
	/* Check whether queue is empty */
	if (q->size != 0) {
		buffer_current = q->head;
		buffer_previous = q->head;
    1640:	68 01       	movw	r12, r16
				buffer_current = buffer_current->next;
			}
		}

		/* Buffer matching with search criteria found */
		if (NULL != buffer_current) {
    1642:	01 15       	cp	r16, r1
    1644:	11 05       	cpc	r17, r1
    1646:	99 f1       	breq	.+102    	; 0x16ae <queue_read_or_remove+0xe8>
			/* Remove buffer from the queue */
			if (REMOVE_MODE == mode) {
    1648:	91 10       	cpse	r9, r1
    164a:	31 c0       	rjmp	.+98     	; 0x16ae <queue_read_or_remove+0xe8>
				/* Update head if buffer removed is first node
				**/
				if (buffer_current == q->head) {
    164c:	d5 01       	movw	r26, r10
    164e:	8d 91       	ld	r24, X+
    1650:	9c 91       	ld	r25, X
    1652:	11 97       	sbiw	r26, 0x01	; 1
    1654:	08 17       	cp	r16, r24
    1656:	19 07       	cpc	r17, r25
    1658:	31 f4       	brne	.+12     	; 0x1666 <queue_read_or_remove+0xa0>
					q->head = buffer_current->next;
    165a:	f8 01       	movw	r30, r16
    165c:	82 81       	ldd	r24, Z+2	; 0x02
    165e:	93 81       	ldd	r25, Z+3	; 0x03
    1660:	8d 93       	st	X+, r24
    1662:	9c 93       	st	X, r25
    1664:	08 c0       	rjmp	.+16     	; 0x1676 <queue_read_or_remove+0xb0>
				} else {
					/* Update the link by removing the
					 * buffer */
					buffer_previous->next
						= buffer_current->next;
    1666:	d8 01       	movw	r26, r16
    1668:	12 96       	adiw	r26, 0x02	; 2
    166a:	8d 91       	ld	r24, X+
    166c:	9c 91       	ld	r25, X
    166e:	13 97       	sbiw	r26, 0x03	; 3
    1670:	f6 01       	movw	r30, r12
    1672:	93 83       	std	Z+3, r25	; 0x03
    1674:	82 83       	std	Z+2, r24	; 0x02
				}

				/* Update tail if buffer removed is last node */
				if (buffer_current == q->tail) {
    1676:	d5 01       	movw	r26, r10
    1678:	12 96       	adiw	r26, 0x02	; 2
    167a:	8d 91       	ld	r24, X+
    167c:	9c 91       	ld	r25, X
    167e:	13 97       	sbiw	r26, 0x03	; 3
    1680:	08 17       	cp	r16, r24
    1682:	19 07       	cpc	r17, r25
    1684:	21 f4       	brne	.+8      	; 0x168e <queue_read_or_remove+0xc8>
					q->tail = buffer_previous;
    1686:	13 96       	adiw	r26, 0x03	; 3
    1688:	dc 92       	st	X, r13
    168a:	ce 92       	st	-X, r12
    168c:	12 97       	sbiw	r26, 0x02	; 2
				}

				/* Update size */
				q->size--;
    168e:	f5 01       	movw	r30, r10
    1690:	84 81       	ldd	r24, Z+4	; 0x04
    1692:	81 50       	subi	r24, 0x01	; 1
    1694:	84 83       	std	Z+4, r24	; 0x04

				if (NULL == q->head) {
    1696:	80 81       	ld	r24, Z
    1698:	91 81       	ldd	r25, Z+1	; 0x01
    169a:	89 2b       	or	r24, r25
    169c:	41 f4       	brne	.+16     	; 0x16ae <queue_read_or_remove+0xe8>
					q->tail = NULL;
    169e:	13 82       	std	Z+3, r1	; 0x03
    16a0:	12 82       	std	Z+2, r1	; 0x02
    16a2:	05 c0       	rjmp	.+10     	; 0x16ae <queue_read_or_remove+0xe8>
 */
static buffer_t *queue_read_or_remove(queue_t *q,
		buffer_mode_t mode,
		search_t *search)
{
	buffer_t *buffer_current = NULL;
    16a4:	00 e0       	ldi	r16, 0x00	; 0
    16a6:	10 e0       	ldi	r17, 0x00	; 0
    16a8:	02 c0       	rjmp	.+4      	; 0x16ae <queue_read_or_remove+0xe8>
    16aa:	00 e0       	ldi	r16, 0x00	; 0
    16ac:	10 e0       	ldi	r17, 0x00	; 0
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    16ae:	8f be       	out	0x3f, r8	; 63
	LEAVE_CRITICAL_REGION();

	/* Return the buffer. note that pointer to header of buffer is returned
	**/
	return (buffer_current);
} /* queue_read_or_remove */
    16b0:	c8 01       	movw	r24, r16
    16b2:	0f 90       	pop	r0
    16b4:	df 91       	pop	r29
    16b6:	cf 91       	pop	r28
    16b8:	1f 91       	pop	r17
    16ba:	0f 91       	pop	r16
    16bc:	ff 90       	pop	r15
    16be:	ef 90       	pop	r14
    16c0:	df 90       	pop	r13
    16c2:	cf 90       	pop	r12
    16c4:	bf 90       	pop	r11
    16c6:	af 90       	pop	r10
    16c8:	9f 90       	pop	r9
    16ca:	8f 90       	pop	r8
    16cc:	08 95       	ret

000016ce <qmm_queue_init>:
#ifdef ENABLE_QUEUE_CAPACITY
void qmm_queue_init(queue_t *q, uint8_t capacity)
#else
void qmm_queue_init(queue_t *q)
#endif  /* ENABLE_QUEUE_CAPACITY */
{
    16ce:	fc 01       	movw	r30, r24
	q->head = NULL;
    16d0:	11 82       	std	Z+1, r1	; 0x01
    16d2:	10 82       	st	Z, r1
	q->tail = NULL;
    16d4:	13 82       	std	Z+3, r1	; 0x03
    16d6:	12 82       	std	Z+2, r1	; 0x02
	q->size = 0;
    16d8:	14 82       	std	Z+4, r1	; 0x04
    16da:	08 95       	ret

000016dc <qmm_queue_append>:
#ifdef ENABLE_QUEUE_CAPACITY
retval_t qmm_queue_append(queue_t *q, buffer_t *buf)
#else
void qmm_queue_append(queue_t *q, buffer_t *buf)
#endif  /* ENABLE_QUEUE_CAPACITY */
{
    16dc:	cf 93       	push	r28
    16de:	df 93       	push	r29
    16e0:	1f 92       	push	r1
    16e2:	cd b7       	in	r28, 0x3d	; 61
    16e4:	de b7       	in	r29, 0x3e	; 62
    16e6:	fc 01       	movw	r30, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    16e8:	8f b7       	in	r24, 0x3f	; 63
    16ea:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    16ec:	f8 94       	cli
	return flags;
    16ee:	99 81       	ldd	r25, Y+1	; 0x01
		status = QUEUE_FULL;
	} else
#endif  /* ENABLE_QUEUE_CAPACITY */
	{
		/* Check whether queue is empty */
		if (q->size == 0) {
    16f0:	84 81       	ldd	r24, Z+4	; 0x04
    16f2:	81 11       	cpse	r24, r1
    16f4:	03 c0       	rjmp	.+6      	; 0x16fc <qmm_queue_append+0x20>
			/* Add the buffer at the head */
			q->head = buf;
    16f6:	71 83       	std	Z+1, r23	; 0x01
    16f8:	60 83       	st	Z, r22
    16fa:	06 c0       	rjmp	.+12     	; 0x1708 <qmm_queue_append+0x2c>
		} else {
			/* Add the buffer at the end */
			q->tail->next = buf;
    16fc:	a2 81       	ldd	r26, Z+2	; 0x02
    16fe:	b3 81       	ldd	r27, Z+3	; 0x03
    1700:	13 96       	adiw	r26, 0x03	; 3
    1702:	7c 93       	st	X, r23
    1704:	6e 93       	st	-X, r22
    1706:	12 97       	sbiw	r26, 0x02	; 2
		}

		/* Update the list */
		q->tail = buf;
    1708:	73 83       	std	Z+3, r23	; 0x03
    170a:	62 83       	std	Z+2, r22	; 0x02

		/* Terminate the list */
		buf->next = NULL;
    170c:	db 01       	movw	r26, r22
    170e:	13 96       	adiw	r26, 0x03	; 3
    1710:	1c 92       	st	X, r1
    1712:	1e 92       	st	-X, r1
    1714:	12 97       	sbiw	r26, 0x02	; 2

		/* Update size */
		q->size++;
    1716:	84 81       	ldd	r24, Z+4	; 0x04
    1718:	8f 5f       	subi	r24, 0xFF	; 255
    171a:	84 83       	std	Z+4, r24	; 0x04
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    171c:	9f bf       	out	0x3f, r25	; 63
	LEAVE_CRITICAL_REGION();

#ifdef ENABLE_QUEUE_CAPACITY
	return (status);
#endif
} /* qmm_queue_append */
    171e:	0f 90       	pop	r0
    1720:	df 91       	pop	r29
    1722:	cf 91       	pop	r28
    1724:	08 95       	ret

00001726 <qmm_queue_remove>:
 *
 * @return Pointer to the buffer header, if the buffer is
 * successfully removed, NULL otherwise.
 */
buffer_t *qmm_queue_remove(queue_t *q, search_t *search)
{
    1726:	ab 01       	movw	r20, r22
	return (queue_read_or_remove(q, REMOVE_MODE, search));
    1728:	60 e0       	ldi	r22, 0x00	; 0
    172a:	4d cf       	rjmp	.-358    	; 0x15c6 <queue_read_or_remove>
}
    172c:	08 95       	ret

0000172e <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
    172e:	04 c0       	rjmp	.+8      	; 0x1738 <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
    1730:	61 50       	subi	r22, 0x01	; 1
    1732:	71 09       	sbc	r23, r1
    1734:	81 09       	sbc	r24, r1
    1736:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
    1738:	61 15       	cp	r22, r1
    173a:	71 05       	cpc	r23, r1
    173c:	81 05       	cpc	r24, r1
    173e:	91 05       	cpc	r25, r1
    1740:	b9 f7       	brne	.-18     	; 0x1730 <__portable_avr_delay_cycles+0x2>
    1742:	08 95       	ret

00001744 <switch_pll_on>:
/**
 * \brief Switches the PLL on
 * \ingroup group_tal_state_machine_rfr2
 */
static void switch_pll_on(void)
{
    1744:	0f 93       	push	r16
    1746:	1f 93       	push	r17
    1748:	cf 93       	push	r28
	trx_irq_reason_t irq_status;
	uint8_t poll_counter = 0;

	/* Check if trx is in TRX_OFF; only from PLL_ON the following procedure
	 * is applicable */
	if (trx_bit_read(SR_TRX_STATUS) != TRX_OFF) {
    174a:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7c0141>
    174e:	8f 71       	andi	r24, 0x1F	; 31
    1750:	88 30       	cpi	r24, 0x08	; 8
    1752:	a1 f4       	brne	.+40     	; 0x177c <switch_pll_on+0x38>
				"Switch PLL_ON failed, because trx is not in TRX_OFF" ==
				0);
		return;
	}

	IRQ_STATUS = _BV(PLL_LOCK); /* clear PLL lock bit */
    1754:	81 e0       	ldi	r24, 0x01	; 1
    1756:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <__TEXT_REGION_LENGTH__+0x7c014f>
	/* Switch PLL on */
	trx_reg_write(RG_TRX_STATE, CMD_PLL_ON);
    175a:	89 e0       	ldi	r24, 0x09	; 9
    175c:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
    1760:	c3 e0       	ldi	r28, 0x03	; 3

	/* Check if PLL has been locked. */
	do {
		irq_status = (trx_irq_reason_t)trx_reg_read(RG_IRQ_STATUS);
    1762:	0f e4       	ldi	r16, 0x4F	; 79
    1764:	11 e0       	ldi	r17, 0x01	; 1
    1766:	f8 01       	movw	r30, r16
    1768:	80 81       	ld	r24, Z

		if (irq_status & TRX_IRQ_PLL_LOCK) {
    176a:	80 fd       	sbrc	r24, 0
    176c:	07 c0       	rjmp	.+14     	; 0x177c <switch_pll_on+0x38>
			return; /* PLL is locked now */
		}

		/* Wait a time interval of typical value for timer TR4. */
		pal_timer_delay(TRX_OFF_TO_PLL_ON_TIME_US);
    176e:	63 e9       	ldi	r22, 0x93	; 147
    1770:	70 e0       	ldi	r23, 0x00	; 0
    1772:	80 e0       	ldi	r24, 0x00	; 0
    1774:	90 e0       	ldi	r25, 0x00	; 0
    1776:	db df       	rcall	.-74     	; 0x172e <__portable_avr_delay_cycles>
    1778:	c1 50       	subi	r28, 0x01	; 1

		poll_counter++;
	} while (poll_counter < PLL_LOCK_ATTEMPTS);
    177a:	a9 f7       	brne	.-22     	; 0x1766 <switch_pll_on+0x22>

#if (_DEBUG_ > 0)
	Assert("PLL switch failed" == 0);
#endif
}
    177c:	cf 91       	pop	r28
    177e:	1f 91       	pop	r17
    1780:	0f 91       	pop	r16
    1782:	08 95       	ret

00001784 <set_trx_state>:
 * \param trx_cmd needs to be one of the trx commands
 *
 * \return current trx state
 */
tal_trx_status_t set_trx_state(trx_cmd_t trx_cmd)
{
    1784:	1f 93       	push	r17
    1786:	cf 93       	push	r28
    1788:	df 93       	push	r29
    178a:	1f 92       	push	r1
    178c:	cd b7       	in	r28, 0x3d	; 61
    178e:	de b7       	in	r29, 0x3e	; 62
    1790:	18 2f       	mov	r17, r24
	if (tal_trx_status == TRX_SLEEP) {
    1792:	80 91 28 08 	lds	r24, 0x0828	; 0x800828 <tal_trx_status>
    1796:	8f 30       	cpi	r24, 0x0F	; 15
    1798:	51 f5       	brne	.+84     	; 0x17ee <set_trx_state+0x6a>
		 * Once the TRX is awake, the original state of the global
		 * interrupts
		 * will be restored.
		 */
		/* Reset wake-up interrupt flag. */
		if (CMD_SLEEP == trx_cmd) {
    179a:	1f 30       	cpi	r17, 0x0F	; 15
    179c:	09 f4       	brne	.+2      	; 0x17a0 <set_trx_state+0x1c>
    179e:	38 c1       	rjmp	.+624    	; 0x1a10 <set_trx_state+0x28c>
			return TRX_SLEEP;
		}

		tal_awake_end_flag = false;
    17a0:	10 92 2c 08 	sts	0x082C, r1	; 0x80082c <tal_awake_end_flag>
		/* Set callback function for the awake interrupt. */
		pal_trx_irq_init_awake((FUNC_PTR)trx_awake_handler_cb);
    17a4:	87 ef       	ldi	r24, 0xF7	; 247
    17a6:	9f e0       	ldi	r25, 0x0F	; 15
    17a8:	e1 d2       	rcall	.+1474   	; 0x1d6c <pal_trx_irq_init_awake>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    17aa:	8f b7       	in	r24, 0x3f	; 63
    17ac:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    17ae:	f8 94       	cli
	return flags;
    17b0:	99 81       	ldd	r25, Y+1	; 0x01
		/* Save current state of global interrupts. */
		ENTER_CRITICAL_REGION();
		/* Force enabling of global interrupts. */
		ENABLE_GLOBAL_IRQ();
    17b2:	78 94       	sei
		/* Leave trx sleep mode. */
		TRX_SLP_TR_LOW();
    17b4:	e9 e3       	ldi	r30, 0x39	; 57
    17b6:	f1 e0       	ldi	r31, 0x01	; 1
    17b8:	80 81       	ld	r24, Z
    17ba:	8d 7f       	andi	r24, 0xFD	; 253
    17bc:	80 83       	st	Z, r24
		/* Poll wake-up interrupt flag until set within ISR. */
		while (!tal_awake_end_flag) {
    17be:	80 91 2c 08 	lds	r24, 0x082C	; 0x80082c <tal_awake_end_flag>
    17c2:	88 23       	and	r24, r24
    17c4:	e1 f3       	breq	.-8      	; 0x17be <set_trx_state+0x3a>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    17c6:	9f bf       	out	0x3f, r25	; 63
		}
		/* Restore original state of global interrupts. */
		LEAVE_CRITICAL_REGION();
		/* Clear existing interrupts */
		trx_reg_write(RG_IRQ_STATUS, 0xFF);
    17c8:	8f ef       	ldi	r24, 0xFF	; 255
    17ca:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <__TEXT_REGION_LENGTH__+0x7c014f>
		/* Re-enable TRX_END interrupt */
		trx_reg_write(RG_IRQ_MASK, TRX_IRQ_DEFAULT);
    17ce:	88 e4       	ldi	r24, 0x48	; 72
    17d0:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <__TEXT_REGION_LENGTH__+0x7c014e>

#if (ANTENNA_DIVERSITY == 1)
		/* Enable antenna diversity. */
		trx_bit_write(SR_ANT_EXT_SW_EN, ANT_EXT_SW_ENABLE);
    17d4:	ed e4       	ldi	r30, 0x4D	; 77
    17d6:	f1 e0       	ldi	r31, 0x01	; 1
    17d8:	80 81       	ld	r24, Z
    17da:	84 60       	ori	r24, 0x04	; 4
    17dc:	80 83       	st	Z, r24
#endif

		if ((trx_cmd == CMD_TRX_OFF) ||
    17de:	18 30       	cpi	r17, 0x08	; 8
    17e0:	11 f0       	breq	.+4      	; 0x17e6 <set_trx_state+0x62>
    17e2:	13 30       	cpi	r17, 0x03	; 3
    17e4:	21 f4       	brne	.+8      	; 0x17ee <set_trx_state+0x6a>
				(trx_cmd == CMD_FORCE_TRX_OFF)) {
			tal_trx_status = TRX_OFF;
    17e6:	88 e0       	ldi	r24, 0x08	; 8
    17e8:	80 93 28 08 	sts	0x0828, r24	; 0x800828 <tal_trx_status>
			return TRX_OFF;
    17ec:	11 c1       	rjmp	.+546    	; 0x1a10 <set_trx_state+0x28c>
		}
	}

	switch (trx_cmd) { /* requested state */
    17ee:	81 2f       	mov	r24, r17
    17f0:	90 e0       	ldi	r25, 0x00	; 0
    17f2:	fc 01       	movw	r30, r24
    17f4:	33 97       	sbiw	r30, 0x03	; 3
    17f6:	e7 31       	cpi	r30, 0x17	; 23
    17f8:	f1 05       	cpc	r31, r1
    17fa:	08 f0       	brcs	.+2      	; 0x17fe <set_trx_state+0x7a>
    17fc:	5a c0       	rjmp	.+180    	; 0x18b2 <set_trx_state+0x12e>
    17fe:	88 27       	eor	r24, r24
    1800:	e6 56       	subi	r30, 0x66	; 102
    1802:	ff 4f       	sbci	r31, 0xFF	; 255
    1804:	8f 4f       	sbci	r24, 0xFF	; 255
    1806:	0c 94 12 19 	jmp	0x3224	; 0x3224 <__tablejump2__>
	case CMD_SLEEP:
		trx_reg_write(RG_TRX_STATE, CMD_FORCE_TRX_OFF);
    180a:	83 e0       	ldi	r24, 0x03	; 3
    180c:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
#if (ANTENNA_DIVERSITY == 1)
		/* Disable antenna diversity: sets pulls */
		trx_bit_write(SR_ANT_EXT_SW_EN, ANT_EXT_SW_DISABLE);
    1810:	ed e4       	ldi	r30, 0x4D	; 77
    1812:	f1 e0       	ldi	r31, 0x01	; 1
    1814:	80 81       	ld	r24, Z
    1816:	8b 7f       	andi	r24, 0xFB	; 251
    1818:	80 83       	st	Z, r24
			uint16_t rand_value;

			/*
			 * Init the SEED value of the CSMA backoff algorithm.
			 */
			rand_value = (uint16_t)rand();
    181a:	0e 94 98 19 	call	0x3330	; 0x3330 <rand>
			trx_reg_write(RG_CSMA_SEED_0, (uint8_t)rand_value);
    181e:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <__TEXT_REGION_LENGTH__+0x7c016d>
			trx_bit_write(SR_CSMA_SEED_1,
    1822:	ee e6       	ldi	r30, 0x6E	; 110
    1824:	f1 e0       	ldi	r31, 0x01	; 1
    1826:	80 81       	ld	r24, Z
    1828:	97 70       	andi	r25, 0x07	; 7
    182a:	88 7f       	andi	r24, 0xF8	; 248
    182c:	89 2b       	or	r24, r25
    182e:	80 83       	st	Z, r24

		/*
		 * Clear existing interrupts to have clear interrupt flags
		 * during wake-up.
		 */
		trx_reg_write(RG_IRQ_STATUS, 0xFF);
    1830:	8f ef       	ldi	r24, 0xFF	; 255
    1832:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <__TEXT_REGION_LENGTH__+0x7c014f>

		/*
		 * Enable Awake_end interrupt.
		 * This is used for save wake-up from sleep later.
		 */
		trx_reg_write(RG_IRQ_MASK, TRX_IRQ_AWAKE_ONLY);
    1836:	80 e8       	ldi	r24, 0x80	; 128
    1838:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <__TEXT_REGION_LENGTH__+0x7c014e>

		PAL_WAIT_1_US();
    183c:	62 e0       	ldi	r22, 0x02	; 2
    183e:	70 e0       	ldi	r23, 0x00	; 0
    1840:	80 e0       	ldi	r24, 0x00	; 0
    1842:	90 e0       	ldi	r25, 0x00	; 0
    1844:	74 df       	rcall	.-280    	; 0x172e <__portable_avr_delay_cycles>
		TRX_SLP_TR_HIGH();
    1846:	e9 e3       	ldi	r30, 0x39	; 57
    1848:	f1 e0       	ldi	r31, 0x01	; 1
    184a:	80 81       	ld	r24, Z
    184c:	82 60       	ori	r24, 0x02	; 2
    184e:	80 83       	st	Z, r24
		pal_timer_delay(TRX_OFF_TO_SLEEP_TIME_CLKM_CYCLES);
    1850:	6f e2       	ldi	r22, 0x2F	; 47
    1852:	70 e0       	ldi	r23, 0x00	; 0
    1854:	80 e0       	ldi	r24, 0x00	; 0
    1856:	90 e0       	ldi	r25, 0x00	; 0
    1858:	6a df       	rcall	.-300    	; 0x172e <__portable_avr_delay_cycles>
		tal_trx_status = TRX_SLEEP;
    185a:	8f e0       	ldi	r24, 0x0F	; 15
    185c:	80 93 28 08 	sts	0x0828, r24	; 0x800828 <tal_trx_status>
		return TRX_SLEEP; /* transceiver register cannot be read during
    1860:	d7 c0       	rjmp	.+430    	; 0x1a10 <set_trx_state+0x28c>
		                   * TRX_SLEEP */

	case CMD_TRX_OFF:
		switch (tal_trx_status) {
    1862:	80 91 28 08 	lds	r24, 0x0828	; 0x800828 <tal_trx_status>
    1866:	88 30       	cpi	r24, 0x08	; 8
    1868:	21 f1       	breq	.+72     	; 0x18b2 <set_trx_state+0x12e>
		case TRX_OFF:
			break;

		default:
			trx_reg_write(RG_TRX_STATE, CMD_TRX_OFF);
    186a:	88 e0       	ldi	r24, 0x08	; 8
    186c:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
			PAL_WAIT_1_US();
    1870:	62 e0       	ldi	r22, 0x02	; 2
    1872:	70 e0       	ldi	r23, 0x00	; 0
    1874:	80 e0       	ldi	r24, 0x00	; 0
    1876:	90 e0       	ldi	r25, 0x00	; 0
    1878:	5a df       	rcall	.-332    	; 0x172e <__portable_avr_delay_cycles>
			break;
    187a:	1b c0       	rjmp	.+54     	; 0x18b2 <set_trx_state+0x12e>
		}
		break;

	case CMD_FORCE_TRX_OFF:
		switch (tal_trx_status) {
    187c:	80 91 28 08 	lds	r24, 0x0828	; 0x800828 <tal_trx_status>
    1880:	88 30       	cpi	r24, 0x08	; 8
    1882:	b9 f0       	breq	.+46     	; 0x18b2 <set_trx_state+0x12e>
		case TRX_OFF:
			break;

		default:
			trx_reg_write(RG_TRX_STATE, CMD_FORCE_TRX_OFF);
    1884:	83 e0       	ldi	r24, 0x03	; 3
    1886:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
			PAL_WAIT_1_US();
    188a:	62 e0       	ldi	r22, 0x02	; 2
    188c:	70 e0       	ldi	r23, 0x00	; 0
    188e:	80 e0       	ldi	r24, 0x00	; 0
    1890:	90 e0       	ldi	r25, 0x00	; 0
    1892:	4d df       	rcall	.-358    	; 0x172e <__portable_avr_delay_cycles>
			break;
    1894:	0e c0       	rjmp	.+28     	; 0x18b2 <set_trx_state+0x12e>
		}
		break;

	case CMD_PLL_ON:
		switch (tal_trx_status) {
    1896:	80 91 28 08 	lds	r24, 0x0828	; 0x800828 <tal_trx_status>
    189a:	88 30       	cpi	r24, 0x08	; 8
    189c:	49 f0       	breq	.+18     	; 0x18b0 <set_trx_state+0x12c>
    189e:	18 f4       	brcc	.+6      	; 0x18a6 <set_trx_state+0x122>
    18a0:	86 30       	cpi	r24, 0x06	; 6
    18a2:	39 f4       	brne	.+14     	; 0x18b2 <set_trx_state+0x12e>
    18a4:	09 c0       	rjmp	.+18     	; 0x18b8 <set_trx_state+0x134>
    18a6:	86 31       	cpi	r24, 0x16	; 22
    18a8:	39 f0       	breq	.+14     	; 0x18b8 <set_trx_state+0x134>
    18aa:	89 31       	cpi	r24, 0x19	; 25
    18ac:	11 f4       	brne	.+4      	; 0x18b2 <set_trx_state+0x12e>
		case PLL_ON:
			break;

		case TRX_OFF:
			switch_pll_on();
    18ae:	04 c0       	rjmp	.+8      	; 0x18b8 <set_trx_state+0x134>
    18b0:	49 df       	rcall	.-366    	; 0x1744 <switch_pll_on>
		Assert("trx command not handled" == 0);
		break;
	}

	do {
		tal_trx_status = (tal_trx_status_t)trx_bit_read(
    18b2:	e1 e4       	ldi	r30, 0x41	; 65
    18b4:	f1 e0       	ldi	r31, 0x01	; 1
    18b6:	a6 c0       	rjmp	.+332    	; 0x1a04 <set_trx_state+0x280>
			break;

		case RX_ON:
		case RX_AACK_ON:
		case TX_ARET_ON:
			trx_reg_write(RG_TRX_STATE, CMD_PLL_ON);
    18b8:	89 e0       	ldi	r24, 0x09	; 9
    18ba:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
			PAL_WAIT_1_US();
    18be:	62 e0       	ldi	r22, 0x02	; 2
    18c0:	70 e0       	ldi	r23, 0x00	; 0
    18c2:	80 e0       	ldi	r24, 0x00	; 0
    18c4:	90 e0       	ldi	r25, 0x00	; 0
    18c6:	33 df       	rcall	.-410    	; 0x172e <__portable_avr_delay_cycles>
			break;
    18c8:	f4 cf       	rjmp	.-24     	; 0x18b2 <set_trx_state+0x12e>
			break;
		}
		break;

	case CMD_FORCE_PLL_ON:
		switch (tal_trx_status) {
    18ca:	80 91 28 08 	lds	r24, 0x0828	; 0x800828 <tal_trx_status>
    18ce:	88 30       	cpi	r24, 0x08	; 8
    18d0:	19 f0       	breq	.+6      	; 0x18d8 <set_trx_state+0x154>
    18d2:	89 30       	cpi	r24, 0x09	; 9
    18d4:	71 f3       	breq	.-36     	; 0x18b2 <set_trx_state+0x12e>
		case TRX_OFF:
			switch_pll_on();
    18d6:	02 c0       	rjmp	.+4      	; 0x18dc <set_trx_state+0x158>
    18d8:	35 df       	rcall	.-406    	; 0x1744 <switch_pll_on>
			break;
    18da:	eb cf       	rjmp	.-42     	; 0x18b2 <set_trx_state+0x12e>

		case PLL_ON:
			break;

		default:
			trx_reg_write(RG_TRX_STATE, CMD_FORCE_PLL_ON);
    18dc:	84 e0       	ldi	r24, 0x04	; 4
    18de:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
			break;
    18e2:	e7 cf       	rjmp	.-50     	; 0x18b2 <set_trx_state+0x12e>
		}
		break;

	case CMD_RX_ON:
		switch (tal_trx_status) {
    18e4:	80 91 28 08 	lds	r24, 0x0828	; 0x800828 <tal_trx_status>
    18e8:	89 30       	cpi	r24, 0x09	; 9
    18ea:	41 f0       	breq	.+16     	; 0x18fc <set_trx_state+0x178>
    18ec:	18 f4       	brcc	.+6      	; 0x18f4 <set_trx_state+0x170>
    18ee:	88 30       	cpi	r24, 0x08	; 8
    18f0:	71 f0       	breq	.+28     	; 0x190e <set_trx_state+0x18a>
    18f2:	df cf       	rjmp	.-66     	; 0x18b2 <set_trx_state+0x12e>
    18f4:	86 31       	cpi	r24, 0x16	; 22
    18f6:	11 f0       	breq	.+4      	; 0x18fc <set_trx_state+0x178>
    18f8:	89 31       	cpi	r24, 0x19	; 25
			break;

		case PLL_ON:
		case RX_AACK_ON:
		case TX_ARET_ON:
			trx_reg_write(RG_TRX_STATE, CMD_RX_ON);
    18fa:	d9 f6       	brne	.-74     	; 0x18b2 <set_trx_state+0x12e>
    18fc:	86 e0       	ldi	r24, 0x06	; 6
			PAL_WAIT_1_US();
    18fe:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
    1902:	62 e0       	ldi	r22, 0x02	; 2
    1904:	70 e0       	ldi	r23, 0x00	; 0
    1906:	80 e0       	ldi	r24, 0x00	; 0
    1908:	90 e0       	ldi	r25, 0x00	; 0
			break;

		case TRX_OFF:
			switch_pll_on();
    190a:	11 df       	rcall	.-478    	; 0x172e <__portable_avr_delay_cycles>
    190c:	d2 cf       	rjmp	.-92     	; 0x18b2 <set_trx_state+0x12e>
			trx_reg_write(RG_TRX_STATE, CMD_RX_ON);
    190e:	1a df       	rcall	.-460    	; 0x1744 <switch_pll_on>
    1910:	86 e0       	ldi	r24, 0x06	; 6
    1912:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
			PAL_WAIT_1_US();
    1916:	62 e0       	ldi	r22, 0x02	; 2
    1918:	70 e0       	ldi	r23, 0x00	; 0
    191a:	80 e0       	ldi	r24, 0x00	; 0
    191c:	90 e0       	ldi	r25, 0x00	; 0
    191e:	07 df       	rcall	.-498    	; 0x172e <__portable_avr_delay_cycles>
			break;
    1920:	c8 cf       	rjmp	.-112    	; 0x18b2 <set_trx_state+0x12e>
			break;
		}
		break;

	case CMD_RX_AACK_ON:
		switch (tal_trx_status) {
    1922:	80 91 28 08 	lds	r24, 0x0828	; 0x800828 <tal_trx_status>
    1926:	88 30       	cpi	r24, 0x08	; 8
    1928:	91 f0       	breq	.+36     	; 0x194e <set_trx_state+0x1ca>
    192a:	18 f4       	brcc	.+6      	; 0x1932 <set_trx_state+0x1ae>
    192c:	86 30       	cpi	r24, 0x06	; 6
    192e:	c9 f0       	breq	.+50     	; 0x1962 <set_trx_state+0x1de>
    1930:	c0 cf       	rjmp	.-128    	; 0x18b2 <set_trx_state+0x12e>
    1932:	89 30       	cpi	r24, 0x09	; 9
    1934:	19 f0       	breq	.+6      	; 0x193c <set_trx_state+0x1b8>
    1936:	89 31       	cpi	r24, 0x19	; 25
		case RX_AACK_ON:
			break;

		case TX_ARET_ON:
		case PLL_ON:
			trx_reg_write(RG_TRX_STATE, CMD_RX_AACK_ON);
    1938:	09 f0       	breq	.+2      	; 0x193c <set_trx_state+0x1b8>
    193a:	bb cf       	rjmp	.-138    	; 0x18b2 <set_trx_state+0x12e>
    193c:	86 e1       	ldi	r24, 0x16	; 22
			PAL_WAIT_1_US();
    193e:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
    1942:	62 e0       	ldi	r22, 0x02	; 2
    1944:	70 e0       	ldi	r23, 0x00	; 0
    1946:	80 e0       	ldi	r24, 0x00	; 0
			break;
    1948:	90 e0       	ldi	r25, 0x00	; 0

		case TRX_OFF:
			switch_pll_on(); /* state change from TRX_OFF to
    194a:	f1 de       	rcall	.-542    	; 0x172e <__portable_avr_delay_cycles>
    194c:	b2 cf       	rjmp	.-156    	; 0x18b2 <set_trx_state+0x12e>
			                  * RX_AACK_ON can be done directly, too
			                  **/
			trx_reg_write(RG_TRX_STATE, CMD_RX_AACK_ON);
    194e:	fa de       	rcall	.-524    	; 0x1744 <switch_pll_on>
    1950:	86 e1       	ldi	r24, 0x16	; 22
    1952:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
			PAL_WAIT_1_US();
    1956:	62 e0       	ldi	r22, 0x02	; 2
    1958:	70 e0       	ldi	r23, 0x00	; 0
    195a:	80 e0       	ldi	r24, 0x00	; 0
    195c:	90 e0       	ldi	r25, 0x00	; 0
			break;
    195e:	e7 de       	rcall	.-562    	; 0x172e <__portable_avr_delay_cycles>

		case RX_ON:
			trx_reg_write(RG_TRX_STATE, CMD_PLL_ON);
    1960:	a8 cf       	rjmp	.-176    	; 0x18b2 <set_trx_state+0x12e>
    1962:	89 e0       	ldi	r24, 0x09	; 9
    1964:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
			PAL_WAIT_1_US();
    1968:	62 e0       	ldi	r22, 0x02	; 2
    196a:	70 e0       	ldi	r23, 0x00	; 0
    196c:	80 e0       	ldi	r24, 0x00	; 0
    196e:	90 e0       	ldi	r25, 0x00	; 0
    1970:	de de       	rcall	.-580    	; 0x172e <__portable_avr_delay_cycles>
			/* check if state change could be applied */
			tal_trx_status = (tal_trx_status_t)trx_bit_read(
    1972:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7c0141>
    1976:	8f 71       	andi	r24, 0x1F	; 31
    1978:	80 93 28 08 	sts	0x0828, r24	; 0x800828 <tal_trx_status>
					SR_TRX_STATUS);
			if (tal_trx_status != PLL_ON) {
    197c:	89 30       	cpi	r24, 0x09	; 9
    197e:	09 f0       	breq	.+2      	; 0x1982 <set_trx_state+0x1fe>
				return tal_trx_status;
			}

			trx_reg_write(RG_TRX_STATE, CMD_RX_AACK_ON);
    1980:	47 c0       	rjmp	.+142    	; 0x1a10 <set_trx_state+0x28c>
    1982:	86 e1       	ldi	r24, 0x16	; 22
    1984:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
			PAL_WAIT_1_US();
    1988:	62 e0       	ldi	r22, 0x02	; 2
    198a:	70 e0       	ldi	r23, 0x00	; 0
    198c:	80 e0       	ldi	r24, 0x00	; 0
    198e:	90 e0       	ldi	r25, 0x00	; 0
    1990:	ce de       	rcall	.-612    	; 0x172e <__portable_avr_delay_cycles>
			break;
    1992:	8f cf       	rjmp	.-226    	; 0x18b2 <set_trx_state+0x12e>
			break;
		}
		break;

	case CMD_TX_ARET_ON:
		switch (tal_trx_status) {
    1994:	80 91 28 08 	lds	r24, 0x0828	; 0x800828 <tal_trx_status>
    1998:	88 30       	cpi	r24, 0x08	; 8
    199a:	51 f1       	breq	.+84     	; 0x19f0 <set_trx_state+0x26c>
    199c:	18 f4       	brcc	.+6      	; 0x19a4 <set_trx_state+0x220>
    199e:	86 30       	cpi	r24, 0x06	; 6
    19a0:	79 f0       	breq	.+30     	; 0x19c0 <set_trx_state+0x23c>
    19a2:	87 cf       	rjmp	.-242    	; 0x18b2 <set_trx_state+0x12e>
    19a4:	89 30       	cpi	r24, 0x09	; 9
    19a6:	19 f0       	breq	.+6      	; 0x19ae <set_trx_state+0x22a>
    19a8:	86 31       	cpi	r24, 0x16	; 22
    19aa:	51 f0       	breq	.+20     	; 0x19c0 <set_trx_state+0x23c>
		case TX_ARET_ON:
			break;

		case PLL_ON:
			trx_reg_write(RG_TRX_STATE, CMD_TX_ARET_ON);
    19ac:	82 cf       	rjmp	.-252    	; 0x18b2 <set_trx_state+0x12e>
    19ae:	89 e1       	ldi	r24, 0x19	; 25
			PAL_WAIT_1_US();
    19b0:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
    19b4:	62 e0       	ldi	r22, 0x02	; 2
    19b6:	70 e0       	ldi	r23, 0x00	; 0
    19b8:	80 e0       	ldi	r24, 0x00	; 0
    19ba:	90 e0       	ldi	r25, 0x00	; 0
			break;
    19bc:	b8 de       	rcall	.-656    	; 0x172e <__portable_avr_delay_cycles>

		case RX_ON:
		case RX_AACK_ON:
			trx_reg_write(RG_TRX_STATE, CMD_PLL_ON);
    19be:	79 cf       	rjmp	.-270    	; 0x18b2 <set_trx_state+0x12e>
    19c0:	89 e0       	ldi	r24, 0x09	; 9
    19c2:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
			PAL_WAIT_1_US();
    19c6:	62 e0       	ldi	r22, 0x02	; 2
    19c8:	70 e0       	ldi	r23, 0x00	; 0
    19ca:	80 e0       	ldi	r24, 0x00	; 0
			/* check if state change could be applied */
			tal_trx_status = (tal_trx_status_t)trx_bit_read(
    19cc:	90 e0       	ldi	r25, 0x00	; 0
    19ce:	af de       	rcall	.-674    	; 0x172e <__portable_avr_delay_cycles>
    19d0:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7c0141>
    19d4:	8f 71       	andi	r24, 0x1F	; 31
					SR_TRX_STATUS);
			if (tal_trx_status != PLL_ON) {
    19d6:	80 93 28 08 	sts	0x0828, r24	; 0x800828 <tal_trx_status>
				return tal_trx_status;
			}

			trx_reg_write(RG_TRX_STATE, CMD_TX_ARET_ON);
    19da:	89 30       	cpi	r24, 0x09	; 9
    19dc:	c9 f4       	brne	.+50     	; 0x1a10 <set_trx_state+0x28c>
			PAL_WAIT_1_US();
    19de:	89 e1       	ldi	r24, 0x19	; 25
    19e0:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
    19e4:	62 e0       	ldi	r22, 0x02	; 2
    19e6:	70 e0       	ldi	r23, 0x00	; 0
    19e8:	80 e0       	ldi	r24, 0x00	; 0
			break;
    19ea:	90 e0       	ldi	r25, 0x00	; 0

		case TRX_OFF:
			switch_pll_on(); /* state change from TRX_OFF to
    19ec:	a0 de       	rcall	.-704    	; 0x172e <__portable_avr_delay_cycles>
    19ee:	61 cf       	rjmp	.-318    	; 0x18b2 <set_trx_state+0x12e>
			                  * TX_ARET_ON can be done directly, too
			                  **/
			trx_reg_write(RG_TRX_STATE, CMD_TX_ARET_ON);
    19f0:	a9 de       	rcall	.-686    	; 0x1744 <switch_pll_on>
    19f2:	89 e1       	ldi	r24, 0x19	; 25
    19f4:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
			PAL_WAIT_1_US();
    19f8:	62 e0       	ldi	r22, 0x02	; 2
    19fa:	70 e0       	ldi	r23, 0x00	; 0
    19fc:	80 e0       	ldi	r24, 0x00	; 0
    19fe:	90 e0       	ldi	r25, 0x00	; 0
    1a00:	96 de       	rcall	.-724    	; 0x172e <__portable_avr_delay_cycles>
			break;
    1a02:	57 cf       	rjmp	.-338    	; 0x18b2 <set_trx_state+0x12e>
		Assert("trx command not handled" == 0);
		break;
	}

	do {
		tal_trx_status = (tal_trx_status_t)trx_bit_read(
    1a04:	80 81       	ld	r24, Z
    1a06:	8f 71       	andi	r24, 0x1F	; 31
    1a08:	80 93 28 08 	sts	0x0828, r24	; 0x800828 <tal_trx_status>
				SR_TRX_STATUS);
	} while (tal_trx_status == STATE_TRANSITION_IN_PROGRESS);
    1a0c:	8f 31       	cpi	r24, 0x1F	; 31
    1a0e:	d1 f3       	breq	.-12     	; 0x1a04 <set_trx_state+0x280>

	return tal_trx_status;
} /* set_trx_state() */
    1a10:	0f 90       	pop	r0
    1a12:	df 91       	pop	r29
    1a14:	cf 91       	pop	r28
    1a16:	1f 91       	pop	r17
    1a18:	08 95       	ret

00001a1a <tal_task>:
 * - Checks and allocates the receive buffer.
 * - Processes the TAL incoming frame queue.
 * - Implements the TAL state machine.
 */
void tal_task(void)
{
    1a1a:	cf 93       	push	r28
    1a1c:	df 93       	push	r29
	/* Check if the receiver needs to be switched on. */
	if (tal_rx_on_required && (tal_state == TAL_IDLE)) {
    1a1e:	80 91 01 08 	lds	r24, 0x0801	; 0x800801 <tal_rx_on_required>
    1a22:	88 23       	and	r24, r24
    1a24:	19 f1       	breq	.+70     	; 0x1a6c <tal_task+0x52>
    1a26:	80 91 2d 08 	lds	r24, 0x082D	; 0x80082d <tal_state>
    1a2a:	81 11       	cpse	r24, r1
    1a2c:	1f c0       	rjmp	.+62     	; 0x1a6c <tal_task+0x52>
		/* Check if a receive buffer has not been available before. */
		if (tal_rx_buffer == NULL) {
    1a2e:	80 91 bb 05 	lds	r24, 0x05BB	; 0x8005bb <tal_rx_buffer>
    1a32:	90 91 bc 05 	lds	r25, 0x05BC	; 0x8005bc <tal_rx_buffer+0x1>
    1a36:	89 2b       	or	r24, r25
    1a38:	41 f4       	brne	.+16     	; 0x1a4a <tal_task+0x30>
			tal_rx_buffer = bmm_buffer_alloc(LARGE_BUFFER_SIZE);
    1a3a:	8b e8       	ldi	r24, 0x8B	; 139
    1a3c:	b7 dd       	rcall	.-1170   	; 0x15ac <bmm_buffer_alloc>
    1a3e:	90 93 bc 05 	sts	0x05BC, r25	; 0x8005bc <tal_rx_buffer+0x1>
    1a42:	80 93 bb 05 	sts	0x05BB, r24	; 0x8005bb <tal_rx_buffer>
		}

		/* Check if buffer could be allocated */
		if (NULL != tal_rx_buffer) {
    1a46:	89 2b       	or	r24, r25
    1a48:	89 f0       	breq	.+34     	; 0x1a6c <tal_task+0x52>
			/*
			 * Note:
			 * This flag needs to be reset BEFORE the received is
			 * switched on.
			 */
			tal_rx_on_required = false;
    1a4a:	10 92 01 08 	sts	0x0801, r1	; 0x800801 <tal_rx_on_required>
			/*
			 * Release the protected buffer and set it again for
			 * further protection
			 * since the buffer is available now.
			 */
			trx_bit_write(SR_RX_SAFE_MODE,
    1a4e:	cc e4       	ldi	r28, 0x4C	; 76
    1a50:	d1 e0       	ldi	r29, 0x01	; 1
    1a52:	88 81       	ld	r24, Y
    1a54:	8f 77       	andi	r24, 0x7F	; 127
    1a56:	88 83       	st	Y, r24
			                                                *
			                                                *
			                                                *protection
			                                                * mode
			                                                **/
			pal_timer_delay(2); /* Allow pin change to get effective
    1a58:	63 e0       	ldi	r22, 0x03	; 3
    1a5a:	70 e0       	ldi	r23, 0x00	; 0
    1a5c:	80 e0       	ldi	r24, 0x00	; 0
    1a5e:	90 e0       	ldi	r25, 0x00	; 0
    1a60:	66 de       	rcall	.-820    	; 0x172e <__portable_avr_delay_cycles>
			                    **/
			trx_bit_write(SR_RX_SAFE_MODE, RX_SAFE_MODE_ENABLE); /*
    1a62:	88 81       	ld	r24, Y
    1a64:	80 68       	ori	r24, 0x80	; 128
			} else {
				set_trx_state(CMD_RX_AACK_ON);
			}

#else   /* Normal operation */
			set_trx_state(CMD_RX_AACK_ON);
    1a66:	88 83       	st	Y, r24
    1a68:	86 e1       	ldi	r24, 0x16	; 22
    1a6a:	8c de       	rcall	.-744    	; 0x1784 <set_trx_state>

	/*
	 * If the transceiver has received a frame and it has been placed
	 * into the queue of the TAL, the frame needs to be processed further.
	 */
	if (tal_incoming_frame_queue.size > 0) {
    1a6c:	80 91 06 08 	lds	r24, 0x0806	; 0x800806 <tal_incoming_frame_queue+0x4>
    1a70:	88 23       	and	r24, r24
    1a72:	41 f0       	breq	.+16     	; 0x1a84 <tal_task+0x6a>
		buffer_t *rx_frame;

		/* Check if there are any pending data in the
		 * incoming_frame_queue. */
		rx_frame = qmm_queue_remove(&tal_incoming_frame_queue, NULL);
    1a74:	60 e0       	ldi	r22, 0x00	; 0
    1a76:	70 e0       	ldi	r23, 0x00	; 0
    1a78:	82 e0       	ldi	r24, 0x02	; 2
    1a7a:	98 e0       	ldi	r25, 0x08	; 8
		if (NULL != rx_frame) {
    1a7c:	54 de       	rcall	.-856    	; 0x1726 <qmm_queue_remove>
    1a7e:	00 97       	sbiw	r24, 0x00	; 0
			process_incoming_frame(rx_frame);
    1a80:	09 f0       	breq	.+2      	; 0x1a84 <tal_task+0x6a>
		}
	}

	/* Handle the TAL state machines */
	switch (tal_state) {
    1a82:	24 d5       	rcall	.+2632   	; 0x24cc <process_incoming_frame>
    1a84:	80 91 2d 08 	lds	r24, 0x082D	; 0x80082d <tal_state>
    1a88:	82 30       	cpi	r24, 0x02	; 2
		/* Wait until state is changed to TAL_TX_DONE inside tx end ISR
		**/
		break;

	case TAL_TX_DONE:
		tx_done_handling(); /* see tal_tx.c */
    1a8a:	09 f4       	brne	.+2      	; 0x1a8e <tal_task+0x74>
    1a8c:	85 d5       	rcall	.+2826   	; 0x2598 <tx_done_handling>
#endif /* (MAC_SCAN_ED_REQUEST_CONFIRM == 1) */
	default:
		Assert("tal_state is not handled" == 0);
		break;
	}
} /* tal_task() */
    1a8e:	df 91       	pop	r29
    1a90:	cf 91       	pop	r28
    1a92:	08 95       	ret

00001a94 <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
    1a94:	04 c0       	rjmp	.+8      	; 0x1a9e <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
    1a96:	61 50       	subi	r22, 0x01	; 1
    1a98:	71 09       	sbc	r23, r1
    1a9a:	81 09       	sbc	r24, r1
    1a9c:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
    1a9e:	61 15       	cp	r22, r1
    1aa0:	71 05       	cpc	r23, r1
    1aa2:	81 05       	cpc	r24, r1
    1aa4:	91 05       	cpc	r25, r1
    1aa6:	b9 f7       	brne	.-18     	; 0x1a96 <__portable_avr_delay_cycles+0x2>
    1aa8:	08 95       	ret

00001aaa <tal_generate_rand_seed>:
 * value and restoring this state after finishing the sequence.
 * Since in our case the function is called from TRX_OFF, this is not required
 * here.
 */
void tal_generate_rand_seed(void)
{
    1aaa:	ff 92       	push	r15
    1aac:	0f 93       	push	r16
    1aae:	1f 93       	push	r17
    1ab0:	cf 93       	push	r28
    1ab2:	df 93       	push	r29
	uint8_t cur_random_val = 0;

	/* Ensure that PLL has locked and receive mode is reached. */
	tal_trx_status_t trx_state;
	do {
		trx_state = set_trx_state(CMD_RX_ON);
    1ab4:	86 e0       	ldi	r24, 0x06	; 6
    1ab6:	66 de       	rcall	.-820    	; 0x1784 <set_trx_state>
	} while (trx_state != RX_ON);
    1ab8:	86 30       	cpi	r24, 0x06	; 6
    1aba:	e1 f7       	brne	.-8      	; 0x1ab4 <tal_generate_rand_seed+0xa>

	/* Ensure that register bit RX_PDT_DIS is set to 0. */
	trx_bit_write(SR_RX_PDT_DIS, RX_ENABLE);
    1abc:	e5 e5       	ldi	r30, 0x55	; 85
    1abe:	f1 e0       	ldi	r31, 0x01	; 1
    1ac0:	80 81       	ld	r24, Z
    1ac2:	8f 77       	andi	r24, 0x7F	; 127
    1ac4:	80 83       	st	Z, r24

	/*
	 * We need to disable TRX IRQs while generating random values in RX_ON,
	 * we do not want to receive frames at this point of time at all.
	 */
	trx_reg_write(RG_IRQ_MASK, TRX_IRQ_NONE);
    1ac6:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x7c014e>
    1aca:	68 94       	set
    1acc:	ff 24       	eor	r15, r15
    1ace:	f3 f8       	bld	r15, 3
 * Since in our case the function is called from TRX_OFF, this is not required
 * here.
 */
void tal_generate_rand_seed(void)
{
	uint16_t seed = 0;
    1ad0:	c0 e0       	ldi	r28, 0x00	; 0
    1ad2:	d0 e0       	ldi	r29, 0x00	; 0
	 * The 16-bit random value is generated from various 2-bit random
	 * values.
	 */
	for (uint8_t i = 0; i < 8; i++) {
		/* Now we can safely read the 2-bit random number. */
		cur_random_val = trx_bit_read(SR_RND_VALUE);
    1ad4:	06 e4       	ldi	r16, 0x46	; 70
    1ad6:	11 e0       	ldi	r17, 0x01	; 1
    1ad8:	f8 01       	movw	r30, r16
    1ada:	90 81       	ld	r25, Z
		seed = seed << 2;
    1adc:	cc 0f       	add	r28, r28
    1ade:	dd 1f       	adc	r29, r29
    1ae0:	cc 0f       	add	r28, r28
    1ae2:	dd 1f       	adc	r29, r29
		seed |= cur_random_val;
    1ae4:	90 76       	andi	r25, 0x60	; 96
    1ae6:	29 2f       	mov	r18, r25
    1ae8:	30 e0       	ldi	r19, 0x00	; 0
    1aea:	36 95       	lsr	r19
    1aec:	27 95       	ror	r18
    1aee:	32 95       	swap	r19
    1af0:	22 95       	swap	r18
    1af2:	2f 70       	andi	r18, 0x0F	; 15
    1af4:	23 27       	eor	r18, r19
    1af6:	3f 70       	andi	r19, 0x0F	; 15
    1af8:	23 27       	eor	r18, r19
    1afa:	c2 2b       	or	r28, r18
    1afc:	d3 2b       	or	r29, r19
		PAL_WAIT_1_US(); /* wait that the random value gets updated */
    1afe:	62 e0       	ldi	r22, 0x02	; 2
    1b00:	70 e0       	ldi	r23, 0x00	; 0
    1b02:	80 e0       	ldi	r24, 0x00	; 0
    1b04:	90 e0       	ldi	r25, 0x00	; 0
    1b06:	c6 df       	rcall	.-116    	; 0x1a94 <__portable_avr_delay_cycles>
    1b08:	fa 94       	dec	r15

	/*
	 * The 16-bit random value is generated from various 2-bit random
	 * values.
	 */
	for (uint8_t i = 0; i < 8; i++) {
    1b0a:	f1 10       	cpse	r15, r1
		seed = seed << 2;
		seed |= cur_random_val;
		PAL_WAIT_1_US(); /* wait that the random value gets updated */
	}

	set_trx_state(CMD_FORCE_TRX_OFF);
    1b0c:	e5 cf       	rjmp	.-54     	; 0x1ad8 <tal_generate_rand_seed+0x2e>
    1b0e:	83 e0       	ldi	r24, 0x03	; 3
    1b10:	39 de       	rcall	.-910    	; 0x1784 <set_trx_state>

	/*
	 * Now we need to clear potential pending TRX IRQs and
	 * enable the TRX IRQs again.
	 */
	trx_reg_write(RG_IRQ_STATUS, 0xFF);
    1b12:	8f ef       	ldi	r24, 0xFF	; 255
    1b14:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <__TEXT_REGION_LENGTH__+0x7c014f>
	trx_reg_write(RG_IRQ_MASK, TRX_IRQ_DEFAULT);
    1b18:	88 e4       	ldi	r24, 0x48	; 72
    1b1a:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <__TEXT_REGION_LENGTH__+0x7c014e>

	/* Set the seed for the random number generator. */
	srand(seed);
    1b1e:	ce 01       	movw	r24, r28
    1b20:	0e 94 9b 19 	call	0x3336	; 0x3336 <srand>
}
    1b24:	df 91       	pop	r29
    1b26:	cf 91       	pop	r28
    1b28:	1f 91       	pop	r17
    1b2a:	0f 91       	pop	r16
    1b2c:	ff 90       	pop	r15
    1b2e:	08 95       	ret

00001b30 <internal_tal_reset>:
 * \return MAC_SUCCESS  if the transceiver state is changed to TRX_OFF and the
 *                 current device part number and version number are correct;
 *         FAILURE otherwise
 */
static retval_t internal_tal_reset(bool set_default_pib)
{
    1b30:	ff 92       	push	r15
    1b32:	0f 93       	push	r16
    1b34:	1f 93       	push	r17
    1b36:	cf 93       	push	r28
    1b38:	df 93       	push	r29
    1b3a:	f8 2e       	mov	r15, r24
{
	tal_trx_status_t trx_status;
	uint8_t poll_counter = 0;

	/* trx might sleep, so wake it up */
	TRX_SLP_TR_LOW();
    1b3c:	c9 e3       	ldi	r28, 0x39	; 57
    1b3e:	d1 e0       	ldi	r29, 0x01	; 1
    1b40:	88 81       	ld	r24, Y
    1b42:	8d 7f       	andi	r24, 0xFD	; 253
    1b44:	88 83       	st	Y, r24
	pal_timer_delay(SLEEP_TO_TRX_OFF_TYP_US);
    1b46:	61 e4       	ldi	r22, 0x41	; 65
    1b48:	71 e0       	ldi	r23, 0x01	; 1
    1b4a:	80 e0       	ldi	r24, 0x00	; 0
    1b4c:	90 e0       	ldi	r25, 0x00	; 0
    1b4e:	a2 df       	rcall	.-188    	; 0x1a94 <__portable_avr_delay_cycles>

	/* Apply reset pulse */
	TRX_RST_LOW();
    1b50:	88 81       	ld	r24, Y
    1b52:	8e 7f       	andi	r24, 0xFE	; 254
    1b54:	88 83       	st	Y, r24
	pal_timer_delay(RST_PULSE_WIDTH_US);
    1b56:	62 e0       	ldi	r22, 0x02	; 2
    1b58:	70 e0       	ldi	r23, 0x00	; 0
    1b5a:	80 e0       	ldi	r24, 0x00	; 0
    1b5c:	90 e0       	ldi	r25, 0x00	; 0
    1b5e:	9a df       	rcall	.-204    	; 0x1a94 <__portable_avr_delay_cycles>
	TRX_RST_HIGH();
    1b60:	88 81       	ld	r24, Y
    1b62:	81 60       	ori	r24, 0x01	; 1
    1b64:	88 83       	st	Y, r24

	/* verify that trx has reached TRX_OFF */
	do {
		/* Wait a short time interval. */
		pal_timer_delay(TRX_POLL_WAIT_TIME_US);
    1b66:	66 e8       	ldi	r22, 0x86	; 134
    1b68:	70 e0       	ldi	r23, 0x00	; 0
    1b6a:	80 e0       	ldi	r24, 0x00	; 0
    1b6c:	90 e0       	ldi	r25, 0x00	; 0
    1b6e:	92 df       	rcall	.-220    	; 0x1a94 <__portable_avr_delay_cycles>

		trx_status = (tal_trx_status_t)trx_bit_read(SR_TRX_STATUS);
    1b70:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7c0141>
    1b74:	8f 71       	andi	r24, 0x1F	; 31
    1b76:	ca e0       	ldi	r28, 0x0A	; 10
    1b78:	01 e4       	ldi	r16, 0x41	; 65
    1b7a:	11 e0       	ldi	r17, 0x01	; 1
    1b7c:	0a c0       	rjmp	.+20     	; 0x1b92 <internal_tal_reset+0x62>
	TRX_RST_HIGH();

	/* verify that trx has reached TRX_OFF */
	do {
		/* Wait a short time interval. */
		pal_timer_delay(TRX_POLL_WAIT_TIME_US);
    1b7e:	66 e8       	ldi	r22, 0x86	; 134
    1b80:	70 e0       	ldi	r23, 0x00	; 0
    1b82:	80 e0       	ldi	r24, 0x00	; 0
    1b84:	90 e0       	ldi	r25, 0x00	; 0
    1b86:	86 df       	rcall	.-244    	; 0x1a94 <__portable_avr_delay_cycles>

		trx_status = (tal_trx_status_t)trx_bit_read(SR_TRX_STATUS);
    1b88:	f8 01       	movw	r30, r16
    1b8a:	80 81       	ld	r24, Z
    1b8c:	8f 71       	andi	r24, 0x1F	; 31
    1b8e:	c1 50       	subi	r28, 0x01	; 1

		/* Wait not more than max. value of TR2. */
		if (poll_counter == SLEEP_TO_TRX_OFF_ATTEMPTS) {
    1b90:	c9 f1       	breq	.+114    	; 0x1c04 <internal_tal_reset+0xd4>
#endif
			return FAILURE;
		}

		poll_counter++;
	} while (trx_status != TRX_OFF);
    1b92:	88 30       	cpi	r24, 0x08	; 8

	tal_trx_status = TRX_OFF;
    1b94:	a1 f7       	brne	.-24     	; 0x1b7e <internal_tal_reset+0x4e>
    1b96:	80 93 28 08 	sts	0x0828, r24	; 0x800828 <tal_trx_status>

	/*
	 * Generate a seed for the random number generator in function rand().
	 * This is required (for example) as seed for the CSMA-CA algorithm.
	 */
	tal_generate_rand_seed();
    1b9a:	87 df       	rcall	.-242    	; 0x1aaa <tal_generate_rand_seed>
	 */

	/*
	 * Init the SEED value of the CSMA backoff algorithm.
	 */
	uint16_t rand_value = (uint16_t)rand();
    1b9c:	0e 94 98 19 	call	0x3330	; 0x3330 <rand>
	trx_reg_write(RG_CSMA_SEED_0, (uint8_t)rand_value);
    1ba0:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <__TEXT_REGION_LENGTH__+0x7c016d>
	trx_bit_write(SR_CSMA_SEED_1, (uint8_t)(rand_value >> 8));
    1ba4:	ee e6       	ldi	r30, 0x6E	; 110
    1ba6:	f1 e0       	ldi	r31, 0x01	; 1
    1ba8:	80 81       	ld	r24, Z
    1baa:	97 70       	andi	r25, 0x07	; 7
    1bac:	88 7f       	andi	r24, 0xF8	; 248
    1bae:	89 2b       	or	r24, r25
    1bb0:	80 83       	st	Z, r24

	trx_bit_write(SR_AACK_SET_PD, PD_ACK_BIT_SET_ENABLE); /* ACKs for
    1bb2:	80 81       	ld	r24, Z
    1bb4:	80 62       	ori	r24, 0x20	; 32
    1bb6:	80 83       	st	Z, r24
	                                                       * data
	                                                       * requests,
	                                                       * indicate
	                                                       * pending data
	                                                       **/
	trx_bit_write(SR_RX_SAFE_MODE, RX_SAFE_MODE_ENABLE); /* Enable
    1bb8:	ec e4       	ldi	r30, 0x4C	; 76
    1bba:	f1 e0       	ldi	r31, 0x01	; 1
    1bbc:	80 81       	ld	r24, Z
    1bbe:	80 68       	ori	r24, 0x80	; 128
    1bc0:	80 83       	st	Z, r24
	                                                     * buffer
	                                                     * protection
	                                                     * mode */
	trx_reg_write(RG_IRQ_MASK, TRX_IRQ_DEFAULT);
    1bc2:	88 e4       	ldi	r24, 0x48	; 72
    1bc4:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <__TEXT_REGION_LENGTH__+0x7c014e>
#if (defined BEACON_SUPPORT) || (defined ENABLE_TSTAMP)
	/* The TX start timestamp is taken by the respective PAL layer */
	trx_reg_write(RG_IRQ_MASK1, (1 << TX_START_EN));
#endif
	trx_reg_write(0x156, 0xFF); /* RPC feature configuration. */
    1bc8:	8f ef       	ldi	r24, 0xFF	; 255
    1bca:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <__TEXT_REGION_LENGTH__+0x7c0156>

#if (ANTENNA_DIVERSITY == 1)
	/* Use antenna diversity */
	trx_bit_write(SR_ANT_CTRL, ANTENNA_DEFAULT);
    1bce:	ed e4       	ldi	r30, 0x4D	; 77
    1bd0:	f1 e0       	ldi	r31, 0x01	; 1
    1bd2:	80 81       	ld	r24, Z
    1bd4:	8c 7f       	andi	r24, 0xFC	; 252
    1bd6:	82 60       	ori	r24, 0x02	; 2
    1bd8:	80 83       	st	Z, r24
	trx_bit_write(SR_PDT_THRES, THRES_ANT_DIV_ENABLE);
    1bda:	aa e4       	ldi	r26, 0x4A	; 74
    1bdc:	b1 e0       	ldi	r27, 0x01	; 1
    1bde:	8c 91       	ld	r24, X
    1be0:	80 7f       	andi	r24, 0xF0	; 240
    1be2:	83 60       	ori	r24, 0x03	; 3
    1be4:	8c 93       	st	X, r24
	trx_bit_write(SR_ANT_DIV_EN, ANT_DIV_ENABLE);
    1be6:	80 81       	ld	r24, Z
    1be8:	88 60       	ori	r24, 0x08	; 8
	trx_bit_write(SR_ANT_EXT_SW_EN, ANT_EXT_SW_ENABLE);
    1bea:	80 83       	st	Z, r24
    1bec:	80 81       	ld	r24, Z
	tal_generate_rand_seed();

	/* Configure the transceiver register values. */
	trx_config();

	if (set_default_pib) {
    1bee:	84 60       	ori	r24, 0x04	; 4
		/* Set the default PIB values */
		init_tal_pib(); /* implementation can be found in 'tal_pib.c' */
    1bf0:	80 83       	st	Z, r24
    1bf2:	f1 10       	cpse	r15, r1

	/*
	 * Write all PIB values to the transceiver
	 * that are needed by the transceiver itself.
	 */
	write_all_tal_pib_to_trx(); /* implementation can be found in
    1bf4:	30 d2       	rcall	.+1120   	; 0x2056 <init_tal_pib>
    1bf6:	7d d2       	rcall	.+1274   	; 0x20f2 <write_all_tal_pib_to_trx>
	                             *'tal_pib.c' */

	/* Reset TAL variables. */
	tal_state = TAL_IDLE;
    1bf8:	10 92 2d 08 	sts	0x082D, r1	; 0x80082d <tal_state>

#if ((MAC_START_REQUEST_CONFIRM == 1) && (defined BEACON_SUPPORT))
	tal_beacon_transmission = false;
#endif /* ((MAC_START_REQUEST_CONFIRM == 1) && (defined BEACON_SUPPORT)) */

	tal_rx_on_required = false;
    1bfc:	10 92 01 08 	sts	0x0801, r1	; 0x800801 <tal_rx_on_required>

	return MAC_SUCCESS;
    1c00:	80 e0       	ldi	r24, 0x00	; 0
    1c02:	01 c0       	rjmp	.+2      	; 0x1c06 <internal_tal_reset+0xd6>
 *         FAILURE otherwise
 */
static retval_t internal_tal_reset(bool set_default_pib)
{
	if (trx_reset() != MAC_SUCCESS) {
		return FAILURE;
    1c04:	85 e8       	ldi	r24, 0x85	; 133
#endif /* ((MAC_START_REQUEST_CONFIRM == 1) && (defined BEACON_SUPPORT)) */

	tal_rx_on_required = false;

	return MAC_SUCCESS;
}
    1c06:	df 91       	pop	r29
    1c08:	cf 91       	pop	r28
    1c0a:	1f 91       	pop	r17
    1c0c:	0f 91       	pop	r16
    1c0e:	ff 90       	pop	r15
    1c10:	08 95       	ret

00001c12 <tal_init>:
 * \return MAC_SUCCESS  if the transceiver state is changed to TRX_OFF and the
 *                 current device part number and version number are correct;
 *         FAILURE otherwise
 */
retval_t tal_init(void)
{
    1c12:	cf 92       	push	r12
    1c14:	df 92       	push	r13
    1c16:	ef 92       	push	r14
    1c18:	ff 92       	push	r15
    1c1a:	0f 93       	push	r16
    1c1c:	1f 93       	push	r17
    1c1e:	cf 93       	push	r28
    1c20:	df 93       	push	r29
	MCUSR = 0;
    1c22:	14 be       	out	0x34, r1	; 52

	/* Enable SRAM Data Retention */
	DRTRAM0 = _BV(ENDRT);
    1c24:	80 e1       	ldi	r24, 0x10	; 16
    1c26:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <__TEXT_REGION_LENGTH__+0x7c0135>
	DRTRAM1 = _BV(ENDRT);
    1c2a:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <__TEXT_REGION_LENGTH__+0x7c0134>
	DRTRAM2 = _BV(ENDRT);
    1c2e:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <__TEXT_REGION_LENGTH__+0x7c0133>
	DRTRAM3 = _BV(ENDRT);
    1c32:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <__TEXT_REGION_LENGTH__+0x7c0132>

	/* Init the PAL and by this means also the transceiver interface */
	if (pal_init() != MAC_SUCCESS) {
    1c36:	92 dc       	rcall	.-1756   	; 0x155c <pal_init>
    1c38:	81 11       	cpse	r24, r1
    1c3a:	6d c0       	rjmp	.+218    	; 0x1d16 <tal_init+0x104>
	} else if (module == &TCCR4A) {
		sysclk_enable_module(POWER_RED_REG1, PRTIM4_bm);
	} else if (module == &TCCR5A) {
		sysclk_enable_module(POWER_RED_REG1, PRTIM5_bm);
	} else if (module == &TRX_CTRL_0) {
		sysclk_enable_module(POWER_RED_REG1, PRTRX24_bm);
    1c3c:	60 e4       	ldi	r22, 0x40	; 64
    1c3e:	81 e0       	ldi	r24, 0x01	; 1
    1c40:	3c d8       	rcall	.-3976   	; 0xcba <sysclk_enable_module>
{
	tal_trx_status_t trx_status;
	uint8_t poll_counter = 0;

	sysclk_enable_peripheral_clock(&TRX_CTRL_0);
	TRX_RST_HIGH();
    1c42:	c9 e3       	ldi	r28, 0x39	; 57
    1c44:	d1 e0       	ldi	r29, 0x01	; 1
    1c46:	88 81       	ld	r24, Y
    1c48:	81 60       	ori	r24, 0x01	; 1
    1c4a:	88 83       	st	Y, r24
	TRX_SLP_TR_LOW();
    1c4c:	88 81       	ld	r24, Y
    1c4e:	8d 7f       	andi	r24, 0xFD	; 253
    1c50:	88 83       	st	Y, r24

	pal_timer_delay(P_ON_TO_CLKM_AVAILABLE_TYP_US);
    1c52:	6b ef       	ldi	r22, 0xFB	; 251
    1c54:	71 e0       	ldi	r23, 0x01	; 1
    1c56:	80 e0       	ldi	r24, 0x00	; 0
    1c58:	90 e0       	ldi	r25, 0x00	; 0
    1c5a:	1c df       	rcall	.-456    	; 0x1a94 <__portable_avr_delay_cycles>

	/* Apply reset pulse */
	TRX_RST_LOW();
    1c5c:	88 81       	ld	r24, Y
    1c5e:	8e 7f       	andi	r24, 0xFE	; 254
    1c60:	88 83       	st	Y, r24
	pal_timer_delay(RST_PULSE_WIDTH_US);
    1c62:	62 e0       	ldi	r22, 0x02	; 2
    1c64:	70 e0       	ldi	r23, 0x00	; 0
    1c66:	80 e0       	ldi	r24, 0x00	; 0
    1c68:	90 e0       	ldi	r25, 0x00	; 0
    1c6a:	14 df       	rcall	.-472    	; 0x1a94 <__portable_avr_delay_cycles>
	TRX_RST_HIGH();
    1c6c:	88 81       	ld	r24, Y
    1c6e:	81 60       	ori	r24, 0x01	; 1
    1c70:	88 83       	st	Y, r24

	/* Verify that the trx has reached TRX_OFF. */
	poll_counter = 0;
	do {
		/* Wait a short time interval. */
		pal_timer_delay(TRX_POLL_WAIT_TIME_US);
    1c72:	66 e8       	ldi	r22, 0x86	; 134
    1c74:	70 e0       	ldi	r23, 0x00	; 0
    1c76:	80 e0       	ldi	r24, 0x00	; 0
    1c78:	90 e0       	ldi	r25, 0x00	; 0
    1c7a:	0c df       	rcall	.-488    	; 0x1a94 <__portable_avr_delay_cycles>

		trx_status = (tal_trx_status_t)trx_bit_read(SR_TRX_STATUS);
    1c7c:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7c0141>
    1c80:	8f 71       	andi	r24, 0x1F	; 31
    1c82:	ca e0       	ldi	r28, 0x0A	; 10
    1c84:	01 e4       	ldi	r16, 0x41	; 65
    1c86:	11 e0       	ldi	r17, 0x01	; 1
    1c88:	0b c0       	rjmp	.+22     	; 0x1ca0 <tal_init+0x8e>

	/* Verify that the trx has reached TRX_OFF. */
	poll_counter = 0;
	do {
		/* Wait a short time interval. */
		pal_timer_delay(TRX_POLL_WAIT_TIME_US);
    1c8a:	66 e8       	ldi	r22, 0x86	; 134
    1c8c:	70 e0       	ldi	r23, 0x00	; 0
    1c8e:	80 e0       	ldi	r24, 0x00	; 0
    1c90:	90 e0       	ldi	r25, 0x00	; 0
    1c92:	00 df       	rcall	.-512    	; 0x1a94 <__portable_avr_delay_cycles>

		trx_status = (tal_trx_status_t)trx_bit_read(SR_TRX_STATUS);
    1c94:	f8 01       	movw	r30, r16
    1c96:	80 81       	ld	r24, Z
    1c98:	8f 71       	andi	r24, 0x1F	; 31
    1c9a:	c1 50       	subi	r28, 0x01	; 1

		/* Wait not more than max. value of TR2. */
		if (poll_counter == RESET_TO_TRX_OFF_ATTEMPTS) {
    1c9c:	09 f4       	brne	.+2      	; 0x1ca0 <tal_init+0x8e>
    1c9e:	51 c0       	rjmp	.+162    	; 0x1d42 <tal_init+0x130>
#endif
			return FAILURE;
		}

		poll_counter++;
	} while (trx_status != TRX_OFF);
    1ca0:	88 30       	cpi	r24, 0x08	; 8
    1ca2:	99 f7       	brne	.-26     	; 0x1c8a <tal_init+0x78>

	tal_trx_status = TRX_OFF;
    1ca4:	80 93 28 08 	sts	0x0828, r24	; 0x800828 <tal_trx_status>

#if !defined(FPGA_EMULATION)
	/* Check if actually running on an ATmegaRFR2 device. */
	if (ATMEGARFR2_PART_NUM != trx_reg_read(RG_PART_NUM)) {
    1ca8:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <__TEXT_REGION_LENGTH__+0x7c015c>
    1cac:	84 39       	cpi	r24, 0x94	; 148
    1cae:	09 f0       	breq	.+2      	; 0x1cb2 <tal_init+0xa0>
    1cb0:	48 c0       	rjmp	.+144    	; 0x1d42 <tal_init+0x130>
    1cb2:	35 c0       	rjmp	.+106    	; 0x1d1e <tal_init+0x10c>
		 * in function tal_generate_rand_seed().
		 */
		uint8_t *ptr_pib = (uint8_t *)&tal_pib.IeeeAddress;

		for (uint8_t i = 0; i < 8; i++) {
			*ptr_pib++ = (uint8_t)rand();
    1cb4:	0e 94 98 19 	call	0x3330	; 0x3330 <rand>
    1cb8:	f8 01       	movw	r30, r16
    1cba:	81 93       	st	Z+, r24
    1cbc:	8f 01       	movw	r16, r30
		 * generated
		 * in function tal_generate_rand_seed().
		 */
		uint8_t *ptr_pib = (uint8_t *)&tal_pib.IeeeAddress;

		for (uint8_t i = 0; i < 8; i++) {
    1cbe:	ec 15       	cp	r30, r12
    1cc0:	fd 05       	cpc	r31, r13
    1cc2:	c1 f7       	brne	.-16     	; 0x1cb4 <tal_init+0xa2>
	/*
	 * This while loop is on purpose, since just in the
	 * rare case that such an address is randomly
	 * generated again, we must repeat this.
	 */
	while ((tal_pib.IeeeAddress == 0x0000000000000000) ||
    1cc4:	f7 01       	movw	r30, r14
    1cc6:	20 81       	ld	r18, Z
    1cc8:	31 81       	ldd	r19, Z+1	; 0x01
    1cca:	42 81       	ldd	r20, Z+2	; 0x02
    1ccc:	53 81       	ldd	r21, Z+3	; 0x03
    1cce:	64 81       	ldd	r22, Z+4	; 0x04
    1cd0:	75 81       	ldd	r23, Z+5	; 0x05
    1cd2:	86 81       	ldd	r24, Z+6	; 0x06
    1cd4:	97 81       	ldd	r25, Z+7	; 0x07
    1cd6:	af ef       	ldi	r26, 0xFF	; 255
    1cd8:	0e 94 39 19 	call	0x3272	; 0x3272 <__adddi3_s8>
    1cdc:	ad ef       	ldi	r26, 0xFD	; 253
    1cde:	0e 94 45 19 	call	0x328a	; 0x328a <__cmpdi2_s8>
    1ce2:	21 f0       	breq	.+8      	; 0x1cec <tal_init+0xda>
    1ce4:	18 f0       	brcs	.+6      	; 0x1cec <tal_init+0xda>
    1ce6:	09 e0       	ldi	r16, 0x09	; 9
    1ce8:	18 e0       	ldi	r17, 0x08	; 8

	/*
	 * Configure interrupt handling.
	 * Install handlers for the transceiver interrupts.
	 */
	pal_trx_irq_init_rx_end((FUNC_PTR)trx_rx_end_handler_cb);
    1cea:	e4 cf       	rjmp	.-56     	; 0x1cb4 <tal_init+0xa2>
    1cec:	85 ed       	ldi	r24, 0xD5	; 213
    1cee:	9f e0       	ldi	r25, 0x0F	; 15
	pal_trx_irq_init_tx_end((FUNC_PTR)trx_tx_end_handler_cb);
    1cf0:	38 d0       	rcall	.+112    	; 0x1d62 <pal_trx_irq_init_rx_end>
    1cf2:	86 ee       	ldi	r24, 0xE6	; 230
	pal_trx_irq_init_awake((FUNC_PTR)trx_awake_handler_cb);
    1cf4:	9f e0       	ldi	r25, 0x0F	; 15
    1cf6:	30 d0       	rcall	.+96     	; 0x1d58 <pal_trx_irq_init_tx_end>
    1cf8:	87 ef       	ldi	r24, 0xF7	; 247
    1cfa:	9f e0       	ldi	r25, 0x0F	; 15
	pal_trx_irq_init_tstamp((FUNC_PTR)trx_irq_timestamp_handler_cb);
#endif /* (defined BEACON_SUPPORT) || (defined ENABLE_TSTAMP) */

	/* Initialize the buffer management module and get a buffer to store
	 * reveived frames. */
	bmm_buffer_init();
    1cfc:	37 d0       	rcall	.+110    	; 0x1d6c <pal_trx_irq_init_awake>
	tal_rx_buffer = bmm_buffer_alloc(LARGE_BUFFER_SIZE);
    1cfe:	32 dc       	rcall	.-1948   	; 0x1564 <bmm_buffer_init>
    1d00:	8b e8       	ldi	r24, 0x8B	; 139
    1d02:	54 dc       	rcall	.-1880   	; 0x15ac <bmm_buffer_alloc>
    1d04:	90 93 bc 05 	sts	0x05BC, r25	; 0x8005bc <tal_rx_buffer+0x1>
    1d08:	80 93 bb 05 	sts	0x05BB, r24	; 0x8005bb <tal_rx_buffer>
	/* Init incoming frame queue */
#ifdef ENABLE_QUEUE_CAPACITY
	qmm_queue_init(&tal_incoming_frame_queue,
			TAL_INCOMING_FRAME_QUEUE_CAPACITY);
#else
	qmm_queue_init(&tal_incoming_frame_queue);
    1d0c:	82 e0       	ldi	r24, 0x02	; 2
    1d0e:	98 e0       	ldi	r25, 0x08	; 8
#endif  /* ENABLE_QUEUE_CAPACITY */

#ifdef ENABLE_TFA
	tfa_init();
    1d10:	de dc       	rcall	.-1604   	; 0x16ce <qmm_queue_init>
    1d12:	cb d5       	rcall	.+2966   	; 0x28aa <tfa_init>
#endif

	return MAC_SUCCESS;
    1d14:	17 c0       	rjmp	.+46     	; 0x1d44 <tal_init+0x132>
	DRTRAM2 = _BV(ENDRT);
	DRTRAM3 = _BV(ENDRT);

	/* Init the PAL and by this means also the transceiver interface */
	if (pal_init() != MAC_SUCCESS) {
		return FAILURE;
    1d16:	c5 e8       	ldi	r28, 0x85	; 133
    1d18:	15 c0       	rjmp	.+42     	; 0x1d44 <tal_init+0x132>
	 * Do the reset stuff.
	 * Set the default PIBs.
	 * Generate random seed.
	 */
	if (internal_tal_reset(true) != MAC_SUCCESS) {
		return FAILURE;
    1d1a:	c5 e8       	ldi	r28, 0x85	; 133
    1d1c:	13 c0       	rjmp	.+38     	; 0x1d44 <tal_init+0x132>
	/*
	 * Do the reset stuff.
	 * Set the default PIBs.
	 * Generate random seed.
	 */
	if (internal_tal_reset(true) != MAC_SUCCESS) {
    1d1e:	81 e0       	ldi	r24, 0x01	; 1
    1d20:	07 df       	rcall	.-498    	; 0x1b30 <internal_tal_reset>
    1d22:	c8 2f       	mov	r28, r24
    1d24:	81 11       	cpse	r24, r1
    1d26:	f9 cf       	rjmp	.-14     	; 0x1d1a <tal_init+0x108>
    1d28:	0f 2e       	mov	r0, r31
	/*
	 * This while loop is on purpose, since just in the
	 * rare case that such an address is randomly
	 * generated again, we must repeat this.
	 */
	while ((tal_pib.IeeeAddress == 0x0000000000000000) ||
    1d2a:	f9 e0       	ldi	r31, 0x09	; 9
    1d2c:	ef 2e       	mov	r14, r31
    1d2e:	f8 e0       	ldi	r31, 0x08	; 8
    1d30:	ff 2e       	mov	r15, r31
    1d32:	f0 2d       	mov	r31, r0
    1d34:	0f 2e       	mov	r0, r31
    1d36:	f1 e1       	ldi	r31, 0x11	; 17
    1d38:	cf 2e       	mov	r12, r31
    1d3a:	f8 e0       	ldi	r31, 0x08	; 8
    1d3c:	df 2e       	mov	r13, r31
    1d3e:	f0 2d       	mov	r31, r0
    1d40:	c1 cf       	rjmp	.-126    	; 0x1cc4 <tal_init+0xb2>
    1d42:	c5 e8       	ldi	r28, 0x85	; 133
	if (pal_init() != MAC_SUCCESS) {
		return FAILURE;
	}

	if (trx_init() != MAC_SUCCESS) {
		return FAILURE;
    1d44:	8c 2f       	mov	r24, r28
#ifdef ENABLE_TFA
	tfa_init();
#endif

	return MAC_SUCCESS;
} /* tal_init() */
    1d46:	df 91       	pop	r29
    1d48:	cf 91       	pop	r28
    1d4a:	1f 91       	pop	r17
    1d4c:	0f 91       	pop	r16
    1d4e:	ff 90       	pop	r15
    1d50:	ef 90       	pop	r14
    1d52:	df 90       	pop	r13
    1d54:	cf 90       	pop	r12
    1d56:	08 95       	ret

00001d58 <pal_trx_irq_init_tx_end>:
    1d58:	90 93 c4 05 	sts	0x05C4, r25	; 0x8005c4 <irq_hdl_trx_tx_end+0x1>
 *
 * \param trx_irq_cb Callback function for the transceiver CCA ED END interrupt
 */
void pal_trx_irq_init_cca_ed(FUNC_PTR trx_irq_cb)
{
	irq_hdl_trx_cca_ed = (irq_handler_t)trx_irq_cb;
    1d5c:	80 93 c3 05 	sts	0x05C3, r24	; 0x8005c3 <irq_hdl_trx_tx_end>
    1d60:	08 95       	ret

00001d62 <pal_trx_irq_init_rx_end>:
    1d62:	90 93 c2 05 	sts	0x05C2, r25	; 0x8005c2 <irq_hdl_trx_rx_end+0x1>
    1d66:	80 93 c1 05 	sts	0x05C1, r24	; 0x8005c1 <irq_hdl_trx_rx_end>
    1d6a:	08 95       	ret

00001d6c <pal_trx_irq_init_awake>:
 *
 * \param trx_irq_cb Callback function for the transceiver AWAKE interrupt
 */
void pal_trx_irq_init_awake(FUNC_PTR trx_irq_cb)
{
	irq_hdl_trx_awake = (irq_handler_t)trx_irq_cb;
    1d6c:	90 93 be 05 	sts	0x05BE, r25	; 0x8005be <irq_hdl_trx_awake+0x1>
    1d70:	80 93 bd 05 	sts	0x05BD, r24	; 0x8005bd <irq_hdl_trx_awake>
    1d74:	08 95       	ret

00001d76 <__vector_63>:

/**
 * \brief ISR for transceiver's transmit end interrupt
 */
ISR(TRX24_TX_END_vect)
{
    1d76:	1f 92       	push	r1
    1d78:	0f 92       	push	r0
    1d7a:	0f b6       	in	r0, 0x3f	; 63
    1d7c:	0f 92       	push	r0
    1d7e:	11 24       	eor	r1, r1
    1d80:	0b b6       	in	r0, 0x3b	; 59
    1d82:	0f 92       	push	r0
    1d84:	2f 93       	push	r18
    1d86:	3f 93       	push	r19
    1d88:	4f 93       	push	r20
    1d8a:	5f 93       	push	r21
    1d8c:	6f 93       	push	r22
    1d8e:	7f 93       	push	r23
    1d90:	8f 93       	push	r24
    1d92:	9f 93       	push	r25
    1d94:	af 93       	push	r26
    1d96:	bf 93       	push	r27
    1d98:	ef 93       	push	r30
    1d9a:	ff 93       	push	r31
	irq_hdl_trx_tx_end();
    1d9c:	e0 91 c3 05 	lds	r30, 0x05C3	; 0x8005c3 <irq_hdl_trx_tx_end>
    1da0:	f0 91 c4 05 	lds	r31, 0x05C4	; 0x8005c4 <irq_hdl_trx_tx_end+0x1>
    1da4:	19 95       	eicall
}
    1da6:	ff 91       	pop	r31
    1da8:	ef 91       	pop	r30
    1daa:	bf 91       	pop	r27
    1dac:	af 91       	pop	r26
    1dae:	9f 91       	pop	r25
    1db0:	8f 91       	pop	r24
    1db2:	7f 91       	pop	r23
    1db4:	6f 91       	pop	r22
    1db6:	5f 91       	pop	r21
    1db8:	4f 91       	pop	r20
    1dba:	3f 91       	pop	r19
    1dbc:	2f 91       	pop	r18
    1dbe:	0f 90       	pop	r0
    1dc0:	0b be       	out	0x3b, r0	; 59
    1dc2:	0f 90       	pop	r0
    1dc4:	0f be       	out	0x3f, r0	; 63
    1dc6:	0f 90       	pop	r0
    1dc8:	1f 90       	pop	r1
    1dca:	18 95       	reti

00001dcc <__vector_60>:

/**
 * \brief ISR for transceiver's receive end interrupt
 */
ISR(TRX24_RX_END_vect)
{
    1dcc:	1f 92       	push	r1
    1dce:	0f 92       	push	r0
    1dd0:	0f b6       	in	r0, 0x3f	; 63
    1dd2:	0f 92       	push	r0
    1dd4:	11 24       	eor	r1, r1
    1dd6:	0b b6       	in	r0, 0x3b	; 59
    1dd8:	0f 92       	push	r0
    1dda:	2f 93       	push	r18
    1ddc:	3f 93       	push	r19
    1dde:	4f 93       	push	r20
    1de0:	5f 93       	push	r21
    1de2:	6f 93       	push	r22
    1de4:	7f 93       	push	r23
    1de6:	8f 93       	push	r24
    1de8:	9f 93       	push	r25
    1dea:	af 93       	push	r26
    1dec:	bf 93       	push	r27
    1dee:	ef 93       	push	r30
    1df0:	ff 93       	push	r31
	irq_hdl_trx_rx_end();
    1df2:	e0 91 c1 05 	lds	r30, 0x05C1	; 0x8005c1 <irq_hdl_trx_rx_end>
    1df6:	f0 91 c2 05 	lds	r31, 0x05C2	; 0x8005c2 <irq_hdl_trx_rx_end+0x1>
    1dfa:	19 95       	eicall
}
    1dfc:	ff 91       	pop	r31
    1dfe:	ef 91       	pop	r30
    1e00:	bf 91       	pop	r27
    1e02:	af 91       	pop	r26
    1e04:	9f 91       	pop	r25
    1e06:	8f 91       	pop	r24
    1e08:	7f 91       	pop	r23
    1e0a:	6f 91       	pop	r22
    1e0c:	5f 91       	pop	r21
    1e0e:	4f 91       	pop	r20
    1e10:	3f 91       	pop	r19
    1e12:	2f 91       	pop	r18
    1e14:	0f 90       	pop	r0
    1e16:	0b be       	out	0x3b, r0	; 59
    1e18:	0f 90       	pop	r0
    1e1a:	0f be       	out	0x3f, r0	; 63
    1e1c:	0f 90       	pop	r0
    1e1e:	1f 90       	pop	r1
    1e20:	18 95       	reti

00001e22 <__vector_61>:

/**
 * \brief ISR for transceiver's CCA/ED measurement done interrupt
 */
ISR(TRX24_CCA_ED_DONE_vect)
{
    1e22:	1f 92       	push	r1
    1e24:	0f 92       	push	r0
    1e26:	0f b6       	in	r0, 0x3f	; 63
    1e28:	0f 92       	push	r0
    1e2a:	11 24       	eor	r1, r1
    1e2c:	0b b6       	in	r0, 0x3b	; 59
    1e2e:	0f 92       	push	r0
    1e30:	2f 93       	push	r18
    1e32:	3f 93       	push	r19
    1e34:	4f 93       	push	r20
    1e36:	5f 93       	push	r21
    1e38:	6f 93       	push	r22
    1e3a:	7f 93       	push	r23
    1e3c:	8f 93       	push	r24
    1e3e:	9f 93       	push	r25
    1e40:	af 93       	push	r26
    1e42:	bf 93       	push	r27
    1e44:	ef 93       	push	r30
    1e46:	ff 93       	push	r31
	irq_hdl_trx_cca_ed();
    1e48:	e0 91 bf 05 	lds	r30, 0x05BF	; 0x8005bf <irq_hdl_trx_cca_ed>
    1e4c:	f0 91 c0 05 	lds	r31, 0x05C0	; 0x8005c0 <irq_hdl_trx_cca_ed+0x1>
    1e50:	19 95       	eicall
}
    1e52:	ff 91       	pop	r31
    1e54:	ef 91       	pop	r30
    1e56:	bf 91       	pop	r27
    1e58:	af 91       	pop	r26
    1e5a:	9f 91       	pop	r25
    1e5c:	8f 91       	pop	r24
    1e5e:	7f 91       	pop	r23
    1e60:	6f 91       	pop	r22
    1e62:	5f 91       	pop	r21
    1e64:	4f 91       	pop	r20
    1e66:	3f 91       	pop	r19
    1e68:	2f 91       	pop	r18
    1e6a:	0f 90       	pop	r0
    1e6c:	0b be       	out	0x3b, r0	; 59
    1e6e:	0f 90       	pop	r0
    1e70:	0f be       	out	0x3f, r0	; 63
    1e72:	0f 90       	pop	r0
    1e74:	1f 90       	pop	r1
    1e76:	18 95       	reti

00001e78 <__vector_64>:

/**
 * \brief ISR for transceiver's Awake interrupt
 */
ISR(TRX24_AWAKE_vect)
{
    1e78:	1f 92       	push	r1
    1e7a:	0f 92       	push	r0
    1e7c:	0f b6       	in	r0, 0x3f	; 63
    1e7e:	0f 92       	push	r0
    1e80:	11 24       	eor	r1, r1
    1e82:	0b b6       	in	r0, 0x3b	; 59
    1e84:	0f 92       	push	r0
    1e86:	2f 93       	push	r18
    1e88:	3f 93       	push	r19
    1e8a:	4f 93       	push	r20
    1e8c:	5f 93       	push	r21
    1e8e:	6f 93       	push	r22
    1e90:	7f 93       	push	r23
    1e92:	8f 93       	push	r24
    1e94:	9f 93       	push	r25
    1e96:	af 93       	push	r26
    1e98:	bf 93       	push	r27
    1e9a:	ef 93       	push	r30
    1e9c:	ff 93       	push	r31
	irq_hdl_trx_awake();
    1e9e:	e0 91 bd 05 	lds	r30, 0x05BD	; 0x8005bd <irq_hdl_trx_awake>
    1ea2:	f0 91 be 05 	lds	r31, 0x05BE	; 0x8005be <irq_hdl_trx_awake+0x1>
    1ea6:	19 95       	eicall
}
    1ea8:	ff 91       	pop	r31
    1eaa:	ef 91       	pop	r30
    1eac:	bf 91       	pop	r27
    1eae:	af 91       	pop	r26
    1eb0:	9f 91       	pop	r25
    1eb2:	8f 91       	pop	r24
    1eb4:	7f 91       	pop	r23
    1eb6:	6f 91       	pop	r22
    1eb8:	5f 91       	pop	r21
    1eba:	4f 91       	pop	r20
    1ebc:	3f 91       	pop	r19
    1ebe:	2f 91       	pop	r18
    1ec0:	0f 90       	pop	r0
    1ec2:	0b be       	out	0x3b, r0	; 59
    1ec4:	0f 90       	pop	r0
    1ec6:	0f be       	out	0x3f, r0	; 63
    1ec8:	0f 90       	pop	r0
    1eca:	1f 90       	pop	r1
    1ecc:	18 95       	reti

00001ece <__vector_59>:
 *
 * By the time the SFD is detected, the hardware timestamps the
 * current frame in the SCTSR register.
 */
ISR(TRX24_RX_START_vect)
{
    1ece:	1f 92       	push	r1
    1ed0:	0f 92       	push	r0
    1ed2:	0f b6       	in	r0, 0x3f	; 63
    1ed4:	0f 92       	push	r0
    1ed6:	11 24       	eor	r1, r1
#if (defined BEACON_SUPPORT) || (defined ENABLE_TSTAMP)
	irq_hdl_trx_tstamp();
#endif  /* #if (defined BEACON_SUPPORT) || (defined ENABLE_TSTAMP) */
}
    1ed8:	0f 90       	pop	r0
    1eda:	0f be       	out	0x3f, r0	; 63
    1edc:	0f 90       	pop	r0
    1ede:	1f 90       	pop	r1
    1ee0:	18 95       	reti

00001ee2 <__vector_57>:

/**
 * \brief ISR for transceiver's PLL lock interrupt
 */
ISR(TRX24_PLL_LOCK_vect)
{
    1ee2:	1f 92       	push	r1
    1ee4:	0f 92       	push	r0
    1ee6:	0f b6       	in	r0, 0x3f	; 63
    1ee8:	0f 92       	push	r0
    1eea:	11 24       	eor	r1, r1
#ifdef ENABLE_ALL_TRX_IRQS
	irq_hdl_trx_pll_lock();
#endif  /*  ENABLE_ALL_TRX_IRQS*/
}
    1eec:	0f 90       	pop	r0
    1eee:	0f be       	out	0x3f, r0	; 63
    1ef0:	0f 90       	pop	r0
    1ef2:	1f 90       	pop	r1
    1ef4:	18 95       	reti

00001ef6 <__vector_58>:

/**
 * \brief ISR for transceiver's PLL unlock interrupt
 */
ISR(TRX24_PLL_UNLOCK_vect)
{
    1ef6:	1f 92       	push	r1
    1ef8:	0f 92       	push	r0
    1efa:	0f b6       	in	r0, 0x3f	; 63
    1efc:	0f 92       	push	r0
    1efe:	11 24       	eor	r1, r1
#ifdef ENABLE_ALL_TRX_IRQS
	irq_hdl_trx_pll_unlock();
#endif  /*  ENABLE_ALL_TRX_IRQS*/
}
    1f00:	0f 90       	pop	r0
    1f02:	0f be       	out	0x3f, r0	; 63
    1f04:	0f 90       	pop	r0
    1f06:	1f 90       	pop	r1
    1f08:	18 95       	reti

00001f0a <__vector_62>:

/**
 * \brief ISR for transceiver's address match interrupt
 */
ISR(TRX24_XAH_AMI_vect)
{
    1f0a:	1f 92       	push	r1
    1f0c:	0f 92       	push	r0
    1f0e:	0f b6       	in	r0, 0x3f	; 63
    1f10:	0f 92       	push	r0
    1f12:	11 24       	eor	r1, r1
#ifdef ENABLE_ALL_TRX_IRQS
	irq_hdl_trx_ami();
#endif  /*  ENABLE_ALL_TRX_IRQS*/
}
    1f14:	0f 90       	pop	r0
    1f16:	0f be       	out	0x3f, r0	; 63
    1f18:	0f 90       	pop	r0
    1f1a:	1f 90       	pop	r1
    1f1c:	18 95       	reti

00001f1e <__vector_71>:

/**
 * \brief ISR for transceiver's battery low interrupt
 */
ISR(BAT_LOW_vect)
{
    1f1e:	1f 92       	push	r1
    1f20:	0f 92       	push	r0
    1f22:	0f b6       	in	r0, 0x3f	; 63
    1f24:	0f 92       	push	r0
    1f26:	11 24       	eor	r1, r1
#ifdef ENABLE_ALL_TRX_IRQS
	irq_hdl_trx_batmon();
#endif  /*  ENABLE_ALL_TRX_IRQS*/
}
    1f28:	0f 90       	pop	r0
    1f2a:	0f be       	out	0x3f, r0	; 63
    1f2c:	0f 90       	pop	r0
    1f2e:	1f 90       	pop	r1
    1f30:	18 95       	reti

00001f32 <__vector_70>:

/**
 * \brief ISR for transceiver's AES interrupt
 */
ISR(AES_READY_vect)
{
    1f32:	1f 92       	push	r1
    1f34:	0f 92       	push	r0
    1f36:	0f b6       	in	r0, 0x3f	; 63
    1f38:	0f 92       	push	r0
    1f3a:	11 24       	eor	r1, r1
#ifdef ENABLE_ALL_TRX_IRQS
	irq_hdl_trx_aes_ready();
#endif  /*  ENABLE_ALL_TRX_IRQS*/
}
    1f3c:	0f 90       	pop	r0
    1f3e:	0f be       	out	0x3f, r0	; 63
    1f40:	0f 90       	pop	r0
    1f42:	1f 90       	pop	r1
    1f44:	18 95       	reti

00001f46 <__vector_72>:

/**
 * \brief ISR for transceiver's TX_START interrupt
 */
ISR(TRX24_TX_START_vect)
{
    1f46:	1f 92       	push	r1
    1f48:	0f 92       	push	r0
    1f4a:	0f b6       	in	r0, 0x3f	; 63
    1f4c:	0f 92       	push	r0
    1f4e:	11 24       	eor	r1, r1
	pal_tx_timestamp = PAL_US_PER_SYMBOLS * SC_READ32(SCCNT);
#endif
#ifdef ENABLE_ALL_TRX_IRQS
	irq_hdl_trx_tx_start();
#endif  /*  ENABLE_ALL_TRX_IRQS*/
}
    1f50:	0f 90       	pop	r0
    1f52:	0f be       	out	0x3f, r0	; 63
    1f54:	0f 90       	pop	r0
    1f56:	1f 90       	pop	r1
    1f58:	18 95       	reti

00001f5a <__vector_73>:

/**
 * \brief ISR for transceiver's AMI0 interrupt
 */
ISR(TRX24_AMI0_vect)
{
    1f5a:	1f 92       	push	r1
    1f5c:	0f 92       	push	r0
    1f5e:	0f b6       	in	r0, 0x3f	; 63
    1f60:	0f 92       	push	r0
    1f62:	11 24       	eor	r1, r1
#ifdef ENABLE_ALL_TRX_IRQS
	irq_hdl_trx_ami0();
#endif  /*  ENABLE_ALL_TRX_IRQS*/
}
    1f64:	0f 90       	pop	r0
    1f66:	0f be       	out	0x3f, r0	; 63
    1f68:	0f 90       	pop	r0
    1f6a:	1f 90       	pop	r1
    1f6c:	18 95       	reti

00001f6e <__vector_74>:

/**
 * \brief ISR for transceiver's AMI1 interrupt
 */
ISR(TRX24_AMI1_vect)
{
    1f6e:	1f 92       	push	r1
    1f70:	0f 92       	push	r0
    1f72:	0f b6       	in	r0, 0x3f	; 63
    1f74:	0f 92       	push	r0
    1f76:	11 24       	eor	r1, r1
#ifdef ENABLE_ALL_TRX_IRQS
	irq_hdl_trx_ami1();
#endif  /*  ENABLE_ALL_TRX_IRQS*/
}
    1f78:	0f 90       	pop	r0
    1f7a:	0f be       	out	0x3f, r0	; 63
    1f7c:	0f 90       	pop	r0
    1f7e:	1f 90       	pop	r1
    1f80:	18 95       	reti

00001f82 <__vector_75>:

/**
 * \brief ISR for transceiver's AMI2 interrupt
 */
ISR(TRX24_AMI2_vect)
{
    1f82:	1f 92       	push	r1
    1f84:	0f 92       	push	r0
    1f86:	0f b6       	in	r0, 0x3f	; 63
    1f88:	0f 92       	push	r0
    1f8a:	11 24       	eor	r1, r1
#ifdef ENABLE_ALL_TRX_IRQS
	irq_hdl_trx_ami2();
#endif  /*  ENABLE_ALL_TRX_IRQS*/
}
    1f8c:	0f 90       	pop	r0
    1f8e:	0f be       	out	0x3f, r0	; 63
    1f90:	0f 90       	pop	r0
    1f92:	1f 90       	pop	r1
    1f94:	18 95       	reti

00001f96 <__vector_76>:

/**
 * \brief ISR for transceiver's AMI3 interrupt
 */
ISR(TRX24_AMI3_vect)
{
    1f96:	1f 92       	push	r1
    1f98:	0f 92       	push	r0
    1f9a:	0f b6       	in	r0, 0x3f	; 63
    1f9c:	0f 92       	push	r0
    1f9e:	11 24       	eor	r1, r1
#ifdef ENABLE_ALL_TRX_IRQS
	irq_hdl_trx_ami3();
#endif  /*  ENABLE_ALL_TRX_IRQS*/
}
    1fa0:	0f 90       	pop	r0
    1fa2:	0f be       	out	0x3f, r0	; 63
    1fa4:	0f 90       	pop	r0
    1fa6:	1f 90       	pop	r1
    1fa8:	18 95       	reti

00001faa <trx_rx_end_handler_cb>:
 * \brief Transceiver interrupt handler
 *
 * This function handles the transceiver generated interrupts for RX end.
 */
void trx_rx_end_handler_cb(void)
{
    1faa:	1f 93       	push	r17
    1fac:	cf 93       	push	r28
    1fae:	df 93       	push	r29
    1fb0:	1f 92       	push	r1
    1fb2:	cd b7       	in	r28, 0x3d	; 61
    1fb4:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1fb6:	8f b7       	in	r24, 0x3f	; 63
    1fb8:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    1fba:	f8 94       	cli
	return flags;
    1fbc:	19 81       	ldd	r17, Y+1	; 0x01
	ENTER_CRITICAL_REGION();

	/* Handle rx interrupt. */
	handle_received_frame_irq(); /* see tal_rx.c */
    1fbe:	19 d2       	rcall	.+1074   	; 0x23f2 <handle_received_frame_irq>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1fc0:	1f bf       	out	0x3f, r17	; 63

	LEAVE_CRITICAL_REGION();
} /* trx_rx_end_handler_cb() */
    1fc2:	0f 90       	pop	r0
    1fc4:	df 91       	pop	r29
    1fc6:	cf 91       	pop	r28
    1fc8:	1f 91       	pop	r17
    1fca:	08 95       	ret

00001fcc <trx_tx_end_handler_cb>:
 * \brief Transceiver interrupt handler
 *
 * This function handles the transceiver generated interrupts for TX end.
 */
void trx_tx_end_handler_cb(void)
{
    1fcc:	1f 93       	push	r17
    1fce:	cf 93       	push	r28
    1fd0:	df 93       	push	r29
    1fd2:	1f 92       	push	r1
    1fd4:	cd b7       	in	r28, 0x3d	; 61
    1fd6:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1fd8:	8f b7       	in	r24, 0x3f	; 63
    1fda:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    1fdc:	f8 94       	cli
	return flags;
    1fde:	19 81       	ldd	r17, Y+1	; 0x01
	ENTER_CRITICAL_REGION();

	/* Get the result and push it to the queue. */
	handle_tx_end_irq();        /* see tal_tx.c */
    1fe0:	a6 d3       	rcall	.+1868   	; 0x272e <handle_tx_end_irq>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1fe2:	1f bf       	out	0x3f, r17	; 63

	LEAVE_CRITICAL_REGION();
} /* trx_tx_end_handler_cb() */
    1fe4:	0f 90       	pop	r0
    1fe6:	df 91       	pop	r29
    1fe8:	cf 91       	pop	r28
    1fea:	1f 91       	pop	r17
    1fec:	08 95       	ret

00001fee <trx_awake_handler_cb>:
 * This function handles the transceiver awake end interrupt.
 */
void trx_awake_handler_cb(void)
{
	/* Set the wake-up flag. */
	tal_awake_end_flag = true;
    1fee:	81 e0       	ldi	r24, 0x01	; 1
    1ff0:	80 93 2c 08 	sts	0x082C, r24	; 0x80082c <tal_awake_end_flag>
    1ff4:	08 95       	ret

00001ff6 <limit_tx_pwr>:
		/* Invalid attribute id */
		return MAC_UNSUPPORTED_ATTRIBUTE;
	}

	return MAC_SUCCESS;
} /* tal_pib_get() */
    1ff6:	85 fd       	sbrc	r24, 5
    1ff8:	03 c0       	rjmp	.+6      	; 0x2000 <__EEPROM_REGION_LENGTH__>
    1ffa:	98 2f       	mov	r25, r24
    1ffc:	9f 73       	andi	r25, 0x3F	; 63
    1ffe:	04 c0       	rjmp	.+8      	; 0x2008 <__EEPROM_REGION_LENGTH__+0x8>
    2000:	98 2f       	mov	r25, r24
    2002:	91 95       	neg	r25
    2004:	9f 71       	andi	r25, 0x1F	; 31
    2006:	91 95       	neg	r25
    2008:	e2 e6       	ldi	r30, 0x62	; 98
    200a:	f1 e0       	ldi	r31, 0x01	; 1
    200c:	24 91       	lpm	r18, Z
    200e:	29 17       	cp	r18, r25
    2010:	54 f4       	brge	.+20     	; 0x2026 <__EEPROM_REGION_LENGTH__+0x26>
    2012:	84 91       	lpm	r24, Z
    2014:	80 3e       	cpi	r24, 0xE0	; 224
    2016:	b4 f0       	brlt	.+44     	; 0x2044 <__EEPROM_REGION_LENGTH__+0x44>
    2018:	80 32       	cpi	r24, 0x20	; 32
    201a:	b4 f4       	brge	.+44     	; 0x2048 <__EEPROM_REGION_LENGTH__+0x48>
    201c:	88 23       	and	r24, r24
    201e:	cc f4       	brge	.+50     	; 0x2052 <__EEPROM_REGION_LENGTH__+0x52>
    2020:	8f 71       	andi	r24, 0x1F	; 31
    2022:	80 62       	ori	r24, 0x20	; 32
    2024:	16 c0       	rjmp	.+44     	; 0x2052 <__EEPROM_REGION_LENGTH__+0x52>
    2026:	e1 e7       	ldi	r30, 0x71	; 113
    2028:	f1 e0       	ldi	r31, 0x01	; 1
    202a:	24 91       	lpm	r18, Z
    202c:	92 17       	cp	r25, r18
    202e:	8c f4       	brge	.+34     	; 0x2052 <__EEPROM_REGION_LENGTH__+0x52>
    2030:	84 91       	lpm	r24, Z
    2032:	80 3e       	cpi	r24, 0xE0	; 224
    2034:	5c f0       	brlt	.+22     	; 0x204c <__EEPROM_REGION_LENGTH__+0x4c>
    2036:	80 32       	cpi	r24, 0x20	; 32
    2038:	5c f4       	brge	.+22     	; 0x2050 <__EEPROM_REGION_LENGTH__+0x50>
    203a:	88 23       	and	r24, r24
    203c:	54 f4       	brge	.+20     	; 0x2052 <__EEPROM_REGION_LENGTH__+0x52>
    203e:	8f 71       	andi	r24, 0x1F	; 31
    2040:	80 62       	ori	r24, 0x20	; 32
    2042:	07 c0       	rjmp	.+14     	; 0x2052 <__EEPROM_REGION_LENGTH__+0x52>
    2044:	80 e2       	ldi	r24, 0x20	; 32
    2046:	05 c0       	rjmp	.+10     	; 0x2052 <__EEPROM_REGION_LENGTH__+0x52>
    2048:	8f e1       	ldi	r24, 0x1F	; 31
    204a:	03 c0       	rjmp	.+6      	; 0x2052 <__EEPROM_REGION_LENGTH__+0x52>
    204c:	80 e2       	ldi	r24, 0x20	; 32
    204e:	01 c0       	rjmp	.+2      	; 0x2052 <__EEPROM_REGION_LENGTH__+0x52>
    2050:	8f e1       	ldi	r24, 0x1F	; 31
    2052:	80 68       	ori	r24, 0x80	; 128
    2054:	08 95       	ret

00002056 <init_tal_pib>:
    2056:	cf 93       	push	r28
    2058:	df 93       	push	r29
    205a:	c9 e0       	ldi	r28, 0x09	; 9
    205c:	d8 e0       	ldi	r29, 0x08	; 8
    205e:	84 e0       	ldi	r24, 0x04	; 4
    2060:	8c 8b       	std	Y+20, r24	; 0x14
    2062:	83 e0       	ldi	r24, 0x03	; 3
    2064:	8d 8b       	std	Y+21, r24	; 0x15
    2066:	2f ef       	ldi	r18, 0xFF	; 255
    2068:	3f ef       	ldi	r19, 0xFF	; 255
    206a:	3f 87       	std	Y+15, r19	; 0x0f
    206c:	2e 87       	std	Y+14, r18	; 0x0e
    206e:	3d 87       	std	Y+13, r19	; 0x0d
    2070:	2c 87       	std	Y+12, r18	; 0x0c
    2072:	9b e0       	ldi	r25, 0x0B	; 11
    2074:	9b 8b       	std	Y+19, r25	; 0x13
    2076:	18 8e       	std	Y+24, r1	; 0x18
    2078:	40 e0       	ldi	r20, 0x00	; 0
    207a:	58 ef       	ldi	r21, 0xF8	; 248
    207c:	6f ef       	ldi	r22, 0xFF	; 255
    207e:	77 e0       	ldi	r23, 0x07	; 7
    2080:	48 87       	std	Y+8, r20	; 0x08
    2082:	59 87       	std	Y+9, r21	; 0x09
    2084:	6a 87       	std	Y+10, r22	; 0x0a
    2086:	7b 87       	std	Y+11, r23	; 0x0b
    2088:	2a e0       	ldi	r18, 0x0A	; 10
    208a:	31 e0       	ldi	r19, 0x01	; 1
    208c:	39 8b       	std	Y+17, r19	; 0x11
    208e:	28 8b       	std	Y+16, r18	; 0x10
    2090:	9a e0       	ldi	r25, 0x0A	; 10
    2092:	99 8f       	std	Y+25, r25	; 0x19
    2094:	92 e0       	ldi	r25, 0x02	; 2
    2096:	9a 8f       	std	Y+26, r25	; 0x1a
    2098:	95 e0       	ldi	r25, 0x05	; 5
    209a:	9b 8f       	std	Y+27, r25	; 0x1b
    209c:	8c 8f       	std	Y+28, r24	; 0x1c
    209e:	84 e8       	ldi	r24, 0x84	; 132
    20a0:	aa df       	rcall	.-172    	; 0x1ff6 <limit_tx_pwr>
    20a2:	8f 8b       	std	Y+23, r24	; 0x17
    20a4:	81 e0       	ldi	r24, 0x01	; 1
    20a6:	8a 8b       	std	Y+18, r24	; 0x12
    20a8:	1e 8a       	std	Y+22, r1	; 0x16
    20aa:	df 91       	pop	r29
    20ac:	cf 91       	pop	r28
    20ae:	08 95       	ret

000020b0 <convert_phyTransmitPower_to_reg_value>:
{
	int8_t dbm_value;
	uint8_t i;
	int8_t trx_tx_level;

	dbm_value = CONV_phyTransmitPower_TO_DBM(phyTransmitPower_value);
    20b0:	85 fd       	sbrc	r24, 5
    20b2:	02 c0       	rjmp	.+4      	; 0x20b8 <convert_phyTransmitPower_to_reg_value+0x8>
    20b4:	8f 73       	andi	r24, 0x3F	; 63
    20b6:	03 c0       	rjmp	.+6      	; 0x20be <convert_phyTransmitPower_to_reg_value+0xe>
    20b8:	81 95       	neg	r24
    20ba:	8f 71       	andi	r24, 0x1F	; 31
    20bc:	81 95       	neg	r24

	/* Compare to the register value to identify the value that matches. */
	for (i = 0; i < sizeof(tx_pwr_table); i++) {
		trx_tx_level = (int8_t)PGM_READ_BYTE(&tx_pwr_table[i]);
    20be:	e2 e6       	ldi	r30, 0x62	; 98
    20c0:	f1 e0       	ldi	r31, 0x01	; 1
    20c2:	94 91       	lpm	r25, Z
		if (trx_tx_level <= dbm_value) {
    20c4:	89 17       	cp	r24, r25
    20c6:	3c f4       	brge	.+14     	; 0x20d6 <convert_phyTransmitPower_to_reg_value+0x26>
    20c8:	e3 e6       	ldi	r30, 0x63	; 99
    20ca:	f1 e0       	ldi	r31, 0x01	; 1
	int8_t trx_tx_level;

	dbm_value = CONV_phyTransmitPower_TO_DBM(phyTransmitPower_value);

	/* Compare to the register value to identify the value that matches. */
	for (i = 0; i < sizeof(tx_pwr_table); i++) {
    20cc:	21 e0       	ldi	r18, 0x01	; 1
		trx_tx_level = (int8_t)PGM_READ_BYTE(&tx_pwr_table[i]);
    20ce:	94 91       	lpm	r25, Z
		if (trx_tx_level <= dbm_value) {
    20d0:	89 17       	cp	r24, r25
    20d2:	3c f0       	brlt	.+14     	; 0x20e2 <convert_phyTransmitPower_to_reg_value+0x32>
    20d4:	01 c0       	rjmp	.+2      	; 0x20d8 <convert_phyTransmitPower_to_reg_value+0x28>
	int8_t trx_tx_level;

	dbm_value = CONV_phyTransmitPower_TO_DBM(phyTransmitPower_value);

	/* Compare to the register value to identify the value that matches. */
	for (i = 0; i < sizeof(tx_pwr_table); i++) {
    20d6:	20 e0       	ldi	r18, 0x00	; 0
		trx_tx_level = (int8_t)PGM_READ_BYTE(&tx_pwr_table[i]);
		if (trx_tx_level <= dbm_value) {
			if (trx_tx_level < dbm_value) {
    20d8:	98 17       	cp	r25, r24
    20da:	4c f4       	brge	.+18     	; 0x20ee <convert_phyTransmitPower_to_reg_value+0x3e>
				return (i - 1);
    20dc:	8f ef       	ldi	r24, 0xFF	; 255
    20de:	82 0f       	add	r24, r18
    20e0:	08 95       	ret
	int8_t trx_tx_level;

	dbm_value = CONV_phyTransmitPower_TO_DBM(phyTransmitPower_value);

	/* Compare to the register value to identify the value that matches. */
	for (i = 0; i < sizeof(tx_pwr_table); i++) {
    20e2:	2f 5f       	subi	r18, 0xFF	; 255
    20e4:	31 96       	adiw	r30, 0x01	; 1
    20e6:	20 31       	cpi	r18, 0x10	; 16
    20e8:	91 f7       	brne	.-28     	; 0x20ce <convert_phyTransmitPower_to_reg_value+0x1e>
			return i;
		}
	}

	/* This code should never be reached. */
	return 0;
    20ea:	80 e0       	ldi	r24, 0x00	; 0
    20ec:	08 95       	ret
    20ee:	82 2f       	mov	r24, r18
}
    20f0:	08 95       	ret

000020f2 <write_all_tal_pib_to_trx>:
 *
 * This function writes all shadow PIB variables to the transceiver.
 * It is assumed that the radio does not sleep.
 */
void write_all_tal_pib_to_trx(void)
{
    20f2:	cf 93       	push	r28
    20f4:	df 93       	push	r29
	uint8_t *ptr_to_reg;

	trx_reg_write(RG_PAN_ID_0, (uint8_t)tal_pib.PANId);
    20f6:	e9 e0       	ldi	r30, 0x09	; 9
    20f8:	f8 e0       	ldi	r31, 0x08	; 8
    20fa:	86 85       	ldd	r24, Z+14	; 0x0e
    20fc:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <__TEXT_REGION_LENGTH__+0x7c0162>
	trx_reg_write(RG_PAN_ID_1, (uint8_t)(tal_pib.PANId >> 8));
    2100:	87 85       	ldd	r24, Z+15	; 0x0f
    2102:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <__TEXT_REGION_LENGTH__+0x7c0163>
    2106:	e4 e6       	ldi	r30, 0x64	; 100
    2108:	f1 e0       	ldi	r31, 0x01	; 1

	ptr_to_reg = (uint8_t *)&tal_pib.IeeeAddress;
    210a:	a9 e0       	ldi	r26, 0x09	; 9
    210c:	b8 e0       	ldi	r27, 0x08	; 8
	for (uint8_t i = 0; i < 8; i++) {
		trx_reg_write((RG_IEEE_ADDR_0 + i), *ptr_to_reg);
    210e:	8d 91       	ld	r24, X+
    2110:	81 93       	st	Z+, r24

	trx_reg_write(RG_PAN_ID_0, (uint8_t)tal_pib.PANId);
	trx_reg_write(RG_PAN_ID_1, (uint8_t)(tal_pib.PANId >> 8));

	ptr_to_reg = (uint8_t *)&tal_pib.IeeeAddress;
	for (uint8_t i = 0; i < 8; i++) {
    2112:	ec 36       	cpi	r30, 0x6C	; 108
    2114:	31 e0       	ldi	r19, 0x01	; 1
    2116:	f3 07       	cpc	r31, r19
    2118:	d1 f7       	brne	.-12     	; 0x210e <write_all_tal_pib_to_trx+0x1c>
		trx_reg_write((RG_IEEE_ADDR_0 + i), *ptr_to_reg);
		ptr_to_reg++;
	}

	trx_reg_write(RG_SHORT_ADDR_0, (uint8_t)tal_pib.ShortAddress);
    211a:	e9 e0       	ldi	r30, 0x09	; 9
    211c:	f8 e0       	ldi	r31, 0x08	; 8
    211e:	84 85       	ldd	r24, Z+12	; 0x0c
    2120:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <__TEXT_REGION_LENGTH__+0x7c0160>
	trx_reg_write(RG_SHORT_ADDR_1,
    2124:	85 85       	ldd	r24, Z+13	; 0x0d
    2126:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <__TEXT_REGION_LENGTH__+0x7c0161>
			(uint8_t)(tal_pib.ShortAddress >> 8));

	/* configure TX_ARET; CSMA and CCA */
	trx_bit_write(SR_CCA_MODE, tal_pib.CCAMode);
    212a:	48 e4       	ldi	r20, 0x48	; 72
    212c:	51 e0       	ldi	r21, 0x01	; 1
    212e:	da 01       	movw	r26, r20
    2130:	8c 91       	ld	r24, X
    2132:	22 89       	ldd	r18, Z+18	; 0x12
    2134:	b0 e2       	ldi	r27, 0x20	; 32
    2136:	2b 9f       	mul	r18, r27
    2138:	90 01       	movw	r18, r0
    213a:	11 24       	eor	r1, r1
    213c:	20 76       	andi	r18, 0x60	; 96
    213e:	8f 79       	andi	r24, 0x9F	; 159
    2140:	82 2b       	or	r24, r18
    2142:	da 01       	movw	r26, r20
    2144:	8c 93       	st	X, r24
	trx_bit_write(SR_MIN_BE, tal_pib.MinBE);
    2146:	cf e6       	ldi	r28, 0x6F	; 111
    2148:	d1 e0       	ldi	r29, 0x01	; 1
    214a:	88 81       	ld	r24, Y
    214c:	95 89       	ldd	r25, Z+21	; 0x15
    214e:	9f 70       	andi	r25, 0x0F	; 15
    2150:	80 7f       	andi	r24, 0xF0	; 240
    2152:	89 2b       	or	r24, r25
    2154:	88 83       	st	Y, r24

	trx_bit_write(SR_AACK_I_AM_COORD, tal_pib.PrivatePanCoordinator);
    2156:	2e e6       	ldi	r18, 0x6E	; 110
    2158:	31 e0       	ldi	r19, 0x01	; 1
    215a:	d9 01       	movw	r26, r18
    215c:	8c 91       	ld	r24, X
    215e:	96 89       	ldd	r25, Z+22	; 0x16
    2160:	99 0f       	add	r25, r25
    2162:	99 0f       	add	r25, r25
    2164:	99 0f       	add	r25, r25
    2166:	98 70       	andi	r25, 0x08	; 8
    2168:	87 7f       	andi	r24, 0xF7	; 247
    216a:	89 2b       	or	r24, r25
    216c:	8c 93       	st	X, r24

	/* set phy parameter */
	trx_bit_write(SR_MAX_BE, tal_pib.MaxBE);
    216e:	28 81       	ld	r18, Y
    2170:	93 8d       	ldd	r25, Z+27	; 0x1b
    2172:	b0 e1       	ldi	r27, 0x10	; 16
    2174:	9b 9f       	mul	r25, r27
    2176:	c0 01       	movw	r24, r0
    2178:	11 24       	eor	r1, r1
    217a:	92 2f       	mov	r25, r18
    217c:	9f 70       	andi	r25, 0x0F	; 15
    217e:	89 2b       	or	r24, r25
    2180:	88 83       	st	Y, r24

#ifdef HIGH_DATA_RATE_SUPPORT
	apply_channel_page_configuration(tal_pib.CurrentPage);
#endif

	trx_bit_write(SR_CHANNEL, tal_pib.CurrentChannel);
    2182:	da 01       	movw	r26, r20
    2184:	8c 91       	ld	r24, X
    2186:	93 89       	ldd	r25, Z+19	; 0x13
    2188:	9f 71       	andi	r25, 0x1F	; 31
    218a:	80 7e       	andi	r24, 0xE0	; 224
    218c:	89 2b       	or	r24, r25
    218e:	8c 93       	st	X, r24
	{
		uint8_t reg_value;

		reg_value = convert_phyTransmitPower_to_reg_value(
    2190:	87 89       	ldd	r24, Z+23	; 0x17
    2192:	8e df       	rcall	.-228    	; 0x20b0 <convert_phyTransmitPower_to_reg_value>
				tal_pib.TransmitPower);
		trx_bit_write(SR_TX_PWR, reg_value);
    2194:	e5 e4       	ldi	r30, 0x45	; 69
    2196:	f1 e0       	ldi	r31, 0x01	; 1
    2198:	90 81       	ld	r25, Z
    219a:	90 7f       	andi	r25, 0xF0	; 240
    219c:	8f 70       	andi	r24, 0x0F	; 15
    219e:	89 2b       	or	r24, r25
    21a0:	80 83       	st	Z, r24
#ifdef PROMISCUOUS_MODE
	if (tal_pib.PromiscuousMode) {
		set_trx_state(CMD_RX_ON);
	}
#endif
}
    21a2:	df 91       	pop	r29
    21a4:	cf 91       	pop	r28
    21a6:	08 95       	ret

000021a8 <tal_pib_set>:
 *         in TAL_IDLE state.
 *         MAC_SUCCESS if the attempt to set the PIB attribute was successful
 *         TAL_TRX_ASLEEP if trx is in SLEEP mode and access to trx is required
 */
retval_t tal_pib_set(uint8_t attribute, pib_value_t *value)
{
    21a8:	cf 93       	push	r28
    21aa:	df 93       	push	r29
	 * and those that are simple variable udpates.
	 * Ensure that the transceiver is not in SLEEP.
	 * If it is in SLEEP, change it to TRX_OFF.
	 */

	switch (attribute) {
    21ac:	8e 34       	cpi	r24, 0x4E	; 78
    21ae:	41 f0       	breq	.+16     	; 0x21c0 <tal_pib_set+0x18>
    21b0:	89 35       	cpi	r24, 0x59	; 89
    21b2:	61 f4       	brne	.+24     	; 0x21cc <tal_pib_set+0x24>

		/*
		 * The new PIB value is not immediately written to the
		 * transceiver. This is done on a frame-by-frame base.
		 */
		tal_pib.MaxFrameRetries = value->pib_value_8bit;
    21b4:	fb 01       	movw	r30, r22
    21b6:	80 81       	ld	r24, Z
    21b8:	80 93 25 08 	sts	0x0825, r24	; 0x800825 <tal_pib+0x1c>
			return MAC_UNSUPPORTED_ATTRIBUTE;
		}

		break; /* end of 'default' from 'switch (attribute)' */
	}
	return MAC_SUCCESS;
    21bc:	80 e0       	ldi	r24, 0x00	; 0
		/*
		 * The new PIB value is not immediately written to the
		 * transceiver. This is done on a frame-by-frame base.
		 */
		tal_pib.MaxFrameRetries = value->pib_value_8bit;
		break;
    21be:	0b c1       	rjmp	.+534    	; 0x23d6 <tal_pib_set+0x22e>

		/*
		 * The new PIB value is not immediately written to the
		 * transceiver. This is done on a frame-by-frame base.
		 */
		tal_pib.MaxCSMABackoffs = value->pib_value_8bit;
    21c0:	fb 01       	movw	r30, r22
    21c2:	80 81       	ld	r24, Z
    21c4:	80 93 1d 08 	sts	0x081D, r24	; 0x80081d <tal_pib+0x14>
			return MAC_UNSUPPORTED_ATTRIBUTE;
		}

		break; /* end of 'default' from 'switch (attribute)' */
	}
	return MAC_SUCCESS;
    21c8:	80 e0       	ldi	r24, 0x00	; 0
		/*
		 * The new PIB value is not immediately written to the
		 * transceiver. This is done on a frame-by-frame base.
		 */
		tal_pib.MaxCSMABackoffs = value->pib_value_8bit;
		break;
    21ca:	05 c1       	rjmp	.+522    	; 0x23d6 <tal_pib_set+0x22e>
		/*
		 * Following PIBs require access to trx.
		 * Therefore trx must be at least in TRX_OFF.
		 */

		if (tal_trx_status == TRX_SLEEP) {
    21cc:	90 91 28 08 	lds	r25, 0x0828	; 0x800828 <tal_trx_status>
    21d0:	9f 30       	cpi	r25, 0x0F	; 15
    21d2:	09 f4       	brne	.+2      	; 0x21d6 <tal_pib_set+0x2e>
    21d4:	dc c0       	rjmp	.+440    	; 0x238e <tal_pib_set+0x1e6>
			/* While trx is in SLEEP, register cannot be accessed.
			**/
			return TAL_TRX_ASLEEP;
		}

		switch (attribute) {
    21d6:	8b 30       	cpi	r24, 0x0B	; 11
    21d8:	09 f4       	brne	.+2      	; 0x21dc <tal_pib_set+0x34>
    21da:	c9 c0       	rjmp	.+402    	; 0x236e <tal_pib_set+0x1c6>
    21dc:	80 f4       	brcc	.+32     	; 0x21fe <tal_pib_set+0x56>
    21de:	eb 01       	movw	r28, r22
    21e0:	82 30       	cpi	r24, 0x02	; 2
    21e2:	09 f4       	brne	.+2      	; 0x21e6 <tal_pib_set+0x3e>
    21e4:	84 c0       	rjmp	.+264    	; 0x22ee <tal_pib_set+0x146>
    21e6:	20 f4       	brcc	.+8      	; 0x21f0 <tal_pib_set+0x48>
    21e8:	88 23       	and	r24, r24
    21ea:	09 f4       	brne	.+2      	; 0x21ee <tal_pib_set+0x46>
    21ec:	46 c0       	rjmp	.+140    	; 0x227a <tal_pib_set+0xd2>
    21ee:	d1 c0       	rjmp	.+418    	; 0x2392 <tal_pib_set+0x1ea>
    21f0:	83 30       	cpi	r24, 0x03	; 3
    21f2:	09 f4       	brne	.+2      	; 0x21f6 <tal_pib_set+0x4e>
    21f4:	8c c0       	rjmp	.+280    	; 0x230e <tal_pib_set+0x166>
    21f6:	84 30       	cpi	r24, 0x04	; 4
    21f8:	09 f4       	brne	.+2      	; 0x21fc <tal_pib_set+0x54>
    21fa:	5a c0       	rjmp	.+180    	; 0x22b0 <tal_pib_set+0x108>
    21fc:	ca c0       	rjmp	.+404    	; 0x2392 <tal_pib_set+0x1ea>
    21fe:	83 35       	cpi	r24, 0x53	; 83
    2200:	79 f1       	breq	.+94     	; 0x2260 <tal_pib_set+0xb8>
    2202:	28 f4       	brcc	.+10     	; 0x220e <tal_pib_set+0x66>
    2204:	8f 34       	cpi	r24, 0x4F	; 79
    2206:	51 f0       	breq	.+20     	; 0x221c <tal_pib_set+0x74>
    2208:	80 35       	cpi	r24, 0x50	; 80
    220a:	e9 f0       	breq	.+58     	; 0x2246 <tal_pib_set+0x9e>
    220c:	c2 c0       	rjmp	.+388    	; 0x2392 <tal_pib_set+0x1ea>
    220e:	87 35       	cpi	r24, 0x57	; 87
    2210:	09 f4       	brne	.+2      	; 0x2214 <tal_pib_set+0x6c>
    2212:	56 c0       	rjmp	.+172    	; 0x22c0 <tal_pib_set+0x118>
    2214:	80 3f       	cpi	r24, 0xF0	; 240
    2216:	09 f4       	brne	.+2      	; 0x221a <tal_pib_set+0x72>
    2218:	8b c0       	rjmp	.+278    	; 0x2330 <tal_pib_set+0x188>
    221a:	bb c0       	rjmp	.+374    	; 0x2392 <tal_pib_set+0x1ea>
		case macMinBE:
			tal_pib.MinBE = value->pib_value_8bit;
    221c:	fb 01       	movw	r30, r22
    221e:	80 81       	ld	r24, Z
    2220:	e9 e0       	ldi	r30, 0x09	; 9
    2222:	f8 e0       	ldi	r31, 0x08	; 8
    2224:	85 8b       	std	Z+21, r24	; 0x15
			/*
			 * macMinBE must not be larger than macMaxBE or
			 * calculation
			 * of macMaxFrameWaitTotalTime will fail.
			 */
			if (tal_pib.MinBE > tal_pib.MaxBE) {
    2226:	93 8d       	ldd	r25, Z+27	; 0x1b
    2228:	98 17       	cp	r25, r24
    222a:	10 f4       	brcc	.+4      	; 0x2230 <tal_pib_set+0x88>
				tal_pib.MinBE = tal_pib.MaxBE;
    222c:	90 93 1e 08 	sts	0x081E, r25	; 0x80081e <tal_pib+0x15>
			}
#endif  /* REDUCED_PARAM_CHECK */

			trx_bit_write(SR_MIN_BE, tal_pib.MinBE);
    2230:	ef e6       	ldi	r30, 0x6F	; 111
    2232:	f1 e0       	ldi	r31, 0x01	; 1
    2234:	80 81       	ld	r24, Z
    2236:	90 91 1e 08 	lds	r25, 0x081E	; 0x80081e <tal_pib+0x15>
    223a:	9f 70       	andi	r25, 0x0F	; 15
    223c:	80 7f       	andi	r24, 0xF0	; 240
    223e:	89 2b       	or	r24, r25
    2240:	80 83       	st	Z, r24
			return MAC_UNSUPPORTED_ATTRIBUTE;
		}

		break; /* end of 'default' from 'switch (attribute)' */
	}
	return MAC_SUCCESS;
    2242:	80 e0       	ldi	r24, 0x00	; 0
				tal_pib.MinBE = tal_pib.MaxBE;
			}
#endif  /* REDUCED_PARAM_CHECK */

			trx_bit_write(SR_MIN_BE, tal_pib.MinBE);
			break;
    2244:	c8 c0       	rjmp	.+400    	; 0x23d6 <tal_pib_set+0x22e>

		case macPANId:
			tal_pib.PANId = value->pib_value_16bit;
    2246:	fb 01       	movw	r30, r22
    2248:	90 81       	ld	r25, Z
    224a:	81 81       	ldd	r24, Z+1	; 0x01
    224c:	e9 e0       	ldi	r30, 0x09	; 9
    224e:	f8 e0       	ldi	r31, 0x08	; 8
    2250:	96 87       	std	Z+14, r25	; 0x0e
    2252:	87 87       	std	Z+15, r24	; 0x0f
			trx_reg_write(RG_PAN_ID_0, (uint8_t)tal_pib.PANId);
    2254:	90 93 62 01 	sts	0x0162, r25	; 0x800162 <__TEXT_REGION_LENGTH__+0x7c0162>
			trx_reg_write(RG_PAN_ID_1,
    2258:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <__TEXT_REGION_LENGTH__+0x7c0163>
			return MAC_UNSUPPORTED_ATTRIBUTE;
		}

		break; /* end of 'default' from 'switch (attribute)' */
	}
	return MAC_SUCCESS;
    225c:	80 e0       	ldi	r24, 0x00	; 0
		case macPANId:
			tal_pib.PANId = value->pib_value_16bit;
			trx_reg_write(RG_PAN_ID_0, (uint8_t)tal_pib.PANId);
			trx_reg_write(RG_PAN_ID_1,
					(uint8_t)(tal_pib.PANId >> 8));
			break;
    225e:	bb c0       	rjmp	.+374    	; 0x23d6 <tal_pib_set+0x22e>

		case macShortAddress:
			tal_pib.ShortAddress = value->pib_value_16bit;
    2260:	fb 01       	movw	r30, r22
    2262:	90 81       	ld	r25, Z
    2264:	81 81       	ldd	r24, Z+1	; 0x01
    2266:	e9 e0       	ldi	r30, 0x09	; 9
    2268:	f8 e0       	ldi	r31, 0x08	; 8
    226a:	94 87       	std	Z+12, r25	; 0x0c
    226c:	85 87       	std	Z+13, r24	; 0x0d
			trx_reg_write(RG_SHORT_ADDR_0,
    226e:	90 93 60 01 	sts	0x0160, r25	; 0x800160 <__TEXT_REGION_LENGTH__+0x7c0160>
					(uint8_t)tal_pib.ShortAddress);
			trx_reg_write(RG_SHORT_ADDR_1,
    2272:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <__TEXT_REGION_LENGTH__+0x7c0161>
			return MAC_UNSUPPORTED_ATTRIBUTE;
		}

		break; /* end of 'default' from 'switch (attribute)' */
	}
	return MAC_SUCCESS;
    2276:	80 e0       	ldi	r24, 0x00	; 0
			tal_pib.ShortAddress = value->pib_value_16bit;
			trx_reg_write(RG_SHORT_ADDR_0,
					(uint8_t)tal_pib.ShortAddress);
			trx_reg_write(RG_SHORT_ADDR_1,
					(uint8_t)(tal_pib.ShortAddress >> 8));
			break;
    2278:	ae c0       	rjmp	.+348    	; 0x23d6 <tal_pib_set+0x22e>

		case phyCurrentChannel:
			if (tal_state != TAL_IDLE) {
    227a:	80 91 2d 08 	lds	r24, 0x082D	; 0x80082d <tal_state>
    227e:	81 11       	cpse	r24, r1
    2280:	8a c0       	rjmp	.+276    	; 0x2396 <tal_pib_set+0x1ee>
				return TAL_BUSY;
			}

			if ((uint32_t)TRX_SUPPORTED_CHANNELS &
					((uint32_t)0x01 <<
					value->pib_value_8bit)) {
    2282:	88 81       	ld	r24, Y
		case phyCurrentChannel:
			if (tal_state != TAL_IDLE) {
				return TAL_BUSY;
			}

			if ((uint32_t)TRX_SUPPORTED_CHANNELS &
    2284:	40 e0       	ldi	r20, 0x00	; 0
    2286:	58 ef       	ldi	r21, 0xF8	; 248
    2288:	6f ef       	ldi	r22, 0xFF	; 255
    228a:	77 e0       	ldi	r23, 0x07	; 7
    228c:	08 2e       	mov	r0, r24
    228e:	04 c0       	rjmp	.+8      	; 0x2298 <tal_pib_set+0xf0>
    2290:	76 95       	lsr	r23
    2292:	67 95       	ror	r22
    2294:	57 95       	ror	r21
    2296:	47 95       	ror	r20
    2298:	0a 94       	dec	r0
    229a:	d2 f7       	brpl	.-12     	; 0x2290 <tal_pib_set+0xe8>
    229c:	40 ff       	sbrs	r20, 0
    229e:	7d c0       	rjmp	.+250    	; 0x239a <tal_pib_set+0x1f2>

				/*
				 * Set trx to "soft" off avoiding that ongoing
				 * transaction (e.g. ACK) are interrupted.
				 */
				if (tal_trx_status != TRX_OFF) {
    22a0:	98 30       	cpi	r25, 0x08	; 8
    22a2:	09 f4       	brne	.+2      	; 0x22a6 <tal_pib_set+0xfe>
    22a4:	80 c0       	rjmp	.+256    	; 0x23a6 <tal_pib_set+0x1fe>
					                                   **/
					do {
						/* set TRX_OFF until it could be
						 * set;
						 * trx might be busy */
					} while (set_trx_state(CMD_TRX_OFF) !=
    22a6:	88 e0       	ldi	r24, 0x08	; 8
    22a8:	6d da       	rcall	.-2854   	; 0x1784 <set_trx_state>
							TRX_OFF);
    22aa:	88 30       	cpi	r24, 0x08	; 8
    22ac:	e1 f7       	brne	.-8      	; 0x22a6 <tal_pib_set+0xfe>
    22ae:	86 c0       	rjmp	.+268    	; 0x23bc <tal_pib_set+0x214>
					return MAC_INVALID_PARAMETER;
				}
			}

#else
			if (tal_state != TAL_IDLE) {
    22b0:	80 91 2d 08 	lds	r24, 0x082D	; 0x80082d <tal_state>
    22b4:	81 11       	cpse	r24, r1
    22b6:	73 c0       	rjmp	.+230    	; 0x239e <tal_pib_set+0x1f6>
				return TAL_BUSY;
			} else {
				uint8_t page;

				page = value->pib_value_8bit;
				if (page != 0) {
    22b8:	88 81       	ld	r24, Y
    22ba:	81 11       	cpse	r24, r1
    22bc:	72 c0       	rjmp	.+228    	; 0x23a2 <tal_pib_set+0x1fa>
    22be:	8b c0       	rjmp	.+278    	; 0x23d6 <tal_pib_set+0x22e>
			}
#endif  /* #ifdef HIGH_DATA_RATE_SUPPORT */
			break;

		case macMaxBE:
			tal_pib.MaxBE = value->pib_value_8bit;
    22c0:	fb 01       	movw	r30, r22
    22c2:	90 81       	ld	r25, Z
    22c4:	e9 e0       	ldi	r30, 0x09	; 9
    22c6:	f8 e0       	ldi	r31, 0x08	; 8
    22c8:	93 8f       	std	Z+27, r25	; 0x1b
			/*
			 * macMinBE must not be larger than macMaxBE or
			 * calculation
			 * of macMaxFrameWaitTotalTime will fail.
			 */
			if (tal_pib.MaxBE < tal_pib.MinBE) {
    22ca:	85 89       	ldd	r24, Z+21	; 0x15
    22cc:	98 17       	cp	r25, r24
    22ce:	10 f4       	brcc	.+4      	; 0x22d4 <tal_pib_set+0x12c>
				tal_pib.MinBE = tal_pib.MaxBE;
    22d0:	90 93 1e 08 	sts	0x081E, r25	; 0x80081e <tal_pib+0x15>
			}
#endif  /* REDUCED_PARAM_CHECK */
			trx_bit_write(SR_MAX_BE, tal_pib.MaxBE);
    22d4:	ef e6       	ldi	r30, 0x6F	; 111
    22d6:	f1 e0       	ldi	r31, 0x01	; 1
    22d8:	80 81       	ld	r24, Z
    22da:	28 2f       	mov	r18, r24
    22dc:	2f 70       	andi	r18, 0x0F	; 15
    22de:	30 e1       	ldi	r19, 0x10	; 16
    22e0:	93 9f       	mul	r25, r19
    22e2:	c0 01       	movw	r24, r0
    22e4:	11 24       	eor	r1, r1
    22e6:	82 2b       	or	r24, r18
    22e8:	80 83       	st	Z, r24
			return MAC_UNSUPPORTED_ATTRIBUTE;
		}

		break; /* end of 'default' from 'switch (attribute)' */
	}
	return MAC_SUCCESS;
    22ea:	80 e0       	ldi	r24, 0x00	; 0
			if (tal_pib.MaxBE < tal_pib.MinBE) {
				tal_pib.MinBE = tal_pib.MaxBE;
			}
#endif  /* REDUCED_PARAM_CHECK */
			trx_bit_write(SR_MAX_BE, tal_pib.MaxBE);
			break;
    22ec:	74 c0       	rjmp	.+232    	; 0x23d6 <tal_pib_set+0x22e>

		case phyTransmitPower:
		{
			uint8_t reg_value;

			tal_pib.TransmitPower = value->pib_value_8bit;
    22ee:	88 81       	ld	r24, Y
    22f0:	c9 e0       	ldi	r28, 0x09	; 9
    22f2:	d8 e0       	ldi	r29, 0x08	; 8

			/* Limit tal_pib.TransmitPower to max/min trx values */
			tal_pib.TransmitPower = limit_tx_pwr(
    22f4:	8f 8b       	std	Y+23, r24	; 0x17
    22f6:	7f de       	rcall	.-770    	; 0x1ff6 <limit_tx_pwr>
					tal_pib.TransmitPower);
			reg_value = convert_phyTransmitPower_to_reg_value(
    22f8:	8f 8b       	std	Y+23, r24	; 0x17
    22fa:	da de       	rcall	.-588    	; 0x20b0 <convert_phyTransmitPower_to_reg_value>
					tal_pib.TransmitPower);
			trx_bit_write(SR_TX_PWR, reg_value);
    22fc:	e5 e4       	ldi	r30, 0x45	; 69
    22fe:	f1 e0       	ldi	r31, 0x01	; 1
    2300:	90 81       	ld	r25, Z
    2302:	90 7f       	andi	r25, 0xF0	; 240
    2304:	8f 70       	andi	r24, 0x0F	; 15
    2306:	89 2b       	or	r24, r25
    2308:	80 83       	st	Z, r24
			return MAC_UNSUPPORTED_ATTRIBUTE;
		}

		break; /* end of 'default' from 'switch (attribute)' */
	}
	return MAC_SUCCESS;
    230a:	80 e0       	ldi	r24, 0x00	; 0
					tal_pib.TransmitPower);
			reg_value = convert_phyTransmitPower_to_reg_value(
					tal_pib.TransmitPower);
			trx_bit_write(SR_TX_PWR, reg_value);
		}
		break;
    230c:	64 c0       	rjmp	.+200    	; 0x23d6 <tal_pib_set+0x22e>

		case phyCCAMode:
			tal_pib.CCAMode = value->pib_value_8bit;
    230e:	88 81       	ld	r24, Y
    2310:	80 93 1b 08 	sts	0x081B, r24	; 0x80081b <tal_pib+0x12>
			trx_bit_write(SR_CCA_MODE, tal_pib.CCAMode);
    2314:	e8 e4       	ldi	r30, 0x48	; 72
    2316:	f1 e0       	ldi	r31, 0x01	; 1
    2318:	20 81       	ld	r18, Z
    231a:	30 e2       	ldi	r19, 0x20	; 32
    231c:	83 9f       	mul	r24, r19
    231e:	c0 01       	movw	r24, r0
    2320:	11 24       	eor	r1, r1
    2322:	80 76       	andi	r24, 0x60	; 96
    2324:	92 2f       	mov	r25, r18
    2326:	9f 79       	andi	r25, 0x9F	; 159
    2328:	89 2b       	or	r24, r25
    232a:	80 83       	st	Z, r24
			return MAC_UNSUPPORTED_ATTRIBUTE;
		}

		break; /* end of 'default' from 'switch (attribute)' */
	}
	return MAC_SUCCESS;
    232c:	80 e0       	ldi	r24, 0x00	; 0
		break;

		case phyCCAMode:
			tal_pib.CCAMode = value->pib_value_8bit;
			trx_bit_write(SR_CCA_MODE, tal_pib.CCAMode);
			break;
    232e:	53 c0       	rjmp	.+166    	; 0x23d6 <tal_pib_set+0x22e>

		case macIeeeAddress:
		{
			uint8_t *ptr;

			tal_pib.IeeeAddress = value->pib_value_64bit;
    2330:	fb 01       	movw	r30, r22
    2332:	b0 81       	ld	r27, Z
    2334:	a1 81       	ldd	r26, Z+1	; 0x01
    2336:	52 81       	ldd	r21, Z+2	; 0x02
    2338:	43 81       	ldd	r20, Z+3	; 0x03
    233a:	34 81       	ldd	r19, Z+4	; 0x04
    233c:	25 81       	ldd	r18, Z+5	; 0x05
    233e:	96 81       	ldd	r25, Z+6	; 0x06
    2340:	87 81       	ldd	r24, Z+7	; 0x07
    2342:	e9 e0       	ldi	r30, 0x09	; 9
    2344:	f8 e0       	ldi	r31, 0x08	; 8
    2346:	b0 83       	st	Z, r27
    2348:	a1 83       	std	Z+1, r26	; 0x01
    234a:	52 83       	std	Z+2, r21	; 0x02
    234c:	43 83       	std	Z+3, r20	; 0x03
    234e:	34 83       	std	Z+4, r19	; 0x04
    2350:	25 83       	std	Z+5, r18	; 0x05
    2352:	96 83       	std	Z+6, r25	; 0x06
    2354:	87 83       	std	Z+7, r24	; 0x07
    2356:	e4 e6       	ldi	r30, 0x64	; 100
    2358:	f1 e0       	ldi	r31, 0x01	; 1
			ptr = (uint8_t *)&tal_pib.IeeeAddress;
    235a:	a9 e0       	ldi	r26, 0x09	; 9
    235c:	b8 e0       	ldi	r27, 0x08	; 8

			for (uint8_t i = 0; i < 8; i++) {
				trx_reg_write((RG_IEEE_ADDR_0 + i), *ptr);
    235e:	8d 91       	ld	r24, X+
    2360:	81 93       	st	Z+, r24
			uint8_t *ptr;

			tal_pib.IeeeAddress = value->pib_value_64bit;
			ptr = (uint8_t *)&tal_pib.IeeeAddress;

			for (uint8_t i = 0; i < 8; i++) {
    2362:	ec 36       	cpi	r30, 0x6C	; 108
    2364:	31 e0       	ldi	r19, 0x01	; 1
    2366:	f3 07       	cpc	r31, r19
    2368:	d1 f7       	brne	.-12     	; 0x235e <tal_pib_set+0x1b6>
			return MAC_UNSUPPORTED_ATTRIBUTE;
		}

		break; /* end of 'default' from 'switch (attribute)' */
	}
	return MAC_SUCCESS;
    236a:	80 e0       	ldi	r24, 0x00	; 0
    236c:	34 c0       	rjmp	.+104    	; 0x23d6 <tal_pib_set+0x22e>
			}
		}
		break;

		case mac_i_pan_coordinator:
			tal_pib.PrivatePanCoordinator = value->pib_value_bool;
    236e:	fb 01       	movw	r30, r22
    2370:	80 81       	ld	r24, Z
    2372:	80 93 1f 08 	sts	0x081F, r24	; 0x80081f <tal_pib+0x16>
			trx_bit_write(SR_AACK_I_AM_COORD,
    2376:	ee e6       	ldi	r30, 0x6E	; 110
    2378:	f1 e0       	ldi	r31, 0x01	; 1
    237a:	90 81       	ld	r25, Z
    237c:	88 0f       	add	r24, r24
    237e:	88 0f       	add	r24, r24
    2380:	88 0f       	add	r24, r24
    2382:	88 70       	andi	r24, 0x08	; 8
    2384:	97 7f       	andi	r25, 0xF7	; 247
    2386:	89 2b       	or	r24, r25
    2388:	80 83       	st	Z, r24
			return MAC_UNSUPPORTED_ATTRIBUTE;
		}

		break; /* end of 'default' from 'switch (attribute)' */
	}
	return MAC_SUCCESS;
    238a:	80 e0       	ldi	r24, 0x00	; 0

		case mac_i_pan_coordinator:
			tal_pib.PrivatePanCoordinator = value->pib_value_bool;
			trx_bit_write(SR_AACK_I_AM_COORD,
					tal_pib.PrivatePanCoordinator);
			break;
    238c:	24 c0       	rjmp	.+72     	; 0x23d6 <tal_pib_set+0x22e>
		 */

		if (tal_trx_status == TRX_SLEEP) {
			/* While trx is in SLEEP, register cannot be accessed.
			**/
			return TAL_TRX_ASLEEP;
    238e:	81 e8       	ldi	r24, 0x81	; 129
    2390:	22 c0       	rjmp	.+68     	; 0x23d6 <tal_pib_set+0x22e>
			 * w.r.t.
			 * compliance operation.
			 * The ACK timing can be reduced to 2 symbols using TFA
			 * function.
			 */
			return MAC_UNSUPPORTED_ATTRIBUTE;
    2392:	84 ef       	ldi	r24, 0xF4	; 244
    2394:	20 c0       	rjmp	.+64     	; 0x23d6 <tal_pib_set+0x22e>
					(uint8_t)(tal_pib.ShortAddress >> 8));
			break;

		case phyCurrentChannel:
			if (tal_state != TAL_IDLE) {
				return TAL_BUSY;
    2396:	86 e8       	ldi	r24, 0x86	; 134
    2398:	1e c0       	rjmp	.+60     	; 0x23d6 <tal_pib_set+0x22e>
				if (previous_trx_status != TRX_OFF) {
					/* Set to default state */
					set_trx_state(CMD_RX_AACK_ON);
				}
			} else {
				return MAC_INVALID_PARAMETER;
    239a:	88 ee       	ldi	r24, 0xE8	; 232
    239c:	1c c0       	rjmp	.+56     	; 0x23d6 <tal_pib_set+0x22e>
				}
			}

#else
			if (tal_state != TAL_IDLE) {
				return TAL_BUSY;
    239e:	86 e8       	ldi	r24, 0x86	; 134
    23a0:	1a c0       	rjmp	.+52     	; 0x23d6 <tal_pib_set+0x22e>
			} else {
				uint8_t page;

				page = value->pib_value_8bit;
				if (page != 0) {
					return MAC_INVALID_PARAMETER;
    23a2:	88 ee       	ldi	r24, 0xE8	; 232
    23a4:	18 c0       	rjmp	.+48     	; 0x23d6 <tal_pib_set+0x22e>
						 * trx might be busy */
					} while (set_trx_state(CMD_TRX_OFF) !=
							TRX_OFF);
				}

				tal_pib.CurrentChannel = value->pib_value_8bit;
    23a6:	80 93 1c 08 	sts	0x081C, r24	; 0x80081c <tal_pib+0x13>
				trx_bit_write(SR_CHANNEL,
    23aa:	e8 e4       	ldi	r30, 0x48	; 72
    23ac:	f1 e0       	ldi	r31, 0x01	; 1
    23ae:	90 81       	ld	r25, Z
    23b0:	90 7e       	andi	r25, 0xE0	; 224
    23b2:	8f 71       	andi	r24, 0x1F	; 31
    23b4:	89 2b       	or	r24, r25
    23b6:	80 83       	st	Z, r24
			return MAC_UNSUPPORTED_ATTRIBUTE;
		}

		break; /* end of 'default' from 'switch (attribute)' */
	}
	return MAC_SUCCESS;
    23b8:	80 e0       	ldi	r24, 0x00	; 0
    23ba:	0d c0       	rjmp	.+26     	; 0x23d6 <tal_pib_set+0x22e>
						 * trx might be busy */
					} while (set_trx_state(CMD_TRX_OFF) !=
							TRX_OFF);
				}

				tal_pib.CurrentChannel = value->pib_value_8bit;
    23bc:	88 81       	ld	r24, Y
    23be:	80 93 1c 08 	sts	0x081C, r24	; 0x80081c <tal_pib+0x13>
				trx_bit_write(SR_CHANNEL,
    23c2:	e8 e4       	ldi	r30, 0x48	; 72
    23c4:	f1 e0       	ldi	r31, 0x01	; 1
    23c6:	90 81       	ld	r25, Z
    23c8:	90 7e       	andi	r25, 0xE0	; 224
    23ca:	8f 71       	andi	r24, 0x1F	; 31
    23cc:	89 2b       	or	r24, r25
						tal_pib.CurrentChannel);
				/* Re-store previous trx state */
				if (previous_trx_status != TRX_OFF) {
					/* Set to default state */
					set_trx_state(CMD_RX_AACK_ON);
    23ce:	80 83       	st	Z, r24
    23d0:	86 e1       	ldi	r24, 0x16	; 22
    23d2:	d8 d9       	rcall	.-3152   	; 0x1784 <set_trx_state>
			return MAC_UNSUPPORTED_ATTRIBUTE;
		}

		break; /* end of 'default' from 'switch (attribute)' */
	}
	return MAC_SUCCESS;
    23d4:	80 e0       	ldi	r24, 0x00	; 0
} /* tal_pib_set() */
    23d6:	df 91       	pop	r29
    23d8:	cf 91       	pop	r28
    23da:	08 95       	ret

000023dc <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
    23dc:	04 c0       	rjmp	.+8      	; 0x23e6 <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
    23de:	61 50       	subi	r22, 0x01	; 1
    23e0:	71 09       	sbc	r23, r1
    23e2:	81 09       	sbc	r24, r1
    23e4:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
    23e6:	61 15       	cp	r22, r1
    23e8:	71 05       	cpc	r23, r1
    23ea:	81 05       	cpc	r24, r1
    23ec:	91 05       	cpc	r25, r1
    23ee:	b9 f7       	brne	.-18     	; 0x23de <__portable_avr_delay_cycles+0x2>
    23f0:	08 95       	ret

000023f2 <handle_received_frame_irq>:
 *
 * This function handles transceiver interrupts for received frames and
 * uploads the frames from the trx.
 */
void handle_received_frame_irq(void)
{
    23f2:	cf 92       	push	r12
    23f4:	df 92       	push	r13
    23f6:	ef 92       	push	r14
    23f8:	ff 92       	push	r15
    23fa:	0f 93       	push	r16
    23fc:	1f 93       	push	r17
    23fe:	cf 93       	push	r28
    2400:	df 93       	push	r29
	/* Extended frame length appended by LQI and ED. */
	uint8_t ext_frame_length;
	frame_info_t *receive_frame;
	uint8_t *frame_ptr;

	if (tal_rx_buffer == NULL) {
    2402:	e0 91 bb 05 	lds	r30, 0x05BB	; 0x8005bb <tal_rx_buffer>
    2406:	f0 91 bc 05 	lds	r31, 0x05BC	; 0x8005bc <tal_rx_buffer+0x1>
    240a:	30 97       	sbiw	r30, 0x00	; 0
    240c:	71 f4       	brne	.+28     	; 0x242a <handle_received_frame_irq+0x38>
		 * Although the buffer protection mode is enabled and the
		 * receiver has
		 * been switched to PLL_ON, the next incoming frame was faster.
		 * It cannot be handled and is discarded.
		 */
		trx_bit_write(SR_RX_SAFE_MODE, RX_SAFE_MODE_DISABLE); /*
    240e:	cc e4       	ldi	r28, 0x4C	; 76
    2410:	d1 e0       	ldi	r29, 0x01	; 1
    2412:	88 81       	ld	r24, Y
    2414:	8f 77       	andi	r24, 0x7F	; 127
    2416:	88 83       	st	Y, r24
		                                                       *
		                                                       *
		                                                       *protection
		                                                       * mode
		                                                       **/
		pal_timer_delay(2); /* Allow pin change to get effective */
    2418:	63 e0       	ldi	r22, 0x03	; 3
    241a:	70 e0       	ldi	r23, 0x00	; 0
    241c:	80 e0       	ldi	r24, 0x00	; 0
    241e:	90 e0       	ldi	r25, 0x00	; 0
    2420:	dd df       	rcall	.-70     	; 0x23dc <__portable_avr_delay_cycles>
		trx_bit_write(SR_RX_SAFE_MODE, RX_SAFE_MODE_ENABLE); /*
    2422:	88 81       	ld	r24, Y
    2424:	80 68       	ori	r24, 0x80	; 128
    2426:	88 83       	st	Y, r24
		                                                      *
		                                                      *
		                                                      *protection
		                                                      * mode
		                                                      **/
		return;
    2428:	48 c0       	rjmp	.+144    	; 0x24ba <handle_received_frame_irq+0xc8>
		}
	}
#endif

	/* Get ED value; needed to normalize LQI. */
	ed_value = trx_reg_read(RG_PHY_ED_LEVEL);
    242a:	00 91 47 01 	lds	r16, 0x0147	; 0x800147 <__TEXT_REGION_LENGTH__+0x7c0147>

	/* Get frame length from transceiver. */
	phy_frame_len = ext_frame_length = trx_reg_read(RG_TST_RX_LENGTH);
    242e:	10 91 7b 01 	lds	r17, 0x017B	; 0x80017b <__TEXT_REGION_LENGTH__+0x7c017b>

	/* Check for valid frame length. */
	if (phy_frame_len > 127) {
    2432:	11 23       	and	r17, r17
    2434:	0c f4       	brge	.+2      	; 0x2438 <handle_received_frame_irq+0x46>
    2436:	41 c0       	rjmp	.+130    	; 0x24ba <handle_received_frame_irq+0xc8>
		                                                      * mode
		                                                      **/
		return;
	}

	receive_frame = (frame_info_t *)BMM_BUFFER_POINTER(tal_rx_buffer);
    2438:	e0 80       	ld	r14, Z
    243a:	f1 80       	ldd	r15, Z+1	; 0x01
	 * In addition to that, the LQI and ED value are uploaded, too.
	 */
	ext_frame_length += LQI_LEN + ED_VAL_LEN;

	/* Update payload pointer to store received frame. */
	frame_ptr = (uint8_t *)receive_frame + LARGE_BUFFER_SIZE -
    243c:	82 e0       	ldi	r24, 0x02	; 2
    243e:	81 0f       	add	r24, r17
    2440:	eb e8       	ldi	r30, 0x8B	; 139
    2442:	f0 e0       	ldi	r31, 0x00	; 0
    2444:	e8 1b       	sub	r30, r24
    2446:	f1 09       	sbc	r31, r1
    2448:	e7 01       	movw	r28, r14
    244a:	ce 0f       	add	r28, r30
    244c:	df 1f       	adc	r29, r31
	 * Note: The following code is different from other non-single chip
	 * transceivers, where reading the frame via SPI contains the length
	 * field
	 * in the first octet.
	 */
	trx_frame_read(frame_ptr, phy_frame_len + LQI_LEN);
    244e:	c1 2e       	mov	r12, r17
    2450:	d1 2c       	mov	r13, r1
    2452:	a6 01       	movw	r20, r12
    2454:	4f 5f       	subi	r20, 0xFF	; 255
    2456:	5f 4f       	sbci	r21, 0xFF	; 255
    2458:	60 e8       	ldi	r22, 0x80	; 128
    245a:	71 e0       	ldi	r23, 0x01	; 1
    245c:	ce 01       	movw	r24, r28
    245e:	76 d7       	rcall	.+3820   	; 0x334c <memcpy>
	frame_ptr--;
    2460:	fe 01       	movw	r30, r28
	*frame_ptr = phy_frame_len;
    2462:	12 93       	st	-Z, r17
	receive_frame->mpdu = frame_ptr;
    2464:	d7 01       	movw	r26, r14
    2466:	18 96       	adiw	r26, 0x08	; 8
    2468:	fc 93       	st	X, r31
    246a:	ee 93       	st	-X, r30
    246c:	17 97       	sbiw	r26, 0x07	; 7
	/* Add ED value at the end of the frame buffer. */
	receive_frame->mpdu[phy_frame_len + LQI_LEN + ED_VAL_LEN] = ed_value;
    246e:	ec 0d       	add	r30, r12
    2470:	fd 1d       	adc	r31, r13
    2472:	02 83       	std	Z+2, r16	; 0x02
	receive_frame->time_stamp = tal_rx_timestamp;
#endif  /* #if (defined BEACON_SUPPORT) || (defined ENABLE_TSTAMP) */

	/* Append received frame to incoming_frame_queue and get new rx buffer.
	**/
	qmm_queue_append(&tal_incoming_frame_queue, tal_rx_buffer);
    2474:	60 91 bb 05 	lds	r22, 0x05BB	; 0x8005bb <tal_rx_buffer>
    2478:	70 91 bc 05 	lds	r23, 0x05BC	; 0x8005bc <tal_rx_buffer+0x1>
    247c:	82 e0       	ldi	r24, 0x02	; 2
    247e:	98 e0       	ldi	r25, 0x08	; 8

	/* The previous buffer is eaten up and a new buffer is not assigned yet.
	**/
	tal_rx_buffer = bmm_buffer_alloc(LARGE_BUFFER_SIZE);
    2480:	2d d9       	rcall	.-3494   	; 0x16dc <qmm_queue_append>
    2482:	8b e8       	ldi	r24, 0x8B	; 139
    2484:	93 d8       	rcall	.-3802   	; 0x15ac <bmm_buffer_alloc>
    2486:	90 93 bc 05 	sts	0x05BC, r25	; 0x8005bc <tal_rx_buffer+0x1>
    248a:	80 93 bb 05 	sts	0x05BB, r24	; 0x8005bb <tal_rx_buffer>

	/* Check if receive buffer is available */
	if (NULL == tal_rx_buffer) {
    248e:	89 2b       	or	r24, r25
    2490:	21 f4       	brne	.+8      	; 0x249a <handle_received_frame_irq+0xa8>
		 * re-enabled yet.
		 * Buffer protection will be re-enabled after buffer becomes
		 * available
		 */
		/* set_trx_state(CMD_PLL_ON); */
		tal_rx_on_required = true;
    2492:	81 e0       	ldi	r24, 0x01	; 1
    2494:	80 93 01 08 	sts	0x0801, r24	; 0x800801 <tal_rx_on_required>
    2498:	0d c0       	rjmp	.+26     	; 0x24b4 <handle_received_frame_irq+0xc2>
		/*
		 * Release the protected buffer and set it again for further
		 * protection since
		 * the buffer is available
		 */
		trx_bit_write(SR_RX_SAFE_MODE, RX_SAFE_MODE_DISABLE); /*
    249a:	cc e4       	ldi	r28, 0x4C	; 76
    249c:	d1 e0       	ldi	r29, 0x01	; 1
    249e:	88 81       	ld	r24, Y
    24a0:	8f 77       	andi	r24, 0x7F	; 127
    24a2:	88 83       	st	Y, r24
		                                                       *
		                                                       *
		                                                       *protection
		                                                       * mode
		                                                       **/
		pal_timer_delay(2); /* Allow pin change to get effective */
    24a4:	63 e0       	ldi	r22, 0x03	; 3
    24a6:	70 e0       	ldi	r23, 0x00	; 0
    24a8:	80 e0       	ldi	r24, 0x00	; 0
    24aa:	90 e0       	ldi	r25, 0x00	; 0
    24ac:	97 df       	rcall	.-210    	; 0x23dc <__portable_avr_delay_cycles>
		trx_bit_write(SR_RX_SAFE_MODE, RX_SAFE_MODE_ENABLE); /*
    24ae:	88 81       	ld	r24, Y
    24b0:	80 68       	ori	r24, 0x80	; 128
    24b2:	88 83       	st	Y, r24
	 * transmission
	 * end of an automatically sent ACK frame. This implementation does not
	 * use
	 * this feature.
	 */
	pal_trx_irq_flag_clr_tx_end();
    24b4:	80 e4       	ldi	r24, 0x40	; 64
    24b6:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <__TEXT_REGION_LENGTH__+0x7c014f>
}
    24ba:	df 91       	pop	r29
    24bc:	cf 91       	pop	r28
    24be:	1f 91       	pop	r17
    24c0:	0f 91       	pop	r16
    24c2:	ff 90       	pop	r15
    24c4:	ef 90       	pop	r14
    24c6:	df 90       	pop	r13
    24c8:	cf 90       	pop	r12
    24ca:	08 95       	ret

000024cc <process_incoming_frame>:
 * structure to be sent to the MAC as a parameter of tal_rx_frame_cb().
 *
 * \param buf Pointer to the buffer containing the received frame
 */
void process_incoming_frame(buffer_t *buf_ptr)
{
    24cc:	cf 93       	push	r28
    24ce:	df 93       	push	r29
    24d0:	ac 01       	movw	r20, r24
	uint8_t *frame_ptr;
	uint8_t ed_level;
	uint8_t lqi;
#endif

	frame_info_t *receive_frame
    24d2:	fc 01       	movw	r30, r24
    24d4:	c0 81       	ld	r28, Z
    24d6:	d1 81       	ldd	r29, Z+1	; 0x01

	/*
	 * Store the last frame length for IFS handling.
	 * Substract LQI and length fields.
	 */
	frame_len = last_frame_length = receive_frame->mpdu[0];
    24d8:	af 81       	ldd	r26, Y+7	; 0x07
    24da:	b8 85       	ldd	r27, Y+8	; 0x08
    24dc:	8c 91       	ld	r24, X
    24de:	80 93 29 08 	sts	0x0829, r24	; 0x800829 <last_frame_length>

	/*
	 * The LQI is stored after the FCS.
	 * The ED value is stored after the LQI.
	 */
	frame_ptr = &(receive_frame->mpdu[frame_len + LQI_LEN]);
    24e2:	e8 2f       	mov	r30, r24
    24e4:	f0 e0       	ldi	r31, 0x00	; 0
    24e6:	31 96       	adiw	r30, 0x01	; 1
    24e8:	ea 0f       	add	r30, r26
    24ea:	fb 1f       	adc	r31, r27
	lqi = *frame_ptr++;
    24ec:	80 81       	ld	r24, Z
	ed_level = *frame_ptr;
    24ee:	31 81       	ldd	r19, Z+1	; 0x01
	uint8_t lqi_star;

#ifdef HIGH_DATA_RATE_SUPPORT
	if (tal_pib.CurrentPage == 0) {
#endif
	if (ed_value > ED_MAX_VAL) {
    24f0:	3d 33       	cpi	r19, 0x3D	; 61
    24f2:	20 f4       	brcc	.+8      	; 0x24fc <process_incoming_frame+0x30>
		ed_value = ED_MAX_VAL;
	} else if (ed_value == 0) {
    24f4:	31 11       	cpse	r19, r1
    24f6:	03 c0       	rjmp	.+6      	; 0x24fe <process_incoming_frame+0x32>
		ed_value = 1;
    24f8:	31 e0       	ldi	r19, 0x01	; 1
    24fa:	01 c0       	rjmp	.+2      	; 0x24fe <process_incoming_frame+0x32>

#ifdef HIGH_DATA_RATE_SUPPORT
	if (tal_pib.CurrentPage == 0) {
#endif
	if (ed_value > ED_MAX_VAL) {
		ed_value = ED_MAX_VAL;
    24fc:	3c e3       	ldi	r19, 0x3C	; 60
	} else if (ed_value == 0) {
		ed_value = 1;
	}

	lqi_star = lqi >> 6;
	link_quality = (uint16_t)lqi_star * (uint16_t)ed_value * 255 /
    24fe:	82 95       	swap	r24
    2500:	86 95       	lsr	r24
    2502:	86 95       	lsr	r24
    2504:	83 70       	andi	r24, 0x03	; 3
    2506:	2f ef       	ldi	r18, 0xFF	; 255
    2508:	82 9f       	mul	r24, r18
    250a:	c0 01       	movw	r24, r0
    250c:	11 24       	eor	r1, r1
    250e:	38 9f       	mul	r19, r24
    2510:	b0 01       	movw	r22, r0
    2512:	39 9f       	mul	r19, r25
    2514:	70 0d       	add	r23, r0
    2516:	11 24       	eor	r1, r1
    2518:	9b 01       	movw	r18, r22
    251a:	a3 e8       	ldi	r26, 0x83	; 131
    251c:	bd e2       	ldi	r27, 0x2D	; 45
    251e:	8a d6       	rcall	.+3348   	; 0x3234 <__umulhisi3>
    2520:	96 95       	lsr	r25
    2522:	87 95       	ror	r24
    2524:	92 95       	swap	r25
    2526:	82 95       	swap	r24
    2528:	8f 70       	andi	r24, 0x0F	; 15
    252a:	89 27       	eor	r24, r25
    252c:	9f 70       	andi	r25, 0x0F	; 15
    252e:	89 27       	eor	r24, r25
			(ED_MAX_VAL * LQI_MAX);

	if (link_quality > 255) {
    2530:	8f 3f       	cpi	r24, 0xFF	; 255
    2532:	91 05       	cpc	r25, r1
    2534:	11 f0       	breq	.+4      	; 0x253a <process_incoming_frame+0x6e>
    2536:	08 f0       	brcs	.+2      	; 0x253a <process_incoming_frame+0x6e>
		return 255;
    2538:	8f ef       	ldi	r24, 0xFF	; 255
	lqi = normalize_lqi(lqi, ed_level);
#endif

	/* Store normalized LQI value again. */
	frame_ptr--;
	*frame_ptr = lqi;
    253a:	80 83       	st	Z, r24
#endif  /* #ifndef TRX_REG_RAW_VALUE */

	receive_frame->buffer_header = buf_ptr;
    253c:	5a 83       	std	Y+2, r21	; 0x02
    253e:	49 83       	std	Y+1, r20	; 0x01
#ifdef ENABLE_RTB
	/* The callback function implemented by RTB is invoked. */
	rtb_rx_frame_cb(receive_frame);
#else
	/* The callback function implemented by MAC is invoked. */
	tal_rx_frame_cb(receive_frame);
    2540:	ce 01       	movw	r24, r28
    2542:	2e d6       	rcall	.+3164   	; 0x31a0 <tal_rx_frame_cb>
#endif
} /* process_incoming_frame() */
    2544:	df 91       	pop	r29
    2546:	cf 91       	pop	r28
    2548:	08 95       	ret

0000254a <tal_rx_enable>:
{
	/*
	 * Trx can only be enabled if TAL is not busy;
	 * i.e. if TAL is IDLE.
	 */
	if (TAL_IDLE != tal_state) {
    254a:	90 91 2d 08 	lds	r25, 0x082D	; 0x80082d <tal_state>
    254e:	91 11       	cpse	r25, r1
    2550:	16 c0       	rjmp	.+44     	; 0x257e <tal_rx_enable+0x34>
#else
		return TAL_BUSY;
#endif
	}

	if (state == PHY_TRX_OFF) {
    2552:	88 30       	cpi	r24, 0x08	; 8
    2554:	29 f4       	brne	.+10     	; 0x2560 <tal_rx_enable+0x16>
		 * that is currently being received.
		 * This must not be a Forced TRX_OFF (CMD_FORCED_TRX_OFF) since
		 * this could
		 * corrupt an already outoing ACK frame.
		 */
		set_trx_state(CMD_TRX_OFF);
    2556:	16 d9       	rcall	.-3540   	; 0x1784 <set_trx_state>
		tal_rx_on_required = false;
    2558:	10 92 01 08 	sts	0x0801, r1	; 0x800801 <tal_rx_on_required>
		return TRX_OFF;
    255c:	88 e0       	ldi	r24, 0x08	; 8
    255e:	08 95       	ret
	} else {
#ifdef SNIFFER
		set_trx_state(CMD_RX_ON);
#else   /* #ifndef SNIFFER */
		if (NULL != tal_rx_buffer) {
    2560:	80 91 bb 05 	lds	r24, 0x05BB	; 0x8005bb <tal_rx_buffer>
    2564:	90 91 bc 05 	lds	r25, 0x05BC	; 0x8005bc <tal_rx_buffer+0x1>
    2568:	89 2b       	or	r24, r25
    256a:	21 f0       	breq	.+8      	; 0x2574 <tal_rx_enable+0x2a>
			} else {
				set_trx_state(CMD_RX_AACK_ON);
			}

#else   /* Normal operation */
			set_trx_state(CMD_RX_AACK_ON);
    256c:	86 e1       	ldi	r24, 0x16	; 22
    256e:	0a d9       	rcall	.-3564   	; 0x1784 <set_trx_state>
			 * receiver.
			 */
			tal_rx_on_required = true;
		}
#endif  /* #ifndef SNIFFER */
		return RX_ON; /* MAC layer assumes RX_ON as return value */
    2570:	86 e0       	ldi	r24, 0x06	; 6
    2572:	08 95       	ret
			 * the TAL returns MAC_SUCCESS. The TAL will try to
			 * allocate a receive
			 * buffer as soon as possible and will switch on the
			 * receiver.
			 */
			tal_rx_on_required = true;
    2574:	81 e0       	ldi	r24, 0x01	; 1
    2576:	80 93 01 08 	sts	0x0801, r24	; 0x800801 <tal_rx_on_required>
		}
#endif  /* #ifndef SNIFFER */
		return RX_ON; /* MAC layer assumes RX_ON as return value */
    257a:	86 e0       	ldi	r24, 0x06	; 6
    257c:	08 95       	ret
		if (tal_state != TAL_SLOTTED_CSMA) {
			return TAL_BUSY;
		}

#else
		return TAL_BUSY;
    257e:	86 e8       	ldi	r24, 0x86	; 134
			tal_rx_on_required = true;
		}
#endif  /* #ifndef SNIFFER */
		return RX_ON; /* MAC layer assumes RX_ON as return value */
	}
}
    2580:	08 95       	ret

00002582 <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
    2582:	04 c0       	rjmp	.+8      	; 0x258c <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
    2584:	61 50       	subi	r22, 0x01	; 1
    2586:	71 09       	sbc	r23, r1
    2588:	81 09       	sbc	r24, r1
    258a:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
    258c:	61 15       	cp	r22, r1
    258e:	71 05       	cpc	r23, r1
    2590:	81 05       	cpc	r24, r1
    2592:	91 05       	cpc	r25, r1
    2594:	b9 f7       	brne	.-18     	; 0x2584 <__portable_avr_delay_cycles+0x2>
    2596:	08 95       	ret

00002598 <tx_done_handling>:
 *
 * This function handles the callback for the transmission end.
 */
void tx_done_handling(void)
{
	tal_state = TAL_IDLE;
    2598:	10 92 2d 08 	sts	0x082D, r1	; 0x80082d <tal_state>
	mac_frame_ptr->time_stamp = pal_tx_timestamp;
#endif  /* #if (defined BEACON_SUPPORT) || (defined ENABLE_TSTAMP) */

	retval_t status;

	switch (trx_trac_status) {
    259c:	80 91 c5 05 	lds	r24, 0x05C5	; 0x8005c5 <trx_trac_status>
    25a0:	83 30       	cpi	r24, 0x03	; 3
    25a2:	69 f0       	breq	.+26     	; 0x25be <tx_done_handling+0x26>
    25a4:	28 f4       	brcc	.+10     	; 0x25b0 <tx_done_handling+0x18>
    25a6:	88 23       	and	r24, r24
    25a8:	91 f0       	breq	.+36     	; 0x25ce <tx_done_handling+0x36>
    25aa:	81 30       	cpi	r24, 0x01	; 1
    25ac:	31 f0       	breq	.+12     	; 0x25ba <tx_done_handling+0x22>
    25ae:	0d c0       	rjmp	.+26     	; 0x25ca <tx_done_handling+0x32>
    25b0:	85 30       	cpi	r24, 0x05	; 5
    25b2:	39 f0       	breq	.+14     	; 0x25c2 <tx_done_handling+0x2a>
    25b4:	87 30       	cpi	r24, 0x07	; 7
    25b6:	39 f0       	breq	.+14     	; 0x25c6 <tx_done_handling+0x2e>
    25b8:	08 c0       	rjmp	.+16     	; 0x25ca <tx_done_handling+0x32>
	case TRAC_SUCCESS:
		status = MAC_SUCCESS;
		break;

	case TRAC_SUCCESS_DATA_PENDING:
		status = TAL_FRAME_PENDING;
    25ba:	87 e8       	ldi	r24, 0x87	; 135
    25bc:	09 c0       	rjmp	.+18     	; 0x25d0 <tx_done_handling+0x38>
		break;

	case TRAC_CHANNEL_ACCESS_FAILURE:
		status = MAC_CHANNEL_ACCESS_FAILURE;
    25be:	81 ee       	ldi	r24, 0xE1	; 225
		break;
    25c0:	07 c0       	rjmp	.+14     	; 0x25d0 <tx_done_handling+0x38>

	case TRAC_NO_ACK:
		status = MAC_NO_ACK;
    25c2:	89 ee       	ldi	r24, 0xE9	; 233
		break;
    25c4:	05 c0       	rjmp	.+10     	; 0x25d0 <tx_done_handling+0x38>

	case TRAC_INVALID:
		status = FAILURE;
    25c6:	85 e8       	ldi	r24, 0x85	; 133
		break;
    25c8:	03 c0       	rjmp	.+6      	; 0x25d0 <tx_done_handling+0x38>

	default:
		Assert("Unexpected tal_tx_state" == 0);
		status = FAILURE;
    25ca:	85 e8       	ldi	r24, 0x85	; 133
		break;
    25cc:	01 c0       	rjmp	.+2      	; 0x25d0 <tx_done_handling+0x38>

	retval_t status;

	switch (trx_trac_status) {
	case TRAC_SUCCESS:
		status = MAC_SUCCESS;
    25ce:	80 e0       	ldi	r24, 0x00	; 0

#ifdef ENABLE_RTB
	rtb_tx_frame_done_cb(status, mac_frame_ptr);
#else
	/* Regular handling without RTB */
	tal_tx_frame_done_cb(status, mac_frame_ptr);
    25d0:	60 91 07 08 	lds	r22, 0x0807	; 0x800807 <mac_frame_ptr>
    25d4:	70 91 08 08 	lds	r23, 0x0808	; 0x800808 <mac_frame_ptr+0x1>
    25d8:	e0 c5       	rjmp	.+3008   	; 0x319a <tal_tx_frame_done_cb>
    25da:	08 95       	ret

000025dc <send_frame>:
 * \param use_csma Flag indicating if CSMA is requested
 * \param tx_retries Flag indicating if transmission retries are requested
 *                   by the MAC layer
 */
void send_frame(csma_mode_t csma_mode, bool tx_retries)
{
    25dc:	1f 93       	push	r17
    25de:	cf 93       	push	r28
    25e0:	df 93       	push	r29
    25e2:	1f 92       	push	r1
    25e4:	cd b7       	in	r28, 0x3d	; 61
    25e6:	de b7       	in	r29, 0x3e	; 62
    25e8:	18 2f       	mov	r17, r24
	tal_trx_status_t trx_status;

	/* Configure tx according to tx_retries */
	if (tx_retries) {
    25ea:	66 23       	and	r22, r22
    25ec:	81 f0       	breq	.+32     	; 0x260e <send_frame+0x32>
		trx_bit_write(SR_MAX_FRAME_RETRIES,
    25ee:	ec e6       	ldi	r30, 0x6C	; 108
    25f0:	f1 e0       	ldi	r31, 0x01	; 1
    25f2:	20 81       	ld	r18, Z
    25f4:	90 91 25 08 	lds	r25, 0x0825	; 0x800825 <tal_pib+0x1c>
    25f8:	30 e1       	ldi	r19, 0x10	; 16
    25fa:	93 9f       	mul	r25, r19
    25fc:	c0 01       	movw	r24, r0
    25fe:	11 24       	eor	r1, r1
    2600:	92 2f       	mov	r25, r18
    2602:	9f 70       	andi	r25, 0x0F	; 15
    2604:	89 2b       	or	r24, r25
    2606:	80 83       	st	Z, r24
	} else {
		trx_bit_write(SR_MAX_FRAME_RETRIES, 0);
	}

	/* Configure tx according to csma usage */
	if ((csma_mode == NO_CSMA_NO_IFS) || (csma_mode == NO_CSMA_WITH_IFS)) {
    2608:	12 30       	cpi	r17, 0x02	; 2
    260a:	e0 f4       	brcc	.+56     	; 0x2644 <send_frame+0x68>
    260c:	08 c0       	rjmp	.+16     	; 0x261e <send_frame+0x42>
	/* Configure tx according to tx_retries */
	if (tx_retries) {
		trx_bit_write(SR_MAX_FRAME_RETRIES,
				tal_pib.MaxFrameRetries);
	} else {
		trx_bit_write(SR_MAX_FRAME_RETRIES, 0);
    260e:	ec e6       	ldi	r30, 0x6C	; 108
    2610:	f1 e0       	ldi	r31, 0x01	; 1
    2612:	80 81       	ld	r24, Z
    2614:	8f 70       	andi	r24, 0x0F	; 15
    2616:	80 83       	st	Z, r24
	}

	/* Configure tx according to csma usage */
	if ((csma_mode == NO_CSMA_NO_IFS) || (csma_mode == NO_CSMA_WITH_IFS)) {
    2618:	12 30       	cpi	r17, 0x02	; 2
    261a:	a0 f4       	brcc	.+40     	; 0x2644 <send_frame+0x68>
    261c:	0d c0       	rjmp	.+26     	; 0x2638 <send_frame+0x5c>
		if (tx_retries) {
			trx_bit_write(SR_MAX_CSMA_RETRIES,
    261e:	ec e6       	ldi	r30, 0x6C	; 108
    2620:	f1 e0       	ldi	r31, 0x01	; 1
    2622:	80 81       	ld	r24, Z
    2624:	90 91 1d 08 	lds	r25, 0x081D	; 0x80081d <tal_pib+0x14>
    2628:	99 0f       	add	r25, r25
    262a:	9e 70       	andi	r25, 0x0E	; 14
    262c:	81 7f       	andi	r24, 0xF1	; 241
    262e:	89 2b       	or	r24, r25
    2630:	80 83       	st	Z, r24
					tal_pib.MaxCSMABackoffs);
			trx_reg_write(RG_CSMA_BE, 0x00);
    2632:	10 92 6f 01 	sts	0x016F, r1	; 0x80016f <__TEXT_REGION_LENGTH__+0x7c016f>
    2636:	1a c0       	rjmp	.+52     	; 0x266c <send_frame+0x90>
		} else {
			trx_bit_write(SR_MAX_CSMA_RETRIES, 7);
    2638:	ec e6       	ldi	r30, 0x6C	; 108
    263a:	f1 e0       	ldi	r31, 0x01	; 1
    263c:	80 81       	ld	r24, Z
    263e:	8e 60       	ori	r24, 0x0E	; 14
    2640:	80 83       	st	Z, r24
    2642:	14 c0       	rjmp	.+40     	; 0x266c <send_frame+0x90>
		}
	} else {
		trx_reg_write(RG_CSMA_BE,
    2644:	e9 e0       	ldi	r30, 0x09	; 9
    2646:	f8 e0       	ldi	r31, 0x08	; 8
    2648:	83 8d       	ldd	r24, Z+27	; 0x1b
    264a:	20 e1       	ldi	r18, 0x10	; 16
    264c:	82 9f       	mul	r24, r18
    264e:	c0 01       	movw	r24, r0
    2650:	11 24       	eor	r1, r1
    2652:	95 89       	ldd	r25, Z+21	; 0x15
    2654:	89 2b       	or	r24, r25
    2656:	80 93 6f 01 	sts	0x016F, r24	; 0x80016f <__TEXT_REGION_LENGTH__+0x7c016f>
				((tal_pib.MaxBE << 4) | tal_pib.MinBE));
		trx_bit_write(SR_MAX_CSMA_RETRIES, tal_pib.MaxCSMABackoffs);
    265a:	ac e6       	ldi	r26, 0x6C	; 108
    265c:	b1 e0       	ldi	r27, 0x01	; 1
    265e:	8c 91       	ld	r24, X
    2660:	94 89       	ldd	r25, Z+20	; 0x14
    2662:	99 0f       	add	r25, r25
    2664:	9e 70       	andi	r25, 0x0E	; 14
    2666:	81 7f       	andi	r24, 0xF1	; 241
    2668:	89 2b       	or	r24, r25
    266a:	8c 93       	st	X, r24
	}

	do {
		trx_status = set_trx_state(CMD_TX_ARET_ON);
    266c:	89 e1       	ldi	r24, 0x19	; 25
    266e:	8a d8       	rcall	.-3820   	; 0x1784 <set_trx_state>
	} while (trx_status != TX_ARET_ON);
    2670:	89 31       	cpi	r24, 0x19	; 25
    2672:	e1 f7       	brne	.-8      	; 0x266c <send_frame+0x90>

	/* Handle interframe spacing */
	if (csma_mode == NO_CSMA_WITH_IFS) {
    2674:	11 30       	cpi	r17, 0x01	; 1
    2676:	a1 f4       	brne	.+40     	; 0x26a0 <send_frame+0xc4>
		if (last_frame_length > aMaxSIFSFrameSize) {
    2678:	80 91 29 08 	lds	r24, 0x0829	; 0x800829 <last_frame_length>
    267c:	83 31       	cpi	r24, 0x13	; 19
    267e:	40 f0       	brcs	.+16     	; 0x2690 <send_frame+0xb4>
			pal_timer_delay(TAL_CONVERT_SYMBOLS_TO_US(
    2680:	61 e0       	ldi	r22, 0x01	; 1
    2682:	73 e0       	ldi	r23, 0x03	; 3
    2684:	80 e0       	ldi	r24, 0x00	; 0
    2686:	90 e0       	ldi	r25, 0x00	; 0
    2688:	7c df       	rcall	.-264    	; 0x2582 <__portable_avr_delay_cycles>
					macMinLIFSPeriod_def)
					- IRQ_PROCESSING_DLY_US -
					PRE_TX_DURATION_US);
			last_frame_length = 0;
    268a:	10 92 29 08 	sts	0x0829, r1	; 0x800829 <last_frame_length>
    268e:	0d c0       	rjmp	.+26     	; 0x26aa <send_frame+0xce>
		} else {
			pal_timer_delay(TAL_CONVERT_SYMBOLS_TO_US(
    2690:	6b ea       	ldi	r22, 0xAB	; 171
    2692:	70 e0       	ldi	r23, 0x00	; 0
    2694:	80 e0       	ldi	r24, 0x00	; 0
    2696:	90 e0       	ldi	r25, 0x00	; 0
    2698:	74 df       	rcall	.-280    	; 0x2582 <__portable_avr_delay_cycles>
					macMinSIFSPeriod_def)
					- IRQ_PROCESSING_DLY_US -
					PRE_TX_DURATION_US);
			last_frame_length = 0;
    269a:	10 92 29 08 	sts	0x0829, r1	; 0x800829 <last_frame_length>
    269e:	05 c0       	rjmp	.+10     	; 0x26aa <send_frame+0xce>
		 * If no delay is applied after switching to TX_ARET_ON,
		 * a short delay is required that allows that a pending TX_END
		 * IRQ for
		 * ACK transmission gets served.
		 */
		pal_timer_delay(TRX_IRQ_DELAY_US);
    26a0:	6c e0       	ldi	r22, 0x0C	; 12
    26a2:	70 e0       	ldi	r23, 0x00	; 0
    26a4:	80 e0       	ldi	r24, 0x00	; 0
    26a6:	90 e0       	ldi	r25, 0x00	; 0
    26a8:	6c df       	rcall	.-296    	; 0x2582 <__portable_avr_delay_cycles>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    26aa:	8f b7       	in	r24, 0x3f	; 63
    26ac:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    26ae:	f8 94       	cli
	return flags;
    26b0:	19 81       	ldd	r17, Y+1	; 0x01
	}

	ENTER_CRITICAL_REGION(); /* prevent from buffer underrun */

	/* Toggle the SLP_TR pin triggering transmission. */
	TRX_SLP_TR_HIGH();
    26b2:	e9 e3       	ldi	r30, 0x39	; 57
    26b4:	f1 e0       	ldi	r31, 0x01	; 1
    26b6:	80 81       	ld	r24, Z
    26b8:	82 60       	ori	r24, 0x02	; 2
    26ba:	80 83       	st	Z, r24
	PAL_WAIT_65_NS();
    26bc:	00 00       	nop
    26be:	00 00       	nop
	TRX_SLP_TR_LOW();
    26c0:	80 81       	ld	r24, Z
    26c2:	8d 7f       	andi	r24, 0xFD	; 253
    26c4:	80 83       	st	Z, r24
	 * is
	 * 1 octet frame length octet
	 * + n octets frame (i.e. value of frame_tx[0])
	 * - 2 octets FCS
	 */
	trx_frame_write(tal_frame_to_tx, tal_frame_to_tx[0] - 1);
    26c6:	60 91 2a 08 	lds	r22, 0x082A	; 0x80082a <tal_frame_to_tx>
    26ca:	70 91 2b 08 	lds	r23, 0x082B	; 0x80082b <tal_frame_to_tx+0x1>
    26ce:	fb 01       	movw	r30, r22
    26d0:	40 81       	ld	r20, Z
    26d2:	50 e0       	ldi	r21, 0x00	; 0
    26d4:	41 50       	subi	r20, 0x01	; 1
    26d6:	51 09       	sbc	r21, r1
    26d8:	80 e8       	ldi	r24, 0x80	; 128
    26da:	91 e0       	ldi	r25, 0x01	; 1
    26dc:	37 d6       	rcall	.+3182   	; 0x334c <memcpy>

	tal_state = TAL_TX_AUTO;
    26de:	81 e0       	ldi	r24, 0x01	; 1
    26e0:	80 93 2d 08 	sts	0x082D, r24	; 0x80082d <tal_state>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    26e4:	1f bf       	out	0x3f, r17	; 63

	LEAVE_CRITICAL_REGION();
}
    26e6:	0f 90       	pop	r0
    26e8:	df 91       	pop	r29
    26ea:	cf 91       	pop	r28
    26ec:	1f 91       	pop	r17
    26ee:	08 95       	ret

000026f0 <tal_tx_frame>:
 *                 transmission
 *         TAL_BUSY if the TAL is busy servicing the previous MAC request
 */
retval_t tal_tx_frame(frame_info_t *tx_frame, csma_mode_t csma_mode,
		bool perform_frame_retry)
{
    26f0:	fc 01       	movw	r30, r24
	if (tal_state != TAL_IDLE) {
    26f2:	90 91 2d 08 	lds	r25, 0x082D	; 0x80082d <tal_state>
    26f6:	91 11       	cpse	r25, r1
    26f8:	16 c0       	rjmp	.+44     	; 0x2726 <tal_tx_frame+0x36>

	/*
	 * Store the pointer to the provided frame structure.
	 * This is needed for the callback function.
	 */
	mac_frame_ptr = tx_frame;
    26fa:	f0 93 08 08 	sts	0x0808, r31	; 0x800808 <mac_frame_ptr+0x1>
    26fe:	e0 93 07 08 	sts	0x0807, r30	; 0x800807 <mac_frame_ptr>

	/* Set pointer to actual mpdu to be downloaded to the transceiver. */
	tal_frame_to_tx = tx_frame->mpdu;
    2702:	07 80       	ldd	r0, Z+7	; 0x07
    2704:	f0 85       	ldd	r31, Z+8	; 0x08
    2706:	e0 2d       	mov	r30, r0
    2708:	f0 93 2b 08 	sts	0x082B, r31	; 0x80082b <tal_frame_to_tx+0x1>
    270c:	e0 93 2a 08 	sts	0x082A, r30	; 0x80082a <tal_frame_to_tx>
	last_frame_length = tal_frame_to_tx[0] - 1;
    2710:	80 81       	ld	r24, Z
    2712:	81 50       	subi	r24, 0x01	; 1
    2714:	80 93 29 08 	sts	0x0829, r24	; 0x800829 <last_frame_length>

	/*
	 * In case the frame is too large, return immediately indicating
	 * invalid status.
	 */
	if (tal_frame_to_tx == NULL) {
    2718:	ef 2b       	or	r30, r31
    271a:	39 f0       	breq	.+14     	; 0x272a <tal_tx_frame+0x3a>
    271c:	86 2f       	mov	r24, r22
#endif  /* #if (MAC_INDIRECT_DATA_FFD == 1) */
		send_frame(csma_mode, perform_frame_retry);
	}

#else   /* No BEACON_SUPPORT */
	send_frame(csma_mode, perform_frame_retry);
    271e:	64 2f       	mov	r22, r20
    2720:	5d df       	rcall	.-326    	; 0x25dc <send_frame>
#endif  /* BEACON_SUPPORT / No BEACON_SUPPORT */

	return MAC_SUCCESS;
    2722:	80 e0       	ldi	r24, 0x00	; 0
    2724:	08 95       	ret
 */
retval_t tal_tx_frame(frame_info_t *tx_frame, csma_mode_t csma_mode,
		bool perform_frame_retry)
{
	if (tal_state != TAL_IDLE) {
		return TAL_BUSY;
    2726:	86 e8       	ldi	r24, 0x86	; 134
    2728:	08 95       	ret
	/*
	 * In case the frame is too large, return immediately indicating
	 * invalid status.
	 */
	if (tal_frame_to_tx == NULL) {
		return MAC_INVALID_PARAMETER;
    272a:	88 ee       	ldi	r24, 0xE8	; 232
#else   /* No BEACON_SUPPORT */
	send_frame(csma_mode, perform_frame_retry);
#endif  /* BEACON_SUPPORT / No BEACON_SUPPORT */

	return MAC_SUCCESS;
}
    272c:	08 95       	ret

0000272e <handle_tx_end_irq>:
	/* Check if TX_END interrupt, is issued due to automatic ACK
	 * transmission. */
#if ((MAC_START_REQUEST_CONFIRM == 1) && (defined BEACON_SUPPORT))
	if ((tal_state != TAL_TX_AUTO) && (!tal_beacon_transmission))
#else
	if (tal_state != TAL_TX_AUTO)
    272e:	80 91 2d 08 	lds	r24, 0x082D	; 0x80082d <tal_state>
    2732:	81 30       	cpi	r24, 0x01	; 1
    2734:	c1 f4       	brne	.+48     	; 0x2766 <handle_tx_end_irq+0x38>
		}
	} else
#endif /* ((MAC_START_REQUEST_CONFIRM == 1) && (defined BEACON_SUPPORT)) */
	{
		/* Read trac status before enabling RX_AACK_ON. */
		trx_trac_status = (trx_trac_status_t)trx_bit_read(
    2736:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
    273a:	82 95       	swap	r24
    273c:	86 95       	lsr	r24
    273e:	87 70       	andi	r24, 0x07	; 7
    2740:	80 93 c5 05 	sts	0x05C5, r24	; 0x8005c5 <trx_trac_status>
			PIN_ACK_WAITING_END();
		} else
#endif  /* BEACON_SUPPORT */
		/* Trx has handled the entire transmission incl. CSMA */
		{
			tal_state = TAL_TX_DONE; /* Further handling is done by
    2744:	82 e0       	ldi	r24, 0x02	; 2
    2746:	80 93 2d 08 	sts	0x082D, r24	; 0x80082d <tal_state>

	/*
	 * After transmission has finished, switch receiver on again.
	 * Check if receive buffer is available.
	 */
	if (NULL == tal_rx_buffer) {
    274a:	80 91 bb 05 	lds	r24, 0x05BB	; 0x8005bb <tal_rx_buffer>
    274e:	90 91 bc 05 	lds	r25, 0x05BC	; 0x8005bc <tal_rx_buffer+0x1>
    2752:	89 2b       	or	r24, r25
    2754:	31 f4       	brne	.+12     	; 0x2762 <handle_tx_end_irq+0x34>
		set_trx_state(CMD_PLL_ON);
    2756:	89 e0       	ldi	r24, 0x09	; 9
    2758:	15 d8       	rcall	.-4054   	; 0x1784 <set_trx_state>
		tal_rx_on_required = true;
    275a:	81 e0       	ldi	r24, 0x01	; 1
    275c:	80 93 01 08 	sts	0x0801, r24	; 0x800801 <tal_rx_on_required>
    2760:	08 95       	ret
	} else {
		set_trx_state(CMD_RX_AACK_ON);
    2762:	86 e1       	ldi	r24, 0x16	; 22
    2764:	0f c8       	rjmp	.-4066   	; 0x1784 <set_trx_state>
    2766:	08 95       	ret

00002768 <tal_ant_div_config>:
 */
#if ((TAL_TYPE != AT86RF230B) && (TAL_TYPE != AT86RF212))
retval_t  tal_ant_div_config(bool div_ctrl, uint8_t ant_ctrl)
{
	retval_t return_var = FAILURE;
	if (true == div_ctrl) {
    2768:	88 23       	and	r24, r24
    276a:	29 f1       	breq	.+74     	; 0x27b6 <tal_ant_div_config+0x4e>
		/* do the configurations if diversity has to be enabled */
		trx_bit_write(SR_ANT_CTRL, ANT_CTRL_0);
    276c:	ed e4       	ldi	r30, 0x4D	; 77
    276e:	f1 e0       	ldi	r31, 0x01	; 1
    2770:	80 81       	ld	r24, Z
    2772:	8c 7f       	andi	r24, 0xFC	; 252
    2774:	80 83       	st	Z, r24
		trx_bit_write(SR_ANT_DIV_EN, ANT_DIV_ENABLE);
    2776:	80 81       	ld	r24, Z
    2778:	88 60       	ori	r24, 0x08	; 8
    277a:	80 83       	st	Z, r24

#if ((TAL_TYPE != AT86RF212) && (TAL_TYPE != AT86RF212B))
		trx_bit_write(SR_PDT_THRES, THRES_ANT_DIV_ENABLE);
    277c:	aa e4       	ldi	r26, 0x4A	; 74
    277e:	b1 e0       	ldi	r27, 0x01	; 1
    2780:	8c 91       	ld	r24, X
    2782:	80 7f       	andi	r24, 0xF0	; 240
    2784:	83 60       	ori	r24, 0x03	; 3
    2786:	8c 93       	st	X, r24
#endif /* End of ((TAL_TYPE != AT86RF212) && (TAL_TYPE!= AT86RF212B)) */
		trx_bit_write(SR_ANT_EXT_SW_EN, ANT_EXT_SW_ENABLE);
    2788:	80 81       	ld	r24, Z
    278a:	84 60       	ori	r24, 0x04	; 4
    278c:	80 83       	st	Z, r24
#if (TAL_TYPE == ATMEGARFA1)
		CONF_REG_WRITE();
#endif /* TAL_TYPE == ATMEGA128RFA1 */

		/* check the values written in transceiver registers */
		if ((trx_bit_read(SR_ANT_CTRL) == ANT_CTRL_0) &&
    278e:	80 81       	ld	r24, Z
    2790:	83 70       	andi	r24, 0x03	; 3
    2792:	09 f0       	breq	.+2      	; 0x2796 <tal_ant_div_config+0x2e>
    2794:	54 c0       	rjmp	.+168    	; 0x283e <tal_ant_div_config+0xd6>
				(trx_bit_read(SR_ANT_DIV_EN) ==
    2796:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <__TEXT_REGION_LENGTH__+0x7c014d>
#if (TAL_TYPE == ATMEGARFA1)
		CONF_REG_WRITE();
#endif /* TAL_TYPE == ATMEGA128RFA1 */

		/* check the values written in transceiver registers */
		if ((trx_bit_read(SR_ANT_CTRL) == ANT_CTRL_0) &&
    279a:	83 ff       	sbrs	r24, 3
    279c:	52 c0       	rjmp	.+164    	; 0x2842 <tal_ant_div_config+0xda>
				(trx_bit_read(SR_ANT_DIV_EN) ==
				ANT_DIV_ENABLE) && \
				(trx_bit_read(SR_ANT_EXT_SW_EN) ==
    279e:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <__TEXT_REGION_LENGTH__+0x7c014d>
#endif /* TAL_TYPE == ATMEGA128RFA1 */

		/* check the values written in transceiver registers */
		if ((trx_bit_read(SR_ANT_CTRL) == ANT_CTRL_0) &&
				(trx_bit_read(SR_ANT_DIV_EN) ==
				ANT_DIV_ENABLE) && \
    27a2:	82 ff       	sbrs	r24, 2
    27a4:	50 c0       	rjmp	.+160    	; 0x2846 <tal_ant_div_config+0xde>
				(trx_bit_read(SR_ANT_EXT_SW_EN) ==
				ANT_EXT_SW_ENABLE)) {
#if ((TAL_TYPE != AT86RF212) && (TAL_TYPE != AT86RF212B))
			if ((trx_bit_read(SR_PDT_THRES) ==
    27a6:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <__TEXT_REGION_LENGTH__+0x7c014a>
    27aa:	8f 70       	andi	r24, 0x0F	; 15
    27ac:	83 30       	cpi	r24, 0x03	; 3
    27ae:	09 f0       	breq	.+2      	; 0x27b2 <tal_ant_div_config+0x4a>
    27b0:	4c c0       	rjmp	.+152    	; 0x284a <tal_ant_div_config+0xe2>
					THRES_ANT_DIV_ENABLE))
#endif
			return_var = MAC_SUCCESS;
    27b2:	80 e0       	ldi	r24, 0x00	; 0
    27b4:	08 95       	ret
		} else {
			return_var = FAILURE;
		}
	} else {
		/* do the configurations if diversity has to be disabled */
		trx_bit_write(SR_ANT_DIV_EN, ANT_DIV_DISABLE);
    27b6:	ed e4       	ldi	r30, 0x4D	; 77
    27b8:	f1 e0       	ldi	r31, 0x01	; 1
    27ba:	80 81       	ld	r24, Z
    27bc:	87 7f       	andi	r24, 0xF7	; 247
    27be:	80 83       	st	Z, r24
#if ((TAL_TYPE != AT86RF212) && (TAL_TYPE != AT86RF212B))
		trx_bit_write(SR_PDT_THRES, THRES_ANT_DIV_DISABLE);
    27c0:	aa e4       	ldi	r26, 0x4A	; 74
    27c2:	b1 e0       	ldi	r27, 0x01	; 1
    27c4:	8c 91       	ld	r24, X
    27c6:	80 7f       	andi	r24, 0xF0	; 240
    27c8:	87 60       	ori	r24, 0x07	; 7
    27ca:	8c 93       	st	X, r24
#endif

		trx_bit_write(SR_ANT_EXT_SW_EN, ANT_EXT_SW_ENABLE);
    27cc:	80 81       	ld	r24, Z
    27ce:	84 60       	ori	r24, 0x04	; 4
    27d0:	80 83       	st	Z, r24
		if (ant_ctrl == ANT_CTRL_1) {
    27d2:	61 30       	cpi	r22, 0x01	; 1
    27d4:	31 f4       	brne	.+12     	; 0x27e2 <tal_ant_div_config+0x7a>
			/* Enable A1/X2 */
			trx_bit_write(SR_ANT_CTRL, ANT_CTRL_1);
    27d6:	80 81       	ld	r24, Z
    27d8:	8c 7f       	andi	r24, 0xFC	; 252
    27da:	81 60       	ori	r24, 0x01	; 1
    27dc:	80 83       	st	Z, r24
 * \return The value set in the TX_PWR bits
 */
#if ((TAL_TYPE != AT86RF230B) && (TAL_TYPE != AT86RF212))
retval_t  tal_ant_div_config(bool div_ctrl, uint8_t ant_ctrl)
{
	retval_t return_var = FAILURE;
    27de:	85 e8       	ldi	r24, 0x85	; 133
    27e0:	17 c0       	rjmp	.+46     	; 0x2810 <tal_ant_div_config+0xa8>

		trx_bit_write(SR_ANT_EXT_SW_EN, ANT_EXT_SW_ENABLE);
		if (ant_ctrl == ANT_CTRL_1) {
			/* Enable A1/X2 */
			trx_bit_write(SR_ANT_CTRL, ANT_CTRL_1);
		} else if (ant_ctrl == ANT_CTRL_2) {
    27e2:	62 30       	cpi	r22, 0x02	; 2
    27e4:	41 f4       	brne	.+16     	; 0x27f6 <tal_ant_div_config+0x8e>
			/* Enable A2/X3 */
			trx_bit_write(SR_ANT_CTRL, ANT_CTRL_2);
    27e6:	ed e4       	ldi	r30, 0x4D	; 77
    27e8:	f1 e0       	ldi	r31, 0x01	; 1
    27ea:	80 81       	ld	r24, Z
    27ec:	8c 7f       	andi	r24, 0xFC	; 252
    27ee:	82 60       	ori	r24, 0x02	; 2
    27f0:	80 83       	st	Z, r24
 * \return The value set in the TX_PWR bits
 */
#if ((TAL_TYPE != AT86RF230B) && (TAL_TYPE != AT86RF212))
retval_t  tal_ant_div_config(bool div_ctrl, uint8_t ant_ctrl)
{
	retval_t return_var = FAILURE;
    27f2:	85 e8       	ldi	r24, 0x85	; 133
    27f4:	0d c0       	rjmp	.+26     	; 0x2810 <tal_ant_div_config+0xa8>
			/* Enable A1/X2 */
			trx_bit_write(SR_ANT_CTRL, ANT_CTRL_1);
		} else if (ant_ctrl == ANT_CTRL_2) {
			/* Enable A2/X3 */
			trx_bit_write(SR_ANT_CTRL, ANT_CTRL_2);
		} else if (ant_ctrl == ANT_CTRL_0 || ant_ctrl == ANT_CTRL_3) {
    27f6:	66 23       	and	r22, r22
    27f8:	11 f0       	breq	.+4      	; 0x27fe <tal_ant_div_config+0x96>
    27fa:	63 30       	cpi	r22, 0x03	; 3
    27fc:	41 f4       	brne	.+16     	; 0x280e <tal_ant_div_config+0xa6>
			trx_bit_write(SR_ANT_CTRL, ANT_CTRL_0);
    27fe:	ed e4       	ldi	r30, 0x4D	; 77
    2800:	f1 e0       	ldi	r31, 0x01	; 1
    2802:	80 81       	ld	r24, Z
    2804:	8c 7f       	andi	r24, 0xFC	; 252
    2806:	80 83       	st	Z, r24
 * \return The value set in the TX_PWR bits
 */
#if ((TAL_TYPE != AT86RF230B) && (TAL_TYPE != AT86RF212))
retval_t  tal_ant_div_config(bool div_ctrl, uint8_t ant_ctrl)
{
	retval_t return_var = FAILURE;
    2808:	85 e8       	ldi	r24, 0x85	; 133
		} else if (ant_ctrl == ANT_CTRL_2) {
			/* Enable A2/X3 */
			trx_bit_write(SR_ANT_CTRL, ANT_CTRL_2);
		} else if (ant_ctrl == ANT_CTRL_0 || ant_ctrl == ANT_CTRL_3) {
			trx_bit_write(SR_ANT_CTRL, ANT_CTRL_0);
			ant_ctrl = 0;
    280a:	60 e0       	ldi	r22, 0x00	; 0
    280c:	01 c0       	rjmp	.+2      	; 0x2810 <tal_ant_div_config+0xa8>
		} else {
			return_var = MAC_INVALID_PARAMETER;
    280e:	88 ee       	ldi	r24, 0xE8	; 232

#if (TAL_TYPE == ATMEGARFA1)
		CONF_REG_WRITE();
#endif /* TAL_TYPE == ATMEGA128RFA1 */
		/* check the values written in transceiver registers */
		if ((trx_bit_read(SR_ANT_CTRL) == ant_ctrl) &&
    2810:	20 91 4d 01 	lds	r18, 0x014D	; 0x80014d <__TEXT_REGION_LENGTH__+0x7c014d>
    2814:	23 70       	andi	r18, 0x03	; 3
    2816:	30 e0       	ldi	r19, 0x00	; 0
    2818:	70 e0       	ldi	r23, 0x00	; 0
    281a:	26 17       	cp	r18, r22
    281c:	37 07       	cpc	r19, r23
    281e:	b9 f4       	brne	.+46     	; 0x284e <tal_ant_div_config+0xe6>
				(trx_bit_read(SR_ANT_DIV_EN) ==
    2820:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <__TEXT_REGION_LENGTH__+0x7c014d>

#if (TAL_TYPE == ATMEGARFA1)
		CONF_REG_WRITE();
#endif /* TAL_TYPE == ATMEGA128RFA1 */
		/* check the values written in transceiver registers */
		if ((trx_bit_read(SR_ANT_CTRL) == ant_ctrl) &&
    2824:	93 fd       	sbrc	r25, 3
    2826:	15 c0       	rjmp	.+42     	; 0x2852 <tal_ant_div_config+0xea>
				(trx_bit_read(SR_ANT_DIV_EN) ==
				ANT_DIV_DISABLE) && \
				(trx_bit_read(SR_ANT_EXT_SW_EN) ==
    2828:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <__TEXT_REGION_LENGTH__+0x7c014d>
		CONF_REG_WRITE();
#endif /* TAL_TYPE == ATMEGA128RFA1 */
		/* check the values written in transceiver registers */
		if ((trx_bit_read(SR_ANT_CTRL) == ant_ctrl) &&
				(trx_bit_read(SR_ANT_DIV_EN) ==
				ANT_DIV_DISABLE) && \
    282c:	92 fd       	sbrc	r25, 2
    282e:	13 c0       	rjmp	.+38     	; 0x2856 <tal_ant_div_config+0xee>
				(trx_bit_read(SR_ANT_EXT_SW_EN) ==
				ANT_EXT_SW_DISABLE)) {
#if ((TAL_TYPE != AT86RF212) && (TAL_TYPE != AT86RF212B))
			if ((trx_bit_read(SR_PDT_THRES) ==
    2830:	90 91 4a 01 	lds	r25, 0x014A	; 0x80014a <__TEXT_REGION_LENGTH__+0x7c014a>
    2834:	9f 70       	andi	r25, 0x0F	; 15
    2836:	93 30       	cpi	r25, 0x03	; 3
    2838:	79 f4       	brne	.+30     	; 0x2858 <tal_ant_div_config+0xf0>
					THRES_ANT_DIV_ENABLE))
#endif
			return_var = MAC_SUCCESS;
    283a:	80 e0       	ldi	r24, 0x00	; 0
    283c:	08 95       	ret
			if ((trx_bit_read(SR_PDT_THRES) ==
					THRES_ANT_DIV_ENABLE))
#endif
			return_var = MAC_SUCCESS;
		} else {
			return_var = FAILURE;
    283e:	85 e8       	ldi	r24, 0x85	; 133
    2840:	08 95       	ret
    2842:	85 e8       	ldi	r24, 0x85	; 133
    2844:	08 95       	ret
    2846:	85 e8       	ldi	r24, 0x85	; 133
    2848:	08 95       	ret
 * \return The value set in the TX_PWR bits
 */
#if ((TAL_TYPE != AT86RF230B) && (TAL_TYPE != AT86RF212))
retval_t  tal_ant_div_config(bool div_ctrl, uint8_t ant_ctrl)
{
	retval_t return_var = FAILURE;
    284a:	85 e8       	ldi	r24, 0x85	; 133
    284c:	08 95       	ret
			if ((trx_bit_read(SR_PDT_THRES) ==
					THRES_ANT_DIV_ENABLE))
#endif
			return_var = MAC_SUCCESS;
		} else {
			return_var = FAILURE;
    284e:	85 e8       	ldi	r24, 0x85	; 133
    2850:	08 95       	ret
    2852:	85 e8       	ldi	r24, 0x85	; 133
    2854:	08 95       	ret
    2856:	85 e8       	ldi	r24, 0x85	; 133
		}
	}

	return return_var;
}
    2858:	08 95       	ret

0000285a <tfa_pib_set>:
 *         TAL_BUSY if the TAL is not in TAL_IDLE state.
 *         MAC_SUCCESS if the attempt to set the PIB attribute was successful
 */
retval_t tfa_pib_set(tfa_pib_t tfa_pib_attribute, void *value)
{
	switch (tfa_pib_attribute) {
    285a:	81 11       	cpse	r24, r1
    285c:	24 c0       	rjmp	.+72     	; 0x28a6 <tfa_pib_set+0x4c>
	case TFA_PIB_RX_SENS:
	{
		uint8_t reg_val;

		tfa_pib_rx_sens = *((int8_t *)value);
    285e:	fb 01       	movw	r30, r22
    2860:	80 81       	ld	r24, Z
		if (tfa_pib_rx_sens > -49) {
    2862:	80 3d       	cpi	r24, 0xD0	; 208
    2864:	2c f0       	brlt	.+10     	; 0x2870 <tfa_pib_set+0x16>
			reg_val = 0xF;
			tfa_pib_rx_sens = -49;
    2866:	8f ec       	ldi	r24, 0xCF	; 207
    2868:	80 93 c6 05 	sts	0x05C6, r24	; 0x8005c6 <tfa_pib_rx_sens>
	{
		uint8_t reg_val;

		tfa_pib_rx_sens = *((int8_t *)value);
		if (tfa_pib_rx_sens > -49) {
			reg_val = 0xF;
    286c:	6f e0       	ldi	r22, 0x0F	; 15
    286e:	12 c0       	rjmp	.+36     	; 0x2894 <tfa_pib_set+0x3a>
			tfa_pib_rx_sens = -49;
		} else if (tfa_pib_rx_sens <= RSSI_BASE_VAL_DBM) {
    2870:	87 3a       	cpi	r24, 0xA7	; 167
    2872:	2c f4       	brge	.+10     	; 0x287e <tfa_pib_set+0x24>
			reg_val = 0x0;
			tfa_pib_rx_sens = RSSI_BASE_VAL_DBM;
    2874:	86 ea       	ldi	r24, 0xA6	; 166
    2876:	80 93 c6 05 	sts	0x05C6, r24	; 0x8005c6 <tfa_pib_rx_sens>
		tfa_pib_rx_sens = *((int8_t *)value);
		if (tfa_pib_rx_sens > -49) {
			reg_val = 0xF;
			tfa_pib_rx_sens = -49;
		} else if (tfa_pib_rx_sens <= RSSI_BASE_VAL_DBM) {
			reg_val = 0x0;
    287a:	60 e0       	ldi	r22, 0x00	; 0
    287c:	0b c0       	rjmp	.+22     	; 0x2894 <tfa_pib_set+0x3a>
	switch (tfa_pib_attribute) {
	case TFA_PIB_RX_SENS:
	{
		uint8_t reg_val;

		tfa_pib_rx_sens = *((int8_t *)value);
    287e:	80 93 c6 05 	sts	0x05C6, r24	; 0x8005c6 <tfa_pib_rx_sens>
		} else if (tfa_pib_rx_sens <= RSSI_BASE_VAL_DBM) {
			reg_val = 0x0;
			tfa_pib_rx_sens = RSSI_BASE_VAL_DBM;
		} else {
			reg_val
				= ((tfa_pib_rx_sens -
    2882:	08 2e       	mov	r0, r24
    2884:	00 0c       	add	r0, r0
    2886:	99 0b       	sbc	r25, r25
    2888:	86 5a       	subi	r24, 0xA6	; 166
    288a:	9f 4f       	sbci	r25, 0xFF	; 255
    288c:	63 e0       	ldi	r22, 0x03	; 3
    288e:	70 e0       	ldi	r23, 0x00	; 0
    2890:	b6 d4       	rcall	.+2412   	; 0x31fe <__divmodhi4>
    2892:	6f 5f       	subi	r22, 0xFF	; 255
					(RSSI_BASE_VAL_DBM)) / 3) + 1;
		}

		trx_bit_write(SR_RX_PDT_LEVEL, reg_val);
    2894:	e5 e5       	ldi	r30, 0x55	; 85
    2896:	f1 e0       	ldi	r31, 0x01	; 1
    2898:	80 81       	ld	r24, Z
    289a:	80 7f       	andi	r24, 0xF0	; 240
    289c:	6f 70       	andi	r22, 0x0F	; 15
    289e:	68 2b       	or	r22, r24
    28a0:	60 83       	st	Z, r22
	default:
		/* Invalid attribute id */
		return MAC_UNSUPPORTED_ATTRIBUTE;
	}

	return MAC_SUCCESS;
    28a2:	80 e0       	ldi	r24, 0x00	; 0
    28a4:	08 95       	ret
	}
	break;

	default:
		/* Invalid attribute id */
		return MAC_UNSUPPORTED_ATTRIBUTE;
    28a6:	84 ef       	ldi	r24, 0xF4	; 244
	}

	return MAC_SUCCESS;
}
    28a8:	08 95       	ret

000028aa <tfa_init>:
 * to their default values.
 * \ingroup group_tfa
 */
static void init_tfa_pib(void)
{
	tfa_pib_rx_sens = TFA_PIB_RX_SENS_DEF;
    28aa:	86 ea       	ldi	r24, 0xA6	; 166
    28ac:	80 93 c6 05 	sts	0x05C6, r24	; 0x8005c6 <tfa_pib_rx_sens>
 * It is assumed that the radio does not sleep.
 * \ingroup group_tfa
 */
static void write_all_tfa_pibs_to_trx(void)
{
	tfa_pib_set(TFA_PIB_RX_SENS, (void *)&tfa_pib_rx_sens);
    28b0:	66 ec       	ldi	r22, 0xC6	; 198
    28b2:	75 e0       	ldi	r23, 0x05	; 5
    28b4:	80 e0       	ldi	r24, 0x00	; 0
    28b6:	d1 df       	rcall	.-94     	; 0x285a <tfa_pib_set>
		Assert(false);
	}

#if !MEGA_XX_UN0 && !MEGA_XX_UN1
	else if (module == &ADC) {
		sysclk_enable_module(POWER_RED_REG0, PRADC_bm);
    28b8:	61 e0       	ldi	r22, 0x01	; 1
    28ba:	80 e0       	ldi	r24, 0x00	; 0
    28bc:	0e 94 5d 06 	call	0xcba	; 0xcba <sysclk_enable_module>
#if MEGA_RF
		sysclk_enable_module(POWER_RED_REG0, PRPGA_bm);
    28c0:	60 e1       	ldi	r22, 0x10	; 16
    28c2:	80 e0       	ldi	r24, 0x00	; 0
    28c4:	0e 94 5d 06 	call	0xcba	; 0xcba <sysclk_enable_module>
{
	init_tfa_pib();
	write_all_tfa_pibs_to_trx();
	sysclk_enable_peripheral_clock(&ADC);
	return MAC_SUCCESS;
}
    28c8:	80 e0       	ldi	r24, 0x00	; 0
    28ca:	08 95       	ret

000028cc <tc_ovf_callback>:

/*! \brief  hw timer overflow callback
 */
void tc_ovf_callback(void)
{
	tmr_ovf_callback();
    28cc:	0c 94 9a 01 	jmp	0x334	; 0x334 <tmr_ovf_callback>
    28d0:	08 95       	ret

000028d2 <tc_cca_callback>:

/*! \brief  hw timer compare callback
 */
void tc_cca_callback(void)
{
	tmr_cca_callback();
    28d2:	0c 94 d2 01 	jmp	0x3a4	; 0x3a4 <tmr_cca_callback>
    28d6:	08 95       	ret

000028d8 <tmr_read_count>:
 * @return  count  in the register
 */
static inline uint16_t tc_read_count(volatile void *tc)
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
		return TCNT1;
    28d8:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7c0084>
    28dc:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7c0085>
/*! \brief  read the actual timer count from register
 */
uint16_t tmr_read_count(void)
{
	return tc_read_count(TIMER);
}
    28e0:	08 95       	ret

000028e2 <tmr_disable_cc_interrupt>:
 * @param tc Timer Address
 */
static inline void tc_disable_compa_int(volatile void *tc)
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
		TIMSK1 &= ~(1 << OCIE1A);
    28e2:	ef e6       	ldi	r30, 0x6F	; 111
    28e4:	f0 e0       	ldi	r31, 0x00	; 0
    28e6:	80 81       	ld	r24, Z
    28e8:	8d 7f       	andi	r24, 0xFD	; 253
    28ea:	80 83       	st	Z, r24
 * @param tc Timer Address
 */
static inline void clear_compa_flag(volatile void *tc)
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
		TIFR1 |= (1 << OCF1A);
    28ec:	b1 9a       	sbi	0x16, 1	; 22
    28ee:	08 95       	ret

000028f0 <tmr_enable_cc_interrupt>:
    28f0:	b1 9a       	sbi	0x16, 1	; 22
 * @param tc Timer Address
 */
static inline void tc_enable_compa_int(volatile void *tc)
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
		TIMSK1 |= (1 << OCIE1A);
    28f2:	ef e6       	ldi	r30, 0x6F	; 111
    28f4:	f0 e0       	ldi	r31, 0x00	; 0
    28f6:	80 81       	ld	r24, Z
    28f8:	82 60       	ori	r24, 0x02	; 2
    28fa:	80 83       	st	Z, r24
    28fc:	08 95       	ret

000028fe <tmr_disable_ovf_interrupt>:
 * @param tc Timer Address
 */
static inline void tc_enable_ovf_int(volatile void *tc)
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
		TIMSK1 |= (1 << TOIE1);
    28fe:	ef e6       	ldi	r30, 0x6F	; 111
    2900:	f0 e0       	ldi	r31, 0x00	; 0
    2902:	80 81       	ld	r24, Z
    2904:	81 60       	ori	r24, 0x01	; 1
    2906:	80 83       	st	Z, r24
 * @param tc Timer Address
 */
static inline void clear_ovf_flag(volatile void *tc)
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
		TIFR1 |= (1 << TOV1);
    2908:	b0 9a       	sbi	0x16, 0	; 22
    290a:	08 95       	ret

0000290c <tmr_stop>:

/*! \brief  to stop the running timer
 */
void tmr_stop(void)
{
	tc_disable(TIMER);
    290c:	80 e8       	ldi	r24, 0x80	; 128
    290e:	90 e0       	ldi	r25, 0x00	; 0
    2910:	82 c3       	rjmp	.+1796   	; 0x3016 <tc_disable>
    2912:	08 95       	ret

00002914 <tmr_write_cmpreg>:
 */
static inline void tc_write_cc(volatile void *tc,
		enum tc_cc_channel_t channel_index, uint16_t value)
{
	uint8_t *reg = (uint8_t *)tc;
	*(reg + channel_index + 1) |=  (value >> 8);
    2914:	e9 e8       	ldi	r30, 0x89	; 137
    2916:	f0 e0       	ldi	r31, 0x00	; 0
    2918:	20 81       	ld	r18, Z
    291a:	92 2b       	or	r25, r18
    291c:	90 83       	st	Z, r25
	*(reg + channel_index) |=  value;
    291e:	e8 e8       	ldi	r30, 0x88	; 136
    2920:	f0 e0       	ldi	r31, 0x00	; 0
    2922:	90 81       	ld	r25, Z
    2924:	89 2b       	or	r24, r25
    2926:	80 83       	st	Z, r24
    2928:	08 95       	ret

0000292a <save_cpu_interrupt>:
}

/*! \brief  to save current interrupts status
 */
uint8_t save_cpu_interrupt(void)
{
    292a:	cf 93       	push	r28
    292c:	df 93       	push	r29
    292e:	1f 92       	push	r1
    2930:	cd b7       	in	r28, 0x3d	; 61
    2932:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    2934:	8f b7       	in	r24, 0x3f	; 63
    2936:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    2938:	f8 94       	cli
	return flags;
    293a:	89 81       	ldd	r24, Y+1	; 0x01
	return cpu_irq_save();
}
    293c:	0f 90       	pop	r0
    293e:	df 91       	pop	r29
    2940:	cf 91       	pop	r28
    2942:	08 95       	ret

00002944 <restore_cpu_interrupt>:
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2944:	8f bf       	out	0x3f, r24	; 63
    2946:	08 95       	ret

00002948 <tmr_init>:
}

/*! \brief  to initialiaze hw timer
 */
uint8_t tmr_init(void)
{
    2948:	cf 93       	push	r28
    294a:	df 93       	push	r29
	uint8_t timer_multiplier;

	tc_enable(TIMER);
    294c:	80 e8       	ldi	r24, 0x80	; 128
    294e:	90 e0       	ldi	r25, 0x00	; 0
    2950:	eb d2       	rcall	.+1494   	; 0x2f28 <tc_enable>

	tc_set_overflow_interrupt_callback(TIMER, tc_ovf_callback);
    2952:	66 e6       	ldi	r22, 0x66	; 102
    2954:	74 e1       	ldi	r23, 0x14	; 20
    2956:	80 e8       	ldi	r24, 0x80	; 128
    2958:	90 e0       	ldi	r25, 0x00	; 0
    295a:	d4 d3       	rcall	.+1960   	; 0x3104 <tc_set_overflow_interrupt_callback>
 * @param tc Timer Address
 */
static inline void tc_enable_ovf_int(volatile void *tc)
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
		TIMSK1 |= (1 << TOIE1);
    295c:	cf e6       	ldi	r28, 0x6F	; 111
    295e:	d0 e0       	ldi	r29, 0x00	; 0
    2960:	88 81       	ld	r24, Y
    2962:	81 60       	ori	r24, 0x01	; 1
    2964:	88 83       	st	Y, r24
 */
static void configure_tc_callback(volatile void *timer)
{
	if ((&TCCR1A == timer) || (&TCCR3A == timer) ||
			(&TCCR4A == timer) || (&TCCR5A == timer)) {
		tc_set_compa_interrupt_callback(TIMER, tc_cca_callback);
    2966:	69 e6       	ldi	r22, 0x69	; 105
    2968:	74 e1       	ldi	r23, 0x14	; 20
    296a:	80 e8       	ldi	r24, 0x80	; 128
    296c:	90 e0       	ldi	r25, 0x00	; 0
    296e:	ea d3       	rcall	.+2004   	; 0x3144 <tc_set_compa_interrupt_callback>
 * @param tc Timer Address
 */
static inline void tc_disable_compa_int(volatile void *tc)
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
		TIMSK1 &= ~(1 << OCIE1A);
    2970:	88 81       	ld	r24, Y
    2972:	8d 7f       	andi	r24, 0xFD	; 253
    2974:	88 83       	st	Y, r24
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
		TCCR1B |=  TC_CLKSEL_enum;
    2976:	e1 e8       	ldi	r30, 0x81	; 129
    2978:	f0 e0       	ldi	r31, 0x00	; 0
    297a:	80 81       	ld	r24, Z
    297c:	81 60       	ori	r24, 0x01	; 1
    297e:	80 83       	st	Z, r24
	tc_write_clock_source(TIMER, TC_CLKSEL_DIV1_gc);

	timer_multiplier = sysclk_get_peripheral_bus_hz(TIMER) / DEF_1MHZ;

	return timer_multiplier;
}
    2980:	88 e0       	ldi	r24, 0x08	; 8
    2982:	df 91       	pop	r29
    2984:	cf 91       	pop	r28
    2986:	08 95       	ret

00002988 <__vector_20>:
/**
 * \internal
 * \brief Interrupt handler for Timer Counter  overflow
 */
ISR(TIMER1_OVF_vect)
{
    2988:	1f 92       	push	r1
    298a:	0f 92       	push	r0
    298c:	0f b6       	in	r0, 0x3f	; 63
    298e:	0f 92       	push	r0
    2990:	11 24       	eor	r1, r1
    2992:	0b b6       	in	r0, 0x3b	; 59
    2994:	0f 92       	push	r0
    2996:	2f 93       	push	r18
    2998:	3f 93       	push	r19
    299a:	4f 93       	push	r20
    299c:	5f 93       	push	r21
    299e:	6f 93       	push	r22
    29a0:	7f 93       	push	r23
    29a2:	8f 93       	push	r24
    29a4:	9f 93       	push	r25
    29a6:	af 93       	push	r26
    29a8:	bf 93       	push	r27
    29aa:	ef 93       	push	r30
    29ac:	ff 93       	push	r31
	if (tc_tccr1_ovf_callback) {
    29ae:	e0 91 e5 05 	lds	r30, 0x05E5	; 0x8005e5 <tc_tccr1_ovf_callback>
    29b2:	f0 91 e6 05 	lds	r31, 0x05E6	; 0x8005e6 <tc_tccr1_ovf_callback+0x1>
    29b6:	30 97       	sbiw	r30, 0x00	; 0
    29b8:	09 f0       	breq	.+2      	; 0x29bc <__vector_20+0x34>
		tc_tccr1_ovf_callback();
    29ba:	19 95       	eicall
	}
}
    29bc:	ff 91       	pop	r31
    29be:	ef 91       	pop	r30
    29c0:	bf 91       	pop	r27
    29c2:	af 91       	pop	r26
    29c4:	9f 91       	pop	r25
    29c6:	8f 91       	pop	r24
    29c8:	7f 91       	pop	r23
    29ca:	6f 91       	pop	r22
    29cc:	5f 91       	pop	r21
    29ce:	4f 91       	pop	r20
    29d0:	3f 91       	pop	r19
    29d2:	2f 91       	pop	r18
    29d4:	0f 90       	pop	r0
    29d6:	0b be       	out	0x3b, r0	; 59
    29d8:	0f 90       	pop	r0
    29da:	0f be       	out	0x3f, r0	; 63
    29dc:	0f 90       	pop	r0
    29de:	1f 90       	pop	r1
    29e0:	18 95       	reti

000029e2 <__vector_17>:

/**
 * \brief Interrupt handler for Timer Counter  Compare Match in Channel A
 */
ISR(TIMER1_COMPA_vect)
{
    29e2:	1f 92       	push	r1
    29e4:	0f 92       	push	r0
    29e6:	0f b6       	in	r0, 0x3f	; 63
    29e8:	0f 92       	push	r0
    29ea:	11 24       	eor	r1, r1
    29ec:	0b b6       	in	r0, 0x3b	; 59
    29ee:	0f 92       	push	r0
    29f0:	2f 93       	push	r18
    29f2:	3f 93       	push	r19
    29f4:	4f 93       	push	r20
    29f6:	5f 93       	push	r21
    29f8:	6f 93       	push	r22
    29fa:	7f 93       	push	r23
    29fc:	8f 93       	push	r24
    29fe:	9f 93       	push	r25
    2a00:	af 93       	push	r26
    2a02:	bf 93       	push	r27
    2a04:	ef 93       	push	r30
    2a06:	ff 93       	push	r31
	if (tc_tccr1_compa_callback) {
    2a08:	e0 91 e3 05 	lds	r30, 0x05E3	; 0x8005e3 <tc_tccr1_compa_callback>
    2a0c:	f0 91 e4 05 	lds	r31, 0x05E4	; 0x8005e4 <tc_tccr1_compa_callback+0x1>
    2a10:	30 97       	sbiw	r30, 0x00	; 0
    2a12:	09 f0       	breq	.+2      	; 0x2a16 <__vector_17+0x34>
		tc_tccr1_compa_callback();
    2a14:	19 95       	eicall
	}
}
    2a16:	ff 91       	pop	r31
    2a18:	ef 91       	pop	r30
    2a1a:	bf 91       	pop	r27
    2a1c:	af 91       	pop	r26
    2a1e:	9f 91       	pop	r25
    2a20:	8f 91       	pop	r24
    2a22:	7f 91       	pop	r23
    2a24:	6f 91       	pop	r22
    2a26:	5f 91       	pop	r21
    2a28:	4f 91       	pop	r20
    2a2a:	3f 91       	pop	r19
    2a2c:	2f 91       	pop	r18
    2a2e:	0f 90       	pop	r0
    2a30:	0b be       	out	0x3b, r0	; 59
    2a32:	0f 90       	pop	r0
    2a34:	0f be       	out	0x3f, r0	; 63
    2a36:	0f 90       	pop	r0
    2a38:	1f 90       	pop	r1
    2a3a:	18 95       	reti

00002a3c <__vector_18>:

/**
 * \brief Interrupt handler for Timer Counter  Compare Match in Channel B
 */
ISR(TIMER1_COMPB_vect)
{
    2a3c:	1f 92       	push	r1
    2a3e:	0f 92       	push	r0
    2a40:	0f b6       	in	r0, 0x3f	; 63
    2a42:	0f 92       	push	r0
    2a44:	11 24       	eor	r1, r1
    2a46:	0b b6       	in	r0, 0x3b	; 59
    2a48:	0f 92       	push	r0
    2a4a:	2f 93       	push	r18
    2a4c:	3f 93       	push	r19
    2a4e:	4f 93       	push	r20
    2a50:	5f 93       	push	r21
    2a52:	6f 93       	push	r22
    2a54:	7f 93       	push	r23
    2a56:	8f 93       	push	r24
    2a58:	9f 93       	push	r25
    2a5a:	af 93       	push	r26
    2a5c:	bf 93       	push	r27
    2a5e:	ef 93       	push	r30
    2a60:	ff 93       	push	r31
	if (tc_tccr1_compb_callback) {
    2a62:	e0 91 e1 05 	lds	r30, 0x05E1	; 0x8005e1 <tc_tccr1_compb_callback>
    2a66:	f0 91 e2 05 	lds	r31, 0x05E2	; 0x8005e2 <tc_tccr1_compb_callback+0x1>
    2a6a:	30 97       	sbiw	r30, 0x00	; 0
    2a6c:	09 f0       	breq	.+2      	; 0x2a70 <__vector_18+0x34>
		tc_tccr1_compb_callback();
    2a6e:	19 95       	eicall
	}
}
    2a70:	ff 91       	pop	r31
    2a72:	ef 91       	pop	r30
    2a74:	bf 91       	pop	r27
    2a76:	af 91       	pop	r26
    2a78:	9f 91       	pop	r25
    2a7a:	8f 91       	pop	r24
    2a7c:	7f 91       	pop	r23
    2a7e:	6f 91       	pop	r22
    2a80:	5f 91       	pop	r21
    2a82:	4f 91       	pop	r20
    2a84:	3f 91       	pop	r19
    2a86:	2f 91       	pop	r18
    2a88:	0f 90       	pop	r0
    2a8a:	0b be       	out	0x3b, r0	; 59
    2a8c:	0f 90       	pop	r0
    2a8e:	0f be       	out	0x3f, r0	; 63
    2a90:	0f 90       	pop	r0
    2a92:	1f 90       	pop	r1
    2a94:	18 95       	reti

00002a96 <__vector_19>:

/**
 * \brief Interrupt handler for Timer Counter  Compare Match in Channel C
 */
ISR(TIMER1_COMPC_vect)
{
    2a96:	1f 92       	push	r1
    2a98:	0f 92       	push	r0
    2a9a:	0f b6       	in	r0, 0x3f	; 63
    2a9c:	0f 92       	push	r0
    2a9e:	11 24       	eor	r1, r1
    2aa0:	0b b6       	in	r0, 0x3b	; 59
    2aa2:	0f 92       	push	r0
    2aa4:	2f 93       	push	r18
    2aa6:	3f 93       	push	r19
    2aa8:	4f 93       	push	r20
    2aaa:	5f 93       	push	r21
    2aac:	6f 93       	push	r22
    2aae:	7f 93       	push	r23
    2ab0:	8f 93       	push	r24
    2ab2:	9f 93       	push	r25
    2ab4:	af 93       	push	r26
    2ab6:	bf 93       	push	r27
    2ab8:	ef 93       	push	r30
    2aba:	ff 93       	push	r31
	if (tc_tccr1_compc_callback) {
    2abc:	e0 91 df 05 	lds	r30, 0x05DF	; 0x8005df <tc_tccr1_compc_callback>
    2ac0:	f0 91 e0 05 	lds	r31, 0x05E0	; 0x8005e0 <tc_tccr1_compc_callback+0x1>
    2ac4:	30 97       	sbiw	r30, 0x00	; 0
    2ac6:	09 f0       	breq	.+2      	; 0x2aca <__vector_19+0x34>
		tc_tccr1_compc_callback();
    2ac8:	19 95       	eicall
	}
}
    2aca:	ff 91       	pop	r31
    2acc:	ef 91       	pop	r30
    2ace:	bf 91       	pop	r27
    2ad0:	af 91       	pop	r26
    2ad2:	9f 91       	pop	r25
    2ad4:	8f 91       	pop	r24
    2ad6:	7f 91       	pop	r23
    2ad8:	6f 91       	pop	r22
    2ada:	5f 91       	pop	r21
    2adc:	4f 91       	pop	r20
    2ade:	3f 91       	pop	r19
    2ae0:	2f 91       	pop	r18
    2ae2:	0f 90       	pop	r0
    2ae4:	0b be       	out	0x3b, r0	; 59
    2ae6:	0f 90       	pop	r0
    2ae8:	0f be       	out	0x3f, r0	; 63
    2aea:	0f 90       	pop	r0
    2aec:	1f 90       	pop	r1
    2aee:	18 95       	reti

00002af0 <__vector_35>:
static tc_callback_t tc_tccr3_compa_callback;
static tc_callback_t tc_tccr3_compb_callback;
static tc_callback_t tc_tccr3_compc_callback;

ISR(TIMER3_OVF_vect)
{
    2af0:	1f 92       	push	r1
    2af2:	0f 92       	push	r0
    2af4:	0f b6       	in	r0, 0x3f	; 63
    2af6:	0f 92       	push	r0
    2af8:	11 24       	eor	r1, r1
    2afa:	0b b6       	in	r0, 0x3b	; 59
    2afc:	0f 92       	push	r0
    2afe:	2f 93       	push	r18
    2b00:	3f 93       	push	r19
    2b02:	4f 93       	push	r20
    2b04:	5f 93       	push	r21
    2b06:	6f 93       	push	r22
    2b08:	7f 93       	push	r23
    2b0a:	8f 93       	push	r24
    2b0c:	9f 93       	push	r25
    2b0e:	af 93       	push	r26
    2b10:	bf 93       	push	r27
    2b12:	ef 93       	push	r30
    2b14:	ff 93       	push	r31
	if (tc_tccr3_ovf_callback) {
    2b16:	e0 91 dd 05 	lds	r30, 0x05DD	; 0x8005dd <tc_tccr3_ovf_callback>
    2b1a:	f0 91 de 05 	lds	r31, 0x05DE	; 0x8005de <tc_tccr3_ovf_callback+0x1>
    2b1e:	30 97       	sbiw	r30, 0x00	; 0
    2b20:	09 f0       	breq	.+2      	; 0x2b24 <__vector_35+0x34>
		tc_tccr3_ovf_callback();
    2b22:	19 95       	eicall
	}
}
    2b24:	ff 91       	pop	r31
    2b26:	ef 91       	pop	r30
    2b28:	bf 91       	pop	r27
    2b2a:	af 91       	pop	r26
    2b2c:	9f 91       	pop	r25
    2b2e:	8f 91       	pop	r24
    2b30:	7f 91       	pop	r23
    2b32:	6f 91       	pop	r22
    2b34:	5f 91       	pop	r21
    2b36:	4f 91       	pop	r20
    2b38:	3f 91       	pop	r19
    2b3a:	2f 91       	pop	r18
    2b3c:	0f 90       	pop	r0
    2b3e:	0b be       	out	0x3b, r0	; 59
    2b40:	0f 90       	pop	r0
    2b42:	0f be       	out	0x3f, r0	; 63
    2b44:	0f 90       	pop	r0
    2b46:	1f 90       	pop	r1
    2b48:	18 95       	reti

00002b4a <__vector_32>:

ISR(TIMER3_COMPA_vect)
{
    2b4a:	1f 92       	push	r1
    2b4c:	0f 92       	push	r0
    2b4e:	0f b6       	in	r0, 0x3f	; 63
    2b50:	0f 92       	push	r0
    2b52:	11 24       	eor	r1, r1
    2b54:	0b b6       	in	r0, 0x3b	; 59
    2b56:	0f 92       	push	r0
    2b58:	2f 93       	push	r18
    2b5a:	3f 93       	push	r19
    2b5c:	4f 93       	push	r20
    2b5e:	5f 93       	push	r21
    2b60:	6f 93       	push	r22
    2b62:	7f 93       	push	r23
    2b64:	8f 93       	push	r24
    2b66:	9f 93       	push	r25
    2b68:	af 93       	push	r26
    2b6a:	bf 93       	push	r27
    2b6c:	ef 93       	push	r30
    2b6e:	ff 93       	push	r31
	if (tc_tccr3_compa_callback) {
    2b70:	e0 91 db 05 	lds	r30, 0x05DB	; 0x8005db <tc_tccr3_compa_callback>
    2b74:	f0 91 dc 05 	lds	r31, 0x05DC	; 0x8005dc <tc_tccr3_compa_callback+0x1>
    2b78:	30 97       	sbiw	r30, 0x00	; 0
    2b7a:	09 f0       	breq	.+2      	; 0x2b7e <__vector_32+0x34>
		tc_tccr3_compa_callback();
    2b7c:	19 95       	eicall
	}
}
    2b7e:	ff 91       	pop	r31
    2b80:	ef 91       	pop	r30
    2b82:	bf 91       	pop	r27
    2b84:	af 91       	pop	r26
    2b86:	9f 91       	pop	r25
    2b88:	8f 91       	pop	r24
    2b8a:	7f 91       	pop	r23
    2b8c:	6f 91       	pop	r22
    2b8e:	5f 91       	pop	r21
    2b90:	4f 91       	pop	r20
    2b92:	3f 91       	pop	r19
    2b94:	2f 91       	pop	r18
    2b96:	0f 90       	pop	r0
    2b98:	0b be       	out	0x3b, r0	; 59
    2b9a:	0f 90       	pop	r0
    2b9c:	0f be       	out	0x3f, r0	; 63
    2b9e:	0f 90       	pop	r0
    2ba0:	1f 90       	pop	r1
    2ba2:	18 95       	reti

00002ba4 <__vector_33>:

ISR(TIMER3_COMPB_vect)
{
    2ba4:	1f 92       	push	r1
    2ba6:	0f 92       	push	r0
    2ba8:	0f b6       	in	r0, 0x3f	; 63
    2baa:	0f 92       	push	r0
    2bac:	11 24       	eor	r1, r1
    2bae:	0b b6       	in	r0, 0x3b	; 59
    2bb0:	0f 92       	push	r0
    2bb2:	2f 93       	push	r18
    2bb4:	3f 93       	push	r19
    2bb6:	4f 93       	push	r20
    2bb8:	5f 93       	push	r21
    2bba:	6f 93       	push	r22
    2bbc:	7f 93       	push	r23
    2bbe:	8f 93       	push	r24
    2bc0:	9f 93       	push	r25
    2bc2:	af 93       	push	r26
    2bc4:	bf 93       	push	r27
    2bc6:	ef 93       	push	r30
    2bc8:	ff 93       	push	r31
	if (tc_tccr3_compb_callback) {
    2bca:	e0 91 d9 05 	lds	r30, 0x05D9	; 0x8005d9 <tc_tccr3_compb_callback>
    2bce:	f0 91 da 05 	lds	r31, 0x05DA	; 0x8005da <tc_tccr3_compb_callback+0x1>
    2bd2:	30 97       	sbiw	r30, 0x00	; 0
    2bd4:	09 f0       	breq	.+2      	; 0x2bd8 <__vector_33+0x34>
		tc_tccr3_compb_callback();
    2bd6:	19 95       	eicall
	}
}
    2bd8:	ff 91       	pop	r31
    2bda:	ef 91       	pop	r30
    2bdc:	bf 91       	pop	r27
    2bde:	af 91       	pop	r26
    2be0:	9f 91       	pop	r25
    2be2:	8f 91       	pop	r24
    2be4:	7f 91       	pop	r23
    2be6:	6f 91       	pop	r22
    2be8:	5f 91       	pop	r21
    2bea:	4f 91       	pop	r20
    2bec:	3f 91       	pop	r19
    2bee:	2f 91       	pop	r18
    2bf0:	0f 90       	pop	r0
    2bf2:	0b be       	out	0x3b, r0	; 59
    2bf4:	0f 90       	pop	r0
    2bf6:	0f be       	out	0x3f, r0	; 63
    2bf8:	0f 90       	pop	r0
    2bfa:	1f 90       	pop	r1
    2bfc:	18 95       	reti

00002bfe <__vector_34>:

ISR(TIMER3_COMPC_vect)
{
    2bfe:	1f 92       	push	r1
    2c00:	0f 92       	push	r0
    2c02:	0f b6       	in	r0, 0x3f	; 63
    2c04:	0f 92       	push	r0
    2c06:	11 24       	eor	r1, r1
    2c08:	0b b6       	in	r0, 0x3b	; 59
    2c0a:	0f 92       	push	r0
    2c0c:	2f 93       	push	r18
    2c0e:	3f 93       	push	r19
    2c10:	4f 93       	push	r20
    2c12:	5f 93       	push	r21
    2c14:	6f 93       	push	r22
    2c16:	7f 93       	push	r23
    2c18:	8f 93       	push	r24
    2c1a:	9f 93       	push	r25
    2c1c:	af 93       	push	r26
    2c1e:	bf 93       	push	r27
    2c20:	ef 93       	push	r30
    2c22:	ff 93       	push	r31
	if (tc_tccr3_compc_callback) {
    2c24:	e0 91 d7 05 	lds	r30, 0x05D7	; 0x8005d7 <tc_tccr3_compc_callback>
    2c28:	f0 91 d8 05 	lds	r31, 0x05D8	; 0x8005d8 <tc_tccr3_compc_callback+0x1>
    2c2c:	30 97       	sbiw	r30, 0x00	; 0
    2c2e:	09 f0       	breq	.+2      	; 0x2c32 <__vector_34+0x34>
		tc_tccr3_compc_callback();
    2c30:	19 95       	eicall
	}
}
    2c32:	ff 91       	pop	r31
    2c34:	ef 91       	pop	r30
    2c36:	bf 91       	pop	r27
    2c38:	af 91       	pop	r26
    2c3a:	9f 91       	pop	r25
    2c3c:	8f 91       	pop	r24
    2c3e:	7f 91       	pop	r23
    2c40:	6f 91       	pop	r22
    2c42:	5f 91       	pop	r21
    2c44:	4f 91       	pop	r20
    2c46:	3f 91       	pop	r19
    2c48:	2f 91       	pop	r18
    2c4a:	0f 90       	pop	r0
    2c4c:	0b be       	out	0x3b, r0	; 59
    2c4e:	0f 90       	pop	r0
    2c50:	0f be       	out	0x3f, r0	; 63
    2c52:	0f 90       	pop	r0
    2c54:	1f 90       	pop	r1
    2c56:	18 95       	reti

00002c58 <__vector_45>:
static tc_callback_t tc_tccr4_compa_callback;
static tc_callback_t tc_tccr4_compb_callback;
static tc_callback_t tc_tccr4_compc_callback;

ISR(TIMER4_OVF_vect)
{
    2c58:	1f 92       	push	r1
    2c5a:	0f 92       	push	r0
    2c5c:	0f b6       	in	r0, 0x3f	; 63
    2c5e:	0f 92       	push	r0
    2c60:	11 24       	eor	r1, r1
    2c62:	0b b6       	in	r0, 0x3b	; 59
    2c64:	0f 92       	push	r0
    2c66:	2f 93       	push	r18
    2c68:	3f 93       	push	r19
    2c6a:	4f 93       	push	r20
    2c6c:	5f 93       	push	r21
    2c6e:	6f 93       	push	r22
    2c70:	7f 93       	push	r23
    2c72:	8f 93       	push	r24
    2c74:	9f 93       	push	r25
    2c76:	af 93       	push	r26
    2c78:	bf 93       	push	r27
    2c7a:	ef 93       	push	r30
    2c7c:	ff 93       	push	r31
	if (tc_tccr4_ovf_callback) {
    2c7e:	e0 91 d5 05 	lds	r30, 0x05D5	; 0x8005d5 <tc_tccr4_ovf_callback>
    2c82:	f0 91 d6 05 	lds	r31, 0x05D6	; 0x8005d6 <tc_tccr4_ovf_callback+0x1>
    2c86:	30 97       	sbiw	r30, 0x00	; 0
    2c88:	09 f0       	breq	.+2      	; 0x2c8c <__vector_45+0x34>
		tc_tccr4_ovf_callback();
    2c8a:	19 95       	eicall
	}
}
    2c8c:	ff 91       	pop	r31
    2c8e:	ef 91       	pop	r30
    2c90:	bf 91       	pop	r27
    2c92:	af 91       	pop	r26
    2c94:	9f 91       	pop	r25
    2c96:	8f 91       	pop	r24
    2c98:	7f 91       	pop	r23
    2c9a:	6f 91       	pop	r22
    2c9c:	5f 91       	pop	r21
    2c9e:	4f 91       	pop	r20
    2ca0:	3f 91       	pop	r19
    2ca2:	2f 91       	pop	r18
    2ca4:	0f 90       	pop	r0
    2ca6:	0b be       	out	0x3b, r0	; 59
    2ca8:	0f 90       	pop	r0
    2caa:	0f be       	out	0x3f, r0	; 63
    2cac:	0f 90       	pop	r0
    2cae:	1f 90       	pop	r1
    2cb0:	18 95       	reti

00002cb2 <__vector_42>:

ISR(TIMER4_COMPA_vect)
{
    2cb2:	1f 92       	push	r1
    2cb4:	0f 92       	push	r0
    2cb6:	0f b6       	in	r0, 0x3f	; 63
    2cb8:	0f 92       	push	r0
    2cba:	11 24       	eor	r1, r1
    2cbc:	0b b6       	in	r0, 0x3b	; 59
    2cbe:	0f 92       	push	r0
    2cc0:	2f 93       	push	r18
    2cc2:	3f 93       	push	r19
    2cc4:	4f 93       	push	r20
    2cc6:	5f 93       	push	r21
    2cc8:	6f 93       	push	r22
    2cca:	7f 93       	push	r23
    2ccc:	8f 93       	push	r24
    2cce:	9f 93       	push	r25
    2cd0:	af 93       	push	r26
    2cd2:	bf 93       	push	r27
    2cd4:	ef 93       	push	r30
    2cd6:	ff 93       	push	r31
	if (tc_tccr4_compa_callback) {
    2cd8:	e0 91 d3 05 	lds	r30, 0x05D3	; 0x8005d3 <tc_tccr4_compa_callback>
    2cdc:	f0 91 d4 05 	lds	r31, 0x05D4	; 0x8005d4 <tc_tccr4_compa_callback+0x1>
    2ce0:	30 97       	sbiw	r30, 0x00	; 0
    2ce2:	09 f0       	breq	.+2      	; 0x2ce6 <__vector_42+0x34>
		tc_tccr4_compa_callback();
    2ce4:	19 95       	eicall
	}
}
    2ce6:	ff 91       	pop	r31
    2ce8:	ef 91       	pop	r30
    2cea:	bf 91       	pop	r27
    2cec:	af 91       	pop	r26
    2cee:	9f 91       	pop	r25
    2cf0:	8f 91       	pop	r24
    2cf2:	7f 91       	pop	r23
    2cf4:	6f 91       	pop	r22
    2cf6:	5f 91       	pop	r21
    2cf8:	4f 91       	pop	r20
    2cfa:	3f 91       	pop	r19
    2cfc:	2f 91       	pop	r18
    2cfe:	0f 90       	pop	r0
    2d00:	0b be       	out	0x3b, r0	; 59
    2d02:	0f 90       	pop	r0
    2d04:	0f be       	out	0x3f, r0	; 63
    2d06:	0f 90       	pop	r0
    2d08:	1f 90       	pop	r1
    2d0a:	18 95       	reti

00002d0c <__vector_43>:

ISR(TIMER4_COMPB_vect)
{
    2d0c:	1f 92       	push	r1
    2d0e:	0f 92       	push	r0
    2d10:	0f b6       	in	r0, 0x3f	; 63
    2d12:	0f 92       	push	r0
    2d14:	11 24       	eor	r1, r1
    2d16:	0b b6       	in	r0, 0x3b	; 59
    2d18:	0f 92       	push	r0
    2d1a:	2f 93       	push	r18
    2d1c:	3f 93       	push	r19
    2d1e:	4f 93       	push	r20
    2d20:	5f 93       	push	r21
    2d22:	6f 93       	push	r22
    2d24:	7f 93       	push	r23
    2d26:	8f 93       	push	r24
    2d28:	9f 93       	push	r25
    2d2a:	af 93       	push	r26
    2d2c:	bf 93       	push	r27
    2d2e:	ef 93       	push	r30
    2d30:	ff 93       	push	r31
	if (tc_tccr4_compb_callback) {
    2d32:	e0 91 d1 05 	lds	r30, 0x05D1	; 0x8005d1 <tc_tccr4_compb_callback>
    2d36:	f0 91 d2 05 	lds	r31, 0x05D2	; 0x8005d2 <tc_tccr4_compb_callback+0x1>
    2d3a:	30 97       	sbiw	r30, 0x00	; 0
    2d3c:	09 f0       	breq	.+2      	; 0x2d40 <__vector_43+0x34>
		tc_tccr4_compb_callback();
    2d3e:	19 95       	eicall
	}
}
    2d40:	ff 91       	pop	r31
    2d42:	ef 91       	pop	r30
    2d44:	bf 91       	pop	r27
    2d46:	af 91       	pop	r26
    2d48:	9f 91       	pop	r25
    2d4a:	8f 91       	pop	r24
    2d4c:	7f 91       	pop	r23
    2d4e:	6f 91       	pop	r22
    2d50:	5f 91       	pop	r21
    2d52:	4f 91       	pop	r20
    2d54:	3f 91       	pop	r19
    2d56:	2f 91       	pop	r18
    2d58:	0f 90       	pop	r0
    2d5a:	0b be       	out	0x3b, r0	; 59
    2d5c:	0f 90       	pop	r0
    2d5e:	0f be       	out	0x3f, r0	; 63
    2d60:	0f 90       	pop	r0
    2d62:	1f 90       	pop	r1
    2d64:	18 95       	reti

00002d66 <__vector_44>:

ISR(TIMER4_COMPC_vect)
{
    2d66:	1f 92       	push	r1
    2d68:	0f 92       	push	r0
    2d6a:	0f b6       	in	r0, 0x3f	; 63
    2d6c:	0f 92       	push	r0
    2d6e:	11 24       	eor	r1, r1
    2d70:	0b b6       	in	r0, 0x3b	; 59
    2d72:	0f 92       	push	r0
    2d74:	2f 93       	push	r18
    2d76:	3f 93       	push	r19
    2d78:	4f 93       	push	r20
    2d7a:	5f 93       	push	r21
    2d7c:	6f 93       	push	r22
    2d7e:	7f 93       	push	r23
    2d80:	8f 93       	push	r24
    2d82:	9f 93       	push	r25
    2d84:	af 93       	push	r26
    2d86:	bf 93       	push	r27
    2d88:	ef 93       	push	r30
    2d8a:	ff 93       	push	r31
	if (tc_tccr4_compc_callback) {
    2d8c:	e0 91 cf 05 	lds	r30, 0x05CF	; 0x8005cf <tc_tccr4_compc_callback>
    2d90:	f0 91 d0 05 	lds	r31, 0x05D0	; 0x8005d0 <tc_tccr4_compc_callback+0x1>
    2d94:	30 97       	sbiw	r30, 0x00	; 0
    2d96:	09 f0       	breq	.+2      	; 0x2d9a <__vector_44+0x34>
		tc_tccr4_compc_callback();
    2d98:	19 95       	eicall
	}
}
    2d9a:	ff 91       	pop	r31
    2d9c:	ef 91       	pop	r30
    2d9e:	bf 91       	pop	r27
    2da0:	af 91       	pop	r26
    2da2:	9f 91       	pop	r25
    2da4:	8f 91       	pop	r24
    2da6:	7f 91       	pop	r23
    2da8:	6f 91       	pop	r22
    2daa:	5f 91       	pop	r21
    2dac:	4f 91       	pop	r20
    2dae:	3f 91       	pop	r19
    2db0:	2f 91       	pop	r18
    2db2:	0f 90       	pop	r0
    2db4:	0b be       	out	0x3b, r0	; 59
    2db6:	0f 90       	pop	r0
    2db8:	0f be       	out	0x3f, r0	; 63
    2dba:	0f 90       	pop	r0
    2dbc:	1f 90       	pop	r1
    2dbe:	18 95       	reti

00002dc0 <__vector_50>:
static tc_callback_t tc_tccr5_compa_callback;
static tc_callback_t tc_tccr5_compb_callback;
static tc_callback_t tc_tccr5_compc_callback;

ISR(TIMER5_OVF_vect)
{
    2dc0:	1f 92       	push	r1
    2dc2:	0f 92       	push	r0
    2dc4:	0f b6       	in	r0, 0x3f	; 63
    2dc6:	0f 92       	push	r0
    2dc8:	11 24       	eor	r1, r1
    2dca:	0b b6       	in	r0, 0x3b	; 59
    2dcc:	0f 92       	push	r0
    2dce:	2f 93       	push	r18
    2dd0:	3f 93       	push	r19
    2dd2:	4f 93       	push	r20
    2dd4:	5f 93       	push	r21
    2dd6:	6f 93       	push	r22
    2dd8:	7f 93       	push	r23
    2dda:	8f 93       	push	r24
    2ddc:	9f 93       	push	r25
    2dde:	af 93       	push	r26
    2de0:	bf 93       	push	r27
    2de2:	ef 93       	push	r30
    2de4:	ff 93       	push	r31
	if (tc_tccr5_ovf_callback) {
    2de6:	e0 91 cd 05 	lds	r30, 0x05CD	; 0x8005cd <tc_tccr5_ovf_callback>
    2dea:	f0 91 ce 05 	lds	r31, 0x05CE	; 0x8005ce <tc_tccr5_ovf_callback+0x1>
    2dee:	30 97       	sbiw	r30, 0x00	; 0
    2df0:	09 f0       	breq	.+2      	; 0x2df4 <__vector_50+0x34>
		tc_tccr5_ovf_callback();
    2df2:	19 95       	eicall
	}
}
    2df4:	ff 91       	pop	r31
    2df6:	ef 91       	pop	r30
    2df8:	bf 91       	pop	r27
    2dfa:	af 91       	pop	r26
    2dfc:	9f 91       	pop	r25
    2dfe:	8f 91       	pop	r24
    2e00:	7f 91       	pop	r23
    2e02:	6f 91       	pop	r22
    2e04:	5f 91       	pop	r21
    2e06:	4f 91       	pop	r20
    2e08:	3f 91       	pop	r19
    2e0a:	2f 91       	pop	r18
    2e0c:	0f 90       	pop	r0
    2e0e:	0b be       	out	0x3b, r0	; 59
    2e10:	0f 90       	pop	r0
    2e12:	0f be       	out	0x3f, r0	; 63
    2e14:	0f 90       	pop	r0
    2e16:	1f 90       	pop	r1
    2e18:	18 95       	reti

00002e1a <__vector_47>:

ISR(TIMER5_COMPA_vect)
{
    2e1a:	1f 92       	push	r1
    2e1c:	0f 92       	push	r0
    2e1e:	0f b6       	in	r0, 0x3f	; 63
    2e20:	0f 92       	push	r0
    2e22:	11 24       	eor	r1, r1
    2e24:	0b b6       	in	r0, 0x3b	; 59
    2e26:	0f 92       	push	r0
    2e28:	2f 93       	push	r18
    2e2a:	3f 93       	push	r19
    2e2c:	4f 93       	push	r20
    2e2e:	5f 93       	push	r21
    2e30:	6f 93       	push	r22
    2e32:	7f 93       	push	r23
    2e34:	8f 93       	push	r24
    2e36:	9f 93       	push	r25
    2e38:	af 93       	push	r26
    2e3a:	bf 93       	push	r27
    2e3c:	ef 93       	push	r30
    2e3e:	ff 93       	push	r31
	if (tc_tccr5_compa_callback) {
    2e40:	e0 91 cb 05 	lds	r30, 0x05CB	; 0x8005cb <tc_tccr5_compa_callback>
    2e44:	f0 91 cc 05 	lds	r31, 0x05CC	; 0x8005cc <tc_tccr5_compa_callback+0x1>
    2e48:	30 97       	sbiw	r30, 0x00	; 0
    2e4a:	09 f0       	breq	.+2      	; 0x2e4e <__vector_47+0x34>
		tc_tccr5_compa_callback();
    2e4c:	19 95       	eicall
	}
}
    2e4e:	ff 91       	pop	r31
    2e50:	ef 91       	pop	r30
    2e52:	bf 91       	pop	r27
    2e54:	af 91       	pop	r26
    2e56:	9f 91       	pop	r25
    2e58:	8f 91       	pop	r24
    2e5a:	7f 91       	pop	r23
    2e5c:	6f 91       	pop	r22
    2e5e:	5f 91       	pop	r21
    2e60:	4f 91       	pop	r20
    2e62:	3f 91       	pop	r19
    2e64:	2f 91       	pop	r18
    2e66:	0f 90       	pop	r0
    2e68:	0b be       	out	0x3b, r0	; 59
    2e6a:	0f 90       	pop	r0
    2e6c:	0f be       	out	0x3f, r0	; 63
    2e6e:	0f 90       	pop	r0
    2e70:	1f 90       	pop	r1
    2e72:	18 95       	reti

00002e74 <__vector_48>:

ISR(TIMER5_COMPB_vect)
{
    2e74:	1f 92       	push	r1
    2e76:	0f 92       	push	r0
    2e78:	0f b6       	in	r0, 0x3f	; 63
    2e7a:	0f 92       	push	r0
    2e7c:	11 24       	eor	r1, r1
    2e7e:	0b b6       	in	r0, 0x3b	; 59
    2e80:	0f 92       	push	r0
    2e82:	2f 93       	push	r18
    2e84:	3f 93       	push	r19
    2e86:	4f 93       	push	r20
    2e88:	5f 93       	push	r21
    2e8a:	6f 93       	push	r22
    2e8c:	7f 93       	push	r23
    2e8e:	8f 93       	push	r24
    2e90:	9f 93       	push	r25
    2e92:	af 93       	push	r26
    2e94:	bf 93       	push	r27
    2e96:	ef 93       	push	r30
    2e98:	ff 93       	push	r31
	if (tc_tccr5_compb_callback) {
    2e9a:	e0 91 c9 05 	lds	r30, 0x05C9	; 0x8005c9 <tc_tccr5_compb_callback>
    2e9e:	f0 91 ca 05 	lds	r31, 0x05CA	; 0x8005ca <tc_tccr5_compb_callback+0x1>
    2ea2:	30 97       	sbiw	r30, 0x00	; 0
    2ea4:	09 f0       	breq	.+2      	; 0x2ea8 <__vector_48+0x34>
		tc_tccr5_compb_callback();
    2ea6:	19 95       	eicall
	}
}
    2ea8:	ff 91       	pop	r31
    2eaa:	ef 91       	pop	r30
    2eac:	bf 91       	pop	r27
    2eae:	af 91       	pop	r26
    2eb0:	9f 91       	pop	r25
    2eb2:	8f 91       	pop	r24
    2eb4:	7f 91       	pop	r23
    2eb6:	6f 91       	pop	r22
    2eb8:	5f 91       	pop	r21
    2eba:	4f 91       	pop	r20
    2ebc:	3f 91       	pop	r19
    2ebe:	2f 91       	pop	r18
    2ec0:	0f 90       	pop	r0
    2ec2:	0b be       	out	0x3b, r0	; 59
    2ec4:	0f 90       	pop	r0
    2ec6:	0f be       	out	0x3f, r0	; 63
    2ec8:	0f 90       	pop	r0
    2eca:	1f 90       	pop	r1
    2ecc:	18 95       	reti

00002ece <__vector_49>:

ISR(TIMER5_COMPC_vect)
{
    2ece:	1f 92       	push	r1
    2ed0:	0f 92       	push	r0
    2ed2:	0f b6       	in	r0, 0x3f	; 63
    2ed4:	0f 92       	push	r0
    2ed6:	11 24       	eor	r1, r1
    2ed8:	0b b6       	in	r0, 0x3b	; 59
    2eda:	0f 92       	push	r0
    2edc:	2f 93       	push	r18
    2ede:	3f 93       	push	r19
    2ee0:	4f 93       	push	r20
    2ee2:	5f 93       	push	r21
    2ee4:	6f 93       	push	r22
    2ee6:	7f 93       	push	r23
    2ee8:	8f 93       	push	r24
    2eea:	9f 93       	push	r25
    2eec:	af 93       	push	r26
    2eee:	bf 93       	push	r27
    2ef0:	ef 93       	push	r30
    2ef2:	ff 93       	push	r31
	if (tc_tccr5_compc_callback) {
    2ef4:	e0 91 c7 05 	lds	r30, 0x05C7	; 0x8005c7 <tc_tccr5_compc_callback>
    2ef8:	f0 91 c8 05 	lds	r31, 0x05C8	; 0x8005c8 <tc_tccr5_compc_callback+0x1>
    2efc:	30 97       	sbiw	r30, 0x00	; 0
    2efe:	09 f0       	breq	.+2      	; 0x2f02 <__vector_49+0x34>
		tc_tccr5_compc_callback();
    2f00:	19 95       	eicall
	}
}
    2f02:	ff 91       	pop	r31
    2f04:	ef 91       	pop	r30
    2f06:	bf 91       	pop	r27
    2f08:	af 91       	pop	r26
    2f0a:	9f 91       	pop	r25
    2f0c:	8f 91       	pop	r24
    2f0e:	7f 91       	pop	r23
    2f10:	6f 91       	pop	r22
    2f12:	5f 91       	pop	r21
    2f14:	4f 91       	pop	r20
    2f16:	3f 91       	pop	r19
    2f18:	2f 91       	pop	r18
    2f1a:	0f 90       	pop	r0
    2f1c:	0b be       	out	0x3b, r0	; 59
    2f1e:	0f 90       	pop	r0
    2f20:	0f be       	out	0x3f, r0	; 63
    2f22:	0f 90       	pop	r0
    2f24:	1f 90       	pop	r1
    2f26:	18 95       	reti

00002f28 <tc_enable>:

void tc_enable(volatile void *tc)
{
    2f28:	1f 93       	push	r17
    2f2a:	cf 93       	push	r28
    2f2c:	df 93       	push	r29
    2f2e:	1f 92       	push	r1
    2f30:	cd b7       	in	r28, 0x3d	; 61
    2f32:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    2f34:	2f b7       	in	r18, 0x3f	; 63
    2f36:	29 83       	std	Y+1, r18	; 0x01
	cpu_irq_disable();
    2f38:	f8 94       	cli
	return flags;
    2f3a:	19 81       	ldd	r17, Y+1	; 0x01
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
    2f3c:	00 97       	sbiw	r24, 0x00	; 0
    2f3e:	09 f4       	brne	.+2      	; 0x2f42 <tc_enable+0x1a>
    2f40:	64 c0       	rjmp	.+200    	; 0x300a <tc_enable+0xe2>
		Assert(false);
	}

#if !MEGA_XX_UN0 && !MEGA_XX_UN1
	else if (module == &ADC) {
    2f42:	88 37       	cpi	r24, 0x78	; 120
    2f44:	91 05       	cpc	r25, r1
    2f46:	49 f4       	brne	.+18     	; 0x2f5a <tc_enable+0x32>
		sysclk_enable_module(POWER_RED_REG0, PRADC_bm);
    2f48:	61 e0       	ldi	r22, 0x01	; 1
    2f4a:	80 e0       	ldi	r24, 0x00	; 0
    2f4c:	0e 94 5d 06 	call	0xcba	; 0xcba <sysclk_enable_module>
#if MEGA_RF
		sysclk_enable_module(POWER_RED_REG0, PRPGA_bm);
    2f50:	60 e1       	ldi	r22, 0x10	; 16
    2f52:	80 e0       	ldi	r24, 0x00	; 0
    2f54:	0e 94 5d 06 	call	0xcba	; 0xcba <sysclk_enable_module>
    2f58:	58 c0       	rjmp	.+176    	; 0x300a <tc_enable+0xe2>
#endif
	}
#if !MEGA_UNCATEGORIZED
	else if (module == &UCSR0A) {
    2f5a:	80 3c       	cpi	r24, 0xC0	; 192
    2f5c:	91 05       	cpc	r25, r1
    2f5e:	29 f4       	brne	.+10     	; 0x2f6a <tc_enable+0x42>
		sysclk_enable_module(POWER_RED_REG0, PRUSART0_bm);
    2f60:	62 e0       	ldi	r22, 0x02	; 2
    2f62:	80 e0       	ldi	r24, 0x00	; 0
    2f64:	0e 94 5d 06 	call	0xcba	; 0xcba <sysclk_enable_module>
    2f68:	50 c0       	rjmp	.+160    	; 0x300a <tc_enable+0xe2>
	}
#endif
#if MEGA_RF
	else if (module == &SPCR) {
    2f6a:	8c 34       	cpi	r24, 0x4C	; 76
    2f6c:	91 05       	cpc	r25, r1
    2f6e:	29 f4       	brne	.+10     	; 0x2f7a <tc_enable+0x52>
		sysclk_enable_module(POWER_RED_REG0, PRSPI_bm);
    2f70:	64 e0       	ldi	r22, 0x04	; 4
    2f72:	80 e0       	ldi	r24, 0x00	; 0
    2f74:	0e 94 5d 06 	call	0xcba	; 0xcba <sysclk_enable_module>
    2f78:	48 c0       	rjmp	.+144    	; 0x300a <tc_enable+0xe2>
	}
#endif

	else if (module == &TCCR1A) {
    2f7a:	80 38       	cpi	r24, 0x80	; 128
    2f7c:	91 05       	cpc	r25, r1
    2f7e:	29 f4       	brne	.+10     	; 0x2f8a <tc_enable+0x62>
		sysclk_enable_module(POWER_RED_REG0, PRTIM1_bm);
    2f80:	68 e0       	ldi	r22, 0x08	; 8
    2f82:	80 e0       	ldi	r24, 0x00	; 0
    2f84:	0e 94 5d 06 	call	0xcba	; 0xcba <sysclk_enable_module>
    2f88:	40 c0       	rjmp	.+128    	; 0x300a <tc_enable+0xe2>
		sysclk_enable_module(POWER_RED_REG0, PRLCD_bm);
	}
#endif

#if !MEGA_XX_UN2 && !MEGA_UNCATEGORIZED
	else if (module == &TCCR0A) {
    2f8a:	84 34       	cpi	r24, 0x44	; 68
    2f8c:	91 05       	cpc	r25, r1
    2f8e:	29 f4       	brne	.+10     	; 0x2f9a <tc_enable+0x72>
		sysclk_enable_module(POWER_RED_REG0, PRTIM0_bm);
    2f90:	60 e2       	ldi	r22, 0x20	; 32
    2f92:	80 e0       	ldi	r24, 0x00	; 0
    2f94:	0e 94 5d 06 	call	0xcba	; 0xcba <sysclk_enable_module>
    2f98:	38 c0       	rjmp	.+112    	; 0x300a <tc_enable+0xe2>
	} else if (module == &TCCR2A) {
    2f9a:	80 3b       	cpi	r24, 0xB0	; 176
    2f9c:	91 05       	cpc	r25, r1
    2f9e:	29 f4       	brne	.+10     	; 0x2faa <tc_enable+0x82>
		sysclk_enable_module(POWER_RED_REG0, PRTIM2_bm);
    2fa0:	60 e4       	ldi	r22, 0x40	; 64
    2fa2:	80 e0       	ldi	r24, 0x00	; 0
    2fa4:	0e 94 5d 06 	call	0xcba	; 0xcba <sysclk_enable_module>
    2fa8:	30 c0       	rjmp	.+96     	; 0x300a <tc_enable+0xe2>
#if AVR8_PART_IS_DEFINED(ATmega328PB) || AVR8_PART_IS_DEFINED(ATmega324PB)
	} else if (module == &TWBR0) {
		sysclk_enable_module(POWER_RED_REG0, PRTWI_bm);
	}
#else
	} else if (module == &TWBR) {
    2faa:	88 3b       	cpi	r24, 0xB8	; 184
    2fac:	91 05       	cpc	r25, r1
    2fae:	29 f4       	brne	.+10     	; 0x2fba <tc_enable+0x92>
		sysclk_enable_module(POWER_RED_REG0, PRTWI_bm);
    2fb0:	60 e8       	ldi	r22, 0x80	; 128
    2fb2:	80 e0       	ldi	r24, 0x00	; 0
    2fb4:	0e 94 5d 06 	call	0xcba	; 0xcba <sysclk_enable_module>
    2fb8:	28 c0       	rjmp	.+80     	; 0x300a <tc_enable+0xe2>
	}
#endif
#endif

#if MEGA_RF
	else if (module == &UCSR1A) {
    2fba:	88 3c       	cpi	r24, 0xC8	; 200
    2fbc:	91 05       	cpc	r25, r1
    2fbe:	29 f4       	brne	.+10     	; 0x2fca <tc_enable+0xa2>
		sysclk_enable_module(POWER_RED_REG1, PRUSART1_bm);
    2fc0:	61 e0       	ldi	r22, 0x01	; 1
    2fc2:	81 e0       	ldi	r24, 0x01	; 1
    2fc4:	0e 94 5d 06 	call	0xcba	; 0xcba <sysclk_enable_module>
    2fc8:	20 c0       	rjmp	.+64     	; 0x300a <tc_enable+0xe2>
	} else if (module == &TCCR3A) {
    2fca:	80 39       	cpi	r24, 0x90	; 144
    2fcc:	91 05       	cpc	r25, r1
    2fce:	29 f4       	brne	.+10     	; 0x2fda <tc_enable+0xb2>
		sysclk_enable_module(POWER_RED_REG1, PRTIM3_bm);
    2fd0:	68 e0       	ldi	r22, 0x08	; 8
    2fd2:	81 e0       	ldi	r24, 0x01	; 1
    2fd4:	0e 94 5d 06 	call	0xcba	; 0xcba <sysclk_enable_module>
    2fd8:	18 c0       	rjmp	.+48     	; 0x300a <tc_enable+0xe2>
	} else if (module == &TCCR4A) {
    2fda:	80 3a       	cpi	r24, 0xA0	; 160
    2fdc:	91 05       	cpc	r25, r1
    2fde:	29 f4       	brne	.+10     	; 0x2fea <tc_enable+0xc2>
		sysclk_enable_module(POWER_RED_REG1, PRTIM4_bm);
    2fe0:	60 e1       	ldi	r22, 0x10	; 16
    2fe2:	81 e0       	ldi	r24, 0x01	; 1
    2fe4:	0e 94 5d 06 	call	0xcba	; 0xcba <sysclk_enable_module>
    2fe8:	10 c0       	rjmp	.+32     	; 0x300a <tc_enable+0xe2>
	} else if (module == &TCCR5A) {
    2fea:	80 32       	cpi	r24, 0x20	; 32
    2fec:	21 e0       	ldi	r18, 0x01	; 1
    2fee:	92 07       	cpc	r25, r18
    2ff0:	29 f4       	brne	.+10     	; 0x2ffc <tc_enable+0xd4>
		sysclk_enable_module(POWER_RED_REG1, PRTIM5_bm);
    2ff2:	60 e2       	ldi	r22, 0x20	; 32
    2ff4:	81 e0       	ldi	r24, 0x01	; 1
    2ff6:	0e 94 5d 06 	call	0xcba	; 0xcba <sysclk_enable_module>
    2ffa:	07 c0       	rjmp	.+14     	; 0x300a <tc_enable+0xe2>
	} else if (module == &TRX_CTRL_0) {
    2ffc:	83 34       	cpi	r24, 0x43	; 67
    2ffe:	91 40       	sbci	r25, 0x01	; 1
    3000:	21 f4       	brne	.+8      	; 0x300a <tc_enable+0xe2>
		sysclk_enable_module(POWER_RED_REG1, PRTRX24_bm);
    3002:	60 e4       	ldi	r22, 0x40	; 64
    3004:	81 e0       	ldi	r24, 0x01	; 1
    3006:	0e 94 5d 06 	call	0xcba	; 0xcba <sysclk_enable_module>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    300a:	1f bf       	out	0x3f, r17	; 63
	irqflags_t iflags = cpu_irq_save();

	sysclk_enable_peripheral_clock(tc);

	cpu_irq_restore(iflags);
}
    300c:	0f 90       	pop	r0
    300e:	df 91       	pop	r29
    3010:	cf 91       	pop	r28
    3012:	1f 91       	pop	r17
    3014:	08 95       	ret

00003016 <tc_disable>:

void tc_disable(volatile void *tc)
{
    3016:	1f 93       	push	r17
    3018:	cf 93       	push	r28
    301a:	df 93       	push	r29
    301c:	1f 92       	push	r1
    301e:	cd b7       	in	r28, 0x3d	; 61
    3020:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    3022:	2f b7       	in	r18, 0x3f	; 63
    3024:	29 83       	std	Y+1, r18	; 0x01
	cpu_irq_disable();
    3026:	f8 94       	cli
	return flags;
    3028:	19 81       	ldd	r17, Y+1	; 0x01
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_disable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
    302a:	00 97       	sbiw	r24, 0x00	; 0
    302c:	09 f4       	brne	.+2      	; 0x3030 <tc_disable+0x1a>
    302e:	64 c0       	rjmp	.+200    	; 0x30f8 <tc_disable+0xe2>
		Assert(false);
	}

#if !MEGA_XX_UN0 && !MEGA_XX_UN1
	else if (module == &ADC) {
    3030:	88 37       	cpi	r24, 0x78	; 120
    3032:	91 05       	cpc	r25, r1
    3034:	49 f4       	brne	.+18     	; 0x3048 <tc_disable+0x32>
		sysclk_disable_module(POWER_RED_REG0, PRADC_bm);
    3036:	61 e0       	ldi	r22, 0x01	; 1
    3038:	80 e0       	ldi	r24, 0x00	; 0
    303a:	0e 94 75 06 	call	0xcea	; 0xcea <sysclk_disable_module>
#if MEGA_RF
		sysclk_disable_module(POWER_RED_REG0, PRPGA_bm);
    303e:	60 e1       	ldi	r22, 0x10	; 16
    3040:	80 e0       	ldi	r24, 0x00	; 0
    3042:	0e 94 75 06 	call	0xcea	; 0xcea <sysclk_disable_module>
    3046:	58 c0       	rjmp	.+176    	; 0x30f8 <tc_disable+0xe2>
#endif
	} 
#if !MEGA_UNCATEGORIZED
	else if (module == &UCSR0A) {
    3048:	80 3c       	cpi	r24, 0xC0	; 192
    304a:	91 05       	cpc	r25, r1
    304c:	29 f4       	brne	.+10     	; 0x3058 <tc_disable+0x42>
		sysclk_disable_module(POWER_RED_REG0, PRUSART0_bm);
    304e:	62 e0       	ldi	r22, 0x02	; 2
    3050:	80 e0       	ldi	r24, 0x00	; 0
    3052:	0e 94 75 06 	call	0xcea	; 0xcea <sysclk_disable_module>
    3056:	50 c0       	rjmp	.+160    	; 0x30f8 <tc_disable+0xe2>
	}
#endif
#if MEGA_RF
	else if (module == &SPCR) {
    3058:	8c 34       	cpi	r24, 0x4C	; 76
    305a:	91 05       	cpc	r25, r1
    305c:	29 f4       	brne	.+10     	; 0x3068 <tc_disable+0x52>
		sysclk_disable_module(POWER_RED_REG0, PRSPI_bm);
    305e:	64 e0       	ldi	r22, 0x04	; 4
    3060:	80 e0       	ldi	r24, 0x00	; 0
    3062:	0e 94 75 06 	call	0xcea	; 0xcea <sysclk_disable_module>
    3066:	48 c0       	rjmp	.+144    	; 0x30f8 <tc_disable+0xe2>
	}
#endif
	else if (module == &TCCR1A) {
    3068:	80 38       	cpi	r24, 0x80	; 128
    306a:	91 05       	cpc	r25, r1
    306c:	29 f4       	brne	.+10     	; 0x3078 <tc_disable+0x62>
		sysclk_disable_module(POWER_RED_REG0, PRTIM1_bm);
    306e:	68 e0       	ldi	r22, 0x08	; 8
    3070:	80 e0       	ldi	r24, 0x00	; 0
    3072:	0e 94 75 06 	call	0xcea	; 0xcea <sysclk_disable_module>
    3076:	40 c0       	rjmp	.+128    	; 0x30f8 <tc_disable+0xe2>
	else if (module == &LCDCRA) {
		sysclk_disable_module(POWER_RED_REG0, PRLCD_bm);
	}
#endif
#if !MEGA_XX_UN2 && !MEGA_UNCATEGORIZED
	else if (module == &TCCR0A) {
    3078:	84 34       	cpi	r24, 0x44	; 68
    307a:	91 05       	cpc	r25, r1
    307c:	29 f4       	brne	.+10     	; 0x3088 <tc_disable+0x72>
		sysclk_disable_module(POWER_RED_REG0, PRTIM0_bm);
    307e:	60 e2       	ldi	r22, 0x20	; 32
    3080:	80 e0       	ldi	r24, 0x00	; 0
    3082:	0e 94 75 06 	call	0xcea	; 0xcea <sysclk_disable_module>
    3086:	38 c0       	rjmp	.+112    	; 0x30f8 <tc_disable+0xe2>
	} else if (module == &TCCR2A) {
    3088:	80 3b       	cpi	r24, 0xB0	; 176
    308a:	91 05       	cpc	r25, r1
    308c:	29 f4       	brne	.+10     	; 0x3098 <tc_disable+0x82>
		sysclk_disable_module(POWER_RED_REG0, PRTIM2_bm);
    308e:	60 e4       	ldi	r22, 0x40	; 64
    3090:	80 e0       	ldi	r24, 0x00	; 0
    3092:	0e 94 75 06 	call	0xcea	; 0xcea <sysclk_disable_module>
    3096:	30 c0       	rjmp	.+96     	; 0x30f8 <tc_disable+0xe2>
#if AVR8_PART_IS_DEFINED(ATmega328PB) || AVR8_PART_IS_DEFINED(ATmega324PB)
	} else if (module == &TWBR0) {
		sysclk_disable_module(POWER_RED_REG0, PRTWI_bm);
	}
#else
	} else if (module == &TWBR) {
    3098:	88 3b       	cpi	r24, 0xB8	; 184
    309a:	91 05       	cpc	r25, r1
    309c:	29 f4       	brne	.+10     	; 0x30a8 <tc_disable+0x92>
		sysclk_disable_module(POWER_RED_REG0, PRTWI_bm);
    309e:	60 e8       	ldi	r22, 0x80	; 128
    30a0:	80 e0       	ldi	r24, 0x00	; 0
    30a2:	0e 94 75 06 	call	0xcea	; 0xcea <sysclk_disable_module>
    30a6:	28 c0       	rjmp	.+80     	; 0x30f8 <tc_disable+0xe2>
	}
#endif
#endif

#if MEGA_RF
	else if (module == &UCSR1A) {
    30a8:	88 3c       	cpi	r24, 0xC8	; 200
    30aa:	91 05       	cpc	r25, r1
    30ac:	29 f4       	brne	.+10     	; 0x30b8 <tc_disable+0xa2>
		sysclk_disable_module(POWER_RED_REG1, PRUSART1_bm);
    30ae:	61 e0       	ldi	r22, 0x01	; 1
    30b0:	81 e0       	ldi	r24, 0x01	; 1
    30b2:	0e 94 75 06 	call	0xcea	; 0xcea <sysclk_disable_module>
    30b6:	20 c0       	rjmp	.+64     	; 0x30f8 <tc_disable+0xe2>
	} else if (module == &TCCR3A) {
    30b8:	80 39       	cpi	r24, 0x90	; 144
    30ba:	91 05       	cpc	r25, r1
    30bc:	29 f4       	brne	.+10     	; 0x30c8 <tc_disable+0xb2>
		sysclk_disable_module(POWER_RED_REG1, PRTIM3_bm);
    30be:	68 e0       	ldi	r22, 0x08	; 8
    30c0:	81 e0       	ldi	r24, 0x01	; 1
    30c2:	0e 94 75 06 	call	0xcea	; 0xcea <sysclk_disable_module>
    30c6:	18 c0       	rjmp	.+48     	; 0x30f8 <tc_disable+0xe2>
	} else if (module == &TCCR4A) {
    30c8:	80 3a       	cpi	r24, 0xA0	; 160
    30ca:	91 05       	cpc	r25, r1
    30cc:	29 f4       	brne	.+10     	; 0x30d8 <tc_disable+0xc2>
		sysclk_disable_module(POWER_RED_REG1, PRTIM4_bm);
    30ce:	60 e1       	ldi	r22, 0x10	; 16
    30d0:	81 e0       	ldi	r24, 0x01	; 1
    30d2:	0e 94 75 06 	call	0xcea	; 0xcea <sysclk_disable_module>
    30d6:	10 c0       	rjmp	.+32     	; 0x30f8 <tc_disable+0xe2>
	} else if (module == &TCCR5A) {
    30d8:	80 32       	cpi	r24, 0x20	; 32
    30da:	21 e0       	ldi	r18, 0x01	; 1
    30dc:	92 07       	cpc	r25, r18
    30de:	29 f4       	brne	.+10     	; 0x30ea <tc_disable+0xd4>
		sysclk_disable_module(POWER_RED_REG1, PRTIM5_bm);
    30e0:	60 e2       	ldi	r22, 0x20	; 32
    30e2:	81 e0       	ldi	r24, 0x01	; 1
    30e4:	0e 94 75 06 	call	0xcea	; 0xcea <sysclk_disable_module>
    30e8:	07 c0       	rjmp	.+14     	; 0x30f8 <tc_disable+0xe2>
	} else if (module == &TRX_CTRL_0) {
    30ea:	83 34       	cpi	r24, 0x43	; 67
    30ec:	91 40       	sbci	r25, 0x01	; 1
    30ee:	21 f4       	brne	.+8      	; 0x30f8 <tc_disable+0xe2>
		sysclk_disable_module(POWER_RED_REG1, PRTRX24_bm);
    30f0:	60 e4       	ldi	r22, 0x40	; 64
    30f2:	81 e0       	ldi	r24, 0x01	; 1
    30f4:	0e 94 75 06 	call	0xcea	; 0xcea <sysclk_disable_module>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    30f8:	1f bf       	out	0x3f, r17	; 63
	irqflags_t iflags = cpu_irq_save();

	sysclk_disable_peripheral_clock(tc);

	cpu_irq_restore(iflags);
}
    30fa:	0f 90       	pop	r0
    30fc:	df 91       	pop	r29
    30fe:	cf 91       	pop	r28
    3100:	1f 91       	pop	r17
    3102:	08 95       	ret

00003104 <tc_set_overflow_interrupt_callback>:

void tc_set_overflow_interrupt_callback(volatile void *tc,
		tc_callback_t callback)
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
    3104:	80 38       	cpi	r24, 0x80	; 128
    3106:	91 05       	cpc	r25, r1
    3108:	29 f4       	brne	.+10     	; 0x3114 <tc_set_overflow_interrupt_callback+0x10>
		tc_tccr1_ovf_callback = callback;
    310a:	70 93 e6 05 	sts	0x05E6, r23	; 0x8005e6 <tc_tccr1_ovf_callback+0x1>
    310e:	60 93 e5 05 	sts	0x05E5, r22	; 0x8005e5 <tc_tccr1_ovf_callback>
    3112:	08 95       	ret
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR3A) {
    3114:	80 39       	cpi	r24, 0x90	; 144
    3116:	91 05       	cpc	r25, r1
    3118:	29 f4       	brne	.+10     	; 0x3124 <tc_set_overflow_interrupt_callback+0x20>
		tc_tccr3_ovf_callback = callback;
    311a:	70 93 de 05 	sts	0x05DE, r23	; 0x8005de <tc_tccr3_ovf_callback+0x1>
    311e:	60 93 dd 05 	sts	0x05DD, r22	; 0x8005dd <tc_tccr3_ovf_callback>
    3122:	08 95       	ret
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR4A) {
    3124:	80 3a       	cpi	r24, 0xA0	; 160
    3126:	91 05       	cpc	r25, r1
    3128:	29 f4       	brne	.+10     	; 0x3134 <tc_set_overflow_interrupt_callback+0x30>
		tc_tccr4_ovf_callback = callback;
    312a:	70 93 d6 05 	sts	0x05D6, r23	; 0x8005d6 <tc_tccr4_ovf_callback+0x1>
    312e:	60 93 d5 05 	sts	0x05D5, r22	; 0x8005d5 <tc_tccr4_ovf_callback>
    3132:	08 95       	ret
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR5A) {
    3134:	80 32       	cpi	r24, 0x20	; 32
    3136:	91 40       	sbci	r25, 0x01	; 1
    3138:	21 f4       	brne	.+8      	; 0x3142 <tc_set_overflow_interrupt_callback+0x3e>
		tc_tccr5_ovf_callback = callback;
    313a:	70 93 ce 05 	sts	0x05CE, r23	; 0x8005ce <tc_tccr5_ovf_callback+0x1>
    313e:	60 93 cd 05 	sts	0x05CD, r22	; 0x8005cd <tc_tccr5_ovf_callback>
    3142:	08 95       	ret

00003144 <tc_set_compa_interrupt_callback>:
	} else {}
}

void tc_set_compa_interrupt_callback(volatile void *tc, tc_callback_t callback)
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
    3144:	80 38       	cpi	r24, 0x80	; 128
    3146:	91 05       	cpc	r25, r1
    3148:	29 f4       	brne	.+10     	; 0x3154 <tc_set_compa_interrupt_callback+0x10>
		tc_tccr1_compa_callback = callback;
    314a:	70 93 e4 05 	sts	0x05E4, r23	; 0x8005e4 <tc_tccr1_compa_callback+0x1>
    314e:	60 93 e3 05 	sts	0x05E3, r22	; 0x8005e3 <tc_tccr1_compa_callback>
    3152:	08 95       	ret
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR3A) {
    3154:	80 39       	cpi	r24, 0x90	; 144
    3156:	91 05       	cpc	r25, r1
    3158:	29 f4       	brne	.+10     	; 0x3164 <tc_set_compa_interrupt_callback+0x20>
		tc_tccr3_compa_callback = callback;
    315a:	70 93 dc 05 	sts	0x05DC, r23	; 0x8005dc <tc_tccr3_compa_callback+0x1>
    315e:	60 93 db 05 	sts	0x05DB, r22	; 0x8005db <tc_tccr3_compa_callback>
    3162:	08 95       	ret
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR4A) {
    3164:	80 3a       	cpi	r24, 0xA0	; 160
    3166:	91 05       	cpc	r25, r1
    3168:	29 f4       	brne	.+10     	; 0x3174 <tc_set_compa_interrupt_callback+0x30>
		tc_tccr4_compa_callback = callback;
    316a:	70 93 d4 05 	sts	0x05D4, r23	; 0x8005d4 <tc_tccr4_compa_callback+0x1>
    316e:	60 93 d3 05 	sts	0x05D3, r22	; 0x8005d3 <tc_tccr4_compa_callback>
    3172:	08 95       	ret
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR5A) {
    3174:	80 32       	cpi	r24, 0x20	; 32
    3176:	91 40       	sbci	r25, 0x01	; 1
    3178:	21 f4       	brne	.+8      	; 0x3182 <tc_set_compa_interrupt_callback+0x3e>
		tc_tccr5_compa_callback = callback;
    317a:	70 93 cc 05 	sts	0x05CC, r23	; 0x8005cc <tc_tccr5_compa_callback+0x1>
    317e:	60 93 cb 05 	sts	0x05CB, r22	; 0x8005cb <tc_tccr5_compa_callback>
    3182:	08 95       	ret

00003184 <main>:
 * \brief Main function of the application
 */
int main(void)
{	
	/* Initialize the Wireless Module */
	wireless_init();    
    3184:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <wireless_init>
	
	/*The Modules selected in the wizard are initialized here */
	modules_init();
    3188:	0e 94 40 06 	call	0xc80	; 0xc80 <modules_init>
 * \brief Tasks Handled By the Stack and application are Performed here,this function is handled in a loop to perform tasks continuously 
 */
void WirelessTask(void)
{
	/* These methods are called to perform the default tasks of the MAC Stack */
	pal_task();
    318c:	0e 94 b0 0a 	call	0x1560	; 0x1560 <pal_task>
	tal_task();
    3190:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <tal_task>
/**
 * \brief Application task
 */
 void app_task(void)
{
	usr_wireless_app_task();
    3194:	0e 94 bf 04 	call	0x97e	; 0x97e <usr_wireless_app_task>
    3198:	f9 cf       	rjmp	.-14     	; 0x318c <main+0x8>

0000319a <tal_tx_frame_done_cb>:
 * \param frame pointer to the transmitted frame
 */
void tal_tx_frame_done_cb(retval_t status, frame_info_t *frame)
{
	/*Perform application tasks when a frame is transmitted here*/
	usr_frame_transmitted_cb(status, frame);
    319a:	0c 94 3e 02 	jmp	0x47c	; 0x47c <usr_frame_transmitted_cb>
    319e:	08 95       	ret

000031a0 <tal_rx_frame_cb>:
 * \brief This method (callback) is called when a frame is received by the transceiver
 * \param frame pointer to the received frame
 *
 */
void tal_rx_frame_cb(frame_info_t *frame)
{
    31a0:	cf 93       	push	r28
    31a2:	df 93       	push	r29
    31a4:	ec 01       	movw	r28, r24
	/*Perform application tasks when a frame is received here*/
	usr_frame_received_cb(frame);
    31a6:	0e 94 01 02 	call	0x402	; 0x402 <usr_frame_received_cb>
	// Free-up the buffer which was used for reception once the frame is extracted.
	bmm_buffer_free(frame->buffer_header);
    31aa:	89 81       	ldd	r24, Y+1	; 0x01
    31ac:	9a 81       	ldd	r25, Y+2	; 0x02
    31ae:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <bmm_buffer_free>
}
    31b2:	df 91       	pop	r29
    31b4:	cf 91       	pop	r28
    31b6:	08 95       	ret

000031b8 <__mulsi3>:
    31b8:	db 01       	movw	r26, r22
    31ba:	8f 93       	push	r24
    31bc:	9f 93       	push	r25
    31be:	49 d0       	rcall	.+146    	; 0x3252 <__muluhisi3>
    31c0:	bf 91       	pop	r27
    31c2:	af 91       	pop	r26
    31c4:	a2 9f       	mul	r26, r18
    31c6:	80 0d       	add	r24, r0
    31c8:	91 1d       	adc	r25, r1
    31ca:	a3 9f       	mul	r26, r19
    31cc:	90 0d       	add	r25, r0
    31ce:	b2 9f       	mul	r27, r18
    31d0:	90 0d       	add	r25, r0
    31d2:	11 24       	eor	r1, r1
    31d4:	08 95       	ret

000031d6 <__udivmodhi4>:
    31d6:	aa 1b       	sub	r26, r26
    31d8:	bb 1b       	sub	r27, r27
    31da:	51 e1       	ldi	r21, 0x11	; 17
    31dc:	07 c0       	rjmp	.+14     	; 0x31ec <__udivmodhi4_ep>

000031de <__udivmodhi4_loop>:
    31de:	aa 1f       	adc	r26, r26
    31e0:	bb 1f       	adc	r27, r27
    31e2:	a6 17       	cp	r26, r22
    31e4:	b7 07       	cpc	r27, r23
    31e6:	10 f0       	brcs	.+4      	; 0x31ec <__udivmodhi4_ep>
    31e8:	a6 1b       	sub	r26, r22
    31ea:	b7 0b       	sbc	r27, r23

000031ec <__udivmodhi4_ep>:
    31ec:	88 1f       	adc	r24, r24
    31ee:	99 1f       	adc	r25, r25
    31f0:	5a 95       	dec	r21
    31f2:	a9 f7       	brne	.-22     	; 0x31de <__udivmodhi4_loop>
    31f4:	80 95       	com	r24
    31f6:	90 95       	com	r25
    31f8:	bc 01       	movw	r22, r24
    31fa:	cd 01       	movw	r24, r26
    31fc:	08 95       	ret

000031fe <__divmodhi4>:
    31fe:	97 fb       	bst	r25, 7
    3200:	07 2e       	mov	r0, r23
    3202:	16 f4       	brtc	.+4      	; 0x3208 <__divmodhi4+0xa>
    3204:	00 94       	com	r0
    3206:	06 d0       	rcall	.+12     	; 0x3214 <__divmodhi4_neg1>
    3208:	77 fd       	sbrc	r23, 7
    320a:	08 d0       	rcall	.+16     	; 0x321c <__divmodhi4_neg2>
    320c:	e4 df       	rcall	.-56     	; 0x31d6 <__udivmodhi4>
    320e:	07 fc       	sbrc	r0, 7
    3210:	05 d0       	rcall	.+10     	; 0x321c <__divmodhi4_neg2>
    3212:	3e f4       	brtc	.+14     	; 0x3222 <__divmodhi4_exit>

00003214 <__divmodhi4_neg1>:
    3214:	90 95       	com	r25
    3216:	81 95       	neg	r24
    3218:	9f 4f       	sbci	r25, 0xFF	; 255
    321a:	08 95       	ret

0000321c <__divmodhi4_neg2>:
    321c:	70 95       	com	r23
    321e:	61 95       	neg	r22
    3220:	7f 4f       	sbci	r23, 0xFF	; 255

00003222 <__divmodhi4_exit>:
    3222:	08 95       	ret

00003224 <__tablejump2__>:
    3224:	ee 0f       	add	r30, r30
    3226:	ff 1f       	adc	r31, r31
    3228:	88 1f       	adc	r24, r24
    322a:	8b bf       	out	0x3b, r24	; 59
    322c:	07 90       	elpm	r0, Z+
    322e:	f6 91       	elpm	r31, Z
    3230:	e0 2d       	mov	r30, r0
    3232:	19 94       	eijmp

00003234 <__umulhisi3>:
    3234:	a2 9f       	mul	r26, r18
    3236:	b0 01       	movw	r22, r0
    3238:	b3 9f       	mul	r27, r19
    323a:	c0 01       	movw	r24, r0
    323c:	a3 9f       	mul	r26, r19
    323e:	70 0d       	add	r23, r0
    3240:	81 1d       	adc	r24, r1
    3242:	11 24       	eor	r1, r1
    3244:	91 1d       	adc	r25, r1
    3246:	b2 9f       	mul	r27, r18
    3248:	70 0d       	add	r23, r0
    324a:	81 1d       	adc	r24, r1
    324c:	11 24       	eor	r1, r1
    324e:	91 1d       	adc	r25, r1
    3250:	08 95       	ret

00003252 <__muluhisi3>:
    3252:	f0 df       	rcall	.-32     	; 0x3234 <__umulhisi3>
    3254:	a5 9f       	mul	r26, r21
    3256:	90 0d       	add	r25, r0
    3258:	b4 9f       	mul	r27, r20
    325a:	90 0d       	add	r25, r0
    325c:	a4 9f       	mul	r26, r20
    325e:	80 0d       	add	r24, r0
    3260:	91 1d       	adc	r25, r1
    3262:	11 24       	eor	r1, r1
    3264:	08 95       	ret

00003266 <__mulshisi3>:
    3266:	b7 ff       	sbrs	r27, 7
    3268:	f4 cf       	rjmp	.-24     	; 0x3252 <__muluhisi3>

0000326a <__mulohisi3>:
    326a:	f3 df       	rcall	.-26     	; 0x3252 <__muluhisi3>
    326c:	82 1b       	sub	r24, r18
    326e:	93 0b       	sbc	r25, r19
    3270:	08 95       	ret

00003272 <__adddi3_s8>:
    3272:	00 24       	eor	r0, r0
    3274:	a7 fd       	sbrc	r26, 7
    3276:	00 94       	com	r0
    3278:	2a 0f       	add	r18, r26
    327a:	30 1d       	adc	r19, r0
    327c:	40 1d       	adc	r20, r0
    327e:	50 1d       	adc	r21, r0
    3280:	60 1d       	adc	r22, r0
    3282:	70 1d       	adc	r23, r0
    3284:	80 1d       	adc	r24, r0
    3286:	90 1d       	adc	r25, r0
    3288:	08 95       	ret

0000328a <__cmpdi2_s8>:
    328a:	00 24       	eor	r0, r0
    328c:	a7 fd       	sbrc	r26, 7
    328e:	00 94       	com	r0
    3290:	2a 17       	cp	r18, r26
    3292:	30 05       	cpc	r19, r0
    3294:	40 05       	cpc	r20, r0
    3296:	50 05       	cpc	r21, r0
    3298:	60 05       	cpc	r22, r0
    329a:	70 05       	cpc	r23, r0
    329c:	80 05       	cpc	r24, r0
    329e:	90 05       	cpc	r25, r0
    32a0:	08 95       	ret

000032a2 <do_rand>:
    32a2:	8f 92       	push	r8
    32a4:	9f 92       	push	r9
    32a6:	af 92       	push	r10
    32a8:	bf 92       	push	r11
    32aa:	cf 92       	push	r12
    32ac:	df 92       	push	r13
    32ae:	ef 92       	push	r14
    32b0:	ff 92       	push	r15
    32b2:	cf 93       	push	r28
    32b4:	df 93       	push	r29
    32b6:	ec 01       	movw	r28, r24
    32b8:	68 81       	ld	r22, Y
    32ba:	79 81       	ldd	r23, Y+1	; 0x01
    32bc:	8a 81       	ldd	r24, Y+2	; 0x02
    32be:	9b 81       	ldd	r25, Y+3	; 0x03
    32c0:	61 15       	cp	r22, r1
    32c2:	71 05       	cpc	r23, r1
    32c4:	81 05       	cpc	r24, r1
    32c6:	91 05       	cpc	r25, r1
    32c8:	21 f4       	brne	.+8      	; 0x32d2 <do_rand+0x30>
    32ca:	64 e2       	ldi	r22, 0x24	; 36
    32cc:	79 ed       	ldi	r23, 0xD9	; 217
    32ce:	8b e5       	ldi	r24, 0x5B	; 91
    32d0:	97 e0       	ldi	r25, 0x07	; 7
    32d2:	2d e1       	ldi	r18, 0x1D	; 29
    32d4:	33 ef       	ldi	r19, 0xF3	; 243
    32d6:	41 e0       	ldi	r20, 0x01	; 1
    32d8:	50 e0       	ldi	r21, 0x00	; 0
    32da:	41 d0       	rcall	.+130    	; 0x335e <__divmodsi4>
    32dc:	49 01       	movw	r8, r18
    32de:	5a 01       	movw	r10, r20
    32e0:	9b 01       	movw	r18, r22
    32e2:	ac 01       	movw	r20, r24
    32e4:	a7 ea       	ldi	r26, 0xA7	; 167
    32e6:	b1 e4       	ldi	r27, 0x41	; 65
    32e8:	b4 df       	rcall	.-152    	; 0x3252 <__muluhisi3>
    32ea:	6b 01       	movw	r12, r22
    32ec:	7c 01       	movw	r14, r24
    32ee:	ac ee       	ldi	r26, 0xEC	; 236
    32f0:	b4 ef       	ldi	r27, 0xF4	; 244
    32f2:	a5 01       	movw	r20, r10
    32f4:	94 01       	movw	r18, r8
    32f6:	b9 df       	rcall	.-142    	; 0x326a <__mulohisi3>
    32f8:	dc 01       	movw	r26, r24
    32fa:	cb 01       	movw	r24, r22
    32fc:	8c 0d       	add	r24, r12
    32fe:	9d 1d       	adc	r25, r13
    3300:	ae 1d       	adc	r26, r14
    3302:	bf 1d       	adc	r27, r15
    3304:	b7 ff       	sbrs	r27, 7
    3306:	03 c0       	rjmp	.+6      	; 0x330e <do_rand+0x6c>
    3308:	01 97       	sbiw	r24, 0x01	; 1
    330a:	a1 09       	sbc	r26, r1
    330c:	b0 48       	sbci	r27, 0x80	; 128
    330e:	88 83       	st	Y, r24
    3310:	99 83       	std	Y+1, r25	; 0x01
    3312:	aa 83       	std	Y+2, r26	; 0x02
    3314:	bb 83       	std	Y+3, r27	; 0x03
    3316:	9f 77       	andi	r25, 0x7F	; 127
    3318:	df 91       	pop	r29
    331a:	cf 91       	pop	r28
    331c:	ff 90       	pop	r15
    331e:	ef 90       	pop	r14
    3320:	df 90       	pop	r13
    3322:	cf 90       	pop	r12
    3324:	bf 90       	pop	r11
    3326:	af 90       	pop	r10
    3328:	9f 90       	pop	r9
    332a:	8f 90       	pop	r8
    332c:	08 95       	ret

0000332e <rand_r>:
    332e:	b9 cf       	rjmp	.-142    	; 0x32a2 <do_rand>

00003330 <rand>:
    3330:	80 e0       	ldi	r24, 0x00	; 0
    3332:	92 e0       	ldi	r25, 0x02	; 2
    3334:	b6 cf       	rjmp	.-148    	; 0x32a2 <do_rand>

00003336 <srand>:
    3336:	a0 e0       	ldi	r26, 0x00	; 0
    3338:	b0 e0       	ldi	r27, 0x00	; 0
    333a:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
    333e:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    3342:	a0 93 02 02 	sts	0x0202, r26	; 0x800202 <__DATA_REGION_ORIGIN__+0x2>
    3346:	b0 93 03 02 	sts	0x0203, r27	; 0x800203 <__DATA_REGION_ORIGIN__+0x3>
    334a:	08 95       	ret

0000334c <memcpy>:
    334c:	fb 01       	movw	r30, r22
    334e:	dc 01       	movw	r26, r24
    3350:	02 c0       	rjmp	.+4      	; 0x3356 <memcpy+0xa>
    3352:	01 90       	ld	r0, Z+
    3354:	0d 92       	st	X+, r0
    3356:	41 50       	subi	r20, 0x01	; 1
    3358:	50 40       	sbci	r21, 0x00	; 0
    335a:	d8 f7       	brcc	.-10     	; 0x3352 <memcpy+0x6>
    335c:	08 95       	ret

0000335e <__divmodsi4>:
    335e:	05 2e       	mov	r0, r21
    3360:	97 fb       	bst	r25, 7
    3362:	16 f4       	brtc	.+4      	; 0x3368 <__divmodsi4+0xa>
    3364:	00 94       	com	r0
    3366:	0f d0       	rcall	.+30     	; 0x3386 <__negsi2>
    3368:	57 fd       	sbrc	r21, 7
    336a:	05 d0       	rcall	.+10     	; 0x3376 <__divmodsi4_neg2>
    336c:	14 d0       	rcall	.+40     	; 0x3396 <__udivmodsi4>
    336e:	07 fc       	sbrc	r0, 7
    3370:	02 d0       	rcall	.+4      	; 0x3376 <__divmodsi4_neg2>
    3372:	46 f4       	brtc	.+16     	; 0x3384 <__divmodsi4_exit>
    3374:	08 c0       	rjmp	.+16     	; 0x3386 <__negsi2>

00003376 <__divmodsi4_neg2>:
    3376:	50 95       	com	r21
    3378:	40 95       	com	r20
    337a:	30 95       	com	r19
    337c:	21 95       	neg	r18
    337e:	3f 4f       	sbci	r19, 0xFF	; 255
    3380:	4f 4f       	sbci	r20, 0xFF	; 255
    3382:	5f 4f       	sbci	r21, 0xFF	; 255

00003384 <__divmodsi4_exit>:
    3384:	08 95       	ret

00003386 <__negsi2>:
    3386:	90 95       	com	r25
    3388:	80 95       	com	r24
    338a:	70 95       	com	r23
    338c:	61 95       	neg	r22
    338e:	7f 4f       	sbci	r23, 0xFF	; 255
    3390:	8f 4f       	sbci	r24, 0xFF	; 255
    3392:	9f 4f       	sbci	r25, 0xFF	; 255
    3394:	08 95       	ret

00003396 <__udivmodsi4>:
    3396:	a1 e2       	ldi	r26, 0x21	; 33
    3398:	1a 2e       	mov	r1, r26
    339a:	aa 1b       	sub	r26, r26
    339c:	bb 1b       	sub	r27, r27
    339e:	fd 01       	movw	r30, r26
    33a0:	0d c0       	rjmp	.+26     	; 0x33bc <__udivmodsi4_ep>

000033a2 <__udivmodsi4_loop>:
    33a2:	aa 1f       	adc	r26, r26
    33a4:	bb 1f       	adc	r27, r27
    33a6:	ee 1f       	adc	r30, r30
    33a8:	ff 1f       	adc	r31, r31
    33aa:	a2 17       	cp	r26, r18
    33ac:	b3 07       	cpc	r27, r19
    33ae:	e4 07       	cpc	r30, r20
    33b0:	f5 07       	cpc	r31, r21
    33b2:	20 f0       	brcs	.+8      	; 0x33bc <__udivmodsi4_ep>
    33b4:	a2 1b       	sub	r26, r18
    33b6:	b3 0b       	sbc	r27, r19
    33b8:	e4 0b       	sbc	r30, r20
    33ba:	f5 0b       	sbc	r31, r21

000033bc <__udivmodsi4_ep>:
    33bc:	66 1f       	adc	r22, r22
    33be:	77 1f       	adc	r23, r23
    33c0:	88 1f       	adc	r24, r24
    33c2:	99 1f       	adc	r25, r25
    33c4:	1a 94       	dec	r1
    33c6:	69 f7       	brne	.-38     	; 0x33a2 <__udivmodsi4_loop>
    33c8:	60 95       	com	r22
    33ca:	70 95       	com	r23
    33cc:	80 95       	com	r24
    33ce:	90 95       	com	r25
    33d0:	9b 01       	movw	r18, r22
    33d2:	ac 01       	movw	r20, r24
    33d4:	bd 01       	movw	r22, r26
    33d6:	cf 01       	movw	r24, r30
    33d8:	08 95       	ret

000033da <_exit>:
    33da:	f8 94       	cli

000033dc <__stop_program>:
    33dc:	ff cf       	rjmp	.-2      	; 0x33dc <__stop_program>
