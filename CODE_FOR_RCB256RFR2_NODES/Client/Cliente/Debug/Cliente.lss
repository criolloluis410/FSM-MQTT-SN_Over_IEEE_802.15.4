
Cliente.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000282  00800200  000036d2  00003766  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000036d2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000004db  00800482  00800482  000039e8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000039e8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003a18  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000870  00000000  00000000  00003a58  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000cae4  00000000  00000000  000042c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000043cf  00000000  00000000  00010dac  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000f480  00000000  00000000  0001517b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001a80  00000000  00000000  000245fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0001f871  00000000  00000000  0002607c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000750b  00000000  00000000  000458ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000007b0  00000000  00000000  0004cdf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000b9a1  00000000  00000000  0004d5a8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	b8 c0       	rjmp	.+368    	; 0x172 <__ctors_end>
       2:	00 00       	nop
       4:	d7 c0       	rjmp	.+430    	; 0x1b4 <__bad_interrupt>
       6:	00 00       	nop
       8:	d5 c0       	rjmp	.+426    	; 0x1b4 <__bad_interrupt>
       a:	00 00       	nop
       c:	d3 c0       	rjmp	.+422    	; 0x1b4 <__bad_interrupt>
       e:	00 00       	nop
      10:	d1 c0       	rjmp	.+418    	; 0x1b4 <__bad_interrupt>
      12:	00 00       	nop
      14:	cf c0       	rjmp	.+414    	; 0x1b4 <__bad_interrupt>
      16:	00 00       	nop
      18:	cd c0       	rjmp	.+410    	; 0x1b4 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	cb c0       	rjmp	.+406    	; 0x1b4 <__bad_interrupt>
      1e:	00 00       	nop
      20:	c9 c0       	rjmp	.+402    	; 0x1b4 <__bad_interrupt>
      22:	00 00       	nop
      24:	c7 c0       	rjmp	.+398    	; 0x1b4 <__bad_interrupt>
      26:	00 00       	nop
      28:	c5 c0       	rjmp	.+394    	; 0x1b4 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	c3 c0       	rjmp	.+390    	; 0x1b4 <__bad_interrupt>
      2e:	00 00       	nop
      30:	c1 c0       	rjmp	.+386    	; 0x1b4 <__bad_interrupt>
      32:	00 00       	nop
      34:	bf c0       	rjmp	.+382    	; 0x1b4 <__bad_interrupt>
      36:	00 00       	nop
      38:	bd c0       	rjmp	.+378    	; 0x1b4 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	bb c0       	rjmp	.+374    	; 0x1b4 <__bad_interrupt>
      3e:	00 00       	nop
      40:	b9 c0       	rjmp	.+370    	; 0x1b4 <__bad_interrupt>
      42:	00 00       	nop
      44:	0c 94 6b 16 	jmp	0x2cd6	; 0x2cd6 <__vector_17>
      48:	0c 94 98 16 	jmp	0x2d30	; 0x2d30 <__vector_18>
      4c:	0c 94 c5 16 	jmp	0x2d8a	; 0x2d8a <__vector_19>
      50:	0c 94 3e 16 	jmp	0x2c7c	; 0x2c7c <__vector_20>
      54:	af c0       	rjmp	.+350    	; 0x1b4 <__bad_interrupt>
      56:	00 00       	nop
      58:	ad c0       	rjmp	.+346    	; 0x1b4 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	ab c0       	rjmp	.+342    	; 0x1b4 <__bad_interrupt>
      5e:	00 00       	nop
      60:	a9 c0       	rjmp	.+338    	; 0x1b4 <__bad_interrupt>
      62:	00 00       	nop
      64:	a7 c0       	rjmp	.+334    	; 0x1b4 <__bad_interrupt>
      66:	00 00       	nop
      68:	a5 c0       	rjmp	.+330    	; 0x1b4 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	a3 c0       	rjmp	.+326    	; 0x1b4 <__bad_interrupt>
      6e:	00 00       	nop
      70:	a1 c0       	rjmp	.+322    	; 0x1b4 <__bad_interrupt>
      72:	00 00       	nop
      74:	9f c0       	rjmp	.+318    	; 0x1b4 <__bad_interrupt>
      76:	00 00       	nop
      78:	9d c0       	rjmp	.+314    	; 0x1b4 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	9b c0       	rjmp	.+310    	; 0x1b4 <__bad_interrupt>
      7e:	00 00       	nop
      80:	0c 94 1f 17 	jmp	0x2e3e	; 0x2e3e <__vector_32>
      84:	0c 94 4c 17 	jmp	0x2e98	; 0x2e98 <__vector_33>
      88:	0c 94 79 17 	jmp	0x2ef2	; 0x2ef2 <__vector_34>
      8c:	0c 94 f2 16 	jmp	0x2de4	; 0x2de4 <__vector_35>
      90:	91 c0       	rjmp	.+290    	; 0x1b4 <__bad_interrupt>
      92:	00 00       	nop
      94:	8f c0       	rjmp	.+286    	; 0x1b4 <__bad_interrupt>
      96:	00 00       	nop
      98:	8d c0       	rjmp	.+282    	; 0x1b4 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	8b c0       	rjmp	.+278    	; 0x1b4 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	89 c0       	rjmp	.+274    	; 0x1b4 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	87 c0       	rjmp	.+270    	; 0x1b4 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	0c 94 d3 17 	jmp	0x2fa6	; 0x2fa6 <__vector_42>
      ac:	0c 94 00 18 	jmp	0x3000	; 0x3000 <__vector_43>
      b0:	0c 94 2d 18 	jmp	0x305a	; 0x305a <__vector_44>
      b4:	0c 94 a6 17 	jmp	0x2f4c	; 0x2f4c <__vector_45>
      b8:	7d c0       	rjmp	.+250    	; 0x1b4 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	0c 94 87 18 	jmp	0x310e	; 0x310e <__vector_47>
      c0:	0c 94 b4 18 	jmp	0x3168	; 0x3168 <__vector_48>
      c4:	0c 94 e1 18 	jmp	0x31c2	; 0x31c2 <__vector_49>
      c8:	0c 94 5a 18 	jmp	0x30b4	; 0x30b4 <__vector_50>
      cc:	73 c0       	rjmp	.+230    	; 0x1b4 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	71 c0       	rjmp	.+226    	; 0x1b4 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	6f c0       	rjmp	.+222    	; 0x1b4 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	6d c0       	rjmp	.+218    	; 0x1b4 <__bad_interrupt>
      da:	00 00       	nop
      dc:	6b c0       	rjmp	.+214    	; 0x1b4 <__bad_interrupt>
      de:	00 00       	nop
      e0:	69 c0       	rjmp	.+210    	; 0x1b4 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	0c 94 eb 10 	jmp	0x21d6	; 0x21d6 <__vector_57>
      e8:	0c 94 f5 10 	jmp	0x21ea	; 0x21ea <__vector_58>
      ec:	0c 94 e1 10 	jmp	0x21c2	; 0x21c2 <__vector_59>
      f0:	0c 94 60 10 	jmp	0x20c0	; 0x20c0 <__vector_60>
      f4:	0c 94 8b 10 	jmp	0x2116	; 0x2116 <__vector_61>
      f8:	0c 94 ff 10 	jmp	0x21fe	; 0x21fe <__vector_62>
      fc:	0c 94 35 10 	jmp	0x206a	; 0x206a <__vector_63>
     100:	0c 94 b6 10 	jmp	0x216c	; 0x216c <__vector_64>
     104:	57 c0       	rjmp	.+174    	; 0x1b4 <__bad_interrupt>
     106:	00 00       	nop
     108:	55 c0       	rjmp	.+170    	; 0x1b4 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	53 c0       	rjmp	.+166    	; 0x1b4 <__bad_interrupt>
     10e:	00 00       	nop
     110:	51 c0       	rjmp	.+162    	; 0x1b4 <__bad_interrupt>
     112:	00 00       	nop
     114:	4f c0       	rjmp	.+158    	; 0x1b4 <__bad_interrupt>
     116:	00 00       	nop
     118:	0c 94 13 11 	jmp	0x2226	; 0x2226 <__vector_70>
     11c:	0c 94 09 11 	jmp	0x2212	; 0x2212 <__vector_71>
     120:	0c 94 1d 11 	jmp	0x223a	; 0x223a <__vector_72>
     124:	0c 94 27 11 	jmp	0x224e	; 0x224e <__vector_73>
     128:	0c 94 31 11 	jmp	0x2262	; 0x2262 <__vector_74>
     12c:	0c 94 3b 11 	jmp	0x2276	; 0x2276 <__vector_75>
     130:	0c 94 45 11 	jmp	0x228a	; 0x228a <__vector_76>
     134:	b8 0d       	add	r27, r8
     136:	df 0d       	add	r29, r15
     138:	d3 0d       	add	r29, r3
     13a:	ec 0d       	add	r30, r12
     13c:	d3 0d       	add	r29, r3
     13e:	ab 0d       	add	r26, r11
     140:	c5 0d       	add	r28, r5
     142:	d3 0d       	add	r29, r3
     144:	d3 0d       	add	r29, r3
     146:	d3 0d       	add	r29, r3
     148:	d3 0d       	add	r29, r3
     14a:	d3 0d       	add	r29, r3
     14c:	7f 0d       	add	r23, r15
     14e:	d3 0d       	add	r29, r3
     150:	d3 0d       	add	r29, r3
     152:	d3 0d       	add	r29, r3
     154:	d3 0d       	add	r29, r3
     156:	d3 0d       	add	r29, r3
     158:	d3 0d       	add	r29, r3
     15a:	0b 0e       	add	r0, r27
     15c:	d3 0d       	add	r29, r3
     15e:	d3 0d       	add	r29, r3
     160:	44 0e       	add	r4, r20

00000162 <__trampolines_end>:
     162:	04 03       	mulsu	r16, r20
     164:	03 02       	muls	r16, r19
     166:	02 01       	movw	r0, r4
     168:	00 ff       	sbrs	r16, 0
     16a:	fe fd       	.word	0xfdfe	; ????
     16c:	fc fb       	.word	0xfbfc	; ????
     16e:	f9 f7       	brne	.-2      	; 0x16e <__trampolines_end+0xc>
     170:	f4 ef       	ldi	r31, 0xF4	; 244

00000172 <__ctors_end>:
     172:	11 24       	eor	r1, r1
     174:	1f be       	out	0x3f, r1	; 63
     176:	cf ef       	ldi	r28, 0xFF	; 255
     178:	d1 e8       	ldi	r29, 0x81	; 129
     17a:	de bf       	out	0x3e, r29	; 62
     17c:	cd bf       	out	0x3d, r28	; 61
     17e:	00 e0       	ldi	r16, 0x00	; 0
     180:	0c bf       	out	0x3c, r16	; 60

00000182 <__do_copy_data>:
     182:	14 e0       	ldi	r17, 0x04	; 4
     184:	a0 e0       	ldi	r26, 0x00	; 0
     186:	b2 e0       	ldi	r27, 0x02	; 2
     188:	e2 ed       	ldi	r30, 0xD2	; 210
     18a:	f6 e3       	ldi	r31, 0x36	; 54
     18c:	00 e0       	ldi	r16, 0x00	; 0
     18e:	0b bf       	out	0x3b, r16	; 59
     190:	02 c0       	rjmp	.+4      	; 0x196 <__do_copy_data+0x14>
     192:	07 90       	elpm	r0, Z+
     194:	0d 92       	st	X+, r0
     196:	a2 38       	cpi	r26, 0x82	; 130
     198:	b1 07       	cpc	r27, r17
     19a:	d9 f7       	brne	.-10     	; 0x192 <__do_copy_data+0x10>

0000019c <__do_clear_bss>:
     19c:	29 e0       	ldi	r18, 0x09	; 9
     19e:	a2 e8       	ldi	r26, 0x82	; 130
     1a0:	b4 e0       	ldi	r27, 0x04	; 4
     1a2:	01 c0       	rjmp	.+2      	; 0x1a6 <.do_clear_bss_start>

000001a4 <.do_clear_bss_loop>:
     1a4:	1d 92       	st	X+, r1

000001a6 <.do_clear_bss_start>:
     1a6:	ad 35       	cpi	r26, 0x5D	; 93
     1a8:	b2 07       	cpc	r27, r18
     1aa:	e1 f7       	brne	.-8      	; 0x1a4 <.do_clear_bss_loop>
     1ac:	0e 94 3c 1a 	call	0x3478	; 0x3478 <main>
     1b0:	0c 94 67 1b 	jmp	0x36ce	; 0x36ce <_exit>

000001b4 <__bad_interrupt>:
     1b4:	25 cf       	rjmp	.-438    	; 0x0 <__vectors>

000001b6 <common_tc_read_count>:
     1b6:	0e 94 e6 15 	call	0x2bcc	; 0x2bcc <tmr_read_count>
     1ba:	20 91 86 04 	lds	r18, 0x0486	; 0x800486 <timer_mul_var>
     1be:	22 23       	and	r18, r18
     1c0:	d9 f0       	breq	.+54     	; 0x1f8 <common_tc_read_count+0x42>
     1c2:	40 91 5c 09 	lds	r20, 0x095C	; 0x80095c <timer_multiplier>
     1c6:	30 e0       	ldi	r19, 0x00	; 0
     1c8:	20 91 86 04 	lds	r18, 0x0486	; 0x800486 <timer_mul_var>
     1cc:	64 2f       	mov	r22, r20
     1ce:	73 2f       	mov	r23, r19
     1d0:	0e 94 65 1a 	call	0x34ca	; 0x34ca <__udivmodhi4>
     1d4:	fb 01       	movw	r30, r22
     1d6:	8f ef       	ldi	r24, 0xFF	; 255
     1d8:	9f ef       	ldi	r25, 0xFF	; 255
     1da:	64 2f       	mov	r22, r20
     1dc:	73 2f       	mov	r23, r19
     1de:	0e 94 65 1a 	call	0x34ca	; 0x34ca <__udivmodhi4>
     1e2:	30 e0       	ldi	r19, 0x00	; 0
     1e4:	62 9f       	mul	r22, r18
     1e6:	c0 01       	movw	r24, r0
     1e8:	63 9f       	mul	r22, r19
     1ea:	90 0d       	add	r25, r0
     1ec:	72 9f       	mul	r23, r18
     1ee:	90 0d       	add	r25, r0
     1f0:	11 24       	eor	r1, r1
     1f2:	8e 0f       	add	r24, r30
     1f4:	9f 1f       	adc	r25, r31
     1f6:	08 95       	ret
     1f8:	60 91 5c 09 	lds	r22, 0x095C	; 0x80095c <timer_multiplier>
     1fc:	70 e0       	ldi	r23, 0x00	; 0
     1fe:	0e 94 65 1a 	call	0x34ca	; 0x34ca <__udivmodhi4>
     202:	cb 01       	movw	r24, r22
     204:	08 95       	ret

00000206 <common_tc_compare_stop>:
     206:	0e 94 eb 15 	call	0x2bd6	; 0x2bd6 <tmr_disable_cc_interrupt>
     20a:	0e 94 0f 16 	call	0x2c1e	; 0x2c1e <save_cpu_interrupt>
     20e:	10 92 82 04 	sts	0x0482, r1	; 0x800482 <__data_end>
     212:	10 92 83 04 	sts	0x0483, r1	; 0x800483 <__data_end+0x1>
     216:	10 92 84 04 	sts	0x0484, r1	; 0x800484 <__data_end+0x2>
     21a:	10 92 85 04 	sts	0x0485, r1	; 0x800485 <__data_end+0x3>
     21e:	10 92 88 04 	sts	0x0488, r1	; 0x800488 <compare_value+0x1>
     222:	10 92 87 04 	sts	0x0487, r1	; 0x800487 <compare_value>
     226:	0c 94 1c 16 	jmp	0x2c38	; 0x2c38 <restore_cpu_interrupt>

0000022a <common_tc_overflow_stop>:
     22a:	0e 94 f9 15 	call	0x2bf2	; 0x2bf2 <tmr_disable_ovf_interrupt>
     22e:	10 92 86 04 	sts	0x0486, r1	; 0x800486 <timer_mul_var>
     232:	08 95       	ret

00000234 <common_tc_stop>:
     234:	e8 df       	rcall	.-48     	; 0x206 <common_tc_compare_stop>
     236:	f9 df       	rcall	.-14     	; 0x22a <common_tc_overflow_stop>
     238:	0c 94 00 16 	jmp	0x2c00	; 0x2c00 <tmr_stop>

0000023c <common_tc_delay>:
     23c:	0f 93       	push	r16
     23e:	1f 93       	push	r17
     240:	cf 93       	push	r28
     242:	df 93       	push	r29
     244:	ec 01       	movw	r28, r24
     246:	0e 94 e6 15 	call	0x2bcc	; 0x2bcc <tmr_read_count>
     24a:	8c 01       	movw	r16, r24
     24c:	be 01       	movw	r22, r28
     24e:	80 e0       	ldi	r24, 0x00	; 0
     250:	90 e0       	ldi	r25, 0x00	; 0
     252:	20 91 5c 09 	lds	r18, 0x095C	; 0x80095c <timer_multiplier>
     256:	30 e0       	ldi	r19, 0x00	; 0
     258:	40 e0       	ldi	r20, 0x00	; 0
     25a:	50 e0       	ldi	r21, 0x00	; 0
     25c:	0e 94 56 1a 	call	0x34ac	; 0x34ac <__mulsi3>
     260:	dc 01       	movw	r26, r24
     262:	cb 01       	movw	r24, r22
     264:	a8 01       	movw	r20, r16
     266:	60 e0       	ldi	r22, 0x00	; 0
     268:	70 e0       	ldi	r23, 0x00	; 0
     26a:	48 0f       	add	r20, r24
     26c:	59 1f       	adc	r21, r25
     26e:	6a 1f       	adc	r22, r26
     270:	7b 1f       	adc	r23, r27
     272:	40 93 82 04 	sts	0x0482, r20	; 0x800482 <__data_end>
     276:	50 93 83 04 	sts	0x0483, r21	; 0x800483 <__data_end+0x1>
     27a:	60 93 84 04 	sts	0x0484, r22	; 0x800484 <__data_end+0x2>
     27e:	70 93 85 04 	sts	0x0485, r23	; 0x800485 <__data_end+0x3>
     282:	40 91 82 04 	lds	r20, 0x0482	; 0x800482 <__data_end>
     286:	50 91 83 04 	lds	r21, 0x0483	; 0x800483 <__data_end+0x1>
     28a:	60 91 84 04 	lds	r22, 0x0484	; 0x800484 <__data_end+0x2>
     28e:	70 91 85 04 	lds	r23, 0x0485	; 0x800485 <__data_end+0x3>
     292:	ab 01       	movw	r20, r22
     294:	66 27       	eor	r22, r22
     296:	77 27       	eor	r23, r23
     298:	40 93 82 04 	sts	0x0482, r20	; 0x800482 <__data_end>
     29c:	50 93 83 04 	sts	0x0483, r21	; 0x800483 <__data_end+0x1>
     2a0:	60 93 84 04 	sts	0x0484, r22	; 0x800484 <__data_end+0x2>
     2a4:	70 93 85 04 	sts	0x0485, r23	; 0x800485 <__data_end+0x3>
     2a8:	40 91 82 04 	lds	r20, 0x0482	; 0x800482 <__data_end>
     2ac:	50 91 83 04 	lds	r21, 0x0483	; 0x800483 <__data_end+0x1>
     2b0:	60 91 84 04 	lds	r22, 0x0484	; 0x800484 <__data_end+0x2>
     2b4:	70 91 85 04 	lds	r23, 0x0485	; 0x800485 <__data_end+0x3>
     2b8:	41 15       	cp	r20, r1
     2ba:	51 05       	cpc	r21, r1
     2bc:	61 05       	cpc	r22, r1
     2be:	71 05       	cpc	r23, r1
     2c0:	91 f0       	breq	.+36     	; 0x2e6 <common_tc_delay+0xaa>
     2c2:	40 91 82 04 	lds	r20, 0x0482	; 0x800482 <__data_end>
     2c6:	50 91 83 04 	lds	r21, 0x0483	; 0x800483 <__data_end+0x1>
     2ca:	60 91 84 04 	lds	r22, 0x0484	; 0x800484 <__data_end+0x2>
     2ce:	70 91 85 04 	lds	r23, 0x0485	; 0x800485 <__data_end+0x3>
     2d2:	01 96       	adiw	r24, 0x01	; 1
     2d4:	08 0f       	add	r16, r24
     2d6:	19 1f       	adc	r17, r25
     2d8:	10 93 88 04 	sts	0x0488, r17	; 0x800488 <compare_value+0x1>
     2dc:	00 93 87 04 	sts	0x0487, r16	; 0x800487 <compare_value>
     2e0:	0e 94 eb 15 	call	0x2bd6	; 0x2bd6 <tmr_disable_cc_interrupt>
     2e4:	08 c0       	rjmp	.+16     	; 0x2f6 <common_tc_delay+0xba>
     2e6:	08 0f       	add	r16, r24
     2e8:	19 1f       	adc	r17, r25
     2ea:	10 93 88 04 	sts	0x0488, r17	; 0x800488 <compare_value+0x1>
     2ee:	00 93 87 04 	sts	0x0487, r16	; 0x800487 <compare_value>
     2f2:	0e 94 f2 15 	call	0x2be4	; 0x2be4 <tmr_enable_cc_interrupt>
     2f6:	80 91 87 04 	lds	r24, 0x0487	; 0x800487 <compare_value>
     2fa:	90 91 88 04 	lds	r25, 0x0488	; 0x800488 <compare_value+0x1>
     2fe:	84 36       	cpi	r24, 0x64	; 100
     300:	91 05       	cpc	r25, r1
     302:	30 f4       	brcc	.+12     	; 0x310 <common_tc_delay+0xd4>
     304:	8c 59       	subi	r24, 0x9C	; 156
     306:	9f 4f       	sbci	r25, 0xFF	; 255
     308:	90 93 88 04 	sts	0x0488, r25	; 0x800488 <compare_value+0x1>
     30c:	80 93 87 04 	sts	0x0487, r24	; 0x800487 <compare_value>
     310:	80 91 87 04 	lds	r24, 0x0487	; 0x800487 <compare_value>
     314:	90 91 88 04 	lds	r25, 0x0488	; 0x800488 <compare_value+0x1>
     318:	0e 94 04 16 	call	0x2c08	; 0x2c08 <tmr_write_cmpreg>
     31c:	df 91       	pop	r29
     31e:	cf 91       	pop	r28
     320:	1f 91       	pop	r17
     322:	0f 91       	pop	r16
     324:	08 95       	ret

00000326 <common_tc_init>:
     326:	10 92 86 04 	sts	0x0486, r1	; 0x800486 <timer_mul_var>
     32a:	0e 94 1e 16 	call	0x2c3c	; 0x2c3c <tmr_init>
     32e:	80 93 5c 09 	sts	0x095C, r24	; 0x80095c <timer_multiplier>
     332:	08 95       	ret

00000334 <tmr_ovf_callback>:
     334:	80 91 82 04 	lds	r24, 0x0482	; 0x800482 <__data_end>
     338:	90 91 83 04 	lds	r25, 0x0483	; 0x800483 <__data_end+0x1>
     33c:	a0 91 84 04 	lds	r26, 0x0484	; 0x800484 <__data_end+0x2>
     340:	b0 91 85 04 	lds	r27, 0x0485	; 0x800485 <__data_end+0x3>
     344:	00 97       	sbiw	r24, 0x00	; 0
     346:	a1 05       	cpc	r26, r1
     348:	b1 05       	cpc	r27, r1
     34a:	c9 f0       	breq	.+50     	; 0x37e <tmr_ovf_callback+0x4a>
     34c:	80 91 82 04 	lds	r24, 0x0482	; 0x800482 <__data_end>
     350:	90 91 83 04 	lds	r25, 0x0483	; 0x800483 <__data_end+0x1>
     354:	a0 91 84 04 	lds	r26, 0x0484	; 0x800484 <__data_end+0x2>
     358:	b0 91 85 04 	lds	r27, 0x0485	; 0x800485 <__data_end+0x3>
     35c:	01 97       	sbiw	r24, 0x01	; 1
     35e:	a1 09       	sbc	r26, r1
     360:	b1 09       	sbc	r27, r1
     362:	80 93 82 04 	sts	0x0482, r24	; 0x800482 <__data_end>
     366:	90 93 83 04 	sts	0x0483, r25	; 0x800483 <__data_end+0x1>
     36a:	a0 93 84 04 	sts	0x0484, r26	; 0x800484 <__data_end+0x2>
     36e:	b0 93 85 04 	sts	0x0485, r27	; 0x800485 <__data_end+0x3>
     372:	00 97       	sbiw	r24, 0x00	; 0
     374:	a1 05       	cpc	r26, r1
     376:	b1 05       	cpc	r27, r1
     378:	11 f4       	brne	.+4      	; 0x37e <tmr_ovf_callback+0x4a>
     37a:	0e 94 f2 15 	call	0x2be4	; 0x2be4 <tmr_enable_cc_interrupt>
     37e:	80 91 86 04 	lds	r24, 0x0486	; 0x800486 <timer_mul_var>
     382:	8f 5f       	subi	r24, 0xFF	; 255
     384:	80 93 86 04 	sts	0x0486, r24	; 0x800486 <timer_mul_var>
     388:	90 91 5c 09 	lds	r25, 0x095C	; 0x80095c <timer_multiplier>
     38c:	89 17       	cp	r24, r25
     38e:	48 f0       	brcs	.+18     	; 0x3a2 <tmr_ovf_callback+0x6e>
     390:	10 92 86 04 	sts	0x0486, r1	; 0x800486 <timer_mul_var>
     394:	e0 91 89 04 	lds	r30, 0x0489	; 0x800489 <common_tc_ovf_callback>
     398:	f0 91 8a 04 	lds	r31, 0x048A	; 0x80048a <common_tc_ovf_callback+0x1>
     39c:	30 97       	sbiw	r30, 0x00	; 0
     39e:	09 f0       	breq	.+2      	; 0x3a2 <tmr_ovf_callback+0x6e>
     3a0:	19 95       	eicall
     3a2:	08 95       	ret

000003a4 <tmr_cca_callback>:
     3a4:	0e 94 eb 15 	call	0x2bd6	; 0x2bd6 <tmr_disable_cc_interrupt>
     3a8:	e0 91 8b 04 	lds	r30, 0x048B	; 0x80048b <common_tc_cca_callback>
     3ac:	f0 91 8c 04 	lds	r31, 0x048C	; 0x80048c <common_tc_cca_callback+0x1>
     3b0:	30 97       	sbiw	r30, 0x00	; 0
     3b2:	09 f0       	breq	.+2      	; 0x3b6 <tmr_cca_callback+0x12>
     3b4:	19 95       	eicall
     3b6:	08 95       	ret

000003b8 <set_common_tc_overflow_callback>:
     3b8:	90 93 8a 04 	sts	0x048A, r25	; 0x80048a <common_tc_ovf_callback+0x1>
     3bc:	80 93 89 04 	sts	0x0489, r24	; 0x800489 <common_tc_ovf_callback>
     3c0:	08 95       	ret

000003c2 <set_common_tc_expiry_callback>:
     3c2:	90 93 8c 04 	sts	0x048C, r25	; 0x80048c <common_tc_cca_callback+0x1>
     3c6:	80 93 8b 04 	sts	0x048B, r24	; 0x80048b <common_tc_cca_callback>
     3ca:	08 95       	ret

000003cc <functionPUBLISH>:
     3cc:	dc 01       	movw	r26, r24
     3ce:	87 e0       	ldi	r24, 0x07	; 7
     3d0:	82 0f       	add	r24, r18
     3d2:	8c 93       	st	X, r24
	msg[0]=Length;
	msg[1]=MsgType;
	msg[2]=msgId1;
	msg[3]=msgId2;
	return Length;
}
     3d4:	9c e0       	ldi	r25, 0x0C	; 12
     3d6:	11 96       	adiw	r26, 0x01	; 1
     3d8:	9c 93       	st	X, r25
     3da:	11 97       	sbiw	r26, 0x01	; 1
     3dc:	12 96       	adiw	r26, 0x02	; 2
     3de:	6c 93       	st	X, r22
     3e0:	12 97       	sbiw	r26, 0x02	; 2
     3e2:	13 96       	adiw	r26, 0x03	; 3
     3e4:	1c 92       	st	X, r1
     3e6:	13 97       	sbiw	r26, 0x03	; 3
     3e8:	91 e0       	ldi	r25, 0x01	; 1
     3ea:	14 96       	adiw	r26, 0x04	; 4
     3ec:	9c 93       	st	X, r25
     3ee:	14 97       	sbiw	r26, 0x04	; 4
     3f0:	15 96       	adiw	r26, 0x05	; 5
     3f2:	1c 92       	st	X, r1
     3f4:	15 97       	sbiw	r26, 0x05	; 5
     3f6:	16 96       	adiw	r26, 0x06	; 6
     3f8:	9c 93       	st	X, r25
     3fa:	16 97       	sbiw	r26, 0x06	; 6
     3fc:	12 16       	cp	r1, r18
     3fe:	13 06       	cpc	r1, r19
     400:	4c f4       	brge	.+18     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
     402:	fa 01       	movw	r30, r20
     404:	17 96       	adiw	r26, 0x07	; 7
     406:	42 0f       	add	r20, r18
     408:	53 1f       	adc	r21, r19
     40a:	91 91       	ld	r25, Z+
     40c:	9d 93       	st	X+, r25
     40e:	e4 17       	cp	r30, r20
     410:	f5 07       	cpc	r31, r21
     412:	d9 f7       	brne	.-10     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
     414:	90 e0       	ldi	r25, 0x00	; 0
     416:	08 95       	ret

00000418 <functionPUBREL>:
int functionPUBREL(uint8_t *msg){
     418:	fc 01       	movw	r30, r24
	uint8_t Length=0x04;
	uint8_t MsgType=0x10;
	uint8_t msgId1=0x00;
	uint8_t msgId2=0x01;
	msg[0]=Length;
     41a:	84 e0       	ldi	r24, 0x04	; 4
     41c:	80 83       	st	Z, r24
	msg[1]=MsgType;
     41e:	80 e1       	ldi	r24, 0x10	; 16
     420:	81 83       	std	Z+1, r24	; 0x01
	msg[2]=msgId1;
     422:	12 82       	std	Z+2, r1	; 0x02
	msg[3]=msgId2;
     424:	81 e0       	ldi	r24, 0x01	; 1
     426:	83 83       	std	Z+3, r24	; 0x03
	return Length;
}
     428:	84 e0       	ldi	r24, 0x04	; 4
     42a:	90 e0       	ldi	r25, 0x00	; 0
     42c:	08 95       	ret

0000042e <usr_app_timer_cb>:
#include "usr_periodic_timer.h"
#include "periodic_timer.h"//Para acceder a las variables utilizadas por los temporizadores.

void usr_app_timer_cb(void *parameter)
{
	TimerEnd=1;
     42e:	81 e0       	ldi	r24, 0x01	; 1
     430:	90 e0       	ldi	r25, 0x00	; 0
     432:	90 93 f8 08 	sts	0x08F8, r25	; 0x8008f8 <TimerEnd+0x1>
     436:	80 93 f7 08 	sts	0x08F7, r24	; 0x8008f7 <TimerEnd>
     43a:	08 95       	ret

0000043c <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
     43c:	04 c0       	rjmp	.+8      	; 0x446 <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
     43e:	61 50       	subi	r22, 0x01	; 1
     440:	71 09       	sbc	r23, r1
     442:	81 09       	sbc	r24, r1
     444:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
     446:	61 15       	cp	r22, r1
     448:	71 05       	cpc	r23, r1
     44a:	81 05       	cpc	r24, r1
     44c:	91 05       	cpc	r25, r1
     44e:	b9 f7       	brne	.-18     	; 0x43e <__portable_avr_delay_cycles+0x2>
     450:	08 95       	ret

00000452 <usr_frame_received_cb>:
		state_3();
	}
}

void usr_frame_received_cb(frame_info_t *frame)
{
     452:	0f 93       	push	r16
     454:	1f 93       	push	r17
     456:	cf 93       	push	r28
     458:	df 93       	push	r29
	if (enableReception == 1) // State index
     45a:	20 91 9d 04 	lds	r18, 0x049D	; 0x80049d <enableReception>
     45e:	30 91 9e 04 	lds	r19, 0x049E	; 0x80049e <enableReception+0x1>
     462:	21 30       	cpi	r18, 0x01	; 1
     464:	31 05       	cpc	r19, r1
     466:	e1 f5       	brne	.+120    	; 0x4e0 <usr_frame_received_cb+0x8e>
     468:	ec 01       	movw	r28, r24
	{
		// Clear received frame memory space
		memset(&receivedFrame, 0, sizeof(receivedFrame));
     46a:	07 e1       	ldi	r16, 0x17	; 23
     46c:	17 e0       	ldi	r17, 0x07	; 7
     46e:	81 e7       	ldi	r24, 0x71	; 113
     470:	f8 01       	movw	r30, r16
     472:	11 92       	st	Z+, r1
     474:	8a 95       	dec	r24
     476:	e9 f7       	brne	.-6      	; 0x472 <usr_frame_received_cb+0x20>
		memcpy(&receivedFrame, frame->mpdu, sizeof(receivedFrame)); // Copy information from source memory (buffer) to destination
     478:	ef 81       	ldd	r30, Y+7	; 0x07
     47a:	f8 85       	ldd	r31, Y+8	; 0x08
     47c:	81 e7       	ldi	r24, 0x71	; 113
     47e:	d8 01       	movw	r26, r16
     480:	01 90       	ld	r0, Z+
     482:	0d 92       	st	X+, r0
     484:	8a 95       	dec	r24
     486:	e1 f7       	brne	.-8      	; 0x480 <usr_frame_received_cb+0x2e>
		bmm_buffer_free(frame->buffer_header); // Clear buffer data to avoid overlap
     488:	89 81       	ldd	r24, Y+1	; 0x01
     48a:	9a 81       	ldd	r25, Y+2	; 0x02
     48c:	0e 94 56 0c 	call	0x18ac	; 0x18ac <bmm_buffer_free>

		uint8_t msgTypeMQTT_SN;
		msgTypeMQTT_SN = receivedFrame.MQTT_SN_message[1];
     490:	f8 01       	movw	r30, r16
     492:	83 85       	ldd	r24, Z+11	; 0x0b
		if (msgTypeMQTT_SN == 0x0D) // RX PUBACK
     494:	8d 30       	cpi	r24, 0x0D	; 13
     496:	59 f4       	brne	.+22     	; 0x4ae <usr_frame_received_cb+0x5c>
		{
			enableReception = 0; // Disable reception to avoid interference in state change
     498:	10 92 9e 04 	sts	0x049E, r1	; 0x80049e <enableReception+0x1>
     49c:	10 92 9d 04 	sts	0x049D, r1	; 0x80049d <enableReception>
			successfulReceptionControl = 13; // This variable allows the node to exit the reception loop
     4a0:	8d e0       	ldi	r24, 0x0D	; 13
     4a2:	90 e0       	ldi	r25, 0x00	; 0
     4a4:	90 93 0d 02 	sts	0x020D, r25	; 0x80020d <successfulReceptionControl+0x1>
     4a8:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <successfulReceptionControl>
     4ac:	19 c0       	rjmp	.+50     	; 0x4e0 <usr_frame_received_cb+0x8e>
		}
		else if (msgTypeMQTT_SN == 0x0F) // RX PUBREC
     4ae:	8f 30       	cpi	r24, 0x0F	; 15
     4b0:	59 f4       	brne	.+22     	; 0x4c8 <usr_frame_received_cb+0x76>
		{
			enableReception = 0; // Disable reception to avoid interference in state change
     4b2:	10 92 9e 04 	sts	0x049E, r1	; 0x80049e <enableReception+0x1>
     4b6:	10 92 9d 04 	sts	0x049D, r1	; 0x80049d <enableReception>
			successfulReceptionControl = 15; // This variable allows the node to exit the reception loop
     4ba:	8f e0       	ldi	r24, 0x0F	; 15
     4bc:	90 e0       	ldi	r25, 0x00	; 0
     4be:	90 93 0d 02 	sts	0x020D, r25	; 0x80020d <successfulReceptionControl+0x1>
     4c2:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <successfulReceptionControl>
     4c6:	0c c0       	rjmp	.+24     	; 0x4e0 <usr_frame_received_cb+0x8e>
		}
		else if (msgTypeMQTT_SN == 0x0E) // RX PUBCOMP
     4c8:	8e 30       	cpi	r24, 0x0E	; 14
     4ca:	51 f4       	brne	.+20     	; 0x4e0 <usr_frame_received_cb+0x8e>
		{
			enableReception = 0; // Disable reception to avoid interference in state change
     4cc:	10 92 9e 04 	sts	0x049E, r1	; 0x80049e <enableReception+0x1>
     4d0:	10 92 9d 04 	sts	0x049D, r1	; 0x80049d <enableReception>
			successfulReceptionControl = 14; // This variable allows the node to exit the reception loop
     4d4:	8e e0       	ldi	r24, 0x0E	; 14
     4d6:	90 e0       	ldi	r25, 0x00	; 0
     4d8:	90 93 0d 02 	sts	0x020D, r25	; 0x80020d <successfulReceptionControl+0x1>
     4dc:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <successfulReceptionControl>
		}
	}
}
     4e0:	df 91       	pop	r29
     4e2:	cf 91       	pop	r28
     4e4:	1f 91       	pop	r17
     4e6:	0f 91       	pop	r16
     4e8:	08 95       	ret

000004ea <usr_frame_transmitted_cb>:

void usr_frame_transmitted_cb(retval_t status, frame_info_t *frame)
{
     4ea:	08 95       	ret

000004ec <state_3>:
		temporaryStateIndex = -1; // Set to -1 to use it later.
	}
}
// ****************************************************************************************************************************** //
void state_3(void) // DECONGESTION STATE S3
{
     4ec:	cf 93       	push	r28
     4ee:	df 93       	push	r29
     4f0:	cd b7       	in	r28, 0x3d	; 61
     4f2:	de b7       	in	r29, 0x3e	; 62
     4f4:	e0 97       	sbiw	r28, 0x30	; 48
     4f6:	0f b6       	in	r0, 0x3f	; 63
     4f8:	f8 94       	cli
     4fa:	de bf       	out	0x3e, r29	; 62
     4fc:	0f be       	out	0x3f, r0	; 63
     4fe:	cd bf       	out	0x3d, r28	; 61
	uint8_t State[48] = "|=====DECONGESTION=====||       CL S-03        |";
     500:	80 e3       	ldi	r24, 0x30	; 48
     502:	ee e0       	ldi	r30, 0x0E	; 14
     504:	f2 e0       	ldi	r31, 0x02	; 2
     506:	de 01       	movw	r26, r28
     508:	11 96       	adiw	r26, 0x01	; 1
     50a:	01 90       	ld	r0, Z+
     50c:	0d 92       	st	X+, r0
     50e:	8a 95       	dec	r24
     510:	e1 f7       	brne	.-8      	; 0x50a <state_3+0x1e>
	                   //|        CL_END        ||------ CL S-04 -------|
	if (stateControl == 1)
     512:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <stateControl>
     516:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <stateControl+0x1>
     51a:	81 30       	cpi	r24, 0x01	; 1
     51c:	91 05       	cpc	r25, r1
     51e:	61 f4       	brne	.+24     	; 0x538 <state_3+0x4c>
	{
		stateControl = 2;
     520:	82 e0       	ldi	r24, 0x02	; 2
     522:	90 e0       	ldi	r25, 0x00	; 0
     524:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <stateControl+0x1>
     528:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <stateControl>
		delay_ms(1500); // Wait time to appreciate the start of state
     52c:	61 e8       	ldi	r22, 0x81	; 129
     52e:	74 e8       	ldi	r23, 0x84	; 132
     530:	8e e1       	ldi	r24, 0x1E	; 30
     532:	90 e0       	ldi	r25, 0x00	; 0
     534:	83 df       	rcall	.-250    	; 0x43c <__portable_avr_delay_cycles>
     536:	4a c0       	rjmp	.+148    	; 0x5cc <state_3+0xe0>
	}
	else if (stateControl == 2)
     538:	82 30       	cpi	r24, 0x02	; 2
     53a:	91 05       	cpc	r25, r1
     53c:	69 f4       	brne	.+26     	; 0x558 <state_3+0x6c>
	{
		stateControl = 3;
     53e:	83 e0       	ldi	r24, 0x03	; 3
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <stateControl+0x1>
     546:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <stateControl>
		transmit_sample_frame(State, 48, 1); // State indicator RX_Connect
     54a:	41 e0       	ldi	r20, 0x01	; 1
     54c:	50 e0       	ldi	r21, 0x00	; 0
     54e:	60 e3       	ldi	r22, 0x30	; 48
     550:	ce 01       	movw	r24, r28
     552:	01 96       	adiw	r24, 0x01	; 1
     554:	81 d5       	rcall	.+2818   	; 0x1058 <transmit_sample_frame>
     556:	3a c0       	rjmp	.+116    	; 0x5cc <state_3+0xe0>
	}
	else if (stateControl == 3)
     558:	83 30       	cpi	r24, 0x03	; 3
     55a:	91 05       	cpc	r25, r1
     55c:	b9 f4       	brne	.+46     	; 0x58c <state_3+0xa0>
	{
		// The node will remain in this state until TWAIT time passes
		/////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//TIMER FINISH
		if (TimerEnd == 1) // If the condition indicating that time Tadb has ended is met
     55e:	80 91 f7 08 	lds	r24, 0x08F7	; 0x8008f7 <TimerEnd>
     562:	90 91 f8 08 	lds	r25, 0x08F8	; 0x8008f8 <TimerEnd+0x1>
     566:	01 97       	sbiw	r24, 0x01	; 1
     568:	89 f5       	brne	.+98     	; 0x5cc <state_3+0xe0>
		{
			TimerEnd = 0; // Disable reception of the timer signal as it has ended
     56a:	10 92 f8 08 	sts	0x08F8, r1	; 0x8008f8 <TimerEnd+0x1>
     56e:	10 92 f7 08 	sts	0x08F7, r1	; 0x8008f7 <TimerEnd>
			transmit_sample_frame((uint8_t*)"|        T_WAIT:       ||        Finish        |", 48, 1); // State indicator
     572:	41 e0       	ldi	r20, 0x01	; 1
     574:	50 e0       	ldi	r21, 0x00	; 0
     576:	60 e3       	ldi	r22, 0x30	; 48
     578:	82 ed       	ldi	r24, 0xD2	; 210
     57a:	92 e0       	ldi	r25, 0x02	; 2
     57c:	6d d5       	rcall	.+2778   	; 0x1058 <transmit_sample_frame>
			                               //|12345678CL_END        ||12345678T_WAIT:       |
			stateControl = 4;
     57e:	84 e0       	ldi	r24, 0x04	; 4
     580:	90 e0       	ldi	r25, 0x00	; 0
     582:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <stateControl+0x1>
     586:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <stateControl>
     58a:	20 c0       	rjmp	.+64     	; 0x5cc <state_3+0xe0>
		}
		/////////////////////////////////////////////////////////////////////////////////////////////////////////////
	}
	else if (stateControl == 4)
     58c:	04 97       	sbiw	r24, 0x04	; 4
     58e:	f1 f4       	brne	.+60     	; 0x5cc <state_3+0xe0>
	{
		stateControl = 0; // This control variable is set to zero because it is only used in the initial state.
     590:	10 92 0b 02 	sts	0x020B, r1	; 0x80020b <stateControl+0x1>
     594:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <stateControl>
		transmit_sample_frame((uint8_t*)"|        CL_END        ||------ CL S-03 -------|", 48, 1); // State indicator
     598:	41 e0       	ldi	r20, 0x01	; 1
     59a:	50 e0       	ldi	r21, 0x00	; 0
     59c:	60 e3       	ldi	r22, 0x30	; 48
     59e:	83 e0       	ldi	r24, 0x03	; 3
     5a0:	93 e0       	ldi	r25, 0x03	; 3
     5a2:	5a d5       	rcall	.+2740   	; 0x1058 <transmit_sample_frame>
		                               //|12345678CL_END        ||12345678T_WAIT:       |
		stateControl = 1; // This control variable is set to one so that the following states can start their operation.
     5a4:	81 e0       	ldi	r24, 0x01	; 1
     5a6:	90 e0       	ldi	r25, 0x00	; 0
     5a8:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <stateControl+0x1>
     5ac:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <stateControl>
		stateIndex = temporaryStateIndex; // State change
     5b0:	80 91 9f 04 	lds	r24, 0x049F	; 0x80049f <temporaryStateIndex>
     5b4:	90 91 a0 04 	lds	r25, 0x04A0	; 0x8004a0 <temporaryStateIndex+0x1>
     5b8:	90 93 a2 04 	sts	0x04A2, r25	; 0x8004a2 <stateIndex+0x1>
     5bc:	80 93 a1 04 	sts	0x04A1, r24	; 0x8004a1 <stateIndex>
		temporaryStateIndex = -1; // Set to -1 to use it later.
     5c0:	8f ef       	ldi	r24, 0xFF	; 255
     5c2:	9f ef       	ldi	r25, 0xFF	; 255
     5c4:	90 93 a0 04 	sts	0x04A0, r25	; 0x8004a0 <temporaryStateIndex+0x1>
     5c8:	80 93 9f 04 	sts	0x049F, r24	; 0x80049f <temporaryStateIndex>
	}
}
     5cc:	e0 96       	adiw	r28, 0x30	; 48
     5ce:	0f b6       	in	r0, 0x3f	; 63
     5d0:	f8 94       	cli
     5d2:	de bf       	out	0x3e, r29	; 62
     5d4:	0f be       	out	0x3f, r0	; 63
     5d6:	cd bf       	out	0x3d, r28	; 61
     5d8:	df 91       	pop	r29
     5da:	cf 91       	pop	r28
     5dc:	08 95       	ret

000005de <controlLED>:
// ****************************************************************************************************************************** //

// Aditional Funtion//
// ****************************************************************************************************************************** //
void controlLED(int led_on){
	if (led_on==0)
     5de:	00 97       	sbiw	r24, 0x00	; 0
     5e0:	21 f4       	brne	.+8      	; 0x5ea <controlLED+0xc>
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
     5e2:	5e 9a       	sbi	0x0b, 6	; 11
     5e4:	a2 9a       	sbi	0x14, 2	; 20
     5e6:	72 9a       	sbi	0x0e, 2	; 14
     5e8:	08 95       	ret
	{
		LED_Off(LED0);
		LED_Off(LED1);
		LED_Off(LED2);
	}
	else if (led_on==1)
     5ea:	81 30       	cpi	r24, 0x01	; 1
     5ec:	91 05       	cpc	r25, r1
     5ee:	21 f4       	brne	.+8      	; 0x5f8 <controlLED+0x1a>
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
     5f0:	5e 98       	cbi	0x0b, 6	; 11
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
     5f2:	a2 9a       	sbi	0x14, 2	; 20
     5f4:	72 9a       	sbi	0x0e, 2	; 14
     5f6:	08 95       	ret
	{
		LED_On(LED0);
		LED_Off(LED1);
		LED_Off(LED2);
	}
	else if (led_on==2)
     5f8:	82 30       	cpi	r24, 0x02	; 2
     5fa:	91 05       	cpc	r25, r1
     5fc:	21 f4       	brne	.+8      	; 0x606 <controlLED+0x28>
     5fe:	5e 9a       	sbi	0x0b, 6	; 11
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
     600:	a2 98       	cbi	0x14, 2	; 20
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
     602:	72 9a       	sbi	0x0e, 2	; 14
     604:	08 95       	ret
	{
		LED_Off(LED0);
		LED_On(LED1);
		LED_Off(LED2);
	}
	else if (led_on==3)
     606:	83 30       	cpi	r24, 0x03	; 3
     608:	91 05       	cpc	r25, r1
     60a:	21 f4       	brne	.+8      	; 0x614 <controlLED+0x36>
     60c:	5e 9a       	sbi	0x0b, 6	; 11
     60e:	a2 9a       	sbi	0x14, 2	; 20
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
     610:	72 98       	cbi	0x0e, 2	; 14
     612:	08 95       	ret
	{
		LED_Off(LED0);
		LED_Off(LED1);
		LED_On(LED2);
	}
	else if (led_on==4)
     614:	04 97       	sbiw	r24, 0x04	; 4
     616:	19 f4       	brne	.+6      	; 0x61e <controlLED+0x40>
     618:	5e 98       	cbi	0x0b, 6	; 11
     61a:	a2 98       	cbi	0x14, 2	; 20
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
     61c:	72 9a       	sbi	0x0e, 2	; 14
     61e:	08 95       	ret

00000620 <controlAllLEDs>:
		LED_On(LED1);
		LED_Off(LED2);
	}
}
void controlAllLEDs(int leds_on){
	if (leds_on==0)
     620:	00 97       	sbiw	r24, 0x00	; 0
     622:	21 f4       	brne	.+8      	; 0x62c <controlAllLEDs+0xc>
     624:	5e 9a       	sbi	0x0b, 6	; 11
     626:	a2 9a       	sbi	0x14, 2	; 20
     628:	72 9a       	sbi	0x0e, 2	; 14
     62a:	08 95       	ret
	{
		LED_Off(LED0);
		LED_Off(LED1);
		LED_Off(LED2);
	}
	else if (leds_on==1)
     62c:	01 97       	sbiw	r24, 0x01	; 1
     62e:	19 f4       	brne	.+6      	; 0x636 <controlAllLEDs+0x16>
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
     630:	5e 98       	cbi	0x0b, 6	; 11
     632:	a2 98       	cbi	0x14, 2	; 20
     634:	72 98       	cbi	0x0e, 2	; 14
     636:	08 95       	ret

00000638 <stateInitial>:
	// Transmit frame callback function
}

// ****************************************************************************************************************************** //
void stateInitial(void) // ACTIVE PUBLISH S0
{
     638:	cf 93       	push	r28
     63a:	df 93       	push	r29
     63c:	cd b7       	in	r28, 0x3d	; 61
     63e:	de b7       	in	r29, 0x3e	; 62
     640:	ee 97       	sbiw	r28, 0x3e	; 62
     642:	0f b6       	in	r0, 0x3f	; 63
     644:	f8 94       	cli
     646:	de bf       	out	0x3e, r29	; 62
     648:	0f be       	out	0x3f, r0	; 63
     64a:	cd bf       	out	0x3d, r28	; 61
	uint8_t State[48] = "|===ACT_PUBLICATION====||       CL S-00        |";
     64c:	80 e3       	ldi	r24, 0x30	; 48
     64e:	ef e3       	ldi	r30, 0x3F	; 63
     650:	f2 e0       	ldi	r31, 0x02	; 2
     652:	de 01       	movw	r26, r28
     654:	11 96       	adiw	r26, 0x01	; 1
     656:	01 90       	ld	r0, Z+
     658:	0d 92       	st	X+, r0
     65a:	8a 95       	dec	r24
     65c:	e1 f7       	brne	.-8      	; 0x656 <stateInitial+0x1e>
	                   //|        CL_END        ||------ CL S-04 -------|

	if (stateControl == 1)
     65e:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <stateControl>
     662:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <stateControl+0x1>
     666:	81 30       	cpi	r24, 0x01	; 1
     668:	91 05       	cpc	r25, r1
     66a:	61 f4       	brne	.+24     	; 0x684 <stateInitial+0x4c>
	{
		stateControl = 2;
     66c:	82 e0       	ldi	r24, 0x02	; 2
     66e:	90 e0       	ldi	r25, 0x00	; 0
     670:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <stateControl+0x1>
     674:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <stateControl>
		delay_ms(1500); // Wait time to appreciate the start of state
     678:	61 e8       	ldi	r22, 0x81	; 129
     67a:	74 e8       	ldi	r23, 0x84	; 132
     67c:	8e e1       	ldi	r24, 0x1E	; 30
     67e:	90 e0       	ldi	r25, 0x00	; 0
     680:	dd de       	rcall	.-582    	; 0x43c <__portable_avr_delay_cycles>
     682:	27 c2       	rjmp	.+1102   	; 0xad2 <stateInitial+0x49a>
	}
	else if (stateControl == 2)
     684:	82 30       	cpi	r24, 0x02	; 2
     686:	91 05       	cpc	r25, r1
     688:	99 f4       	brne	.+38     	; 0x6b0 <stateInitial+0x78>
	{
		stateControl = 3;
     68a:	83 e0       	ldi	r24, 0x03	; 3
     68c:	90 e0       	ldi	r25, 0x00	; 0
     68e:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <stateControl+0x1>
     692:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <stateControl>
		transmit_sample_frame(State, 48, 1); // State indicator RX_Connect
     696:	41 e0       	ldi	r20, 0x01	; 1
     698:	50 e0       	ldi	r21, 0x00	; 0
     69a:	60 e3       	ldi	r22, 0x30	; 48
     69c:	ce 01       	movw	r24, r28
     69e:	01 96       	adiw	r24, 0x01	; 1
     6a0:	db d4       	rcall	.+2486   	; 0x1058 <transmit_sample_frame>
		enableReception = 1; // Enable message receiving function
     6a2:	81 e0       	ldi	r24, 0x01	; 1
     6a4:	90 e0       	ldi	r25, 0x00	; 0
     6a6:	90 93 9e 04 	sts	0x049E, r25	; 0x80049e <enableReception+0x1>
     6aa:	80 93 9d 04 	sts	0x049D, r24	; 0x80049d <enableReception>
     6ae:	11 c2       	rjmp	.+1058   	; 0xad2 <stateInitial+0x49a>
	}
	else if (stateControl == 3)
     6b0:	83 30       	cpi	r24, 0x03	; 3
     6b2:	91 05       	cpc	r25, r1
     6b4:	09 f0       	breq	.+2      	; 0x6b8 <stateInitial+0x80>
     6b6:	de c1       	rjmp	.+956    	; 0xa74 <stateInitial+0x43c>
	{
		// The node will remain in this state until publication data is ready
		// or an invalid topicID PUBACK is received
		/////////////////////////////////////////////////////////////////////////////////////////////////////////////
		// UPPER LAYERS RX BUTTON
		if (!ioport_get_pin_level(GPIO_PUSH_BUTTON_0)) // To recreate a publication, a button is used
     6b8:	60 99       	sbic	0x0c, 0	; 12
     6ba:	18 c0       	rjmp	.+48     	; 0x6ec <stateInitial+0xb4>
		{
			delay_ms(200); // Delay for button to work
     6bc:	6b ea       	ldi	r22, 0xAB	; 171
     6be:	71 e1       	ldi	r23, 0x11	; 17
     6c0:	84 e0       	ldi	r24, 0x04	; 4
     6c2:	90 e0       	ldi	r25, 0x00	; 0
     6c4:	bb de       	rcall	.-650    	; 0x43c <__portable_avr_delay_cycles>
			pulseCounter++;
     6c6:	80 91 8f 04 	lds	r24, 0x048F	; 0x80048f <pulseCounter>
     6ca:	90 91 90 04 	lds	r25, 0x0490	; 0x800490 <pulseCounter+0x1>
     6ce:	01 96       	adiw	r24, 0x01	; 1
     6d0:	90 93 90 04 	sts	0x0490, r25	; 0x800490 <pulseCounter+0x1>
     6d4:	80 93 8f 04 	sts	0x048F, r24	; 0x80048f <pulseCounter>
			if (pulseCounter == 1)
     6d8:	01 97       	sbiw	r24, 0x01	; 1
     6da:	09 f0       	breq	.+2      	; 0x6de <stateInitial+0xa6>
     6dc:	88 c1       	rjmp	.+784    	; 0x9ee <stateInitial+0x3b6>
			{
				addTimer = 1; // When the first pulse arrives, continue with Timer configuration
     6de:	81 e0       	ldi	r24, 0x01	; 1
     6e0:	90 e0       	ldi	r25, 0x00	; 0
     6e2:	90 93 9a 04 	sts	0x049A, r25	; 0x80049a <addTimer+0x1>
     6e6:	80 93 99 04 	sts	0x0499, r24	; 0x800499 <addTimer>
     6ea:	81 c1       	rjmp	.+770    	; 0x9ee <stateInitial+0x3b6>
			}
		}
		// PULSE TIMER
		else if (addTimer == 1)
     6ec:	80 91 99 04 	lds	r24, 0x0499	; 0x800499 <addTimer>
     6f0:	90 91 9a 04 	lds	r25, 0x049A	; 0x80049a <addTimer+0x1>
     6f4:	01 97       	sbiw	r24, 0x01	; 1
     6f6:	61 f4       	brne	.+24     	; 0x710 <stateInitial+0xd8>
		{
			addTimer = 0; // The timer is assigned only once, so the variable returns to 0
     6f8:	10 92 9a 04 	sts	0x049A, r1	; 0x80049a <addTimer+0x1>
     6fc:	10 92 99 04 	sts	0x0499, r1	; 0x800499 <addTimer>
			// SET TIMER
			timerDurationTime = 3; // The timer has a duration of 5 seconds to collect other pulses
     700:	83 e0       	ldi	r24, 0x03	; 3
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	90 93 a4 04 	sts	0x04A4, r25	; 0x8004a4 <timerDurationTime+0x1>
     708:	80 93 a3 04 	sts	0x04A3, r24	; 0x8004a3 <timerDurationTime>
			start_timer1(); // Timer starts operation
     70c:	e6 d3       	rcall	.+1996   	; 0xeda <start_timer1>
     70e:	6f c1       	rjmp	.+734    	; 0x9ee <stateInitial+0x3b6>
		}
		// Timer Tadv Ends Ready NewWILLTOPIC=TRUE
		else if (TimerEnd == 1) // If the condition indicating that the time Tadb has ended is met
     710:	80 91 f7 08 	lds	r24, 0x08F7	; 0x8008f7 <TimerEnd>
     714:	90 91 f8 08 	lds	r25, 0x08F8	; 0x8008f8 <TimerEnd+0x1>
     718:	01 97       	sbiw	r24, 0x01	; 1
     71a:	89 f4       	brne	.+34     	; 0x73e <stateInitial+0x106>
		{
			TimerEnd = 0; // Disable reception of the timer signal since it has ended
     71c:	10 92 f8 08 	sts	0x08F8, r1	; 0x8008f8 <TimerEnd+0x1>
     720:	10 92 f7 08 	sts	0x08F7, r1	; 0x8008f7 <TimerEnd>
			receivedPulses = pulseCounter; // avoid unnecessary pulses
     724:	80 91 8f 04 	lds	r24, 0x048F	; 0x80048f <pulseCounter>
     728:	90 91 90 04 	lds	r25, 0x0490	; 0x800490 <pulseCounter+0x1>
     72c:	90 93 8e 04 	sts	0x048E, r25	; 0x80048e <receivedPulses+0x1>
     730:	80 93 8d 04 	sts	0x048D, r24	; 0x80048d <receivedPulses>
			pulseCounter = 0;
     734:	10 92 90 04 	sts	0x0490, r1	; 0x800490 <pulseCounter+0x1>
     738:	10 92 8f 04 	sts	0x048F, r1	; 0x80048f <pulseCounter>
     73c:	58 c1       	rjmp	.+688    	; 0x9ee <stateInitial+0x3b6>
		}
		// Preparing PUBLISH (QoS 0)
		else if (receivedPulses == 1)
     73e:	80 91 8d 04 	lds	r24, 0x048D	; 0x80048d <receivedPulses>
     742:	90 91 8e 04 	lds	r25, 0x048E	; 0x80048e <receivedPulses+0x1>
     746:	81 30       	cpi	r24, 0x01	; 1
     748:	91 05       	cpc	r25, r1
     74a:	89 f4       	brne	.+34     	; 0x76e <stateInitial+0x136>
		{
			receivedPulses = 0;
     74c:	10 92 8e 04 	sts	0x048E, r1	; 0x80048e <receivedPulses+0x1>
     750:	10 92 8d 04 	sts	0x048D, r1	; 0x80048d <receivedPulses>
			transmit_sample_frame((uint8_t*)"|  publicationReady=1  ||       (QoS_0)        |", 48, 1);
     754:	41 e0       	ldi	r20, 0x01	; 1
     756:	50 e0       	ldi	r21, 0x00	; 0
     758:	60 e3       	ldi	r22, 0x30	; 48
     75a:	84 e3       	ldi	r24, 0x34	; 52
     75c:	93 e0       	ldi	r25, 0x03	; 3
     75e:	7c d4       	rcall	.+2296   	; 0x1058 <transmit_sample_frame>
			                               //|        CL_END        ||------ CL S-04 -------|
			jump = 1; // Move to use a delay
     760:	81 e0       	ldi	r24, 0x01	; 1
     762:	90 e0       	ldi	r25, 0x00	; 0
     764:	90 93 98 04 	sts	0x0498, r25	; 0x800498 <jump+0x1>
     768:	80 93 97 04 	sts	0x0497, r24	; 0x800497 <jump>
     76c:	40 c1       	rjmp	.+640    	; 0x9ee <stateInitial+0x3b6>
		}
		// DELAY
		else if (jump == 1)
     76e:	20 91 97 04 	lds	r18, 0x0497	; 0x800497 <jump>
     772:	30 91 98 04 	lds	r19, 0x0498	; 0x800498 <jump+0x1>
     776:	21 30       	cpi	r18, 0x01	; 1
     778:	31 05       	cpc	r19, r1
     77a:	a1 f4       	brne	.+40     	; 0x7a4 <stateInitial+0x16c>
		{
			jump = 0; // Only one jump
     77c:	10 92 98 04 	sts	0x0498, r1	; 0x800498 <jump+0x1>
     780:	10 92 97 04 	sts	0x0497, r1	; 0x800497 <jump>
			delay_ms(400); // Delay time to appreciate the response to a reception
     784:	66 e5       	ldi	r22, 0x56	; 86
     786:	73 e2       	ldi	r23, 0x23	; 35
     788:	88 e0       	ldi	r24, 0x08	; 8
     78a:	90 e0       	ldi	r25, 0x00	; 0
     78c:	57 de       	rcall	.-850    	; 0x43c <__portable_avr_delay_cycles>
			enableTransmission = 12; // Proceed to send
     78e:	8c e0       	ldi	r24, 0x0C	; 12
     790:	90 e0       	ldi	r25, 0x00	; 0
     792:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <enableTransmission+0x1>
     796:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <enableTransmission>
			qos = 0;
     79a:	10 92 05 02 	sts	0x0205, r1	; 0x800205 <qos+0x1>
     79e:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <qos>
     7a2:	25 c1       	rjmp	.+586    	; 0x9ee <stateInitial+0x3b6>
		}
		// TR PUBLISH Prepare PUBLISH (QoS 0)
		else if (enableTransmission == 12 && qos == 0) // Proceed to transmit a WILLTOPICUPD as indicated by the variable value
     7a4:	40 91 08 02 	lds	r20, 0x0208	; 0x800208 <enableTransmission>
     7a8:	50 91 09 02 	lds	r21, 0x0209	; 0x800209 <enableTransmission+0x1>
     7ac:	4c 30       	cpi	r20, 0x0C	; 12
     7ae:	51 05       	cpc	r21, r1
     7b0:	09 f0       	breq	.+2      	; 0x7b4 <stateInitial+0x17c>
     7b2:	43 c0       	rjmp	.+134    	; 0x83a <stateInitial+0x202>
     7b4:	60 91 04 02 	lds	r22, 0x0204	; 0x800204 <qos>
     7b8:	70 91 05 02 	lds	r23, 0x0205	; 0x800205 <qos+0x1>
     7bc:	67 2b       	or	r22, r23
     7be:	09 f0       	breq	.+2      	; 0x7c2 <stateInitial+0x18a>
     7c0:	3c c0       	rjmp	.+120    	; 0x83a <stateInitial+0x202>
		{
			enableTransmission = -1; // Transmission is disabled because only a PUBLISH message is needed
     7c2:	8f ef       	ldi	r24, 0xFF	; 255
     7c4:	9f ef       	ldi	r25, 0xFF	; 255
     7c6:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <enableTransmission+0x1>
     7ca:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <enableTransmission>
			qos = -1;
     7ce:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <qos+0x1>
     7d2:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <qos>
			uint8_t DATA[] = "Payload-QoS_0"; uint8_t flagsP; flagsP = 0b00000000; //flagsP field check MQTT-SN documentation
     7d6:	8e e0       	ldi	r24, 0x0E	; 14
     7d8:	e8 ef       	ldi	r30, 0xF8	; 248
     7da:	f3 e0       	ldi	r31, 0x03	; 3
     7dc:	de 01       	movw	r26, r28
     7de:	d1 96       	adiw	r26, 0x31	; 49
     7e0:	01 90       	ld	r0, Z+
     7e2:	0d 92       	st	X+, r0
     7e4:	8a 95       	dec	r24
     7e6:	e1 f7       	brne	.-8      	; 0x7e0 <stateInitial+0x1a8>
			messageLength = functionPUBLISH(PUBLISH, flagsP, DATA, (sizeof(DATA)) - 1);
     7e8:	2d e0       	ldi	r18, 0x0D	; 13
     7ea:	30 e0       	ldi	r19, 0x00	; 0
     7ec:	ae 01       	movw	r20, r28
     7ee:	4f 5c       	subi	r20, 0xCF	; 207
     7f0:	5f 4f       	sbci	r21, 0xFF	; 255
     7f2:	60 e0       	ldi	r22, 0x00	; 0
     7f4:	81 e8       	ldi	r24, 0x81	; 129
     7f6:	98 e0       	ldi	r25, 0x08	; 8
     7f8:	e9 dd       	rcall	.-1070   	; 0x3cc <functionPUBLISH>
     7fa:	80 93 9b 04 	sts	0x049B, r24	; 0x80049b <messageLength>
     7fe:	90 93 9c 04 	sts	0x049C, r25	; 0x80049c <messageLength+0x1>
			transmit_sample_frame(PUBLISH, messageLength, 0); // Message sending
     802:	40 e0       	ldi	r20, 0x00	; 0
     804:	50 e0       	ldi	r21, 0x00	; 0
     806:	68 2f       	mov	r22, r24
     808:	81 e8       	ldi	r24, 0x81	; 129
     80a:	98 e0       	ldi	r25, 0x08	; 8
     80c:	25 d4       	rcall	.+2122   	; 0x1058 <transmit_sample_frame>
			messageLength = 0;
     80e:	10 92 9c 04 	sts	0x049C, r1	; 0x80049c <messageLength+0x1>
     812:	10 92 9b 04 	sts	0x049B, r1	; 0x80049b <messageLength>
			proc5Count = 1; // Indicates that this sequence is finished
     816:	81 e0       	ldi	r24, 0x01	; 1
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	90 93 96 04 	sts	0x0496, r25	; 0x800496 <proc5Count+0x1>
     81e:	80 93 95 04 	sts	0x0495, r24	; 0x800495 <proc5Count>
			controlLED(proc5Count);
     822:	dd de       	rcall	.-582    	; 0x5de <controlLED>
			// STATE CHANGE
			temporaryStateIndex = 0; // State change
     824:	10 92 a0 04 	sts	0x04A0, r1	; 0x8004a0 <temporaryStateIndex+0x1>
     828:	10 92 9f 04 	sts	0x049F, r1	; 0x80049f <temporaryStateIndex>
			stateControl = 4;
     82c:	84 e0       	ldi	r24, 0x04	; 4
     82e:	90 e0       	ldi	r25, 0x00	; 0
     830:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <stateControl+0x1>
     834:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <stateControl>
			enableTransmission = 12; // Proceed to send
			qos = 0;
		}
		// TR PUBLISH Prepare PUBLISH (QoS 0)
		else if (enableTransmission == 12 && qos == 0) // Proceed to transmit a WILLTOPICUPD as indicated by the variable value
		{
     838:	da c0       	rjmp	.+436    	; 0x9ee <stateInitial+0x3b6>
			// STATE CHANGE
			temporaryStateIndex = 0; // State change
			stateControl = 4;
		}
		// Preparing PUBLISH (QoS 1)
		else if (receivedPulses == 2)
     83a:	82 30       	cpi	r24, 0x02	; 2
     83c:	91 05       	cpc	r25, r1
     83e:	89 f4       	brne	.+34     	; 0x862 <stateInitial+0x22a>
		{
			receivedPulses = 0;
     840:	10 92 8e 04 	sts	0x048E, r1	; 0x80048e <receivedPulses+0x1>
     844:	10 92 8d 04 	sts	0x048D, r1	; 0x80048d <receivedPulses>
			transmit_sample_frame((uint8_t*)"|  publicationReady=1  ||       (QoS_1)        |", 48, 1);
     848:	41 e0       	ldi	r20, 0x01	; 1
     84a:	50 e0       	ldi	r21, 0x00	; 0
     84c:	60 e3       	ldi	r22, 0x30	; 48
     84e:	85 e6       	ldi	r24, 0x65	; 101
     850:	93 e0       	ldi	r25, 0x03	; 3
     852:	02 d4       	rcall	.+2052   	; 0x1058 <transmit_sample_frame>
			                               //|  publicationReady=1  ||       (QoS_0)        |
			jump = 2; // Move to use a delay
     854:	82 e0       	ldi	r24, 0x02	; 2
     856:	90 e0       	ldi	r25, 0x00	; 0
     858:	90 93 98 04 	sts	0x0498, r25	; 0x800498 <jump+0x1>
     85c:	80 93 97 04 	sts	0x0497, r24	; 0x800497 <jump>
     860:	c6 c0       	rjmp	.+396    	; 0x9ee <stateInitial+0x3b6>
		}
		// DELAY
		else if (jump == 2)
     862:	22 30       	cpi	r18, 0x02	; 2
     864:	31 05       	cpc	r19, r1
		{
			jump = 0; // Only one jump
     866:	b1 f4       	brne	.+44     	; 0x894 <stateInitial+0x25c>
     868:	10 92 98 04 	sts	0x0498, r1	; 0x800498 <jump+0x1>
     86c:	10 92 97 04 	sts	0x0497, r1	; 0x800497 <jump>
			delay_ms(400); // Delay time to appreciate the response to a reception
     870:	66 e5       	ldi	r22, 0x56	; 86
     872:	73 e2       	ldi	r23, 0x23	; 35
     874:	88 e0       	ldi	r24, 0x08	; 8
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	e1 dd       	rcall	.-1086   	; 0x43c <__portable_avr_delay_cycles>
			enableTransmission = 12; // Proceed to send
     87a:	8c e0       	ldi	r24, 0x0C	; 12
     87c:	90 e0       	ldi	r25, 0x00	; 0
     87e:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <enableTransmission+0x1>
     882:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <enableTransmission>
			qos = 1;
     886:	81 e0       	ldi	r24, 0x01	; 1
     888:	90 e0       	ldi	r25, 0x00	; 0
     88a:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <qos+0x1>
     88e:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <qos>
     892:	ad c0       	rjmp	.+346    	; 0x9ee <stateInitial+0x3b6>
		}
		// TR PUBLISH
		else if (enableTransmission == 12 && qos == 1) // Proceed to transmit a WILLTOPICUPD as indicated by the variable value
     894:	4c 30       	cpi	r20, 0x0C	; 12
     896:	51 05       	cpc	r21, r1
     898:	09 f0       	breq	.+2      	; 0x89c <stateInitial+0x264>
     89a:	3e c0       	rjmp	.+124    	; 0x918 <stateInitial+0x2e0>
     89c:	60 91 04 02 	lds	r22, 0x0204	; 0x800204 <qos>
     8a0:	70 91 05 02 	lds	r23, 0x0205	; 0x800205 <qos+0x1>
     8a4:	61 30       	cpi	r22, 0x01	; 1
     8a6:	71 05       	cpc	r23, r1
     8a8:	b9 f5       	brne	.+110    	; 0x918 <stateInitial+0x2e0>
		{
			enableTransmission = -1; // Transmission is disabled because only a PUBLISH message is needed
     8aa:	8f ef       	ldi	r24, 0xFF	; 255
     8ac:	9f ef       	ldi	r25, 0xFF	; 255
     8ae:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <enableTransmission+0x1>
     8b2:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <enableTransmission>
			qos = -1;
     8b6:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <qos+0x1>
     8ba:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <qos>
			uint8_t DATA[] = "Payload-QoS1"; uint8_t flagsP; flagsP = 0b00100000; //flagsP field check MQTT-SN documentation
     8be:	8d e0       	ldi	r24, 0x0D	; 13
     8c0:	e6 e0       	ldi	r30, 0x06	; 6
     8c2:	f4 e0       	ldi	r31, 0x04	; 4
     8c4:	de 01       	movw	r26, r28
     8c6:	d1 96       	adiw	r26, 0x31	; 49
     8c8:	01 90       	ld	r0, Z+
     8ca:	0d 92       	st	X+, r0
     8cc:	8a 95       	dec	r24
			messageLength = functionPUBLISH(PUBLISH, flagsP, DATA, (sizeof(DATA)) - 1);
     8ce:	e1 f7       	brne	.-8      	; 0x8c8 <stateInitial+0x290>
     8d0:	2c e0       	ldi	r18, 0x0C	; 12
     8d2:	30 e0       	ldi	r19, 0x00	; 0
     8d4:	ae 01       	movw	r20, r28
     8d6:	4f 5c       	subi	r20, 0xCF	; 207
     8d8:	5f 4f       	sbci	r21, 0xFF	; 255
     8da:	60 e2       	ldi	r22, 0x20	; 32
     8dc:	81 e8       	ldi	r24, 0x81	; 129
     8de:	98 e0       	ldi	r25, 0x08	; 8
     8e0:	75 dd       	rcall	.-1302   	; 0x3cc <functionPUBLISH>
     8e2:	80 93 9b 04 	sts	0x049B, r24	; 0x80049b <messageLength>
     8e6:	90 93 9c 04 	sts	0x049C, r25	; 0x80049c <messageLength+0x1>
			transmit_sample_frame(PUBLISH, messageLength, 0); // Message sending
     8ea:	40 e0       	ldi	r20, 0x00	; 0
     8ec:	50 e0       	ldi	r21, 0x00	; 0
     8ee:	68 2f       	mov	r22, r24
     8f0:	81 e8       	ldi	r24, 0x81	; 129
     8f2:	98 e0       	ldi	r25, 0x08	; 8
     8f4:	b1 d3       	rcall	.+1890   	; 0x1058 <transmit_sample_frame>
			messageLength = 0;
     8f6:	10 92 9c 04 	sts	0x049C, r1	; 0x80049c <messageLength+0x1>
     8fa:	10 92 9b 04 	sts	0x049B, r1	; 0x80049b <messageLength>
			// STATE CHANGE
			temporaryStateIndex = 1; // State change
     8fe:	81 e0       	ldi	r24, 0x01	; 1
     900:	90 e0       	ldi	r25, 0x00	; 0
     902:	90 93 a0 04 	sts	0x04A0, r25	; 0x8004a0 <temporaryStateIndex+0x1>
     906:	80 93 9f 04 	sts	0x049F, r24	; 0x80049f <temporaryStateIndex>
			stateControl = 4;
     90a:	84 e0       	ldi	r24, 0x04	; 4
     90c:	90 e0       	ldi	r25, 0x00	; 0
     90e:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <stateControl+0x1>
     912:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <stateControl>
		}
		// Preparing PUBLISH (QoS 2)
		else if (receivedPulses == 3)
     916:	6b c0       	rjmp	.+214    	; 0x9ee <stateInitial+0x3b6>
     918:	03 97       	sbiw	r24, 0x03	; 3
		{
			receivedPulses = 0;
     91a:	89 f4       	brne	.+34     	; 0x93e <stateInitial+0x306>
     91c:	10 92 8e 04 	sts	0x048E, r1	; 0x80048e <receivedPulses+0x1>
     920:	10 92 8d 04 	sts	0x048D, r1	; 0x80048d <receivedPulses>
			transmit_sample_frame((uint8_t*)"|  publicationReady=1  ||       (QoS_2)        |", 48, 1);
     924:	41 e0       	ldi	r20, 0x01	; 1
     926:	50 e0       	ldi	r21, 0x00	; 0
     928:	60 e3       	ldi	r22, 0x30	; 48
     92a:	86 e9       	ldi	r24, 0x96	; 150
     92c:	93 e0       	ldi	r25, 0x03	; 3
     92e:	94 d3       	rcall	.+1832   	; 0x1058 <transmit_sample_frame>
			                               //|  publicationReady=1  ||       (QoS_0)        |
			jump = 3; // Move to use a delay
     930:	83 e0       	ldi	r24, 0x03	; 3
     932:	90 e0       	ldi	r25, 0x00	; 0
     934:	90 93 98 04 	sts	0x0498, r25	; 0x800498 <jump+0x1>
     938:	80 93 97 04 	sts	0x0497, r24	; 0x800497 <jump>
		}
		// DELAY
		else if (jump == 3)
     93c:	58 c0       	rjmp	.+176    	; 0x9ee <stateInitial+0x3b6>
     93e:	23 30       	cpi	r18, 0x03	; 3
     940:	31 05       	cpc	r19, r1
		{
			jump = 0; // Only one jump
     942:	b1 f4       	brne	.+44     	; 0x970 <stateInitial+0x338>
     944:	10 92 98 04 	sts	0x0498, r1	; 0x800498 <jump+0x1>
     948:	10 92 97 04 	sts	0x0497, r1	; 0x800497 <jump>
			delay_ms(400); // Delay time to appreciate the response to a reception
     94c:	66 e5       	ldi	r22, 0x56	; 86
     94e:	73 e2       	ldi	r23, 0x23	; 35
     950:	88 e0       	ldi	r24, 0x08	; 8
     952:	90 e0       	ldi	r25, 0x00	; 0
     954:	73 dd       	rcall	.-1306   	; 0x43c <__portable_avr_delay_cycles>
			enableTransmission = 12; // Proceed to send
     956:	8c e0       	ldi	r24, 0x0C	; 12
     958:	90 e0       	ldi	r25, 0x00	; 0
     95a:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <enableTransmission+0x1>
     95e:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <enableTransmission>
			qos = 2;
     962:	82 e0       	ldi	r24, 0x02	; 2
     964:	90 e0       	ldi	r25, 0x00	; 0
     966:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <qos+0x1>
     96a:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <qos>
     96e:	3f c0       	rjmp	.+126    	; 0x9ee <stateInitial+0x3b6>
		}
		// TR PUBLISH
		else if (enableTransmission == 12 && qos == 2) // Proceed to transmit a WILLTOPICUPD as indicated by the variable value
     970:	4c 30       	cpi	r20, 0x0C	; 12
     972:	51 05       	cpc	r21, r1
     974:	e1 f5       	brne	.+120    	; 0x9ee <stateInitial+0x3b6>
     976:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <qos>
     97a:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <qos+0x1>
     97e:	02 97       	sbiw	r24, 0x02	; 2
     980:	b1 f5       	brne	.+108    	; 0x9ee <stateInitial+0x3b6>
		{
			enableTransmission = -1; // Transmission is disabled because only a PUBLISH message is needed
     982:	8f ef       	ldi	r24, 0xFF	; 255
     984:	9f ef       	ldi	r25, 0xFF	; 255
     986:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <enableTransmission+0x1>
     98a:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <enableTransmission>
			qos = -1;
     98e:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <qos+0x1>
     992:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <qos>
			uint8_t DATA[] = "Payload-QoS2"; uint8_t flagsP; flagsP = 0b01000000; //flagsP field check MQTT-SN documentation
     996:	8d e0       	ldi	r24, 0x0D	; 13
     998:	e3 e1       	ldi	r30, 0x13	; 19
     99a:	f4 e0       	ldi	r31, 0x04	; 4
     99c:	de 01       	movw	r26, r28
     99e:	d1 96       	adiw	r26, 0x31	; 49
     9a0:	01 90       	ld	r0, Z+
     9a2:	0d 92       	st	X+, r0
     9a4:	8a 95       	dec	r24
			messageLength = functionPUBLISH(PUBLISH, flagsP, DATA, (sizeof(DATA)) - 1);
     9a6:	e1 f7       	brne	.-8      	; 0x9a0 <stateInitial+0x368>
     9a8:	2c e0       	ldi	r18, 0x0C	; 12
     9aa:	30 e0       	ldi	r19, 0x00	; 0
     9ac:	ae 01       	movw	r20, r28
     9ae:	4f 5c       	subi	r20, 0xCF	; 207
     9b0:	5f 4f       	sbci	r21, 0xFF	; 255
     9b2:	60 e4       	ldi	r22, 0x40	; 64
     9b4:	81 e8       	ldi	r24, 0x81	; 129
     9b6:	98 e0       	ldi	r25, 0x08	; 8
     9b8:	09 dd       	rcall	.-1518   	; 0x3cc <functionPUBLISH>
     9ba:	80 93 9b 04 	sts	0x049B, r24	; 0x80049b <messageLength>
     9be:	90 93 9c 04 	sts	0x049C, r25	; 0x80049c <messageLength+0x1>
			transmit_sample_frame(PUBLISH, messageLength, 0); // Message sending
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	68 2f       	mov	r22, r24
     9c8:	81 e8       	ldi	r24, 0x81	; 129
     9ca:	98 e0       	ldi	r25, 0x08	; 8
     9cc:	45 d3       	rcall	.+1674   	; 0x1058 <transmit_sample_frame>
			messageLength = 0;
     9ce:	10 92 9c 04 	sts	0x049C, r1	; 0x80049c <messageLength+0x1>
     9d2:	10 92 9b 04 	sts	0x049B, r1	; 0x80049b <messageLength>
			// STATE CHANGE
			temporaryStateIndex = 1; // State change
     9d6:	81 e0       	ldi	r24, 0x01	; 1
     9d8:	90 e0       	ldi	r25, 0x00	; 0
     9da:	90 93 a0 04 	sts	0x04A0, r25	; 0x8004a0 <temporaryStateIndex+0x1>
     9de:	80 93 9f 04 	sts	0x049F, r24	; 0x80049f <temporaryStateIndex>
			stateControl = 4;
     9e2:	84 e0       	ldi	r24, 0x04	; 4
     9e4:	90 e0       	ldi	r25, 0x00	; 0
     9e6:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <stateControl+0x1>
     9ea:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <stateControl>
		}
		// RX PUBACK
		if (successfulReceptionControl == 13) // The condition is activated when a PUBACK is received
     9ee:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <successfulReceptionControl>
     9f2:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <successfulReceptionControl+0x1>
     9f6:	0d 97       	sbiw	r24, 0x0d	; 13
     9f8:	69 f4       	brne	.+26     	; 0xa14 <stateInitial+0x3dc>
		{
			successfulReceptionControl = -1; // Received the required message, no others are accepted
     9fa:	8f ef       	ldi	r24, 0xFF	; 255
     9fc:	9f ef       	ldi	r25, 0xFF	; 255
     9fe:	90 93 0d 02 	sts	0x020D, r25	; 0x80020d <successfulReceptionControl+0x1>
     a02:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <successfulReceptionControl>
			comparatorACK = 1; // Check the returnCode field
     a06:	81 e0       	ldi	r24, 0x01	; 1
     a08:	90 e0       	ldi	r25, 0x00	; 0
     a0a:	90 93 92 04 	sts	0x0492, r25	; 0x800492 <comparatorACK+0x1>
     a0e:	80 93 91 04 	sts	0x0491, r24	; 0x800491 <comparatorACK>
     a12:	5f c0       	rjmp	.+190    	; 0xad2 <stateInitial+0x49a>
		}
		else if (comparatorACK == 1 && receivedFrame.MQTT_SN_message[6] == 0x02)
     a14:	80 91 91 04 	lds	r24, 0x0491	; 0x800491 <comparatorACK>
     a18:	90 91 92 04 	lds	r25, 0x0492	; 0x800492 <comparatorACK+0x1>
     a1c:	01 97       	sbiw	r24, 0x01	; 1
     a1e:	09 f0       	breq	.+2      	; 0xa22 <stateInitial+0x3ea>
     a20:	58 c0       	rjmp	.+176    	; 0xad2 <stateInitial+0x49a>
     a22:	80 91 27 07 	lds	r24, 0x0727	; 0x800727 <receivedFrame+0x10>
     a26:	82 30       	cpi	r24, 0x02	; 2
		{
			comparatorACK = 0;
     a28:	b1 f4       	brne	.+44     	; 0xa56 <stateInitial+0x41e>
     a2a:	10 92 92 04 	sts	0x0492, r1	; 0x800492 <comparatorACK+0x1>
     a2e:	10 92 91 04 	sts	0x0491, r1	; 0x800491 <comparatorACK>
			iniRegister = 1; // Indicates that this sequence is finished
     a32:	81 e0       	ldi	r24, 0x01	; 1
     a34:	90 e0       	ldi	r25, 0x00	; 0
     a36:	90 93 94 04 	sts	0x0494, r25	; 0x800494 <iniRegister+0x1>
     a3a:	80 93 93 04 	sts	0x0493, r24	; 0x800493 <iniRegister>
			controlAllLEDs(iniRegister);
     a3e:	f0 dd       	rcall	.-1056   	; 0x620 <controlAllLEDs>
			// STATE CHANGE
			temporaryStateIndex = 0; // State change
     a40:	10 92 a0 04 	sts	0x04A0, r1	; 0x8004a0 <temporaryStateIndex+0x1>
     a44:	10 92 9f 04 	sts	0x049F, r1	; 0x80049f <temporaryStateIndex>
			stateControl = 4;
     a48:	84 e0       	ldi	r24, 0x04	; 4
     a4a:	90 e0       	ldi	r25, 0x00	; 0
     a4c:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <stateControl+0x1>
     a50:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <stateControl>
     a54:	3e c0       	rjmp	.+124    	; 0xad2 <stateInitial+0x49a>
		}
		else if (comparatorACK == 1 && receivedFrame.MQTT_SN_message[6] != 0x02)
		{
			comparatorACK = 0;
     a56:	10 92 92 04 	sts	0x0492, r1	; 0x800492 <comparatorACK+0x1>
     a5a:	10 92 91 04 	sts	0x0491, r1	; 0x800491 <comparatorACK>
			// STATE CHANGE
			temporaryStateIndex = 0; // State change
     a5e:	10 92 a0 04 	sts	0x04A0, r1	; 0x8004a0 <temporaryStateIndex+0x1>
     a62:	10 92 9f 04 	sts	0x049F, r1	; 0x80049f <temporaryStateIndex>
			stateControl = 4;
     a66:	84 e0       	ldi	r24, 0x04	; 4
     a68:	90 e0       	ldi	r25, 0x00	; 0
     a6a:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <stateControl+0x1>
     a6e:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <stateControl>
		}
	}
	else if (stateControl == 4)
     a72:	2f c0       	rjmp	.+94     	; 0xad2 <stateInitial+0x49a>
     a74:	84 30       	cpi	r24, 0x04	; 4
     a76:	91 05       	cpc	r25, r1
	{
		stateControl = 5;
     a78:	61 f4       	brne	.+24     	; 0xa92 <stateInitial+0x45a>
     a7a:	85 e0       	ldi	r24, 0x05	; 5
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <stateControl+0x1>
		delay_ms(1500); // Wait time to appreciate the end of state
     a82:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <stateControl>
     a86:	61 e8       	ldi	r22, 0x81	; 129
     a88:	74 e8       	ldi	r23, 0x84	; 132
     a8a:	8e e1       	ldi	r24, 0x1E	; 30
     a8c:	90 e0       	ldi	r25, 0x00	; 0
     a8e:	d6 dc       	rcall	.-1620   	; 0x43c <__portable_avr_delay_cycles>
	}
	else if (stateControl == 5)
     a90:	20 c0       	rjmp	.+64     	; 0xad2 <stateInitial+0x49a>
     a92:	05 97       	sbiw	r24, 0x05	; 5
	{
		stateControl = 0; // This control variable is set to zero because it is only used in the initial state.
     a94:	f1 f4       	brne	.+60     	; 0xad2 <stateInitial+0x49a>
     a96:	10 92 0b 02 	sts	0x020B, r1	; 0x80020b <stateControl+0x1>
     a9a:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <stateControl>
		transmit_sample_frame((uint8_t*)"|        CL_END        ||------ CL S-00 -------|", 48, 1); // State indicator
     a9e:	41 e0       	ldi	r20, 0x01	; 1
     aa0:	50 e0       	ldi	r21, 0x00	; 0
     aa2:	60 e3       	ldi	r22, 0x30	; 48
     aa4:	87 ec       	ldi	r24, 0xC7	; 199
     aa6:	93 e0       	ldi	r25, 0x03	; 3
     aa8:	d7 d2       	rcall	.+1454   	; 0x1058 <transmit_sample_frame>
		                               //|        CL_END        ||------ CL S-04 -------|
		stateControl = 1; // This control variable is set to one so that the following states can start their operation.
     aaa:	81 e0       	ldi	r24, 0x01	; 1
     aac:	90 e0       	ldi	r25, 0x00	; 0
     aae:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <stateControl+0x1>
     ab2:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <stateControl>
		stateIndex = temporaryStateIndex; // State change
     ab6:	80 91 9f 04 	lds	r24, 0x049F	; 0x80049f <temporaryStateIndex>
     aba:	90 91 a0 04 	lds	r25, 0x04A0	; 0x8004a0 <temporaryStateIndex+0x1>
     abe:	90 93 a2 04 	sts	0x04A2, r25	; 0x8004a2 <stateIndex+0x1>
     ac2:	80 93 a1 04 	sts	0x04A1, r24	; 0x8004a1 <stateIndex>
		temporaryStateIndex = -1; // Set to -1 to use it later.
     ac6:	8f ef       	ldi	r24, 0xFF	; 255
     ac8:	9f ef       	ldi	r25, 0xFF	; 255
     aca:	90 93 a0 04 	sts	0x04A0, r25	; 0x8004a0 <temporaryStateIndex+0x1>
     ace:	80 93 9f 04 	sts	0x049F, r24	; 0x80049f <temporaryStateIndex>
	}
}
     ad2:	ee 96       	adiw	r28, 0x3e	; 62
     ad4:	0f b6       	in	r0, 0x3f	; 63
     ad6:	f8 94       	cli
     ad8:	de bf       	out	0x3e, r29	; 62
     ada:	0f be       	out	0x3f, r0	; 63
     adc:	cd bf       	out	0x3d, r28	; 61
     ade:	df 91       	pop	r29
     ae0:	cf 91       	pop	r28
     ae2:	08 95       	ret

00000ae4 <state_1>:
// ****************************************************************************************************************************** //
void state_1(void) // RX_ACK S1
{
     ae4:	cf 93       	push	r28
     ae6:	df 93       	push	r29
     ae8:	cd b7       	in	r28, 0x3d	; 61
     aea:	de b7       	in	r29, 0x3e	; 62
     aec:	e0 97       	sbiw	r28, 0x30	; 48
     aee:	0f b6       	in	r0, 0x3f	; 63
     af0:	f8 94       	cli
     af2:	de bf       	out	0x3e, r29	; 62
     af4:	0f be       	out	0x3f, r0	; 63
     af6:	cd bf       	out	0x3d, r28	; 61
	uint8_t State[48] = "|========RX_ACK========||       CL S-01        |";
     af8:	80 e3       	ldi	r24, 0x30	; 48
     afa:	e0 e7       	ldi	r30, 0x70	; 112
     afc:	f2 e0       	ldi	r31, 0x02	; 2
     afe:	de 01       	movw	r26, r28
     b00:	11 96       	adiw	r26, 0x01	; 1
     b02:	01 90       	ld	r0, Z+
     b04:	0d 92       	st	X+, r0
     b06:	8a 95       	dec	r24
     b08:	e1 f7       	brne	.-8      	; 0xb02 <state_1+0x1e>
	                   //|        CL_END        ||------ CL S-04 -------|

	if (stateControl == 1)
     b0a:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <stateControl>
     b0e:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <stateControl+0x1>
     b12:	81 30       	cpi	r24, 0x01	; 1
     b14:	91 05       	cpc	r25, r1
     b16:	61 f4       	brne	.+24     	; 0xb30 <state_1+0x4c>
	{
		stateControl = 2;
     b18:	82 e0       	ldi	r24, 0x02	; 2
     b1a:	90 e0       	ldi	r25, 0x00	; 0
     b1c:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <stateControl+0x1>
     b20:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <stateControl>
		delay_ms(1500); // Wait time to appreciate the start of state
     b24:	61 e8       	ldi	r22, 0x81	; 129
     b26:	74 e8       	ldi	r23, 0x84	; 132
     b28:	8e e1       	ldi	r24, 0x1E	; 30
     b2a:	90 e0       	ldi	r25, 0x00	; 0
     b2c:	87 dc       	rcall	.-1778   	; 0x43c <__portable_avr_delay_cycles>
     b2e:	18 c1       	rjmp	.+560    	; 0xd60 <state_1+0x27c>
	}
	else if (stateControl == 2)
     b30:	82 30       	cpi	r24, 0x02	; 2
     b32:	91 05       	cpc	r25, r1
     b34:	99 f4       	brne	.+38     	; 0xb5c <state_1+0x78>
	{
		stateControl = 3;
     b36:	83 e0       	ldi	r24, 0x03	; 3
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <stateControl+0x1>
     b3e:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <stateControl>
		transmit_sample_frame(State, 48, 1); // State indicator RX_Connect
     b42:	41 e0       	ldi	r20, 0x01	; 1
     b44:	50 e0       	ldi	r21, 0x00	; 0
     b46:	60 e3       	ldi	r22, 0x30	; 48
     b48:	ce 01       	movw	r24, r28
     b4a:	01 96       	adiw	r24, 0x01	; 1
     b4c:	85 d2       	rcall	.+1290   	; 0x1058 <transmit_sample_frame>
		enableReception = 1; // Enable message receiving function
     b4e:	81 e0       	ldi	r24, 0x01	; 1
     b50:	90 e0       	ldi	r25, 0x00	; 0
     b52:	90 93 9e 04 	sts	0x049E, r25	; 0x80049e <enableReception+0x1>
     b56:	80 93 9d 04 	sts	0x049D, r24	; 0x80049d <enableReception>
     b5a:	02 c1       	rjmp	.+516    	; 0xd60 <state_1+0x27c>
	}
	else if (stateControl == 3)
     b5c:	83 30       	cpi	r24, 0x03	; 3
     b5e:	91 05       	cpc	r25, r1
     b60:	09 f0       	breq	.+2      	; 0xb64 <state_1+0x80>
     b62:	cf c0       	rjmp	.+414    	; 0xd02 <state_1+0x21e>
	{
		// The node will remain in this state until PUBACK or PUBREC is received
		/////////////////////////////////////////////////////////////////////////////////////////////////////////////
		// RX PUBACK
		if (successfulReceptionControl == 13) // The condition is activated when a PUBACK is received
     b64:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <successfulReceptionControl>
     b68:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <successfulReceptionControl+0x1>
     b6c:	0d 97       	sbiw	r24, 0x0d	; 13
     b6e:	69 f4       	brne	.+26     	; 0xb8a <state_1+0xa6>
		{
			successfulReceptionControl = -1; // Received the required message, no others are accepted
     b70:	8f ef       	ldi	r24, 0xFF	; 255
     b72:	9f ef       	ldi	r25, 0xFF	; 255
     b74:	90 93 0d 02 	sts	0x020D, r25	; 0x80020d <successfulReceptionControl+0x1>
     b78:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <successfulReceptionControl>
			comparatorACK = 1; // Add delay for transmission
     b7c:	81 e0       	ldi	r24, 0x01	; 1
     b7e:	90 e0       	ldi	r25, 0x00	; 0
     b80:	90 93 92 04 	sts	0x0492, r25	; 0x800492 <comparatorACK+0x1>
     b84:	80 93 91 04 	sts	0x0491, r24	; 0x800491 <comparatorACK>
     b88:	7b c0       	rjmp	.+246    	; 0xc80 <state_1+0x19c>
		}
		// Comparador PUBACK ACCEPTED
		/////////////////////////////////////////////////////////////////////////////////////////////////////////////
		else if (comparatorACK == 1 && receivedFrame.MQTT_SN_message[6] == 0x00)
     b8a:	80 91 91 04 	lds	r24, 0x0491	; 0x800491 <comparatorACK>
     b8e:	90 91 92 04 	lds	r25, 0x0492	; 0x800492 <comparatorACK+0x1>
     b92:	01 97       	sbiw	r24, 0x01	; 1
     b94:	09 f0       	breq	.+2      	; 0xb98 <state_1+0xb4>
     b96:	61 c0       	rjmp	.+194    	; 0xc5a <state_1+0x176>
     b98:	80 91 27 07 	lds	r24, 0x0727	; 0x800727 <receivedFrame+0x10>
     b9c:	81 11       	cpse	r24, r1
     b9e:	16 c0       	rjmp	.+44     	; 0xbcc <state_1+0xe8>
		{
			comparatorACK = 0;
     ba0:	10 92 92 04 	sts	0x0492, r1	; 0x800492 <comparatorACK+0x1>
     ba4:	10 92 91 04 	sts	0x0491, r1	; 0x800491 <comparatorACK>
			proc5Count = 2; // Indicates how the procedure ended
     ba8:	82 e0       	ldi	r24, 0x02	; 2
     baa:	90 e0       	ldi	r25, 0x00	; 0
     bac:	90 93 96 04 	sts	0x0496, r25	; 0x800496 <proc5Count+0x1>
     bb0:	80 93 95 04 	sts	0x0495, r24	; 0x800495 <proc5Count>
			controlAllLEDs(proc5Count); //
     bb4:	35 dd       	rcall	.-1430   	; 0x620 <controlAllLEDs>
			// STATE CHANGE
			temporaryStateIndex = 0; // State change
     bb6:	10 92 a0 04 	sts	0x04A0, r1	; 0x8004a0 <temporaryStateIndex+0x1>
     bba:	10 92 9f 04 	sts	0x049F, r1	; 0x80049f <temporaryStateIndex>
			stateControl = 4;
     bbe:	84 e0       	ldi	r24, 0x04	; 4
     bc0:	90 e0       	ldi	r25, 0x00	; 0
     bc2:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <stateControl+0x1>
     bc6:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <stateControl>
     bca:	47 c0       	rjmp	.+142    	; 0xc5a <state_1+0x176>
		}
		// Comparador PUBACK invalid topicID
		/////////////////////////////////////////////////////////////////////////////////////////////////////////////
		else if (comparatorACK == 1 && receivedFrame.MQTT_SN_message[6] == 0x02)
     bcc:	82 30       	cpi	r24, 0x02	; 2
     bce:	b1 f4       	brne	.+44     	; 0xbfc <state_1+0x118>
		{
			comparatorACK = 0;
     bd0:	10 92 92 04 	sts	0x0492, r1	; 0x800492 <comparatorACK+0x1>
     bd4:	10 92 91 04 	sts	0x0491, r1	; 0x800491 <comparatorACK>
			iniRegister = 1;
     bd8:	81 e0       	ldi	r24, 0x01	; 1
     bda:	90 e0       	ldi	r25, 0x00	; 0
     bdc:	90 93 94 04 	sts	0x0494, r25	; 0x800494 <iniRegister+0x1>
     be0:	80 93 93 04 	sts	0x0493, r24	; 0x800493 <iniRegister>
			controlAllLEDs(iniRegister); // Indicates how the procedure ended
     be4:	1d dd       	rcall	.-1478   	; 0x620 <controlAllLEDs>
			// STATE CHANGE
			temporaryStateIndex = 0; // State change
     be6:	10 92 a0 04 	sts	0x04A0, r1	; 0x8004a0 <temporaryStateIndex+0x1>
     bea:	10 92 9f 04 	sts	0x049F, r1	; 0x80049f <temporaryStateIndex>
			stateControl = 4;
     bee:	84 e0       	ldi	r24, 0x04	; 4
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <stateControl+0x1>
     bf6:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <stateControl>
     bfa:	2f c0       	rjmp	.+94     	; 0xc5a <state_1+0x176>
		}
		// Comparador PUBACK not supported
		/////////////////////////////////////////////////////////////////////////////////////////////////////////////
		else if (comparatorACK == 1 && receivedFrame.MQTT_SN_message[6] == 0x03)
     bfc:	83 30       	cpi	r24, 0x03	; 3
     bfe:	91 f4       	brne	.+36     	; 0xc24 <state_1+0x140>
		{
			comparatorACK = 0;
     c00:	10 92 92 04 	sts	0x0492, r1	; 0x800492 <comparatorACK+0x1>
     c04:	10 92 91 04 	sts	0x0491, r1	; 0x800491 <comparatorACK>
			controlAllLEDs(0); // Indicates how the procedure ended
     c08:	80 e0       	ldi	r24, 0x00	; 0
     c0a:	90 e0       	ldi	r25, 0x00	; 0
     c0c:	09 dd       	rcall	.-1518   	; 0x620 <controlAllLEDs>
			// STATE CHANGE
			temporaryStateIndex = 0; // State change
     c0e:	10 92 a0 04 	sts	0x04A0, r1	; 0x8004a0 <temporaryStateIndex+0x1>
     c12:	10 92 9f 04 	sts	0x049F, r1	; 0x80049f <temporaryStateIndex>
			stateControl = 4;
     c16:	84 e0       	ldi	r24, 0x04	; 4
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <stateControl+0x1>
     c1e:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <stateControl>
     c22:	1b c0       	rjmp	.+54     	; 0xc5a <state_1+0x176>
		}
		// Comparador PUBACK congestion
		/////////////////////////////////////////////////////////////////////////////////////////////////////////////
		else if (comparatorACK == 1 && receivedFrame.MQTT_SN_message[6] == 0x01)
     c24:	81 30       	cpi	r24, 0x01	; 1
     c26:	c9 f4       	brne	.+50     	; 0xc5a <state_1+0x176>
		{
			comparatorACK = 0;
     c28:	10 92 92 04 	sts	0x0492, r1	; 0x800492 <comparatorACK+0x1>
     c2c:	10 92 91 04 	sts	0x0491, r1	; 0x800491 <comparatorACK>
			// SET TIMER TWAIT
			timerDurationTime = twait; // The timer has a duration of 10 seconds for testing
     c30:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <twait>
     c34:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <twait+0x1>
     c38:	90 93 a4 04 	sts	0x04A4, r25	; 0x8004a4 <timerDurationTime+0x1>
     c3c:	80 93 a3 04 	sts	0x04A3, r24	; 0x8004a3 <timerDurationTime>
			start_timer1(); // The timer starts its operation
     c40:	4c d1       	rcall	.+664    	; 0xeda <start_timer1>
			// STATE CHANGE
			temporaryStateIndex = 3; // State change
     c42:	83 e0       	ldi	r24, 0x03	; 3
     c44:	90 e0       	ldi	r25, 0x00	; 0
     c46:	90 93 a0 04 	sts	0x04A0, r25	; 0x8004a0 <temporaryStateIndex+0x1>
     c4a:	80 93 9f 04 	sts	0x049F, r24	; 0x80049f <temporaryStateIndex>
			stateControl = 4;
     c4e:	84 e0       	ldi	r24, 0x04	; 4
     c50:	90 e0       	ldi	r25, 0x00	; 0
     c52:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <stateControl+0x1>
     c56:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <stateControl>
		}
		// RX PUBREC
		if (successfulReceptionControl == 15) // The condition is activated when a PUBREC is received
     c5a:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <successfulReceptionControl>
     c5e:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <successfulReceptionControl+0x1>
     c62:	0f 97       	sbiw	r24, 0x0f	; 15
     c64:	69 f4       	brne	.+26     	; 0xc80 <state_1+0x19c>
		{
			successfulReceptionControl = -1; // Received the required message, no others are accepted
     c66:	8f ef       	ldi	r24, 0xFF	; 255
     c68:	9f ef       	ldi	r25, 0xFF	; 255
     c6a:	90 93 0d 02 	sts	0x020D, r25	; 0x80020d <successfulReceptionControl+0x1>
     c6e:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <successfulReceptionControl>
			jump = 1; // Add delay for transmission
     c72:	81 e0       	ldi	r24, 0x01	; 1
     c74:	90 e0       	ldi	r25, 0x00	; 0
     c76:	90 93 98 04 	sts	0x0498, r25	; 0x800498 <jump+0x1>
     c7a:	80 93 97 04 	sts	0x0497, r24	; 0x800497 <jump>
     c7e:	70 c0       	rjmp	.+224    	; 0xd60 <state_1+0x27c>
		}
		else if (jump == 1)
     c80:	80 91 97 04 	lds	r24, 0x0497	; 0x800497 <jump>
     c84:	90 91 98 04 	lds	r25, 0x0498	; 0x800498 <jump+0x1>
     c88:	01 97       	sbiw	r24, 0x01	; 1
     c8a:	81 f4       	brne	.+32     	; 0xcac <state_1+0x1c8>
		{
			jump = 0;
     c8c:	10 92 98 04 	sts	0x0498, r1	; 0x800498 <jump+0x1>
     c90:	10 92 97 04 	sts	0x0497, r1	; 0x800497 <jump>
			delay_ms(4000); // Delay time to appreciate the response to a reception
     c94:	66 e5       	ldi	r22, 0x56	; 86
     c96:	71 e6       	ldi	r23, 0x61	; 97
     c98:	81 e5       	ldi	r24, 0x51	; 81
     c9a:	90 e0       	ldi	r25, 0x00	; 0
     c9c:	cf db       	rcall	.-2146   	; 0x43c <__portable_avr_delay_cycles>
			enableTransmission = 16; // Proceed to send PUBREL
     c9e:	80 e1       	ldi	r24, 0x10	; 16
     ca0:	90 e0       	ldi	r25, 0x00	; 0
     ca2:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <enableTransmission+0x1>
     ca6:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <enableTransmission>
     caa:	5a c0       	rjmp	.+180    	; 0xd60 <state_1+0x27c>
		}
		else if (enableTransmission == 16) // Proceed to transmit a PUBREL as indicated by the variable value
     cac:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <enableTransmission>
     cb0:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <enableTransmission+0x1>
     cb4:	40 97       	sbiw	r24, 0x10	; 16
     cb6:	09 f0       	breq	.+2      	; 0xcba <state_1+0x1d6>
     cb8:	53 c0       	rjmp	.+166    	; 0xd60 <state_1+0x27c>
		{
			enableTransmission = -1; // Transmission is disabled because only a WILLTOPICREQ message is needed
     cba:	8f ef       	ldi	r24, 0xFF	; 255
     cbc:	9f ef       	ldi	r25, 0xFF	; 255
     cbe:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <enableTransmission+0x1>
     cc2:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <enableTransmission>
			messageLength = functionPUBREL(PUBREL); // Invocation of the function that creates the message to be sent, returns the message length
     cc6:	85 ed       	ldi	r24, 0xD5	; 213
     cc8:	97 e0       	ldi	r25, 0x07	; 7
     cca:	a6 db       	rcall	.-2228   	; 0x418 <functionPUBREL>
     ccc:	80 93 9b 04 	sts	0x049B, r24	; 0x80049b <messageLength>
     cd0:	90 93 9c 04 	sts	0x049C, r25	; 0x80049c <messageLength+0x1>
			transmit_sample_frame(PUBREL, messageLength, 0); // Message sending
     cd4:	40 e0       	ldi	r20, 0x00	; 0
     cd6:	50 e0       	ldi	r21, 0x00	; 0
     cd8:	68 2f       	mov	r22, r24
     cda:	85 ed       	ldi	r24, 0xD5	; 213
     cdc:	97 e0       	ldi	r25, 0x07	; 7
     cde:	bc d1       	rcall	.+888    	; 0x1058 <transmit_sample_frame>
			messageLength = 0;
     ce0:	10 92 9c 04 	sts	0x049C, r1	; 0x80049c <messageLength+0x1>
     ce4:	10 92 9b 04 	sts	0x049B, r1	; 0x80049b <messageLength>
			// STATE CHANGE
			temporaryStateIndex = 2; // State change
     ce8:	82 e0       	ldi	r24, 0x02	; 2
     cea:	90 e0       	ldi	r25, 0x00	; 0
     cec:	90 93 a0 04 	sts	0x04A0, r25	; 0x8004a0 <temporaryStateIndex+0x1>
     cf0:	80 93 9f 04 	sts	0x049F, r24	; 0x80049f <temporaryStateIndex>
			stateControl = 4;
     cf4:	84 e0       	ldi	r24, 0x04	; 4
     cf6:	90 e0       	ldi	r25, 0x00	; 0
     cf8:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <stateControl+0x1>
     cfc:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <stateControl>
     d00:	2f c0       	rjmp	.+94     	; 0xd60 <state_1+0x27c>
		}
	}
	else if (stateControl == 4)
     d02:	84 30       	cpi	r24, 0x04	; 4
     d04:	91 05       	cpc	r25, r1
     d06:	61 f4       	brne	.+24     	; 0xd20 <state_1+0x23c>
	{
		stateControl = 5;
     d08:	85 e0       	ldi	r24, 0x05	; 5
     d0a:	90 e0       	ldi	r25, 0x00	; 0
     d0c:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <stateControl+0x1>
     d10:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <stateControl>
		delay_ms(1500); // Wait time to appreciate the end of state
     d14:	61 e8       	ldi	r22, 0x81	; 129
     d16:	74 e8       	ldi	r23, 0x84	; 132
     d18:	8e e1       	ldi	r24, 0x1E	; 30
     d1a:	90 e0       	ldi	r25, 0x00	; 0
     d1c:	8f db       	rcall	.-2274   	; 0x43c <__portable_avr_delay_cycles>
     d1e:	20 c0       	rjmp	.+64     	; 0xd60 <state_1+0x27c>
	}
	else if (stateControl == 5)
     d20:	05 97       	sbiw	r24, 0x05	; 5
	{
		stateControl = 0; // This control variable is set to zero because it is only used in the initial state.
     d22:	f1 f4       	brne	.+60     	; 0xd60 <state_1+0x27c>
     d24:	10 92 0b 02 	sts	0x020B, r1	; 0x80020b <stateControl+0x1>
     d28:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <stateControl>
		transmit_sample_frame((uint8_t*)"|        CL_END        ||------ CL S-01 -------|", 48, 1); // State indicator
     d2c:	41 e0       	ldi	r20, 0x01	; 1
     d2e:	50 e0       	ldi	r21, 0x00	; 0
     d30:	60 e3       	ldi	r22, 0x30	; 48
     d32:	80 e2       	ldi	r24, 0x20	; 32
     d34:	94 e0       	ldi	r25, 0x04	; 4
     d36:	90 d1       	rcall	.+800    	; 0x1058 <transmit_sample_frame>
		                               //|        CL_END        ||------ CL S-04 -------|
		stateControl = 1; // This control variable is set to one so that the following states can start their operation.
     d38:	81 e0       	ldi	r24, 0x01	; 1
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <stateControl+0x1>
     d40:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <stateControl>
		stateIndex = temporaryStateIndex; // State change
     d44:	80 91 9f 04 	lds	r24, 0x049F	; 0x80049f <temporaryStateIndex>
     d48:	90 91 a0 04 	lds	r25, 0x04A0	; 0x8004a0 <temporaryStateIndex+0x1>
     d4c:	90 93 a2 04 	sts	0x04A2, r25	; 0x8004a2 <stateIndex+0x1>
     d50:	80 93 a1 04 	sts	0x04A1, r24	; 0x8004a1 <stateIndex>
		temporaryStateIndex = -1; // Set to -1 to use it later.
     d54:	8f ef       	ldi	r24, 0xFF	; 255
     d56:	9f ef       	ldi	r25, 0xFF	; 255
     d58:	90 93 a0 04 	sts	0x04A0, r25	; 0x8004a0 <temporaryStateIndex+0x1>
     d5c:	80 93 9f 04 	sts	0x049F, r24	; 0x80049f <temporaryStateIndex>
	}
}
     d60:	e0 96       	adiw	r28, 0x30	; 48
     d62:	0f b6       	in	r0, 0x3f	; 63
     d64:	f8 94       	cli
     d66:	de bf       	out	0x3e, r29	; 62
     d68:	0f be       	out	0x3f, r0	; 63
     d6a:	cd bf       	out	0x3d, r28	; 61
     d6c:	df 91       	pop	r29
     d6e:	cf 91       	pop	r28
     d70:	08 95       	ret

00000d72 <state_2>:
// ****************************************************************************************************************************** //
void state_2(void) // RX_PUBCOMP STATE S2
{
     d72:	cf 93       	push	r28
     d74:	df 93       	push	r29
     d76:	cd b7       	in	r28, 0x3d	; 61
     d78:	de b7       	in	r29, 0x3e	; 62
     d7a:	e0 97       	sbiw	r28, 0x30	; 48
     d7c:	0f b6       	in	r0, 0x3f	; 63
     d7e:	f8 94       	cli
     d80:	de bf       	out	0x3e, r29	; 62
     d82:	0f be       	out	0x3f, r0	; 63
     d84:	cd bf       	out	0x3d, r28	; 61
	uint8_t State[48] = "|======RX_PUBCOMP======||       CL S-02        |";
     d86:	80 e3       	ldi	r24, 0x30	; 48
     d88:	e1 ea       	ldi	r30, 0xA1	; 161
     d8a:	f2 e0       	ldi	r31, 0x02	; 2
     d8c:	de 01       	movw	r26, r28
     d8e:	11 96       	adiw	r26, 0x01	; 1
     d90:	01 90       	ld	r0, Z+
     d92:	0d 92       	st	X+, r0
     d94:	8a 95       	dec	r24
     d96:	e1 f7       	brne	.-8      	; 0xd90 <state_2+0x1e>
	                   //|        CL_END        ||------ CL S-04 -------|

	if (stateControl == 1)
     d98:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <stateControl>
     d9c:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <stateControl+0x1>
     da0:	81 30       	cpi	r24, 0x01	; 1
     da2:	91 05       	cpc	r25, r1
     da4:	61 f4       	brne	.+24     	; 0xdbe <state_2+0x4c>
	{
		stateControl = 2;
     da6:	82 e0       	ldi	r24, 0x02	; 2
     da8:	90 e0       	ldi	r25, 0x00	; 0
     daa:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <stateControl+0x1>
     dae:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <stateControl>
		delay_ms(1500); // Wait time to appreciate the start of state
     db2:	61 e8       	ldi	r22, 0x81	; 129
     db4:	74 e8       	ldi	r23, 0x84	; 132
     db6:	8e e1       	ldi	r24, 0x1E	; 30
     db8:	90 e0       	ldi	r25, 0x00	; 0
     dba:	40 db       	rcall	.-2432   	; 0x43c <__portable_avr_delay_cycles>
     dbc:	67 c0       	rjmp	.+206    	; 0xe8c <state_2+0x11a>
	}
	else if (stateControl == 2)
     dbe:	82 30       	cpi	r24, 0x02	; 2
     dc0:	91 05       	cpc	r25, r1
     dc2:	99 f4       	brne	.+38     	; 0xdea <state_2+0x78>
	{
		stateControl = 3;
     dc4:	83 e0       	ldi	r24, 0x03	; 3
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <stateControl+0x1>
     dcc:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <stateControl>
		transmit_sample_frame(State, 48, 1); // State indicator RX_Connect
     dd0:	41 e0       	ldi	r20, 0x01	; 1
     dd2:	50 e0       	ldi	r21, 0x00	; 0
     dd4:	60 e3       	ldi	r22, 0x30	; 48
     dd6:	ce 01       	movw	r24, r28
     dd8:	01 96       	adiw	r24, 0x01	; 1
     dda:	3e d1       	rcall	.+636    	; 0x1058 <transmit_sample_frame>
		enableReception = 1; // Enable message receiving function
     ddc:	81 e0       	ldi	r24, 0x01	; 1
     dde:	90 e0       	ldi	r25, 0x00	; 0
     de0:	90 93 9e 04 	sts	0x049E, r25	; 0x80049e <enableReception+0x1>
     de4:	80 93 9d 04 	sts	0x049D, r24	; 0x80049d <enableReception>
     de8:	51 c0       	rjmp	.+162    	; 0xe8c <state_2+0x11a>
	}
	else if (stateControl == 3)
     dea:	83 30       	cpi	r24, 0x03	; 3
     dec:	91 05       	cpc	r25, r1
     dee:	f9 f4       	brne	.+62     	; 0xe2e <state_2+0xbc>
	{
		// The node will remain in this state until a PUBCOMP message is received
		/////////////////////////////////////////////////////////////////////////////////////////////////////////////
		// RX PUBCOMP
		if (successfulReceptionControl == 14) // The condition is activated when a PUBCOMP is received
     df0:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <successfulReceptionControl>
     df4:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <successfulReceptionControl+0x1>
     df8:	0e 97       	sbiw	r24, 0x0e	; 14
     dfa:	09 f0       	breq	.+2      	; 0xdfe <state_2+0x8c>
     dfc:	47 c0       	rjmp	.+142    	; 0xe8c <state_2+0x11a>
		{
			successfulReceptionControl = -1; // Received the required message, no others are accepted
     dfe:	8f ef       	ldi	r24, 0xFF	; 255
     e00:	9f ef       	ldi	r25, 0xFF	; 255
     e02:	90 93 0d 02 	sts	0x020D, r25	; 0x80020d <successfulReceptionControl+0x1>
     e06:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <successfulReceptionControl>
			proc5Count = 3;
     e0a:	83 e0       	ldi	r24, 0x03	; 3
     e0c:	90 e0       	ldi	r25, 0x00	; 0
     e0e:	90 93 96 04 	sts	0x0496, r25	; 0x800496 <proc5Count+0x1>
     e12:	80 93 95 04 	sts	0x0495, r24	; 0x800495 <proc5Count>
			controlAllLEDs(proc5Count);
     e16:	04 dc       	rcall	.-2040   	; 0x620 <controlAllLEDs>
			temporaryStateIndex = 0; // State change
     e18:	10 92 a0 04 	sts	0x04A0, r1	; 0x8004a0 <temporaryStateIndex+0x1>
     e1c:	10 92 9f 04 	sts	0x049F, r1	; 0x80049f <temporaryStateIndex>
			stateControl = 4;
     e20:	84 e0       	ldi	r24, 0x04	; 4
     e22:	90 e0       	ldi	r25, 0x00	; 0
     e24:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <stateControl+0x1>
     e28:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <stateControl>
     e2c:	2f c0       	rjmp	.+94     	; 0xe8c <state_2+0x11a>
		}
		/////////////////////////////////////////////////////////////////////////////////////////////////////////////
	}
	else if (stateControl == 4)
     e2e:	84 30       	cpi	r24, 0x04	; 4
     e30:	91 05       	cpc	r25, r1
     e32:	61 f4       	brne	.+24     	; 0xe4c <state_2+0xda>
	{
		stateControl = 5;
     e34:	85 e0       	ldi	r24, 0x05	; 5
     e36:	90 e0       	ldi	r25, 0x00	; 0
     e38:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <stateControl+0x1>
     e3c:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <stateControl>
		delay_ms(1500); // Wait time to appreciate the end of state
     e40:	61 e8       	ldi	r22, 0x81	; 129
     e42:	74 e8       	ldi	r23, 0x84	; 132
     e44:	8e e1       	ldi	r24, 0x1E	; 30
     e46:	90 e0       	ldi	r25, 0x00	; 0
     e48:	f9 da       	rcall	.-2574   	; 0x43c <__portable_avr_delay_cycles>
     e4a:	20 c0       	rjmp	.+64     	; 0xe8c <state_2+0x11a>
	}
	else if (stateControl == 5)
     e4c:	05 97       	sbiw	r24, 0x05	; 5
     e4e:	f1 f4       	brne	.+60     	; 0xe8c <state_2+0x11a>
	{
		stateControl = 0; // This control variable is set to zero because it is only used in the initial state.
     e50:	10 92 0b 02 	sts	0x020B, r1	; 0x80020b <stateControl+0x1>
     e54:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <stateControl>
		transmit_sample_frame((uint8_t*)"|        CL_END        ||------ CL S-02 -------|", 48, 1); // State indicator
     e58:	41 e0       	ldi	r20, 0x01	; 1
     e5a:	50 e0       	ldi	r21, 0x00	; 0
     e5c:	60 e3       	ldi	r22, 0x30	; 48
     e5e:	81 e5       	ldi	r24, 0x51	; 81
     e60:	94 e0       	ldi	r25, 0x04	; 4
     e62:	fa d0       	rcall	.+500    	; 0x1058 <transmit_sample_frame>
		                               //|        CL_END        ||------ CL S-04 -------|
		stateControl = 1; // This control variable is set to one so that the following states can start their operation.
     e64:	81 e0       	ldi	r24, 0x01	; 1
     e66:	90 e0       	ldi	r25, 0x00	; 0
     e68:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <stateControl+0x1>
     e6c:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <stateControl>
		stateIndex = temporaryStateIndex; // State change
     e70:	80 91 9f 04 	lds	r24, 0x049F	; 0x80049f <temporaryStateIndex>
     e74:	90 91 a0 04 	lds	r25, 0x04A0	; 0x8004a0 <temporaryStateIndex+0x1>
     e78:	90 93 a2 04 	sts	0x04A2, r25	; 0x8004a2 <stateIndex+0x1>
     e7c:	80 93 a1 04 	sts	0x04A1, r24	; 0x8004a1 <stateIndex>
		temporaryStateIndex = -1; // Set to -1 to use it later.
     e80:	8f ef       	ldi	r24, 0xFF	; 255
     e82:	9f ef       	ldi	r25, 0xFF	; 255
     e84:	90 93 a0 04 	sts	0x04A0, r25	; 0x8004a0 <temporaryStateIndex+0x1>
     e88:	80 93 9f 04 	sts	0x049F, r24	; 0x80049f <temporaryStateIndex>
	}
}
     e8c:	e0 96       	adiw	r28, 0x30	; 48
     e8e:	0f b6       	in	r0, 0x3f	; 63
     e90:	f8 94       	cli
     e92:	de bf       	out	0x3e, r29	; 62
     e94:	0f be       	out	0x3f, r0	; 63
     e96:	cd bf       	out	0x3d, r28	; 61
     e98:	df 91       	pop	r29
     e9a:	cf 91       	pop	r28
     e9c:	08 95       	ret

00000e9e <usr_wireless_app_task>:
void state_2(void);      // RX_PUBCOMP S2
void state_3(void);      // DECONGESTION S3

void usr_wireless_app_task(void)
{
	if (stateIndex == 0)       // ACTIVE PUBLISH S0
     e9e:	80 91 a1 04 	lds	r24, 0x04A1	; 0x8004a1 <stateIndex>
     ea2:	90 91 a2 04 	lds	r25, 0x04A2	; 0x8004a2 <stateIndex+0x1>
     ea6:	00 97       	sbiw	r24, 0x00	; 0
     ea8:	11 f4       	brne	.+4      	; 0xeae <usr_wireless_app_task+0x10>
	{
		stateInitial();
     eaa:	c6 cb       	rjmp	.-2164   	; 0x638 <stateInitial>
     eac:	08 95       	ret
	}
	else if (stateIndex == 1)  // RX_ACK S1
     eae:	81 30       	cpi	r24, 0x01	; 1
     eb0:	91 05       	cpc	r25, r1
	{
		state_1();
     eb2:	11 f4       	brne	.+4      	; 0xeb8 <usr_wireless_app_task+0x1a>
     eb4:	17 ce       	rjmp	.-978    	; 0xae4 <state_1>
     eb6:	08 95       	ret
	}
	else if (stateIndex == 2)  // RX_PUBCOMP S2
     eb8:	82 30       	cpi	r24, 0x02	; 2
     eba:	91 05       	cpc	r25, r1
	{
		state_2();
     ebc:	11 f4       	brne	.+4      	; 0xec2 <usr_wireless_app_task+0x24>
     ebe:	59 cf       	rjmp	.-334    	; 0xd72 <state_2>
	}
	else if (stateIndex == 3)  // DECONGESTION S3
     ec0:	08 95       	ret
     ec2:	03 97       	sbiw	r24, 0x03	; 3
	{
		state_3();
     ec4:	09 f4       	brne	.+2      	; 0xec8 <usr_wireless_app_task+0x2a>
     ec6:	12 cb       	rjmp	.-2524   	; 0x4ec <state_3>
     ec8:	08 95       	ret

00000eca <app_timer_cb>:
/**
 \brief Callback called once the timer expires
*/
void app_timer_cb(void *parameter)
{
	usr_app_timer_cb(parameter);
     eca:	b1 ca       	rjmp	.-2718   	; 0x42e <usr_app_timer_cb>
     ecc:	08 95       	ret

00000ece <app_timers_init>:
 * \brief This function initializes the App timers
 * (T_APP_TIMER1 is the only timer added by the project wizard,add extra timers based on the application requirement)
 */
void app_timers_init(void)
{
	if (STATUS_OK != sw_timer_get_id(&T_APP_TIMER1)) {
     ece:	89 ef       	ldi	r24, 0xF9	; 249
     ed0:	98 e0       	ldi	r25, 0x08	; 8
     ed2:	cc d2       	rcall	.+1432   	; 0x146c <sw_timer_get_id>
     ed4:	81 11       	cpse	r24, r1
		app_alert();
     ed6:	40 c1       	rjmp	.+640    	; 0x1158 <app_alert>
     ed8:	08 95       	ret

00000eda <start_timer1>:
     eda:	ef 92       	push	r14
 \brief This function starts a timer T-APP_TIMER with timeout TIMER_DURATION  with callback id app_timer_cb
 * New timers can be added by defeining ex. start_timer2 by adding a new timer id T_APP_TIMER2 and a different call back name based on the requirement ,
 * max no of timers to be added is based on *the  count  TOTAL_NUMBER_OF_TIMERS in conf_common_sw_timer.h
 */
void start_timer1(void)
{
     edc:	ff 92       	push	r15
     ede:	0f 93       	push	r16
     ee0:	1f 93       	push	r17
	sw_timer_start(T_APP_TIMER1,TIMER_DURATION,SW_TIMEOUT_RELATIVE,(FUNC_PTR)app_timer_cb,NULL)	;
     ee2:	a0 91 a3 04 	lds	r26, 0x04A3	; 0x8004a3 <timerDurationTime>
     ee6:	b0 91 a4 04 	lds	r27, 0x04A4	; 0x8004a4 <timerDurationTime+0x1>
     eea:	20 e4       	ldi	r18, 0x40	; 64
     eec:	32 e4       	ldi	r19, 0x42	; 66
     eee:	4f e0       	ldi	r20, 0x0F	; 15
     ef0:	50 e0       	ldi	r21, 0x00	; 0
     ef2:	0e 94 ad 1a 	call	0x355a	; 0x355a <__mulshisi3>
     ef6:	ab 01       	movw	r20, r22
     ef8:	bc 01       	movw	r22, r24
     efa:	e1 2c       	mov	r14, r1
     efc:	f1 2c       	mov	r15, r1
     efe:	05 e6       	ldi	r16, 0x65	; 101
     f00:	17 e0       	ldi	r17, 0x07	; 7
     f02:	20 e0       	ldi	r18, 0x00	; 0
     f04:	80 91 f9 08 	lds	r24, 0x08F9	; 0x8008f9 <T_APP_TIMER1>
     f08:	be d2       	rcall	.+1404   	; 0x1486 <sw_timer_start>
}
     f0a:	1f 91       	pop	r17
     f0c:	0f 91       	pop	r16
     f0e:	ff 90       	pop	r15
     f10:	ef 90       	pop	r14
     f12:	08 95       	ret

00000f14 <transmit_frame>:
		uint8_t src_addr_mode,
		uint8_t msdu_handle,
		uint8_t *payload,
		uint8_t payload_length,
		bool ack_req,csma_mode_t csma_mode ,bool frame_retry)
{
     f14:	4f 92       	push	r4
     f16:	5f 92       	push	r5
     f18:	6f 92       	push	r6
     f1a:	7f 92       	push	r7
     f1c:	8f 92       	push	r8
     f1e:	af 92       	push	r10
     f20:	cf 92       	push	r12
     f22:	ef 92       	push	r14
     f24:	0f 93       	push	r16
     f26:	1f 93       	push	r17
     f28:	cf 93       	push	r28
     f2a:	df 93       	push	r29
     f2c:	cd b7       	in	r28, 0x3d	; 61
     f2e:	de b7       	in	r29, 0x3e	; 62
	tx_frame_info = (frame_info_t *)storage_buffer;
	/* Get length of current frame. */
	frame_length = (FRAME_OVERHEAD + payload_length); 

	/* Set payload pointer. */     
	frame_ptr = temp_frame_ptr = (uint8_t *)tx_frame_info +
     f30:	a9 e8       	ldi	r26, 0x89	; 137
     f32:	b0 e0       	ldi	r27, 0x00	; 0
     f34:	ae 19       	sub	r26, r14
     f36:	b1 09       	sbc	r27, r1
     f38:	fd 01       	movw	r30, r26
     f3a:	e9 55       	subi	r30, 0x59	; 89
     f3c:	fb 4f       	sbci	r31, 0xFB	; 251
     f3e:	3f 01       	movw	r6, r30

	/*
	* Payload is stored to the end of the buffer avoiding payload
	* copying by TAL.
	*/
	for (i = 0; i < payload_length; i++) {
     f40:	ee 20       	and	r14, r14
     f42:	79 f0       	breq	.+30     	; 0xf62 <transmit_frame+0x4e>
     f44:	d8 01       	movw	r26, r16
     f46:	44 24       	eor	r4, r4
     f48:	4a 94       	dec	r4
     f4a:	4e 0c       	add	r4, r14
     f4c:	51 2c       	mov	r5, r1
     f4e:	9f ef       	ldi	r25, 0xFF	; 255
     f50:	49 1a       	sub	r4, r25
     f52:	59 0a       	sbc	r5, r25
     f54:	04 0d       	add	r16, r4
     f56:	15 1d       	adc	r17, r5
	*temp_frame_ptr++ = *(payload + i);
     f58:	9d 91       	ld	r25, X+
     f5a:	91 93       	st	Z+, r25

	/*
	* Payload is stored to the end of the buffer avoiding payload
	* copying by TAL.
	*/
	for (i = 0; i < payload_length; i++) {
     f5c:	a0 17       	cp	r26, r16
     f5e:	b1 07       	cpc	r27, r17
     f60:	d9 f7       	brne	.-10     	; 0xf58 <transmit_frame+0x44>
	*temp_frame_ptr++ = *(payload + i);
	}


	/* Source address */
	if (FCF_SHORT_ADDR == src_addr_mode) {
     f62:	42 30       	cpi	r20, 0x02	; 2
     f64:	61 f4       	brne	.+24     	; 0xf7e <transmit_frame+0x6a>
	uint16_t temp_value,fcf = 0;
	/* Get length of current frame. */

	tx_frame_info = (frame_info_t *)storage_buffer;
	/* Get length of current frame. */
	frame_length = (FRAME_OVERHEAD + payload_length); 
     f66:	3b e0       	ldi	r19, 0x0B	; 11
     f68:	3e 0d       	add	r19, r14
	}


	/* Source address */
	if (FCF_SHORT_ADDR == src_addr_mode) {
	frame_ptr -= SHORT_ADDR_LEN;
     f6a:	d3 01       	movw	r26, r6
	convert_16_bit_to_byte_array(tal_pib.ShortAddress, frame_ptr);
     f6c:	40 91 43 09 	lds	r20, 0x0943	; 0x800943 <tal_pib+0xc>
     f70:	50 91 44 09 	lds	r21, 0x0944	; 0x800944 <tal_pib+0xd>
     f74:	5e 93       	st	-X, r21
     f76:	4e 93       	st	-X, r20

	fcf |= FCF_SET_SOURCE_ADDR_MODE(FCF_SHORT_ADDR);
     f78:	40 e0       	ldi	r20, 0x00	; 0
     f7a:	50 e8       	ldi	r21, 0x80	; 128
     f7c:	26 c0       	rjmp	.+76     	; 0xfca <transmit_frame+0xb6>
	} else {
	frame_ptr -= EXT_ADDR_LEN;
     f7e:	d3 01       	movw	r26, r6
     f80:	18 97       	sbiw	r26, 0x08	; 8
	frame_length += FCF_2_SOURCE_ADDR_OFFSET;
     f82:	31 e1       	ldi	r19, 0x11	; 17
     f84:	3e 0d       	add	r19, r14

	convert_64_bit_to_byte_array(tal_pib.IeeeAddress, frame_ptr);
     f86:	e7 e3       	ldi	r30, 0x37	; 55
     f88:	f9 e0       	ldi	r31, 0x09	; 9
     f8a:	90 81       	ld	r25, Z
     f8c:	9c 93       	st	X, r25
     f8e:	91 81       	ldd	r25, Z+1	; 0x01
     f90:	11 96       	adiw	r26, 0x01	; 1
     f92:	9c 93       	st	X, r25
     f94:	11 97       	sbiw	r26, 0x01	; 1
     f96:	92 81       	ldd	r25, Z+2	; 0x02
     f98:	12 96       	adiw	r26, 0x02	; 2
     f9a:	9c 93       	st	X, r25
     f9c:	12 97       	sbiw	r26, 0x02	; 2
     f9e:	93 81       	ldd	r25, Z+3	; 0x03
     fa0:	13 96       	adiw	r26, 0x03	; 3
     fa2:	9c 93       	st	X, r25
     fa4:	13 97       	sbiw	r26, 0x03	; 3
     fa6:	94 81       	ldd	r25, Z+4	; 0x04
     fa8:	14 96       	adiw	r26, 0x04	; 4
     faa:	9c 93       	st	X, r25
     fac:	14 97       	sbiw	r26, 0x04	; 4
     fae:	95 81       	ldd	r25, Z+5	; 0x05
     fb0:	15 96       	adiw	r26, 0x05	; 5
     fb2:	9c 93       	st	X, r25
     fb4:	15 97       	sbiw	r26, 0x05	; 5
     fb6:	96 81       	ldd	r25, Z+6	; 0x06
     fb8:	16 96       	adiw	r26, 0x06	; 6
     fba:	9c 93       	st	X, r25
     fbc:	16 97       	sbiw	r26, 0x06	; 6
     fbe:	97 81       	ldd	r25, Z+7	; 0x07
     fc0:	17 96       	adiw	r26, 0x07	; 7
     fc2:	9c 93       	st	X, r25
     fc4:	17 97       	sbiw	r26, 0x07	; 7

	fcf |= FCF_SET_SOURCE_ADDR_MODE(FCF_LONG_ADDR);
     fc6:	40 e0       	ldi	r20, 0x00	; 0
     fc8:	50 ec       	ldi	r21, 0xC0	; 192
		temp_value = CCPU_ENDIAN_TO_LE16(SRC_PAN_ID);
		convert_16_bit_to_byte_array(temp_value, frame_ptr);
		#endif

	/* Destination address */
	if (FCF_SHORT_ADDR == dst_addr_mode) {
     fca:	82 30       	cpi	r24, 0x02	; 2
     fcc:	59 f4       	brne	.+22     	; 0xfe4 <transmit_frame+0xd0>
		frame_ptr -= SHORT_ADDR_LEN;
		convert_16_bit_to_byte_array(*((uint16_t *)dst_addr),
     fce:	fb 01       	movw	r30, r22
     fd0:	80 81       	ld	r24, Z
     fd2:	91 81       	ldd	r25, Z+1	; 0x01
     fd4:	fd 01       	movw	r30, r26
     fd6:	92 93       	st	-Z, r25
     fd8:	82 93       	st	-Z, r24
     fda:	3f 01       	movw	r6, r30
				frame_ptr);

		fcf |= FCF_SET_DEST_ADDR_MODE(FCF_SHORT_ADDR);
     fdc:	ca 01       	movw	r24, r20
     fde:	80 64       	ori	r24, 0x40	; 64
     fe0:	98 60       	ori	r25, 0x08	; 8
     fe2:	0f c0       	rjmp	.+30     	; 0x1002 <transmit_frame+0xee>
	} else {
		frame_ptr -= EXT_ADDR_LEN;
     fe4:	3d 01       	movw	r6, r26
     fe6:	f8 e0       	ldi	r31, 0x08	; 8
     fe8:	6f 1a       	sub	r6, r31
     fea:	71 08       	sbc	r7, r1
		frame_length += PL_POS_DST_ADDR_START;
     fec:	3a 5f       	subi	r19, 0xFA	; 250

		convert_64_bit_to_byte_array(*((uint64_t *)dst_addr),
     fee:	88 e0       	ldi	r24, 0x08	; 8
     ff0:	fb 01       	movw	r30, r22
     ff2:	d3 01       	movw	r26, r6
     ff4:	01 90       	ld	r0, Z+
     ff6:	0d 92       	st	X+, r0
     ff8:	8a 95       	dec	r24
     ffa:	e1 f7       	brne	.-8      	; 0xff4 <transmit_frame+0xe0>
				frame_ptr);

		fcf |= FCF_SET_DEST_ADDR_MODE(FCF_LONG_ADDR);
     ffc:	ca 01       	movw	r24, r20
     ffe:	80 64       	ori	r24, 0x40	; 64
    1000:	9c 60       	ori	r25, 0x0C	; 12


	/* Destination PAN-Id */
	temp_value = CCPU_ENDIAN_TO_LE16(DST_PAN_ID);
	frame_ptr -= PAN_ID_LEN;
	convert_16_bit_to_byte_array(temp_value, frame_ptr);
    1002:	4e ef       	ldi	r20, 0xFE	; 254
    1004:	5a ec       	ldi	r21, 0xCA	; 202
    1006:	f3 01       	movw	r30, r6
    1008:	32 97       	sbiw	r30, 0x02	; 2
    100a:	51 83       	std	Z+1, r21	; 0x01
    100c:	40 83       	st	Z, r20

	/* Set DSN. */
	frame_ptr--;
	*frame_ptr = msdu_handle;
    100e:	31 97       	sbiw	r30, 0x01	; 1
    1010:	20 83       	st	Z, r18

	/* Set the FCF. */
	fcf |= FCF_FRAMETYPE_DATA;
	if (ack_req) {
    1012:	c1 10       	cpse	r12, r1
    1014:	02 c0       	rjmp	.+4      	; 0x101a <transmit_frame+0x106>
	/* Set DSN. */
	frame_ptr--;
	*frame_ptr = msdu_handle;

	/* Set the FCF. */
	fcf |= FCF_FRAMETYPE_DATA;
    1016:	81 60       	ori	r24, 0x01	; 1
    1018:	01 c0       	rjmp	.+2      	; 0x101c <transmit_frame+0x108>
	if (ack_req) {
	fcf |= FCF_ACK_REQUEST;
    101a:	81 62       	ori	r24, 0x21	; 33
	}

	frame_ptr -= FCF_LEN;
	convert_16_bit_to_byte_array(CCPU_ENDIAN_TO_LE16(fcf), frame_ptr);
    101c:	f3 01       	movw	r30, r6
    101e:	35 97       	sbiw	r30, 0x05	; 5
    1020:	91 83       	std	Z+1, r25	; 0x01
    1022:	80 83       	st	Z, r24

	/* First element shall be length of PHY frame. */
	frame_ptr--;
	*frame_ptr = frame_length;
    1024:	d3 01       	movw	r26, r6
    1026:	16 97       	sbiw	r26, 0x06	; 6
    1028:	3c 93       	st	X, r19

	/* Finished building of frame. */
	tx_frame_info->mpdu = frame_ptr;
    102a:	b0 93 af 04 	sts	0x04AF, r27	; 0x8004af <storage_buffer+0x8>
    102e:	a0 93 ae 04 	sts	0x04AE, r26	; 0x8004ae <storage_buffer+0x7>

	return(tal_tx_frame(tx_frame_info, csma_mode, frame_retry));
    1032:	48 2d       	mov	r20, r8
    1034:	6a 2d       	mov	r22, r10
    1036:	87 ea       	ldi	r24, 0xA7	; 167
    1038:	94 e0       	ldi	r25, 0x04	; 4
    103a:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <tal_tx_frame>
}
    103e:	df 91       	pop	r29
    1040:	cf 91       	pop	r28
    1042:	1f 91       	pop	r17
    1044:	0f 91       	pop	r16
    1046:	ef 90       	pop	r14
    1048:	cf 90       	pop	r12
    104a:	af 90       	pop	r10
    104c:	8f 90       	pop	r8
    104e:	7f 90       	pop	r7
    1050:	6f 90       	pop	r6
    1052:	5f 90       	pop	r5
    1054:	4f 90       	pop	r4
    1056:	08 95       	ret

00001058 <transmit_sample_frame>:
 * \brief This function transmits a sample data frame 
 * \param payload address of the payload to be transmitted
 * \payload_length Length of the payload to be trasnmitted *
 */
void transmit_sample_frame(uint8_t* payload,uint8_t payload_length,int selecDirec) 
{
    1058:	8f 92       	push	r8
    105a:	af 92       	push	r10
    105c:	cf 92       	push	r12
    105e:	ef 92       	push	r14
    1060:	0f 93       	push	r16
    1062:	1f 93       	push	r17
    1064:	cf 93       	push	r28
    1066:	df 93       	push	r29
    1068:	1f 92       	push	r1
    106a:	1f 92       	push	r1
    106c:	cd b7       	in	r28, 0x3d	; 61
    106e:	de b7       	in	r29, 0x3e	; 62
	static uint16_t seq_num = 0;   
	bool ack_req = ACK_REQ;
	bool frame_retry = FRAME_RETRY;
	csma_mode_t csma_mode = CSMA_MODE;
	uint16_t dst_addr;
	if (selecDirec==0)
    1070:	41 15       	cp	r20, r1
    1072:	51 05       	cpc	r21, r1
    1074:	29 f4       	brne	.+10     	; 0x1080 <transmit_sample_frame+0x28>
	{
		dst_addr = CCPU_ENDIAN_TO_LE16((uint16_t)DST_ADDR);
    1076:	23 e0       	ldi	r18, 0x03	; 3
    1078:	30 e0       	ldi	r19, 0x00	; 0
    107a:	3a 83       	std	Y+2, r19	; 0x02
    107c:	29 83       	std	Y+1, r18	; 0x01
    107e:	07 c0       	rjmp	.+14     	; 0x108e <transmit_sample_frame+0x36>
	}
	else if (selecDirec==1)
    1080:	41 30       	cpi	r20, 0x01	; 1
    1082:	51 05       	cpc	r21, r1
    1084:	21 f4       	brne	.+8      	; 0x108e <transmit_sample_frame+0x36>
	{
		dst_addr = CCPU_ENDIAN_TO_LE16((uint16_t)0xC11E);
    1086:	2e e1       	ldi	r18, 0x1E	; 30
    1088:	31 ec       	ldi	r19, 0xC1	; 193
    108a:	3a 83       	std	Y+2, r19	; 0x02
    108c:	29 83       	std	Y+1, r18	; 0x01
	}
	transmit_frame(
		FCF_SHORT_ADDR,
		(uint8_t*)&dst_addr,
		FCF_SHORT_ADDR,
		seq_num++,
    108e:	20 91 a5 04 	lds	r18, 0x04A5	; 0x8004a5 <seq_num.3033>
    1092:	30 91 a6 04 	lds	r19, 0x04A6	; 0x8004a6 <seq_num.3033+0x1>
    1096:	a9 01       	movw	r20, r18
    1098:	4f 5f       	subi	r20, 0xFF	; 255
    109a:	5f 4f       	sbci	r21, 0xFF	; 255
    109c:	50 93 a6 04 	sts	0x04A6, r21	; 0x8004a6 <seq_num.3033+0x1>
    10a0:	40 93 a5 04 	sts	0x04A5, r20	; 0x8004a5 <seq_num.3033>
	}
	else if (selecDirec==1)
	{
		dst_addr = CCPU_ENDIAN_TO_LE16((uint16_t)0xC11E);
	}
	transmit_frame(
    10a4:	81 2c       	mov	r8, r1
    10a6:	68 94       	set
    10a8:	aa 24       	eor	r10, r10
    10aa:	a1 f8       	bld	r10, 1
    10ac:	c1 2c       	mov	r12, r1
    10ae:	e6 2e       	mov	r14, r22
    10b0:	8c 01       	movw	r16, r24
    10b2:	42 e0       	ldi	r20, 0x02	; 2
    10b4:	be 01       	movw	r22, r28
    10b6:	6f 5f       	subi	r22, 0xFF	; 255
    10b8:	7f 4f       	sbci	r23, 0xFF	; 255
    10ba:	82 e0       	ldi	r24, 0x02	; 2
    10bc:	2b df       	rcall	.-426    	; 0xf14 <transmit_frame>
		payload_length,
		ack_req,
		csma_mode,
		frame_retry);

}
    10be:	0f 90       	pop	r0
    10c0:	0f 90       	pop	r0
    10c2:	df 91       	pop	r29
    10c4:	cf 91       	pop	r28
    10c6:	1f 91       	pop	r17
    10c8:	0f 91       	pop	r16
    10ca:	ef 90       	pop	r14
    10cc:	cf 90       	pop	r12
    10ce:	af 90       	pop	r10
    10d0:	8f 90       	pop	r8
    10d2:	08 95       	ret

000010d4 <init_data_reception>:
		   bool mode = true;
		   tal_rxaack_prom_mode_ctrl(true);
		   tal_pib_set(macPromiscuousMode, (pib_value_t *)&mode);
       #endif
       /*RX_AACK_ON Mode is enabled if Promiscuous Mode is not used,else RX is switched on in RX_ON Mode*/
       tal_rx_enable(PHY_RX_ON); 
    10d4:	86 e0       	ldi	r24, 0x06	; 6
    10d6:	0c 94 1f 14 	jmp	0x283e	; 0x283e <tal_rx_enable>
    10da:	08 95       	ret

000010dc <wireless_init>:

/**
 * \brief This Function initializes the Wireless Module and board components i.e clock,irq etc
 */
void wireless_init(void)
{
    10dc:	cf 93       	push	r28
    10de:	df 93       	push	r29
    10e0:	00 d0       	rcall	.+0      	; 0x10e2 <wireless_init+0x6>
    10e2:	00 d0       	rcall	.+0      	; 0x10e4 <wireless_init+0x8>
    10e4:	cd b7       	in	r28, 0x3d	; 61
    10e6:	de b7       	in	r29, 0x3e	; 62
	/*Initialize IRQ*/
	irq_initialize_vectors();

  sysclk_init();
    10e8:	46 d0       	rcall	.+140    	; 0x1176 <sysclk_init>

	/* Initialize the board.
	 * The board-specific conf_board.h file contains the configuration of
	 * the board initialization.
	 */
	board_init();
    10ea:	37 d0       	rcall	.+110    	; 0x115a <board_init>


	/*Initialize the Stack SW Timer*/
	sw_timer_init();
    10ec:	37 d3       	rcall	.+1646   	; 0x175c <sw_timer_init>
    10ee:	0b d7       	rcall	.+3606   	; 0x1f06 <tal_init>
	
	/*Initialize the TAL Layer*/
	if(tal_init()!= MAC_SUCCESS)
    10f0:	81 11       	cpse	r24, r1
    10f2:	ff cf       	rjmp	.-2      	; 0x10f2 <wireless_init+0x16>
    10f4:	78 94       	sei
    10f6:	84 e0       	ldi	r24, 0x04	; 4
	{
	//Error in Initializing the TAL Layer
	app_alert();	
	}
	cpu_irq_enable();
    10f8:	90 e0       	ldi	r25, 0x00	; 0
	
	uint16_t src_addr = CCPU_ENDIAN_TO_LE16(SRC_ADDR);
    10fa:	9a 83       	std	Y+2, r25	; 0x02
    10fc:	89 83       	std	Y+1, r24	; 0x01
    10fe:	8e ef       	ldi	r24, 0xFE	; 254
    1100:	9a ec       	ldi	r25, 0xCA	; 202
	uint16_t pan_id = CCPU_ENDIAN_TO_LE16(SRC_PAN_ID);
    1102:	9c 83       	std	Y+4, r25	; 0x04
    1104:	8b 83       	std	Y+3, r24	; 0x03
    1106:	8b e0       	ldi	r24, 0x0B	; 11
    1108:	8d 83       	std	Y+5, r24	; 0x05
	uint8_t channel = CHANNEL_TRANSMIT_RECEIVE;
    110a:	1e 82       	std	Y+6, r1	; 0x06
    110c:	be 01       	movw	r22, r28
	uint8_t channel_page = CHANNEL_PAGE_TRANSMIT_RECEIVE;
    110e:	6f 5f       	subi	r22, 0xFF	; 255
	
	/* Set Default address. */
	tal_pib_set(macShortAddress, (pib_value_t *)&src_addr);
    1110:	7f 4f       	sbci	r23, 0xFF	; 255
    1112:	83 e5       	ldi	r24, 0x53	; 83
    1114:	0e 94 4e 12 	call	0x249c	; 0x249c <tal_pib_set>
    1118:	be 01       	movw	r22, r28
    111a:	6d 5f       	subi	r22, 0xFD	; 253

	/* Set PAN ID. */
	tal_pib_set(macPANId, (pib_value_t *)&pan_id);
    111c:	7f 4f       	sbci	r23, 0xFF	; 255
    111e:	80 e5       	ldi	r24, 0x50	; 80
    1120:	0e 94 4e 12 	call	0x249c	; 0x249c <tal_pib_set>
    1124:	be 01       	movw	r22, r28
    1126:	6b 5f       	subi	r22, 0xFB	; 251

	/* Set channel. */ /* Channel 11  is set as default in tal_init() */
	tal_pib_set(phyCurrentChannel, (pib_value_t *)&channel);
    1128:	7f 4f       	sbci	r23, 0xFF	; 255
    112a:	80 e0       	ldi	r24, 0x00	; 0
    112c:	0e 94 4e 12 	call	0x249c	; 0x249c <tal_pib_set>
    1130:	be 01       	movw	r22, r28
    1132:	6a 5f       	subi	r22, 0xFA	; 250
	
	/* Set Channel Page */ /* Channel Page 0  is set as default in tal_init() */
	tal_pib_set(phyCurrentPage,(pib_value_t *)&channel_page);
    1134:	7f 4f       	sbci	r23, 0xFF	; 255
    1136:	84 e0       	ldi	r24, 0x04	; 4
    1138:	0e 94 4e 12 	call	0x249c	; 0x249c <tal_pib_set>
    113c:	62 e0       	ldi	r22, 0x02	; 2
    113e:	80 e0       	ldi	r24, 0x00	; 0
    {
	    tal_ant_div_config(ANT_DIVERSITY_ENABLE,ANTENNA_DEFAULT);
    }
    else
    {
	    tal_ant_div_config(ANT_DIVERSITY_DISABLE,ANT_SELECT); 
    1140:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <tal_ant_div_config>
    1144:	c7 df       	rcall	.-114    	; 0x10d4 <init_data_reception>
    }
    #endif


	init_data_reception();
    1146:	26 96       	adiw	r28, 0x06	; 6
    1148:	0f b6       	in	r0, 0x3f	; 63

}
    114a:	f8 94       	cli
    114c:	de bf       	out	0x3e, r29	; 62
    114e:	0f be       	out	0x3f, r0	; 63
    1150:	cd bf       	out	0x3d, r28	; 61
    1152:	df 91       	pop	r29
    1154:	cf 91       	pop	r28
    1156:	08 95       	ret

00001158 <app_alert>:
    1158:	ff cf       	rjmp	.-2      	; 0x1158 <app_alert>

0000115a <board_init>:
			*((uint8_t *)port + 2) &= ~pin_mask;
		}

		*((uint8_t *)port + 1) |= pin_mask;
	} else {
		*((uint8_t *)port + 1) &= ~pin_mask;
    115a:	8d b1       	in	r24, 0x0d	; 13
    115c:	8e 7f       	andi	r24, 0xFE	; 254
		if (flags & IOPORT_PULL_UP) {
			*((uint8_t *)port + 2) |= pin_mask;
    115e:	9e b1       	in	r25, 0x0e	; 14
		port_pin_flags_t flags)
{
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
		if (flags & IOPORT_INIT_HIGH) {
			*((uint8_t *)port + 2) |= pin_mask;
    1160:	5e 9a       	sbi	0x0b, 6	; 11
		} else {
			*((uint8_t *)port + 2) &= ~pin_mask;
		}

		*((uint8_t *)port + 1) |= pin_mask;
    1162:	56 9a       	sbi	0x0a, 6	; 10
		port_pin_flags_t flags)
{
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
		if (flags & IOPORT_INIT_HIGH) {
			*((uint8_t *)port + 2) |= pin_mask;
    1164:	a2 9a       	sbi	0x14, 2	; 20
		} else {
			*((uint8_t *)port + 2) &= ~pin_mask;
		}

		*((uint8_t *)port + 1) |= pin_mask;
    1166:	9a 9a       	sbi	0x13, 2	; 19
		port_pin_flags_t flags)
{
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
		if (flags & IOPORT_INIT_HIGH) {
			*((uint8_t *)port + 2) |= pin_mask;
    1168:	95 60       	ori	r25, 0x05	; 5
    116a:	9e b9       	out	0x0e, r25	; 14
		} else {
			*((uint8_t *)port + 2) &= ~pin_mask;
		}

		*((uint8_t *)port + 1) |= pin_mask;
    116c:	84 60       	ori	r24, 0x04	; 4
    116e:	8d b9       	out	0x0d, r24	; 13
    1170:	08 95       	ret

00001172 <modules_init>:
/**
 * \brief Initializes the modules added by the Project Wizard
 */
void modules_init(void)
{
	    app_timers_init();
    1172:	ad ce       	rjmp	.-678    	; 0xece <app_timers_init>
    1174:	08 95       	ret

00001176 <sysclk_init>:

/**
 *  Function to initialize the clock and disable clock for not required modules.
 */
void sysclk_init(void)
{
    1176:	cf 93       	push	r28
    1178:	df 93       	push	r29
    117a:	1f 92       	push	r1
    117c:	cd b7       	in	r28, 0x3d	; 61
    117e:	de b7       	in	r29, 0x3e	; 62
	/* Turn off all peripheral clocks that can be turned off.
	 * The debugWIRE system of some devices that shares system clock with the SPI module.
	 * Thus the PRSPI bit in the PRR register must not be set when debugging.
	 */
	for (i = 0; i < NUMBER_OF_POWER_REG; i++) {
		*(reg++) = 0xFF;
    1180:	8f ef       	ldi	r24, 0xFF	; 255
    1182:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7c0064>
    1186:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__TEXT_REGION_LENGTH__+0x7c0065>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    118a:	8f b7       	in	r24, 0x3f	; 63
    118c:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    118e:	f8 94       	cli
	return flags;
    1190:	89 81       	ldd	r24, Y+1	; 0x01
static inline void sysclk_set_prescalers(uint8_t psdiv)
{
#if !MEGA_UNSPECIFIED
	irqflags_t flags = cpu_irq_save();

	ASM(
    1192:	5f 93       	push	r21
    1194:	50 e8       	ldi	r21, 0x80	; 128
    1196:	50 93 61 00 	sts	0x0061, r21	; 0x800061 <__TEXT_REGION_LENGTH__+0x7c0061>
    119a:	50 e0       	ldi	r21, 0x00	; 0
    119c:	50 93 61 00 	sts	0x0061, r21	; 0x800061 <__TEXT_REGION_LENGTH__+0x7c0061>
    11a0:	5f 91       	pop	r21
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    11a2:	8f bf       	out	0x3f, r24	; 63
	if ((CONFIG_SYSCLK_PSDIV != SYSCLK_PSDIV_8) ||
			(SYSCLK_PSDIV_8 != CLKPR)) {
		sysclk_set_prescalers(CONFIG_SYSCLK_PSDIV);
	}
#endif
}
    11a4:	0f 90       	pop	r0
    11a6:	df 91       	pop	r29
    11a8:	cf 91       	pop	r28
    11aa:	08 95       	ret

000011ac <sysclk_enable_module>:
 * \param port ID of the port to which the module is connected (one of
 * the \c power_red_id *definitions).
 * \param id The ID (bitmask) of the peripheral module to be enabled.
 */
void sysclk_enable_module(enum power_red_id port, uint8_t id)
{
    11ac:	cf 93       	push	r28
    11ae:	df 93       	push	r29
    11b0:	1f 92       	push	r1
    11b2:	cd b7       	in	r28, 0x3d	; 61
    11b4:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    11b6:	9f b7       	in	r25, 0x3f	; 63
    11b8:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    11ba:	f8 94       	cli
	return flags;
    11bc:	99 81       	ldd	r25, Y+1	; 0x01
#if !MEGA_UNSPECIFIED && !MEGA_XX
	uint8_t *reg = (uint8_t *)&(POWER_REG_ADD);
	irqflags_t flags = cpu_irq_save();

	if (port < NUMBER_OF_POWER_REG) {
    11be:	82 30       	cpi	r24, 0x02	; 2
    11c0:	40 f4       	brcc	.+16     	; 0x11d2 <sysclk_enable_module+0x26>
		*(reg + port)  &= ~id;
    11c2:	e8 2f       	mov	r30, r24
    11c4:	f0 e0       	ldi	r31, 0x00	; 0
    11c6:	ec 59       	subi	r30, 0x9C	; 156
    11c8:	ff 4f       	sbci	r31, 0xFF	; 255
    11ca:	60 95       	com	r22
    11cc:	80 81       	ld	r24, Z
    11ce:	68 23       	and	r22, r24
    11d0:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    11d2:	9f bf       	out	0x3f, r25	; 63
	}
	cpu_irq_restore(flags);
#endif
}
    11d4:	0f 90       	pop	r0
    11d6:	df 91       	pop	r29
    11d8:	cf 91       	pop	r28
    11da:	08 95       	ret

000011dc <sysclk_disable_module>:
 * \param port ID of the port to which the module is connected (one of
 * the \c power_red_id *definitions).
 * \param id The ID (bit mask) of the peripheral module to be disabled.
 */
void sysclk_disable_module( enum power_red_id port, uint8_t id)
{
    11dc:	cf 93       	push	r28
    11de:	df 93       	push	r29
    11e0:	1f 92       	push	r1
    11e2:	cd b7       	in	r28, 0x3d	; 61
    11e4:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    11e6:	9f b7       	in	r25, 0x3f	; 63
    11e8:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    11ea:	f8 94       	cli
	return flags;
    11ec:	99 81       	ldd	r25, Y+1	; 0x01
#if !MEGA_UNSPECIFIED && !MEGA_XX
	uint8_t *reg = (uint8_t *)&(POWER_REG_ADD);
	irqflags_t flags = cpu_irq_save();
	if (port < NUMBER_OF_POWER_REG) {
    11ee:	82 30       	cpi	r24, 0x02	; 2
    11f0:	38 f4       	brcc	.+14     	; 0x1200 <sysclk_disable_module+0x24>
		*(reg + port) |= id;
    11f2:	e8 2f       	mov	r30, r24
    11f4:	f0 e0       	ldi	r31, 0x00	; 0
    11f6:	ec 59       	subi	r30, 0x9C	; 156
    11f8:	ff 4f       	sbci	r31, 0xFF	; 255
    11fa:	80 81       	ld	r24, Z
    11fc:	68 2b       	or	r22, r24
    11fe:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1200:	9f bf       	out	0x3f, r25	; 63
	}
	cpu_irq_restore(flags);
#endif
}
    1202:	0f 90       	pop	r0
    1204:	df 91       	pop	r29
    1206:	cf 91       	pop	r28
    1208:	08 95       	ret

0000120a <hw_expiry_cb>:
uint32_t sw_timer_next_timer_expiry_duration(void)
{
	return ((NO_TIMER ==
	       running_timer_queue_head) ? false : (sw_timer_get_residual_time(
	       running_timer_queue_head)));
}
    120a:	80 91 36 05 	lds	r24, 0x0536	; 0x800536 <running_timers>
    120e:	88 23       	and	r24, r24
    1210:	19 f0       	breq	.+6      	; 0x1218 <hw_expiry_cb+0xe>
    1212:	81 e0       	ldi	r24, 0x01	; 1
    1214:	80 93 2e 09 	sts	0x092E, r24	; 0x80092e <timer_trigger>
    1218:	08 95       	ret

0000121a <hw_overflow_cb>:
    121a:	1f 93       	push	r17
    121c:	cf 93       	push	r28
    121e:	df 93       	push	r29
    1220:	1f 92       	push	r1
    1222:	cd b7       	in	r28, 0x3d	; 61
    1224:	de b7       	in	r29, 0x3e	; 62
    1226:	80 91 fa 08 	lds	r24, 0x08FA	; 0x8008fa <sys_time>
    122a:	90 91 fb 08 	lds	r25, 0x08FB	; 0x8008fb <sys_time+0x1>
    122e:	01 96       	adiw	r24, 0x01	; 1
    1230:	90 93 fb 08 	sts	0x08FB, r25	; 0x8008fb <sys_time+0x1>
    1234:	80 93 fa 08 	sts	0x08FA, r24	; 0x8008fa <sys_time>
    1238:	8f b7       	in	r24, 0x3f	; 63
    123a:	89 83       	std	Y+1, r24	; 0x01
    123c:	f8 94       	cli
    123e:	19 81       	ldd	r17, Y+1	; 0x01
    1240:	80 91 35 05 	lds	r24, 0x0535	; 0x800535 <running_timer_queue_head>
    1244:	8f 3f       	cpi	r24, 0xFF	; 255
    1246:	f1 f1       	breq	.+124    	; 0x12c4 <hw_overflow_cb+0xaa>
    1248:	90 e0       	ldi	r25, 0x00	; 0
    124a:	fc 01       	movw	r30, r24
    124c:	ee 0f       	add	r30, r30
    124e:	ff 1f       	adc	r31, r31
    1250:	9c 01       	movw	r18, r24
    1252:	22 0f       	add	r18, r18
    1254:	33 1f       	adc	r19, r19
    1256:	22 0f       	add	r18, r18
    1258:	33 1f       	adc	r19, r19
    125a:	22 0f       	add	r18, r18
    125c:	33 1f       	adc	r19, r19
    125e:	e2 0f       	add	r30, r18
    1260:	f3 1f       	adc	r31, r19
    1262:	e4 50       	subi	r30, 0x04	; 4
    1264:	f7 4f       	sbci	r31, 0xF7	; 247
    1266:	21 85       	ldd	r18, Z+9	; 0x09
    1268:	21 11       	cpse	r18, r1
    126a:	2c c0       	rjmp	.+88     	; 0x12c4 <hw_overflow_cb+0xaa>
    126c:	fc 01       	movw	r30, r24
    126e:	ee 0f       	add	r30, r30
    1270:	ff 1f       	adc	r31, r31
    1272:	88 0f       	add	r24, r24
    1274:	99 1f       	adc	r25, r25
    1276:	88 0f       	add	r24, r24
    1278:	99 1f       	adc	r25, r25
    127a:	88 0f       	add	r24, r24
    127c:	99 1f       	adc	r25, r25
    127e:	e8 0f       	add	r30, r24
    1280:	f9 1f       	adc	r31, r25
    1282:	e4 50       	subi	r30, 0x04	; 4
    1284:	f7 4f       	sbci	r31, 0xF7	; 247
    1286:	80 81       	ld	r24, Z
    1288:	91 81       	ldd	r25, Z+1	; 0x01
    128a:	a2 81       	ldd	r26, Z+2	; 0x02
    128c:	b3 81       	ldd	r27, Z+3	; 0x03
    128e:	20 91 fa 08 	lds	r18, 0x08FA	; 0x8008fa <sys_time>
    1292:	30 91 fb 08 	lds	r19, 0x08FB	; 0x8008fb <sys_time+0x1>
    1296:	2a 17       	cp	r18, r26
    1298:	3b 07       	cpc	r19, r27
    129a:	a1 f4       	brne	.+40     	; 0x12c4 <hw_overflow_cb+0xaa>
    129c:	0e 94 1e 01 	call	0x23c	; 0x23c <common_tc_delay>
    12a0:	80 91 35 05 	lds	r24, 0x0535	; 0x800535 <running_timer_queue_head>
    12a4:	90 e0       	ldi	r25, 0x00	; 0
    12a6:	fc 01       	movw	r30, r24
    12a8:	ee 0f       	add	r30, r30
    12aa:	ff 1f       	adc	r31, r31
    12ac:	88 0f       	add	r24, r24
    12ae:	99 1f       	adc	r25, r25
    12b0:	88 0f       	add	r24, r24
    12b2:	99 1f       	adc	r25, r25
    12b4:	88 0f       	add	r24, r24
    12b6:	99 1f       	adc	r25, r25
    12b8:	e8 0f       	add	r30, r24
    12ba:	f9 1f       	adc	r31, r25
    12bc:	e4 50       	subi	r30, 0x04	; 4
    12be:	f7 4f       	sbci	r31, 0xF7	; 247
    12c0:	81 e0       	ldi	r24, 0x01	; 1
    12c2:	81 87       	std	Z+9, r24	; 0x09
    12c4:	1f bf       	out	0x3f, r17	; 63
    12c6:	0f 90       	pop	r0
    12c8:	df 91       	pop	r29
    12ca:	cf 91       	pop	r28
    12cc:	1f 91       	pop	r17
    12ce:	08 95       	ret

000012d0 <load_hw_timer>:
    12d0:	0f 93       	push	r16
    12d2:	1f 93       	push	r17
    12d4:	cf 93       	push	r28
    12d6:	df 93       	push	r29
    12d8:	c8 2f       	mov	r28, r24
    12da:	8f 3f       	cpi	r24, 0xFF	; 255
    12dc:	09 f4       	brne	.+2      	; 0x12e0 <load_hw_timer+0x10>
    12de:	62 c0       	rjmp	.+196    	; 0x13a4 <load_hw_timer+0xd4>
    12e0:	00 91 fa 08 	lds	r16, 0x08FA	; 0x8008fa <sys_time>
    12e4:	10 91 fb 08 	lds	r17, 0x08FB	; 0x8008fb <sys_time+0x1>
    12e8:	0e 94 db 00 	call	0x1b6	; 0x1b6 <common_tc_read_count>
    12ec:	40 91 fa 08 	lds	r20, 0x08FA	; 0x8008fa <sys_time>
    12f0:	50 91 fb 08 	lds	r21, 0x08FB	; 0x8008fb <sys_time+0x1>
    12f4:	04 17       	cp	r16, r20
    12f6:	15 07       	cpc	r17, r21
    12f8:	99 f7       	brne	.-26     	; 0x12e0 <load_hw_timer+0x10>
    12fa:	d0 e0       	ldi	r29, 0x00	; 0
    12fc:	60 e0       	ldi	r22, 0x00	; 0
    12fe:	70 e0       	ldi	r23, 0x00	; 0
    1300:	fe 01       	movw	r30, r28
    1302:	ee 0f       	add	r30, r30
    1304:	ff 1f       	adc	r31, r31
    1306:	9e 01       	movw	r18, r28
    1308:	22 0f       	add	r18, r18
    130a:	33 1f       	adc	r19, r19
    130c:	22 0f       	add	r18, r18
    130e:	33 1f       	adc	r19, r19
    1310:	22 0f       	add	r18, r18
    1312:	33 1f       	adc	r19, r19
    1314:	e2 0f       	add	r30, r18
    1316:	f3 1f       	adc	r31, r19
    1318:	e4 50       	subi	r30, 0x04	; 4
    131a:	f7 4f       	sbci	r31, 0xF7	; 247
    131c:	ba 01       	movw	r22, r20
    131e:	55 27       	eor	r21, r21
    1320:	44 27       	eor	r20, r20
    1322:	a0 e0       	ldi	r26, 0x00	; 0
    1324:	b0 e0       	ldi	r27, 0x00	; 0
    1326:	48 2b       	or	r20, r24
    1328:	59 2b       	or	r21, r25
    132a:	6a 2b       	or	r22, r26
    132c:	7b 2b       	or	r23, r27
    132e:	80 81       	ld	r24, Z
    1330:	91 81       	ldd	r25, Z+1	; 0x01
    1332:	a2 81       	ldd	r26, Z+2	; 0x02
    1334:	b3 81       	ldd	r27, Z+3	; 0x03
    1336:	84 1b       	sub	r24, r20
    1338:	95 0b       	sbc	r25, r21
    133a:	a6 0b       	sbc	r26, r22
    133c:	b7 0b       	sbc	r27, r23
    133e:	8f 3f       	cpi	r24, 0xFF	; 255
    1340:	2f ef       	ldi	r18, 0xFF	; 255
    1342:	92 07       	cpc	r25, r18
    1344:	a2 07       	cpc	r26, r18
    1346:	2f e7       	ldi	r18, 0x7F	; 127
    1348:	b2 07       	cpc	r27, r18
    134a:	40 f5       	brcc	.+80     	; 0x139c <load_hw_timer+0xcc>
    134c:	9e 01       	movw	r18, r28
    134e:	22 0f       	add	r18, r18
    1350:	33 1f       	adc	r19, r19
    1352:	22 0f       	add	r18, r18
    1354:	33 1f       	adc	r19, r19
    1356:	22 0f       	add	r18, r18
    1358:	33 1f       	adc	r19, r19
    135a:	fe 01       	movw	r30, r28
    135c:	ee 0f       	add	r30, r30
    135e:	ff 1f       	adc	r31, r31
    1360:	e2 0f       	add	r30, r18
    1362:	f3 1f       	adc	r31, r19
    1364:	e4 50       	subi	r30, 0x04	; 4
    1366:	f7 4f       	sbci	r31, 0xF7	; 247
    1368:	21 85       	ldd	r18, Z+9	; 0x09
    136a:	21 11       	cpse	r18, r1
    136c:	1d c0       	rjmp	.+58     	; 0x13a8 <load_hw_timer+0xd8>
    136e:	00 97       	sbiw	r24, 0x00	; 0
    1370:	21 e0       	ldi	r18, 0x01	; 1
    1372:	a2 07       	cpc	r26, r18
    1374:	b1 05       	cpc	r27, r1
    1376:	c0 f4       	brcc	.+48     	; 0x13a8 <load_hw_timer+0xd8>
    1378:	0e 94 1e 01 	call	0x23c	; 0x23c <common_tc_delay>
    137c:	ce 01       	movw	r24, r28
    137e:	88 0f       	add	r24, r24
    1380:	99 1f       	adc	r25, r25
    1382:	cc 0f       	add	r28, r28
    1384:	dd 1f       	adc	r29, r29
    1386:	cc 0f       	add	r28, r28
    1388:	dd 1f       	adc	r29, r29
    138a:	cc 0f       	add	r28, r28
    138c:	dd 1f       	adc	r29, r29
    138e:	c8 0f       	add	r28, r24
    1390:	d9 1f       	adc	r29, r25
    1392:	c4 50       	subi	r28, 0x04	; 4
    1394:	d7 4f       	sbci	r29, 0xF7	; 247
    1396:	81 e0       	ldi	r24, 0x01	; 1
    1398:	89 87       	std	Y+9, r24	; 0x09
    139a:	06 c0       	rjmp	.+12     	; 0x13a8 <load_hw_timer+0xd8>
    139c:	81 e0       	ldi	r24, 0x01	; 1
    139e:	80 93 2e 09 	sts	0x092E, r24	; 0x80092e <timer_trigger>
    13a2:	02 c0       	rjmp	.+4      	; 0x13a8 <load_hw_timer+0xd8>
    13a4:	0e 94 03 01 	call	0x206	; 0x206 <common_tc_compare_stop>
    13a8:	df 91       	pop	r29
    13aa:	cf 91       	pop	r28
    13ac:	1f 91       	pop	r17
    13ae:	0f 91       	pop	r16
    13b0:	08 95       	ret

000013b2 <internal_timer_handler>:
    13b2:	80 91 2e 09 	lds	r24, 0x092E	; 0x80092e <timer_trigger>
    13b6:	88 23       	and	r24, r24
    13b8:	09 f4       	brne	.+2      	; 0x13bc <internal_timer_handler+0xa>
    13ba:	57 c0       	rjmp	.+174    	; 0x146a <internal_timer_handler+0xb8>
    13bc:	10 92 2e 09 	sts	0x092E, r1	; 0x80092e <timer_trigger>
    13c0:	80 91 36 05 	lds	r24, 0x0536	; 0x800536 <running_timers>
    13c4:	88 23       	and	r24, r24
    13c6:	09 f4       	brne	.+2      	; 0x13ca <internal_timer_handler+0x18>
    13c8:	50 c0       	rjmp	.+160    	; 0x146a <internal_timer_handler+0xb8>
    13ca:	80 91 34 05 	lds	r24, 0x0534	; 0x800534 <expired_timer_queue_head>
    13ce:	8f 3f       	cpi	r24, 0xFF	; 255
    13d0:	59 f4       	brne	.+22     	; 0x13e8 <internal_timer_handler+0x36>
    13d2:	80 91 33 05 	lds	r24, 0x0533	; 0x800533 <expired_timer_queue_tail>
    13d6:	8f 3f       	cpi	r24, 0xFF	; 255
    13d8:	39 f4       	brne	.+14     	; 0x13e8 <internal_timer_handler+0x36>
    13da:	80 91 35 05 	lds	r24, 0x0535	; 0x800535 <running_timer_queue_head>
    13de:	80 93 33 05 	sts	0x0533, r24	; 0x800533 <expired_timer_queue_tail>
    13e2:	80 93 34 05 	sts	0x0534, r24	; 0x800534 <expired_timer_queue_head>
    13e6:	15 c0       	rjmp	.+42     	; 0x1412 <internal_timer_handler+0x60>
    13e8:	20 91 35 05 	lds	r18, 0x0535	; 0x800535 <running_timer_queue_head>
    13ec:	80 91 33 05 	lds	r24, 0x0533	; 0x800533 <expired_timer_queue_tail>
    13f0:	90 e0       	ldi	r25, 0x00	; 0
    13f2:	fc 01       	movw	r30, r24
    13f4:	ee 0f       	add	r30, r30
    13f6:	ff 1f       	adc	r31, r31
    13f8:	88 0f       	add	r24, r24
    13fa:	99 1f       	adc	r25, r25
    13fc:	88 0f       	add	r24, r24
    13fe:	99 1f       	adc	r25, r25
    1400:	88 0f       	add	r24, r24
    1402:	99 1f       	adc	r25, r25
    1404:	e8 0f       	add	r30, r24
    1406:	f9 1f       	adc	r31, r25
    1408:	e4 50       	subi	r30, 0x04	; 4
    140a:	f7 4f       	sbci	r31, 0xF7	; 247
    140c:	20 87       	std	Z+8, r18	; 0x08
    140e:	20 93 33 05 	sts	0x0533, r18	; 0x800533 <expired_timer_queue_tail>
    1412:	80 91 35 05 	lds	r24, 0x0535	; 0x800535 <running_timer_queue_head>
    1416:	90 e0       	ldi	r25, 0x00	; 0
    1418:	fc 01       	movw	r30, r24
    141a:	ee 0f       	add	r30, r30
    141c:	ff 1f       	adc	r31, r31
    141e:	88 0f       	add	r24, r24
    1420:	99 1f       	adc	r25, r25
    1422:	88 0f       	add	r24, r24
    1424:	99 1f       	adc	r25, r25
    1426:	88 0f       	add	r24, r24
    1428:	99 1f       	adc	r25, r25
    142a:	e8 0f       	add	r30, r24
    142c:	f9 1f       	adc	r31, r25
    142e:	e4 50       	subi	r30, 0x04	; 4
    1430:	f7 4f       	sbci	r31, 0xF7	; 247
    1432:	80 85       	ldd	r24, Z+8	; 0x08
    1434:	80 93 35 05 	sts	0x0535, r24	; 0x800535 <running_timer_queue_head>
    1438:	20 91 33 05 	lds	r18, 0x0533	; 0x800533 <expired_timer_queue_tail>
    143c:	30 e0       	ldi	r19, 0x00	; 0
    143e:	f9 01       	movw	r30, r18
    1440:	ee 0f       	add	r30, r30
    1442:	ff 1f       	adc	r31, r31
    1444:	22 0f       	add	r18, r18
    1446:	33 1f       	adc	r19, r19
    1448:	22 0f       	add	r18, r18
    144a:	33 1f       	adc	r19, r19
    144c:	22 0f       	add	r18, r18
    144e:	33 1f       	adc	r19, r19
    1450:	e2 0f       	add	r30, r18
    1452:	f3 1f       	adc	r31, r19
    1454:	e4 50       	subi	r30, 0x04	; 4
    1456:	f7 4f       	sbci	r31, 0xF7	; 247
    1458:	9f ef       	ldi	r25, 0xFF	; 255
    145a:	90 87       	std	Z+8, r25	; 0x08
    145c:	90 91 36 05 	lds	r25, 0x0536	; 0x800536 <running_timers>
    1460:	91 50       	subi	r25, 0x01	; 1
    1462:	90 93 36 05 	sts	0x0536, r25	; 0x800536 <running_timers>
    1466:	91 11       	cpse	r25, r1
    1468:	33 cf       	rjmp	.-410    	; 0x12d0 <load_hw_timer>
    146a:	08 95       	ret

0000146c <sw_timer_get_id>:
    146c:	fc 01       	movw	r30, r24
    146e:	90 91 32 05 	lds	r25, 0x0532	; 0x800532 <alloc_timer_id>
    1472:	95 30       	cpi	r25, 0x05	; 5
    1474:	30 f4       	brcc	.+12     	; 0x1482 <sw_timer_get_id+0x16>
    1476:	90 83       	st	Z, r25
    1478:	9f 5f       	subi	r25, 0xFF	; 255
    147a:	90 93 32 05 	sts	0x0532, r25	; 0x800532 <alloc_timer_id>
    147e:	80 e0       	ldi	r24, 0x00	; 0
    1480:	08 95       	ret
    1482:	84 ef       	ldi	r24, 0xF4	; 244
    1484:	08 95       	ret

00001486 <sw_timer_start>:
    1486:	2f 92       	push	r2
    1488:	3f 92       	push	r3
    148a:	4f 92       	push	r4
    148c:	5f 92       	push	r5
    148e:	6f 92       	push	r6
    1490:	7f 92       	push	r7
    1492:	8f 92       	push	r8
    1494:	9f 92       	push	r9
    1496:	af 92       	push	r10
    1498:	bf 92       	push	r11
    149a:	cf 92       	push	r12
    149c:	df 92       	push	r13
    149e:	ef 92       	push	r14
    14a0:	ff 92       	push	r15
    14a2:	0f 93       	push	r16
    14a4:	1f 93       	push	r17
    14a6:	cf 93       	push	r28
    14a8:	df 93       	push	r29
    14aa:	cd b7       	in	r28, 0x3d	; 61
    14ac:	de b7       	in	r29, 0x3e	; 62
    14ae:	27 97       	sbiw	r28, 0x07	; 7
    14b0:	0f b6       	in	r0, 0x3f	; 63
    14b2:	f8 94       	cli
    14b4:	de bf       	out	0x3e, r29	; 62
    14b6:	0f be       	out	0x3f, r0	; 63
    14b8:	cd bf       	out	0x3d, r28	; 61
    14ba:	38 2e       	mov	r3, r24
    14bc:	4a 01       	movw	r8, r20
    14be:	5b 01       	movw	r10, r22
    14c0:	22 2e       	mov	r2, r18
    14c2:	ff 82       	std	Y+7, r15	; 0x07
    14c4:	ee 82       	std	Y+6, r14	; 0x06
    14c6:	68 94       	set
    14c8:	44 24       	eor	r4, r4
    14ca:	42 f8       	bld	r4, 2
    14cc:	48 16       	cp	r4, r24
    14ce:	08 f4       	brcc	.+2      	; 0x14d2 <sw_timer_start+0x4c>
    14d0:	00 c1       	rjmp	.+512    	; 0x16d2 <sw_timer_start+0x24c>
    14d2:	01 15       	cp	r16, r1
    14d4:	11 05       	cpc	r17, r1
    14d6:	09 f4       	brne	.+2      	; 0x14da <sw_timer_start+0x54>
    14d8:	fe c0       	rjmp	.+508    	; 0x16d6 <sw_timer_start+0x250>
    14da:	c8 2e       	mov	r12, r24
    14dc:	d1 2c       	mov	r13, r1
    14de:	f6 01       	movw	r30, r12
    14e0:	ee 0f       	add	r30, r30
    14e2:	ff 1f       	adc	r31, r31
    14e4:	c6 01       	movw	r24, r12
    14e6:	88 0f       	add	r24, r24
    14e8:	99 1f       	adc	r25, r25
    14ea:	88 0f       	add	r24, r24
    14ec:	99 1f       	adc	r25, r25
    14ee:	88 0f       	add	r24, r24
    14f0:	99 1f       	adc	r25, r25
    14f2:	e8 0f       	add	r30, r24
    14f4:	f9 1f       	adc	r31, r25
    14f6:	e4 50       	subi	r30, 0x04	; 4
    14f8:	f7 4f       	sbci	r31, 0xF7	; 247
    14fa:	84 81       	ldd	r24, Z+4	; 0x04
    14fc:	95 81       	ldd	r25, Z+5	; 0x05
    14fe:	89 2b       	or	r24, r25
    1500:	09 f0       	breq	.+2      	; 0x1504 <sw_timer_start+0x7e>
    1502:	eb c0       	rjmp	.+470    	; 0x16da <sw_timer_start+0x254>
    1504:	e0 90 fa 08 	lds	r14, 0x08FA	; 0x8008fa <sys_time>
    1508:	f0 90 fb 08 	lds	r15, 0x08FB	; 0x8008fb <sys_time+0x1>
    150c:	0e 94 db 00 	call	0x1b6	; 0x1b6 <common_tc_read_count>
    1510:	40 91 fa 08 	lds	r20, 0x08FA	; 0x8008fa <sys_time>
    1514:	50 91 fb 08 	lds	r21, 0x08FB	; 0x8008fb <sys_time+0x1>
    1518:	e4 16       	cp	r14, r20
    151a:	f5 06       	cpc	r15, r21
    151c:	99 f7       	brne	.-26     	; 0x1504 <sw_timer_start+0x7e>
    151e:	60 e0       	ldi	r22, 0x00	; 0
    1520:	70 e0       	ldi	r23, 0x00	; 0
    1522:	ba 01       	movw	r22, r20
    1524:	55 27       	eor	r21, r21
    1526:	44 27       	eor	r20, r20
    1528:	2c 01       	movw	r4, r24
    152a:	61 2c       	mov	r6, r1
    152c:	71 2c       	mov	r7, r1
    152e:	4a 82       	std	Y+2, r4	; 0x02
    1530:	5b 82       	std	Y+3, r5	; 0x03
    1532:	6c 82       	std	Y+4, r6	; 0x04
    1534:	7d 82       	std	Y+5, r7	; 0x05
    1536:	44 2a       	or	r4, r20
    1538:	55 2a       	or	r5, r21
    153a:	66 2a       	or	r6, r22
    153c:	77 2a       	or	r7, r23
    153e:	22 20       	and	r2, r2
    1540:	21 f0       	breq	.+8      	; 0x154a <sw_timer_start+0xc4>
    1542:	21 e0       	ldi	r18, 0x01	; 1
    1544:	22 16       	cp	r2, r18
    1546:	91 f0       	breq	.+36     	; 0x156c <sw_timer_start+0xe6>
    1548:	ca c0       	rjmp	.+404    	; 0x16de <sw_timer_start+0x258>
    154a:	b5 01       	movw	r22, r10
    154c:	a4 01       	movw	r20, r8
    154e:	40 58       	subi	r20, 0x80	; 128
    1550:	51 09       	sbc	r21, r1
    1552:	61 09       	sbc	r22, r1
    1554:	71 09       	sbc	r23, r1
    1556:	40 38       	cpi	r20, 0x80	; 128
    1558:	5f 4f       	sbci	r21, 0xFF	; 255
    155a:	6f 4f       	sbci	r22, 0xFF	; 255
    155c:	7f 47       	sbci	r23, 0x7F	; 127
    155e:	08 f0       	brcs	.+2      	; 0x1562 <sw_timer_start+0xdc>
    1560:	c0 c0       	rjmp	.+384    	; 0x16e2 <sw_timer_start+0x25c>
    1562:	84 0c       	add	r8, r4
    1564:	95 1c       	adc	r9, r5
    1566:	a6 1c       	adc	r10, r6
    1568:	b7 1c       	adc	r11, r7
    156a:	10 c0       	rjmp	.+32     	; 0x158c <sw_timer_start+0x106>
    156c:	b5 01       	movw	r22, r10
    156e:	a4 01       	movw	r20, r8
    1570:	40 58       	subi	r20, 0x80	; 128
    1572:	51 09       	sbc	r21, r1
    1574:	61 09       	sbc	r22, r1
    1576:	71 09       	sbc	r23, r1
    1578:	44 19       	sub	r20, r4
    157a:	55 09       	sbc	r21, r5
    157c:	66 09       	sbc	r22, r6
    157e:	77 09       	sbc	r23, r7
    1580:	40 38       	cpi	r20, 0x80	; 128
    1582:	5f 4f       	sbci	r21, 0xFF	; 255
    1584:	6f 4f       	sbci	r22, 0xFF	; 255
    1586:	7f 47       	sbci	r23, 0x7F	; 127
    1588:	08 f0       	brcs	.+2      	; 0x158c <sw_timer_start+0x106>
    158a:	ad c0       	rjmp	.+346    	; 0x16e6 <sw_timer_start+0x260>
    158c:	8f b7       	in	r24, 0x3f	; 63
    158e:	89 83       	std	Y+1, r24	; 0x01
    1590:	f8 94       	cli
    1592:	f9 80       	ldd	r15, Y+1	; 0x01
    1594:	0e df       	rcall	.-484    	; 0x13b2 <internal_timer_handler>
    1596:	c6 01       	movw	r24, r12
    1598:	88 0f       	add	r24, r24
    159a:	99 1f       	adc	r25, r25
    159c:	88 0f       	add	r24, r24
    159e:	99 1f       	adc	r25, r25
    15a0:	88 0f       	add	r24, r24
    15a2:	99 1f       	adc	r25, r25
    15a4:	f6 01       	movw	r30, r12
    15a6:	ee 0f       	add	r30, r30
    15a8:	ff 1f       	adc	r31, r31
    15aa:	e8 0f       	add	r30, r24
    15ac:	f9 1f       	adc	r31, r25
    15ae:	e4 50       	subi	r30, 0x04	; 4
    15b0:	f7 4f       	sbci	r31, 0xF7	; 247
    15b2:	80 82       	st	Z, r8
    15b4:	91 82       	std	Z+1, r9	; 0x01
    15b6:	a2 82       	std	Z+2, r10	; 0x02
    15b8:	b3 82       	std	Z+3, r11	; 0x03
    15ba:	15 83       	std	Z+5, r17	; 0x05
    15bc:	04 83       	std	Z+4, r16	; 0x04
    15be:	4e 80       	ldd	r4, Y+6	; 0x06
    15c0:	5f 80       	ldd	r5, Y+7	; 0x07
    15c2:	57 82       	std	Z+7, r5	; 0x07
    15c4:	46 82       	std	Z+6, r4	; 0x06
    15c6:	11 86       	std	Z+9, r1	; 0x09
    15c8:	b0 91 36 05 	lds	r27, 0x0536	; 0x800536 <running_timers>
    15cc:	bf 5f       	subi	r27, 0xFF	; 255
    15ce:	b0 93 36 05 	sts	0x0536, r27	; 0x800536 <running_timers>
    15d2:	a0 91 35 05 	lds	r26, 0x0535	; 0x800535 <running_timer_queue_head>
    15d6:	af 3f       	cpi	r26, 0xFF	; 255
    15d8:	21 f0       	breq	.+8      	; 0x15e2 <sw_timer_start+0x15c>
    15da:	b1 11       	cpse	r27, r1
    15dc:	07 c0       	rjmp	.+14     	; 0x15ec <sw_timer_start+0x166>
    15de:	ea 2e       	mov	r14, r26
    15e0:	84 c0       	rjmp	.+264    	; 0x16ea <sw_timer_start+0x264>
    15e2:	30 92 35 05 	sts	0x0535, r3	; 0x800535 <running_timer_queue_head>
    15e6:	83 2d       	mov	r24, r3
    15e8:	73 de       	rcall	.-794    	; 0x12d0 <load_hw_timer>
    15ea:	70 c0       	rjmp	.+224    	; 0x16cc <sw_timer_start+0x246>
    15ec:	ea 2e       	mov	r14, r26
    15ee:	4a 2f       	mov	r20, r26
    15f0:	50 e0       	ldi	r21, 0x00	; 0
    15f2:	4f 3f       	cpi	r20, 0xFF	; 255
    15f4:	09 f4       	brne	.+2      	; 0x15f8 <sw_timer_start+0x172>
    15f6:	66 c0       	rjmp	.+204    	; 0x16c4 <sw_timer_start+0x23e>
    15f8:	84 2f       	mov	r24, r20
    15fa:	90 e0       	ldi	r25, 0x00	; 0
    15fc:	bc 01       	movw	r22, r24
    15fe:	66 0f       	add	r22, r22
    1600:	77 1f       	adc	r23, r23
    1602:	9c 01       	movw	r18, r24
    1604:	22 0f       	add	r18, r18
    1606:	33 1f       	adc	r19, r19
    1608:	22 0f       	add	r18, r18
    160a:	33 1f       	adc	r19, r19
    160c:	22 0f       	add	r18, r18
    160e:	33 1f       	adc	r19, r19
    1610:	26 0f       	add	r18, r22
    1612:	37 1f       	adc	r19, r23
    1614:	f9 01       	movw	r30, r18
    1616:	e4 50       	subi	r30, 0x04	; 4
    1618:	f7 4f       	sbci	r31, 0xF7	; 247
    161a:	40 80       	ld	r4, Z
    161c:	51 80       	ldd	r5, Z+1	; 0x01
    161e:	62 80       	ldd	r6, Z+2	; 0x02
    1620:	73 80       	ldd	r7, Z+3	; 0x03
    1622:	95 01       	movw	r18, r10
    1624:	84 01       	movw	r16, r8
    1626:	04 19       	sub	r16, r4
    1628:	15 09       	sbc	r17, r5
    162a:	26 09       	sbc	r18, r6
    162c:	37 09       	sbc	r19, r7
    162e:	28 01       	movw	r4, r16
    1630:	39 01       	movw	r6, r18
    1632:	1f ef       	ldi	r17, 0xFF	; 255
    1634:	41 16       	cp	r4, r17
    1636:	51 06       	cpc	r5, r17
    1638:	61 06       	cpc	r6, r17
    163a:	1f e7       	ldi	r17, 0x7F	; 127
    163c:	71 06       	cpc	r7, r17
    163e:	70 f4       	brcc	.+28     	; 0x165c <sw_timer_start+0x1d6>
    1640:	fb 01       	movw	r30, r22
    1642:	88 0f       	add	r24, r24
    1644:	99 1f       	adc	r25, r25
    1646:	88 0f       	add	r24, r24
    1648:	99 1f       	adc	r25, r25
    164a:	88 0f       	add	r24, r24
    164c:	99 1f       	adc	r25, r25
    164e:	e8 0f       	add	r30, r24
    1650:	f9 1f       	adc	r31, r25
    1652:	e4 50       	subi	r30, 0x04	; 4
    1654:	f7 4f       	sbci	r31, 0xF7	; 247
    1656:	e4 2e       	mov	r14, r20
    1658:	40 85       	ldd	r20, Z+8	; 0x08
    165a:	34 c0       	rjmp	.+104    	; 0x16c4 <sw_timer_start+0x23e>
    165c:	f6 01       	movw	r30, r12
    165e:	ee 0f       	add	r30, r30
    1660:	ff 1f       	adc	r31, r31
    1662:	cc 0c       	add	r12, r12
    1664:	dd 1c       	adc	r13, r13
    1666:	cc 0c       	add	r12, r12
    1668:	dd 1c       	adc	r13, r13
    166a:	cc 0c       	add	r12, r12
    166c:	dd 1c       	adc	r13, r13
    166e:	ec 0d       	add	r30, r12
    1670:	fd 1d       	adc	r31, r13
    1672:	e4 50       	subi	r30, 0x04	; 4
    1674:	f7 4f       	sbci	r31, 0xF7	; 247
    1676:	40 87       	std	Z+8, r20	; 0x08
    1678:	fc 01       	movw	r30, r24
    167a:	ee 0f       	add	r30, r30
    167c:	ff 1f       	adc	r31, r31
    167e:	88 0f       	add	r24, r24
    1680:	99 1f       	adc	r25, r25
    1682:	88 0f       	add	r24, r24
    1684:	99 1f       	adc	r25, r25
    1686:	88 0f       	add	r24, r24
    1688:	99 1f       	adc	r25, r25
    168a:	e8 0f       	add	r30, r24
    168c:	f9 1f       	adc	r31, r25
    168e:	e4 50       	subi	r30, 0x04	; 4
    1690:	f7 4f       	sbci	r31, 0xF7	; 247
    1692:	11 86       	std	Z+9, r1	; 0x09
    1694:	a4 13       	cpse	r26, r20
    1696:	05 c0       	rjmp	.+10     	; 0x16a2 <sw_timer_start+0x21c>
    1698:	30 92 35 05 	sts	0x0535, r3	; 0x800535 <running_timer_queue_head>
    169c:	83 2d       	mov	r24, r3
    169e:	18 de       	rcall	.-976    	; 0x12d0 <load_hw_timer>
    16a0:	15 c0       	rjmp	.+42     	; 0x16cc <sw_timer_start+0x246>
    16a2:	8e 2d       	mov	r24, r14
    16a4:	90 e0       	ldi	r25, 0x00	; 0
    16a6:	fc 01       	movw	r30, r24
    16a8:	ee 0f       	add	r30, r30
    16aa:	ff 1f       	adc	r31, r31
    16ac:	88 0f       	add	r24, r24
    16ae:	99 1f       	adc	r25, r25
    16b0:	88 0f       	add	r24, r24
    16b2:	99 1f       	adc	r25, r25
    16b4:	88 0f       	add	r24, r24
    16b6:	99 1f       	adc	r25, r25
    16b8:	e8 0f       	add	r30, r24
    16ba:	f9 1f       	adc	r31, r25
    16bc:	e4 50       	subi	r30, 0x04	; 4
    16be:	f7 4f       	sbci	r31, 0xF7	; 247
    16c0:	30 86       	std	Z+8, r3	; 0x08
    16c2:	04 c0       	rjmp	.+8      	; 0x16cc <sw_timer_start+0x246>
    16c4:	5f 5f       	subi	r21, 0xFF	; 255
    16c6:	b5 13       	cpse	r27, r21
    16c8:	94 cf       	rjmp	.-216    	; 0x15f2 <sw_timer_start+0x16c>
    16ca:	0f c0       	rjmp	.+30     	; 0x16ea <sw_timer_start+0x264>
    16cc:	ff be       	out	0x3f, r15	; 63
    16ce:	80 e0       	ldi	r24, 0x00	; 0
    16d0:	2c c0       	rjmp	.+88     	; 0x172a <sw_timer_start+0x2a4>
    16d2:	88 ef       	ldi	r24, 0xF8	; 248
    16d4:	2a c0       	rjmp	.+84     	; 0x172a <sw_timer_start+0x2a4>
    16d6:	88 ef       	ldi	r24, 0xF8	; 248
    16d8:	28 c0       	rjmp	.+80     	; 0x172a <sw_timer_start+0x2a4>
    16da:	83 ef       	ldi	r24, 0xF3	; 243
    16dc:	26 c0       	rjmp	.+76     	; 0x172a <sw_timer_start+0x2a4>
    16de:	88 ef       	ldi	r24, 0xF8	; 248
    16e0:	24 c0       	rjmp	.+72     	; 0x172a <sw_timer_start+0x2a4>
    16e2:	88 ef       	ldi	r24, 0xF8	; 248
    16e4:	22 c0       	rjmp	.+68     	; 0x172a <sw_timer_start+0x2a4>
    16e6:	88 ef       	ldi	r24, 0xF8	; 248
    16e8:	20 c0       	rjmp	.+64     	; 0x172a <sw_timer_start+0x2a4>
    16ea:	8e 2d       	mov	r24, r14
    16ec:	90 e0       	ldi	r25, 0x00	; 0
    16ee:	fc 01       	movw	r30, r24
    16f0:	ee 0f       	add	r30, r30
    16f2:	ff 1f       	adc	r31, r31
    16f4:	88 0f       	add	r24, r24
    16f6:	99 1f       	adc	r25, r25
    16f8:	88 0f       	add	r24, r24
    16fa:	99 1f       	adc	r25, r25
    16fc:	88 0f       	add	r24, r24
    16fe:	99 1f       	adc	r25, r25
    1700:	e8 0f       	add	r30, r24
    1702:	f9 1f       	adc	r31, r25
    1704:	e4 50       	subi	r30, 0x04	; 4
    1706:	f7 4f       	sbci	r31, 0xF7	; 247
    1708:	30 86       	std	Z+8, r3	; 0x08
    170a:	f6 01       	movw	r30, r12
    170c:	ee 0f       	add	r30, r30
    170e:	ff 1f       	adc	r31, r31
    1710:	cc 0c       	add	r12, r12
    1712:	dd 1c       	adc	r13, r13
    1714:	cc 0c       	add	r12, r12
    1716:	dd 1c       	adc	r13, r13
    1718:	cc 0c       	add	r12, r12
    171a:	dd 1c       	adc	r13, r13
    171c:	ec 0d       	add	r30, r12
    171e:	fd 1d       	adc	r31, r13
    1720:	e4 50       	subi	r30, 0x04	; 4
    1722:	f7 4f       	sbci	r31, 0xF7	; 247
    1724:	8f ef       	ldi	r24, 0xFF	; 255
    1726:	80 87       	std	Z+8, r24	; 0x08
    1728:	d1 cf       	rjmp	.-94     	; 0x16cc <sw_timer_start+0x246>
    172a:	27 96       	adiw	r28, 0x07	; 7
    172c:	0f b6       	in	r0, 0x3f	; 63
    172e:	f8 94       	cli
    1730:	de bf       	out	0x3e, r29	; 62
    1732:	0f be       	out	0x3f, r0	; 63
    1734:	cd bf       	out	0x3d, r28	; 61
    1736:	df 91       	pop	r29
    1738:	cf 91       	pop	r28
    173a:	1f 91       	pop	r17
    173c:	0f 91       	pop	r16
    173e:	ff 90       	pop	r15
    1740:	ef 90       	pop	r14
    1742:	df 90       	pop	r13
    1744:	cf 90       	pop	r12
    1746:	bf 90       	pop	r11
    1748:	af 90       	pop	r10
    174a:	9f 90       	pop	r9
    174c:	8f 90       	pop	r8
    174e:	7f 90       	pop	r7
    1750:	6f 90       	pop	r6
    1752:	5f 90       	pop	r5
    1754:	4f 90       	pop	r4
    1756:	3f 90       	pop	r3
    1758:	2f 90       	pop	r2
    175a:	08 95       	ret

0000175c <sw_timer_init>:
	 * Initialize the timer resources like timer arrays
	 * queues, timer registers
	 */
	uint8_t index;

	running_timers = 0;
    175c:	10 92 36 05 	sts	0x0536, r1	; 0x800536 <running_timers>
	timer_trigger = false;
    1760:	10 92 2e 09 	sts	0x092E, r1	; 0x80092e <timer_trigger>
	sys_time = 0;
    1764:	10 92 fb 08 	sts	0x08FB, r1	; 0x8008fb <sys_time+0x1>
    1768:	10 92 fa 08 	sts	0x08FA, r1	; 0x8008fa <sys_time>

	running_timer_queue_head = NO_TIMER;
    176c:	8f ef       	ldi	r24, 0xFF	; 255
    176e:	80 93 35 05 	sts	0x0535, r24	; 0x800535 <running_timer_queue_head>
	expired_timer_queue_head = NO_TIMER;
    1772:	80 93 34 05 	sts	0x0534, r24	; 0x800534 <expired_timer_queue_head>
	expired_timer_queue_tail = NO_TIMER;
    1776:	80 93 33 05 	sts	0x0533, r24	; 0x800533 <expired_timer_queue_tail>
    177a:	ec ef       	ldi	r30, 0xFC	; 252
    177c:	f8 e0       	ldi	r31, 0x08	; 8
    177e:	2e e2       	ldi	r18, 0x2E	; 46
    1780:	39 e0       	ldi	r19, 0x09	; 9

	for (index = 0; index < TOTAL_NUMBER_OF_SW_TIMERS; index++) {
		timer_array[index].next_timer_in_queue = NO_TIMER;
    1782:	80 87       	std	Z+8, r24	; 0x08
		timer_array[index].timer_cb = NULL;
    1784:	15 82       	std	Z+5, r1	; 0x05
    1786:	14 82       	std	Z+4, r1	; 0x04
    1788:	3a 96       	adiw	r30, 0x0a	; 10

	running_timer_queue_head = NO_TIMER;
	expired_timer_queue_head = NO_TIMER;
	expired_timer_queue_tail = NO_TIMER;

	for (index = 0; index < TOTAL_NUMBER_OF_SW_TIMERS; index++) {
    178a:	e2 17       	cp	r30, r18
    178c:	f3 07       	cpc	r31, r19
    178e:	c9 f7       	brne	.-14     	; 0x1782 <sw_timer_init+0x26>
		timer_array[index].next_timer_in_queue = NO_TIMER;
		timer_array[index].timer_cb = NULL;
	}

	alloc_timer_id = 0;
    1790:	10 92 32 05 	sts	0x0532, r1	; 0x800532 <alloc_timer_id>
	set_common_tc_overflow_callback(hw_overflow_cb);
    1794:	8d e0       	ldi	r24, 0x0D	; 13
    1796:	99 e0       	ldi	r25, 0x09	; 9
    1798:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <set_common_tc_overflow_callback>
	set_common_tc_expiry_callback(hw_expiry_cb);
    179c:	85 e0       	ldi	r24, 0x05	; 5
    179e:	99 e0       	ldi	r25, 0x09	; 9
    17a0:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <set_common_tc_expiry_callback>
	common_tc_init();
    17a4:	0c 94 93 01 	jmp	0x326	; 0x326 <common_tc_init>
    17a8:	08 95       	ret

000017aa <sw_timer_service>:
#endif /* #if (TOTAL_NUMBER_OF_SW_TIMERS > 0) */
}

void sw_timer_service(void)
{
    17aa:	0f 93       	push	r16
    17ac:	1f 93       	push	r17
    17ae:	cf 93       	push	r28
    17b0:	df 93       	push	r29
    17b2:	1f 92       	push	r1
    17b4:	1f 92       	push	r1
    17b6:	cd b7       	in	r28, 0x3d	; 61
    17b8:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    17ba:	8f b7       	in	r24, 0x3f	; 63
    17bc:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
    17be:	f8 94       	cli
	return flags;
    17c0:	1a 81       	ldd	r17, Y+2	; 0x02
#if (TOTAL_NUMBER_OF_SW_TIMERS > 0)
	uint8_t flags = cpu_irq_save();
	internal_timer_handler();
    17c2:	f7 dd       	rcall	.-1042   	; 0x13b2 <internal_timer_handler>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    17c4:	1f bf       	out	0x3f, r17	; 63
			 * The expired timer's structure elements are updated
			 * and the timer
			 * is taken out of expired timer queue
			 */
			timer_array[expired_timer_queue_head].
			next_timer_in_queue = NO_TIMER;
    17c6:	1f ef       	ldi	r17, 0xFF	; 255
    17c8:	01 2f       	mov	r16, r17
    17ca:	37 c0       	rjmp	.+110    	; 0x183a <sw_timer_service+0x90>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    17cc:	8f b7       	in	r24, 0x3f	; 63
    17ce:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    17d0:	f8 94       	cli
	return flags;
    17d2:	29 81       	ldd	r18, Y+1	; 0x01
		/* Expired timer if any will be processed here */
		while (NO_TIMER != expired_timer_queue_head) {
			flags = cpu_irq_save();

			next_expired_timer
				= timer_array[expired_timer_queue_head].
    17d4:	80 91 34 05 	lds	r24, 0x0534	; 0x800534 <expired_timer_queue_head>
    17d8:	90 e0       	ldi	r25, 0x00	; 0
    17da:	dc 01       	movw	r26, r24
    17dc:	aa 0f       	add	r26, r26
    17de:	bb 1f       	adc	r27, r27
    17e0:	88 0f       	add	r24, r24
    17e2:	99 1f       	adc	r25, r25
    17e4:	88 0f       	add	r24, r24
    17e6:	99 1f       	adc	r25, r25
    17e8:	88 0f       	add	r24, r24
    17ea:	99 1f       	adc	r25, r25
    17ec:	a8 0f       	add	r26, r24
    17ee:	b9 1f       	adc	r27, r25
    17f0:	a4 50       	subi	r26, 0x04	; 4
    17f2:	b7 4f       	sbci	r27, 0xF7	; 247
    17f4:	18 96       	adiw	r26, 0x08	; 8
    17f6:	9c 91       	ld	r25, X
    17f8:	18 97       	sbiw	r26, 0x08	; 8
					next_timer_in_queue;

			/* Callback is stored */
			callback
				= (timer_expiry_cb_t)timer_array[
    17fa:	14 96       	adiw	r26, 0x04	; 4
    17fc:	ed 91       	ld	r30, X+
    17fe:	fc 91       	ld	r31, X
    1800:	15 97       	sbiw	r26, 0x05	; 5
				expired_timer_queue_head
					].timer_cb;

			/* Callback parameter is stored */
			callback_param
				= timer_array[expired_timer_queue_head].param_cb;
    1802:	16 96       	adiw	r26, 0x06	; 6
    1804:	4d 91       	ld	r20, X+
    1806:	5c 91       	ld	r21, X
    1808:	17 97       	sbiw	r26, 0x07	; 7
			 * The expired timer's structure elements are updated
			 * and the timer
			 * is taken out of expired timer queue
			 */
			timer_array[expired_timer_queue_head].
			next_timer_in_queue = NO_TIMER;
    180a:	18 96       	adiw	r26, 0x08	; 8
    180c:	1c 93       	st	X, r17
    180e:	18 97       	sbiw	r26, 0x08	; 8
			timer_array[expired_timer_queue_head].timer_cb = NULL;
    1810:	15 96       	adiw	r26, 0x05	; 5
    1812:	1c 92       	st	X, r1
    1814:	1e 92       	st	-X, r1
    1816:	14 97       	sbiw	r26, 0x04	; 4
			timer_array[expired_timer_queue_head].param_cb = NULL;
    1818:	17 96       	adiw	r26, 0x07	; 7
    181a:	1c 92       	st	X, r1
    181c:	1e 92       	st	-X, r1
    181e:	16 97       	sbiw	r26, 0x06	; 6
			timer_array[expired_timer_queue_head].loaded = false;
    1820:	19 96       	adiw	r26, 0x09	; 9
    1822:	1c 92       	st	X, r1
			/*
			 * The expired timer queue head is updated with the next
			 * timer in the
			 * expired timer queue.
			 */
			expired_timer_queue_head = next_expired_timer;
    1824:	90 93 34 05 	sts	0x0534, r25	; 0x800534 <expired_timer_queue_head>

			if (NO_TIMER == expired_timer_queue_head) {
    1828:	9f 3f       	cpi	r25, 0xFF	; 255
    182a:	11 f4       	brne	.+4      	; 0x1830 <sw_timer_service+0x86>
				expired_timer_queue_tail = NO_TIMER;
    182c:	00 93 33 05 	sts	0x0533, r16	; 0x800533 <expired_timer_queue_tail>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1830:	2f bf       	out	0x3f, r18	; 63
			}

			cpu_irq_restore(flags);

			if (NULL != callback) {
    1832:	30 97       	sbiw	r30, 0x00	; 0
    1834:	11 f0       	breq	.+4      	; 0x183a <sw_timer_service+0x90>
				/* Callback function is called */
				callback(callback_param);
    1836:	ca 01       	movw	r24, r20
    1838:	19 95       	eicall
		timer_expiry_cb_t callback;
		void *callback_param;
		uint8_t next_expired_timer;

		/* Expired timer if any will be processed here */
		while (NO_TIMER != expired_timer_queue_head) {
    183a:	80 91 34 05 	lds	r24, 0x0534	; 0x800534 <expired_timer_queue_head>
    183e:	8f 3f       	cpi	r24, 0xFF	; 255
    1840:	29 f6       	brne	.-118    	; 0x17cc <sw_timer_service+0x22>
				callback(callback_param);
			}
		}
	}
#endif /* #if (TOTAL_NUMBER_OF_SW_TIMERS > 0) */
}
    1842:	0f 90       	pop	r0
    1844:	0f 90       	pop	r0
    1846:	df 91       	pop	r29
    1848:	cf 91       	pop	r28
    184a:	1f 91       	pop	r17
    184c:	0f 91       	pop	r16
    184e:	08 95       	ret

00001850 <pal_init>:
}

bool pal_is_timer_running(uint8_t timer_id)
{
	return sw_timer_is_running(timer_id);
}
    1850:	80 e0       	ldi	r24, 0x00	; 0
    1852:	08 95       	ret

00001854 <pal_task>:
 *
 * This function calls sio & timer handling functions.
 */
void pal_task(void)
{
	sw_timer_service();
    1854:	aa cf       	rjmp	.-172    	; 0x17aa <sw_timer_service>
    1856:	08 95       	ret

00001858 <bmm_buffer_init>:
 * This function initializes the buffer module.
 * This function should be called before using any other functionality
 * of buffer module.
 */
void bmm_buffer_init(void)
{
    1858:	cf 93       	push	r28
    185a:	df 93       	push	r29
	/* Initialize free buffer queue for large buffers */
#if (TOTAL_NUMBER_OF_LARGE_BUFS > 0)
    #ifdef ENABLE_QUEUE_CAPACITY
	qmm_queue_init(&free_large_buffer_q, TOTAL_NUMBER_OF_LARGE_BUFS);
    #else
	qmm_queue_init(&free_large_buffer_q);
    185c:	87 e3       	ldi	r24, 0x37	; 55
    185e:	95 e0       	ldi	r25, 0x05	; 5
    1860:	b0 d0       	rcall	.+352    	; 0x19c2 <qmm_queue_init>
	for (index = 0; index < TOTAL_NUMBER_OF_LARGE_BUFS; index++) {
		/*
		 * Initialize the buffer body pointer with address of the
		 * buffer body
		 */
		buf_header[index].body = buf_pool + (index * LARGE_BUFFER_SIZE);
    1862:	cc e3       	ldi	r28, 0x3C	; 60
    1864:	d5 e0       	ldi	r29, 0x05	; 5
    1866:	88 e4       	ldi	r24, 0x48	; 72
    1868:	95 e0       	ldi	r25, 0x05	; 5
    186a:	99 83       	std	Y+1, r25	; 0x01
    186c:	88 83       	st	Y, r24

		/* Append the buffer to free large buffer queue */
		qmm_queue_append(&free_large_buffer_q, &buf_header[index]);
    186e:	be 01       	movw	r22, r28
    1870:	87 e3       	ldi	r24, 0x37	; 55
    1872:	95 e0       	ldi	r25, 0x05	; 5
    1874:	ad d0       	rcall	.+346    	; 0x19d0 <qmm_queue_append>
	for (index = 0; index < TOTAL_NUMBER_OF_LARGE_BUFS; index++) {
		/*
		 * Initialize the buffer body pointer with address of the
		 * buffer body
		 */
		buf_header[index].body = buf_pool + (index * LARGE_BUFFER_SIZE);
    1876:	83 ed       	ldi	r24, 0xD3	; 211
    1878:	95 e0       	ldi	r25, 0x05	; 5
    187a:	9d 83       	std	Y+5, r25	; 0x05
    187c:	8c 83       	std	Y+4, r24	; 0x04

		/* Append the buffer to free large buffer queue */
		qmm_queue_append(&free_large_buffer_q, &buf_header[index]);
    187e:	60 e4       	ldi	r22, 0x40	; 64
    1880:	75 e0       	ldi	r23, 0x05	; 5
    1882:	87 e3       	ldi	r24, 0x37	; 55
    1884:	95 e0       	ldi	r25, 0x05	; 5
    1886:	a4 d0       	rcall	.+328    	; 0x19d0 <qmm_queue_append>
	for (index = 0; index < TOTAL_NUMBER_OF_LARGE_BUFS; index++) {
		/*
		 * Initialize the buffer body pointer with address of the
		 * buffer body
		 */
		buf_header[index].body = buf_pool + (index * LARGE_BUFFER_SIZE);
    1888:	8e e5       	ldi	r24, 0x5E	; 94
    188a:	96 e0       	ldi	r25, 0x06	; 6
    188c:	99 87       	std	Y+9, r25	; 0x09
    188e:	88 87       	std	Y+8, r24	; 0x08

		/* Append the buffer to free large buffer queue */
		qmm_queue_append(&free_large_buffer_q, &buf_header[index]);
    1890:	64 e4       	ldi	r22, 0x44	; 68
    1892:	75 e0       	ldi	r23, 0x05	; 5
    1894:	87 e3       	ldi	r24, 0x37	; 55
    1896:	95 e0       	ldi	r25, 0x05	; 5
    1898:	9b d0       	rcall	.+310    	; 0x19d0 <qmm_queue_append>
		/* Append the buffer to free small buffer queue */
		qmm_queue_append(&free_small_buffer_q, &buf_header[index + \
				TOTAL_NUMBER_OF_LARGE_BUFS]);
	}
#endif
}
    189a:	df 91       	pop	r29
    189c:	cf 91       	pop	r28
    189e:	08 95       	ret

000018a0 <bmm_buffer_alloc>:
			}
		}

#else /* no small buffers available at all */
	/* Allocate buffer from free large buffer queue */
	pfree_buffer = qmm_queue_remove(&free_large_buffer_q, NULL);
    18a0:	60 e0       	ldi	r22, 0x00	; 0
    18a2:	70 e0       	ldi	r23, 0x00	; 0
    18a4:	87 e3       	ldi	r24, 0x37	; 55
    18a6:	95 e0       	ldi	r25, 0x05	; 5
    18a8:	b8 c0       	rjmp	.+368    	; 0x1a1a <qmm_queue_remove>

	size = size; /* Keep compiler happy. */
#endif

		return pfree_buffer;
	}
    18aa:	08 95       	ret

000018ac <bmm_buffer_free>:
	 *
	 * @param pbuffer Pointer to buffer that has to be freed.
	 */
	void bmm_buffer_free(buffer_t *pbuffer)
	{
		if (NULL == pbuffer) {
    18ac:	00 97       	sbiw	r24, 0x00	; 0
    18ae:	21 f0       	breq	.+8      	; 0x18b8 <bmm_buffer_free+0xc>
    18b0:	bc 01       	movw	r22, r24
			qmm_queue_append(&free_large_buffer_q, pbuffer);
		}

#else /* no small buffers available at all */
		/* Append the buffer into free large buffer queue */
		qmm_queue_append(&free_large_buffer_q, pbuffer);
    18b2:	87 e3       	ldi	r24, 0x37	; 55
    18b4:	95 e0       	ldi	r25, 0x05	; 5
    18b6:	8c c0       	rjmp	.+280    	; 0x19d0 <qmm_queue_append>
    18b8:	08 95       	ret

000018ba <queue_read_or_remove>:
 * \ingroup group_qmm
 */
static buffer_t *queue_read_or_remove(queue_t *q,
		buffer_mode_t mode,
		search_t *search)
{
    18ba:	8f 92       	push	r8
    18bc:	9f 92       	push	r9
    18be:	af 92       	push	r10
    18c0:	bf 92       	push	r11
    18c2:	cf 92       	push	r12
    18c4:	df 92       	push	r13
    18c6:	ef 92       	push	r14
    18c8:	ff 92       	push	r15
    18ca:	0f 93       	push	r16
    18cc:	1f 93       	push	r17
    18ce:	cf 93       	push	r28
    18d0:	df 93       	push	r29
    18d2:	1f 92       	push	r1
    18d4:	cd b7       	in	r28, 0x3d	; 61
    18d6:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    18d8:	2f b7       	in	r18, 0x3f	; 63
    18da:	29 83       	std	Y+1, r18	; 0x01
	cpu_irq_disable();
    18dc:	f8 94       	cli
	return flags;
    18de:	89 80       	ldd	r8, Y+1	; 0x01
	buffer_t *buffer_current = NULL;
	buffer_t *buffer_previous;

	ENTER_CRITICAL_REGION();
	/* Check whether queue is empty */
	if (q->size != 0) {
    18e0:	dc 01       	movw	r26, r24
    18e2:	14 96       	adiw	r26, 0x04	; 4
    18e4:	2c 91       	ld	r18, X
    18e6:	22 23       	and	r18, r18
    18e8:	09 f4       	brne	.+2      	; 0x18ec <queue_read_or_remove+0x32>
    18ea:	56 c0       	rjmp	.+172    	; 0x1998 <queue_read_or_remove+0xde>
    18ec:	7a 01       	movw	r14, r20
    18ee:	96 2e       	mov	r9, r22
    18f0:	5c 01       	movw	r10, r24
		buffer_current = q->head;
    18f2:	fc 01       	movw	r30, r24
    18f4:	00 81       	ld	r16, Z
    18f6:	11 81       	ldd	r17, Z+1	; 0x01
		buffer_previous = q->head;

		/* First get buffer matching with criteria */
		if (NULL != search) {
    18f8:	45 2b       	or	r20, r21
    18fa:	e1 f0       	breq	.+56     	; 0x1934 <queue_read_or_remove+0x7a>
			uint8_t match;
			/* Search for all buffers in the queue */
			while (NULL != buffer_current) {
    18fc:	01 15       	cp	r16, r1
    18fe:	11 05       	cpc	r17, r1
    1900:	09 f4       	brne	.+2      	; 0x1904 <queue_read_or_remove+0x4a>
    1902:	4d c0       	rjmp	.+154    	; 0x199e <queue_read_or_remove+0xe4>
    1904:	68 01       	movw	r12, r16
    1906:	01 c0       	rjmp	.+2      	; 0x190a <queue_read_or_remove+0x50>
					/* Break, if search criteria matches */
					break;
				}

				buffer_previous = buffer_current;
				buffer_current = buffer_current->next;
    1908:	89 01       	movw	r16, r18
		/* First get buffer matching with criteria */
		if (NULL != search) {
			uint8_t match;
			/* Search for all buffers in the queue */
			while (NULL != buffer_current) {
				match = search->criteria_func(
    190a:	d7 01       	movw	r26, r14
    190c:	12 96       	adiw	r26, 0x02	; 2
    190e:	6d 91       	ld	r22, X+
    1910:	7c 91       	ld	r23, X
    1912:	13 97       	sbiw	r26, 0x03	; 3
    1914:	ed 91       	ld	r30, X+
    1916:	fc 91       	ld	r31, X
    1918:	d8 01       	movw	r26, r16
    191a:	8d 91       	ld	r24, X+
    191c:	9c 91       	ld	r25, X
    191e:	19 95       	eicall
						(void *)buffer_current->body,
						search->handle);

				if (match) {
    1920:	81 11       	cpse	r24, r1
    1922:	09 c0       	rjmp	.+18     	; 0x1936 <queue_read_or_remove+0x7c>
					/* Break, if search criteria matches */
					break;
				}

				buffer_previous = buffer_current;
				buffer_current = buffer_current->next;
    1924:	f8 01       	movw	r30, r16
    1926:	22 81       	ldd	r18, Z+2	; 0x02
    1928:	33 81       	ldd	r19, Z+3	; 0x03
    192a:	68 01       	movw	r12, r16

		/* First get buffer matching with criteria */
		if (NULL != search) {
			uint8_t match;
			/* Search for all buffers in the queue */
			while (NULL != buffer_current) {
    192c:	21 15       	cp	r18, r1
    192e:	31 05       	cpc	r19, r1
    1930:	59 f7       	brne	.-42     	; 0x1908 <queue_read_or_remove+0x4e>
    1932:	35 c0       	rjmp	.+106    	; 0x199e <queue_read_or_remove+0xe4>

	ENTER_CRITICAL_REGION();
	/* Check whether queue is empty */
	if (q->size != 0) {
		buffer_current = q->head;
		buffer_previous = q->head;
    1934:	68 01       	movw	r12, r16
				buffer_current = buffer_current->next;
			}
		}

		/* Buffer matching with search criteria found */
		if (NULL != buffer_current) {
    1936:	01 15       	cp	r16, r1
    1938:	11 05       	cpc	r17, r1
    193a:	99 f1       	breq	.+102    	; 0x19a2 <queue_read_or_remove+0xe8>
			/* Remove buffer from the queue */
			if (REMOVE_MODE == mode) {
    193c:	91 10       	cpse	r9, r1
    193e:	31 c0       	rjmp	.+98     	; 0x19a2 <queue_read_or_remove+0xe8>
				/* Update head if buffer removed is first node
				**/
				if (buffer_current == q->head) {
    1940:	d5 01       	movw	r26, r10
    1942:	8d 91       	ld	r24, X+
    1944:	9c 91       	ld	r25, X
    1946:	11 97       	sbiw	r26, 0x01	; 1
    1948:	08 17       	cp	r16, r24
    194a:	19 07       	cpc	r17, r25
    194c:	31 f4       	brne	.+12     	; 0x195a <queue_read_or_remove+0xa0>
					q->head = buffer_current->next;
    194e:	f8 01       	movw	r30, r16
    1950:	82 81       	ldd	r24, Z+2	; 0x02
    1952:	93 81       	ldd	r25, Z+3	; 0x03
    1954:	8d 93       	st	X+, r24
    1956:	9c 93       	st	X, r25
    1958:	08 c0       	rjmp	.+16     	; 0x196a <queue_read_or_remove+0xb0>
				} else {
					/* Update the link by removing the
					 * buffer */
					buffer_previous->next
						= buffer_current->next;
    195a:	d8 01       	movw	r26, r16
    195c:	12 96       	adiw	r26, 0x02	; 2
    195e:	8d 91       	ld	r24, X+
    1960:	9c 91       	ld	r25, X
    1962:	13 97       	sbiw	r26, 0x03	; 3
    1964:	f6 01       	movw	r30, r12
    1966:	93 83       	std	Z+3, r25	; 0x03
    1968:	82 83       	std	Z+2, r24	; 0x02
				}

				/* Update tail if buffer removed is last node */
				if (buffer_current == q->tail) {
    196a:	d5 01       	movw	r26, r10
    196c:	12 96       	adiw	r26, 0x02	; 2
    196e:	8d 91       	ld	r24, X+
    1970:	9c 91       	ld	r25, X
    1972:	13 97       	sbiw	r26, 0x03	; 3
    1974:	08 17       	cp	r16, r24
    1976:	19 07       	cpc	r17, r25
    1978:	21 f4       	brne	.+8      	; 0x1982 <queue_read_or_remove+0xc8>
					q->tail = buffer_previous;
    197a:	13 96       	adiw	r26, 0x03	; 3
    197c:	dc 92       	st	X, r13
    197e:	ce 92       	st	-X, r12
    1980:	12 97       	sbiw	r26, 0x02	; 2
				}

				/* Update size */
				q->size--;
    1982:	f5 01       	movw	r30, r10
    1984:	84 81       	ldd	r24, Z+4	; 0x04
    1986:	81 50       	subi	r24, 0x01	; 1
    1988:	84 83       	std	Z+4, r24	; 0x04

				if (NULL == q->head) {
    198a:	80 81       	ld	r24, Z
    198c:	91 81       	ldd	r25, Z+1	; 0x01
    198e:	89 2b       	or	r24, r25
    1990:	41 f4       	brne	.+16     	; 0x19a2 <queue_read_or_remove+0xe8>
					q->tail = NULL;
    1992:	13 82       	std	Z+3, r1	; 0x03
    1994:	12 82       	std	Z+2, r1	; 0x02
    1996:	05 c0       	rjmp	.+10     	; 0x19a2 <queue_read_or_remove+0xe8>
 */
static buffer_t *queue_read_or_remove(queue_t *q,
		buffer_mode_t mode,
		search_t *search)
{
	buffer_t *buffer_current = NULL;
    1998:	00 e0       	ldi	r16, 0x00	; 0
    199a:	10 e0       	ldi	r17, 0x00	; 0
    199c:	02 c0       	rjmp	.+4      	; 0x19a2 <queue_read_or_remove+0xe8>
    199e:	00 e0       	ldi	r16, 0x00	; 0
    19a0:	10 e0       	ldi	r17, 0x00	; 0
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    19a2:	8f be       	out	0x3f, r8	; 63
	LEAVE_CRITICAL_REGION();

	/* Return the buffer. note that pointer to header of buffer is returned
	**/
	return (buffer_current);
} /* queue_read_or_remove */
    19a4:	c8 01       	movw	r24, r16
    19a6:	0f 90       	pop	r0
    19a8:	df 91       	pop	r29
    19aa:	cf 91       	pop	r28
    19ac:	1f 91       	pop	r17
    19ae:	0f 91       	pop	r16
    19b0:	ff 90       	pop	r15
    19b2:	ef 90       	pop	r14
    19b4:	df 90       	pop	r13
    19b6:	cf 90       	pop	r12
    19b8:	bf 90       	pop	r11
    19ba:	af 90       	pop	r10
    19bc:	9f 90       	pop	r9
    19be:	8f 90       	pop	r8
    19c0:	08 95       	ret

000019c2 <qmm_queue_init>:
#ifdef ENABLE_QUEUE_CAPACITY
void qmm_queue_init(queue_t *q, uint8_t capacity)
#else
void qmm_queue_init(queue_t *q)
#endif  /* ENABLE_QUEUE_CAPACITY */
{
    19c2:	fc 01       	movw	r30, r24
	q->head = NULL;
    19c4:	11 82       	std	Z+1, r1	; 0x01
    19c6:	10 82       	st	Z, r1
	q->tail = NULL;
    19c8:	13 82       	std	Z+3, r1	; 0x03
    19ca:	12 82       	std	Z+2, r1	; 0x02
	q->size = 0;
    19cc:	14 82       	std	Z+4, r1	; 0x04
    19ce:	08 95       	ret

000019d0 <qmm_queue_append>:
#ifdef ENABLE_QUEUE_CAPACITY
retval_t qmm_queue_append(queue_t *q, buffer_t *buf)
#else
void qmm_queue_append(queue_t *q, buffer_t *buf)
#endif  /* ENABLE_QUEUE_CAPACITY */
{
    19d0:	cf 93       	push	r28
    19d2:	df 93       	push	r29
    19d4:	1f 92       	push	r1
    19d6:	cd b7       	in	r28, 0x3d	; 61
    19d8:	de b7       	in	r29, 0x3e	; 62
    19da:	fc 01       	movw	r30, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    19dc:	8f b7       	in	r24, 0x3f	; 63
    19de:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    19e0:	f8 94       	cli
	return flags;
    19e2:	99 81       	ldd	r25, Y+1	; 0x01
		status = QUEUE_FULL;
	} else
#endif  /* ENABLE_QUEUE_CAPACITY */
	{
		/* Check whether queue is empty */
		if (q->size == 0) {
    19e4:	84 81       	ldd	r24, Z+4	; 0x04
    19e6:	81 11       	cpse	r24, r1
    19e8:	03 c0       	rjmp	.+6      	; 0x19f0 <qmm_queue_append+0x20>
			/* Add the buffer at the head */
			q->head = buf;
    19ea:	71 83       	std	Z+1, r23	; 0x01
    19ec:	60 83       	st	Z, r22
    19ee:	06 c0       	rjmp	.+12     	; 0x19fc <qmm_queue_append+0x2c>
		} else {
			/* Add the buffer at the end */
			q->tail->next = buf;
    19f0:	a2 81       	ldd	r26, Z+2	; 0x02
    19f2:	b3 81       	ldd	r27, Z+3	; 0x03
    19f4:	13 96       	adiw	r26, 0x03	; 3
    19f6:	7c 93       	st	X, r23
    19f8:	6e 93       	st	-X, r22
    19fa:	12 97       	sbiw	r26, 0x02	; 2
		}

		/* Update the list */
		q->tail = buf;
    19fc:	73 83       	std	Z+3, r23	; 0x03
    19fe:	62 83       	std	Z+2, r22	; 0x02

		/* Terminate the list */
		buf->next = NULL;
    1a00:	db 01       	movw	r26, r22
    1a02:	13 96       	adiw	r26, 0x03	; 3
    1a04:	1c 92       	st	X, r1
    1a06:	1e 92       	st	-X, r1
    1a08:	12 97       	sbiw	r26, 0x02	; 2

		/* Update size */
		q->size++;
    1a0a:	84 81       	ldd	r24, Z+4	; 0x04
    1a0c:	8f 5f       	subi	r24, 0xFF	; 255
    1a0e:	84 83       	std	Z+4, r24	; 0x04
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1a10:	9f bf       	out	0x3f, r25	; 63
	LEAVE_CRITICAL_REGION();

#ifdef ENABLE_QUEUE_CAPACITY
	return (status);
#endif
} /* qmm_queue_append */
    1a12:	0f 90       	pop	r0
    1a14:	df 91       	pop	r29
    1a16:	cf 91       	pop	r28
    1a18:	08 95       	ret

00001a1a <qmm_queue_remove>:
 *
 * @return Pointer to the buffer header, if the buffer is
 * successfully removed, NULL otherwise.
 */
buffer_t *qmm_queue_remove(queue_t *q, search_t *search)
{
    1a1a:	ab 01       	movw	r20, r22
	return (queue_read_or_remove(q, REMOVE_MODE, search));
    1a1c:	60 e0       	ldi	r22, 0x00	; 0
    1a1e:	4d cf       	rjmp	.-358    	; 0x18ba <queue_read_or_remove>
}
    1a20:	08 95       	ret

00001a22 <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
    1a22:	04 c0       	rjmp	.+8      	; 0x1a2c <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
    1a24:	61 50       	subi	r22, 0x01	; 1
    1a26:	71 09       	sbc	r23, r1
    1a28:	81 09       	sbc	r24, r1
    1a2a:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
    1a2c:	61 15       	cp	r22, r1
    1a2e:	71 05       	cpc	r23, r1
    1a30:	81 05       	cpc	r24, r1
    1a32:	91 05       	cpc	r25, r1
    1a34:	b9 f7       	brne	.-18     	; 0x1a24 <__portable_avr_delay_cycles+0x2>
    1a36:	08 95       	ret

00001a38 <switch_pll_on>:
/**
 * \brief Switches the PLL on
 * \ingroup group_tal_state_machine_rfr2
 */
static void switch_pll_on(void)
{
    1a38:	0f 93       	push	r16
    1a3a:	1f 93       	push	r17
    1a3c:	cf 93       	push	r28
	trx_irq_reason_t irq_status;
	uint8_t poll_counter = 0;

	/* Check if trx is in TRX_OFF; only from PLL_ON the following procedure
	 * is applicable */
	if (trx_bit_read(SR_TRX_STATUS) != TRX_OFF) {
    1a3e:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7c0141>
    1a42:	8f 71       	andi	r24, 0x1F	; 31
    1a44:	88 30       	cpi	r24, 0x08	; 8
    1a46:	a1 f4       	brne	.+40     	; 0x1a70 <switch_pll_on+0x38>
				"Switch PLL_ON failed, because trx is not in TRX_OFF" ==
				0);
		return;
	}

	IRQ_STATUS = _BV(PLL_LOCK); /* clear PLL lock bit */
    1a48:	81 e0       	ldi	r24, 0x01	; 1
    1a4a:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <__TEXT_REGION_LENGTH__+0x7c014f>
	/* Switch PLL on */
	trx_reg_write(RG_TRX_STATE, CMD_PLL_ON);
    1a4e:	89 e0       	ldi	r24, 0x09	; 9
    1a50:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
    1a54:	c3 e0       	ldi	r28, 0x03	; 3

	/* Check if PLL has been locked. */
	do {
		irq_status = (trx_irq_reason_t)trx_reg_read(RG_IRQ_STATUS);
    1a56:	0f e4       	ldi	r16, 0x4F	; 79
    1a58:	11 e0       	ldi	r17, 0x01	; 1
    1a5a:	f8 01       	movw	r30, r16
    1a5c:	80 81       	ld	r24, Z

		if (irq_status & TRX_IRQ_PLL_LOCK) {
    1a5e:	80 fd       	sbrc	r24, 0
    1a60:	07 c0       	rjmp	.+14     	; 0x1a70 <switch_pll_on+0x38>
			return; /* PLL is locked now */
		}

		/* Wait a time interval of typical value for timer TR4. */
		pal_timer_delay(TRX_OFF_TO_PLL_ON_TIME_US);
    1a62:	63 e9       	ldi	r22, 0x93	; 147
    1a64:	70 e0       	ldi	r23, 0x00	; 0
    1a66:	80 e0       	ldi	r24, 0x00	; 0
    1a68:	90 e0       	ldi	r25, 0x00	; 0
    1a6a:	db df       	rcall	.-74     	; 0x1a22 <__portable_avr_delay_cycles>
    1a6c:	c1 50       	subi	r28, 0x01	; 1

		poll_counter++;
	} while (poll_counter < PLL_LOCK_ATTEMPTS);
    1a6e:	a9 f7       	brne	.-22     	; 0x1a5a <switch_pll_on+0x22>

#if (_DEBUG_ > 0)
	Assert("PLL switch failed" == 0);
#endif
}
    1a70:	cf 91       	pop	r28
    1a72:	1f 91       	pop	r17
    1a74:	0f 91       	pop	r16
    1a76:	08 95       	ret

00001a78 <set_trx_state>:
 * \param trx_cmd needs to be one of the trx commands
 *
 * \return current trx state
 */
tal_trx_status_t set_trx_state(trx_cmd_t trx_cmd)
{
    1a78:	1f 93       	push	r17
    1a7a:	cf 93       	push	r28
    1a7c:	df 93       	push	r29
    1a7e:	1f 92       	push	r1
    1a80:	cd b7       	in	r28, 0x3d	; 61
    1a82:	de b7       	in	r29, 0x3e	; 62
    1a84:	18 2f       	mov	r17, r24
	if (tal_trx_status == TRX_SLEEP) {
    1a86:	80 91 56 09 	lds	r24, 0x0956	; 0x800956 <tal_trx_status>
    1a8a:	8f 30       	cpi	r24, 0x0F	; 15
    1a8c:	51 f5       	brne	.+84     	; 0x1ae2 <set_trx_state+0x6a>
		 * Once the TRX is awake, the original state of the global
		 * interrupts
		 * will be restored.
		 */
		/* Reset wake-up interrupt flag. */
		if (CMD_SLEEP == trx_cmd) {
    1a8e:	1f 30       	cpi	r17, 0x0F	; 15
    1a90:	09 f4       	brne	.+2      	; 0x1a94 <set_trx_state+0x1c>
    1a92:	38 c1       	rjmp	.+624    	; 0x1d04 <set_trx_state+0x28c>
			return TRX_SLEEP;
		}

		tal_awake_end_flag = false;
    1a94:	10 92 5a 09 	sts	0x095A, r1	; 0x80095a <tal_awake_end_flag>
		/* Set callback function for the awake interrupt. */
		pal_trx_irq_init_awake((FUNC_PTR)trx_awake_handler_cb);
    1a98:	81 e7       	ldi	r24, 0x71	; 113
    1a9a:	91 e1       	ldi	r25, 0x11	; 17
    1a9c:	e1 d2       	rcall	.+1474   	; 0x2060 <pal_trx_irq_init_awake>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1a9e:	8f b7       	in	r24, 0x3f	; 63
    1aa0:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    1aa2:	f8 94       	cli
	return flags;
    1aa4:	99 81       	ldd	r25, Y+1	; 0x01
		/* Save current state of global interrupts. */
		ENTER_CRITICAL_REGION();
		/* Force enabling of global interrupts. */
		ENABLE_GLOBAL_IRQ();
    1aa6:	78 94       	sei
		/* Leave trx sleep mode. */
		TRX_SLP_TR_LOW();
    1aa8:	e9 e3       	ldi	r30, 0x39	; 57
    1aaa:	f1 e0       	ldi	r31, 0x01	; 1
    1aac:	80 81       	ld	r24, Z
    1aae:	8d 7f       	andi	r24, 0xFD	; 253
    1ab0:	80 83       	st	Z, r24
		/* Poll wake-up interrupt flag until set within ISR. */
		while (!tal_awake_end_flag) {
    1ab2:	80 91 5a 09 	lds	r24, 0x095A	; 0x80095a <tal_awake_end_flag>
    1ab6:	88 23       	and	r24, r24
    1ab8:	e1 f3       	breq	.-8      	; 0x1ab2 <set_trx_state+0x3a>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1aba:	9f bf       	out	0x3f, r25	; 63
		}
		/* Restore original state of global interrupts. */
		LEAVE_CRITICAL_REGION();
		/* Clear existing interrupts */
		trx_reg_write(RG_IRQ_STATUS, 0xFF);
    1abc:	8f ef       	ldi	r24, 0xFF	; 255
    1abe:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <__TEXT_REGION_LENGTH__+0x7c014f>
		/* Re-enable TRX_END interrupt */
		trx_reg_write(RG_IRQ_MASK, TRX_IRQ_DEFAULT);
    1ac2:	88 e4       	ldi	r24, 0x48	; 72
    1ac4:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <__TEXT_REGION_LENGTH__+0x7c014e>

#if (ANTENNA_DIVERSITY == 1)
		/* Enable antenna diversity. */
		trx_bit_write(SR_ANT_EXT_SW_EN, ANT_EXT_SW_ENABLE);
    1ac8:	ed e4       	ldi	r30, 0x4D	; 77
    1aca:	f1 e0       	ldi	r31, 0x01	; 1
    1acc:	80 81       	ld	r24, Z
    1ace:	84 60       	ori	r24, 0x04	; 4
    1ad0:	80 83       	st	Z, r24
#endif

		if ((trx_cmd == CMD_TRX_OFF) ||
    1ad2:	18 30       	cpi	r17, 0x08	; 8
    1ad4:	11 f0       	breq	.+4      	; 0x1ada <set_trx_state+0x62>
    1ad6:	13 30       	cpi	r17, 0x03	; 3
    1ad8:	21 f4       	brne	.+8      	; 0x1ae2 <set_trx_state+0x6a>
				(trx_cmd == CMD_FORCE_TRX_OFF)) {
			tal_trx_status = TRX_OFF;
    1ada:	88 e0       	ldi	r24, 0x08	; 8
    1adc:	80 93 56 09 	sts	0x0956, r24	; 0x800956 <tal_trx_status>
			return TRX_OFF;
    1ae0:	11 c1       	rjmp	.+546    	; 0x1d04 <set_trx_state+0x28c>
		}
	}

	switch (trx_cmd) { /* requested state */
    1ae2:	81 2f       	mov	r24, r17
    1ae4:	90 e0       	ldi	r25, 0x00	; 0
    1ae6:	fc 01       	movw	r30, r24
    1ae8:	33 97       	sbiw	r30, 0x03	; 3
    1aea:	e7 31       	cpi	r30, 0x17	; 23
    1aec:	f1 05       	cpc	r31, r1
    1aee:	08 f0       	brcs	.+2      	; 0x1af2 <set_trx_state+0x7a>
    1af0:	5a c0       	rjmp	.+180    	; 0x1ba6 <set_trx_state+0x12e>
    1af2:	88 27       	eor	r24, r24
    1af4:	e6 56       	subi	r30, 0x66	; 102
    1af6:	ff 4f       	sbci	r31, 0xFF	; 255
    1af8:	8f 4f       	sbci	r24, 0xFF	; 255
    1afa:	0c 94 8c 1a 	jmp	0x3518	; 0x3518 <__tablejump2__>
	case CMD_SLEEP:
		trx_reg_write(RG_TRX_STATE, CMD_FORCE_TRX_OFF);
    1afe:	83 e0       	ldi	r24, 0x03	; 3
    1b00:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
#if (ANTENNA_DIVERSITY == 1)
		/* Disable antenna diversity: sets pulls */
		trx_bit_write(SR_ANT_EXT_SW_EN, ANT_EXT_SW_DISABLE);
    1b04:	ed e4       	ldi	r30, 0x4D	; 77
    1b06:	f1 e0       	ldi	r31, 0x01	; 1
    1b08:	80 81       	ld	r24, Z
    1b0a:	8b 7f       	andi	r24, 0xFB	; 251
    1b0c:	80 83       	st	Z, r24
			uint16_t rand_value;

			/*
			 * Init the SEED value of the CSMA backoff algorithm.
			 */
			rand_value = (uint16_t)rand();
    1b0e:	0e 94 12 1b 	call	0x3624	; 0x3624 <rand>
			trx_reg_write(RG_CSMA_SEED_0, (uint8_t)rand_value);
    1b12:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <__TEXT_REGION_LENGTH__+0x7c016d>
			trx_bit_write(SR_CSMA_SEED_1,
    1b16:	ee e6       	ldi	r30, 0x6E	; 110
    1b18:	f1 e0       	ldi	r31, 0x01	; 1
    1b1a:	80 81       	ld	r24, Z
    1b1c:	97 70       	andi	r25, 0x07	; 7
    1b1e:	88 7f       	andi	r24, 0xF8	; 248
    1b20:	89 2b       	or	r24, r25
    1b22:	80 83       	st	Z, r24

		/*
		 * Clear existing interrupts to have clear interrupt flags
		 * during wake-up.
		 */
		trx_reg_write(RG_IRQ_STATUS, 0xFF);
    1b24:	8f ef       	ldi	r24, 0xFF	; 255
    1b26:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <__TEXT_REGION_LENGTH__+0x7c014f>

		/*
		 * Enable Awake_end interrupt.
		 * This is used for save wake-up from sleep later.
		 */
		trx_reg_write(RG_IRQ_MASK, TRX_IRQ_AWAKE_ONLY);
    1b2a:	80 e8       	ldi	r24, 0x80	; 128
    1b2c:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <__TEXT_REGION_LENGTH__+0x7c014e>

		PAL_WAIT_1_US();
    1b30:	62 e0       	ldi	r22, 0x02	; 2
    1b32:	70 e0       	ldi	r23, 0x00	; 0
    1b34:	80 e0       	ldi	r24, 0x00	; 0
    1b36:	90 e0       	ldi	r25, 0x00	; 0
    1b38:	74 df       	rcall	.-280    	; 0x1a22 <__portable_avr_delay_cycles>
		TRX_SLP_TR_HIGH();
    1b3a:	e9 e3       	ldi	r30, 0x39	; 57
    1b3c:	f1 e0       	ldi	r31, 0x01	; 1
    1b3e:	80 81       	ld	r24, Z
    1b40:	82 60       	ori	r24, 0x02	; 2
    1b42:	80 83       	st	Z, r24
		pal_timer_delay(TRX_OFF_TO_SLEEP_TIME_CLKM_CYCLES);
    1b44:	6f e2       	ldi	r22, 0x2F	; 47
    1b46:	70 e0       	ldi	r23, 0x00	; 0
    1b48:	80 e0       	ldi	r24, 0x00	; 0
    1b4a:	90 e0       	ldi	r25, 0x00	; 0
    1b4c:	6a df       	rcall	.-300    	; 0x1a22 <__portable_avr_delay_cycles>
		tal_trx_status = TRX_SLEEP;
    1b4e:	8f e0       	ldi	r24, 0x0F	; 15
    1b50:	80 93 56 09 	sts	0x0956, r24	; 0x800956 <tal_trx_status>
		return TRX_SLEEP; /* transceiver register cannot be read during
    1b54:	d7 c0       	rjmp	.+430    	; 0x1d04 <set_trx_state+0x28c>
		                   * TRX_SLEEP */

	case CMD_TRX_OFF:
		switch (tal_trx_status) {
    1b56:	80 91 56 09 	lds	r24, 0x0956	; 0x800956 <tal_trx_status>
    1b5a:	88 30       	cpi	r24, 0x08	; 8
    1b5c:	21 f1       	breq	.+72     	; 0x1ba6 <set_trx_state+0x12e>
		case TRX_OFF:
			break;

		default:
			trx_reg_write(RG_TRX_STATE, CMD_TRX_OFF);
    1b5e:	88 e0       	ldi	r24, 0x08	; 8
    1b60:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
			PAL_WAIT_1_US();
    1b64:	62 e0       	ldi	r22, 0x02	; 2
    1b66:	70 e0       	ldi	r23, 0x00	; 0
    1b68:	80 e0       	ldi	r24, 0x00	; 0
    1b6a:	90 e0       	ldi	r25, 0x00	; 0
    1b6c:	5a df       	rcall	.-332    	; 0x1a22 <__portable_avr_delay_cycles>
			break;
    1b6e:	1b c0       	rjmp	.+54     	; 0x1ba6 <set_trx_state+0x12e>
		}
		break;

	case CMD_FORCE_TRX_OFF:
		switch (tal_trx_status) {
    1b70:	80 91 56 09 	lds	r24, 0x0956	; 0x800956 <tal_trx_status>
    1b74:	88 30       	cpi	r24, 0x08	; 8
    1b76:	b9 f0       	breq	.+46     	; 0x1ba6 <set_trx_state+0x12e>
		case TRX_OFF:
			break;

		default:
			trx_reg_write(RG_TRX_STATE, CMD_FORCE_TRX_OFF);
    1b78:	83 e0       	ldi	r24, 0x03	; 3
    1b7a:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
			PAL_WAIT_1_US();
    1b7e:	62 e0       	ldi	r22, 0x02	; 2
    1b80:	70 e0       	ldi	r23, 0x00	; 0
    1b82:	80 e0       	ldi	r24, 0x00	; 0
    1b84:	90 e0       	ldi	r25, 0x00	; 0
    1b86:	4d df       	rcall	.-358    	; 0x1a22 <__portable_avr_delay_cycles>
			break;
    1b88:	0e c0       	rjmp	.+28     	; 0x1ba6 <set_trx_state+0x12e>
		}
		break;

	case CMD_PLL_ON:
		switch (tal_trx_status) {
    1b8a:	80 91 56 09 	lds	r24, 0x0956	; 0x800956 <tal_trx_status>
    1b8e:	88 30       	cpi	r24, 0x08	; 8
    1b90:	49 f0       	breq	.+18     	; 0x1ba4 <set_trx_state+0x12c>
    1b92:	18 f4       	brcc	.+6      	; 0x1b9a <set_trx_state+0x122>
    1b94:	86 30       	cpi	r24, 0x06	; 6
    1b96:	39 f4       	brne	.+14     	; 0x1ba6 <set_trx_state+0x12e>
    1b98:	09 c0       	rjmp	.+18     	; 0x1bac <set_trx_state+0x134>
    1b9a:	86 31       	cpi	r24, 0x16	; 22
    1b9c:	39 f0       	breq	.+14     	; 0x1bac <set_trx_state+0x134>
    1b9e:	89 31       	cpi	r24, 0x19	; 25
    1ba0:	11 f4       	brne	.+4      	; 0x1ba6 <set_trx_state+0x12e>
		case PLL_ON:
			break;

		case TRX_OFF:
			switch_pll_on();
    1ba2:	04 c0       	rjmp	.+8      	; 0x1bac <set_trx_state+0x134>
    1ba4:	49 df       	rcall	.-366    	; 0x1a38 <switch_pll_on>
		Assert("trx command not handled" == 0);
		break;
	}

	do {
		tal_trx_status = (tal_trx_status_t)trx_bit_read(
    1ba6:	e1 e4       	ldi	r30, 0x41	; 65
    1ba8:	f1 e0       	ldi	r31, 0x01	; 1
    1baa:	a6 c0       	rjmp	.+332    	; 0x1cf8 <set_trx_state+0x280>
			break;

		case RX_ON:
		case RX_AACK_ON:
		case TX_ARET_ON:
			trx_reg_write(RG_TRX_STATE, CMD_PLL_ON);
    1bac:	89 e0       	ldi	r24, 0x09	; 9
    1bae:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
			PAL_WAIT_1_US();
    1bb2:	62 e0       	ldi	r22, 0x02	; 2
    1bb4:	70 e0       	ldi	r23, 0x00	; 0
    1bb6:	80 e0       	ldi	r24, 0x00	; 0
    1bb8:	90 e0       	ldi	r25, 0x00	; 0
    1bba:	33 df       	rcall	.-410    	; 0x1a22 <__portable_avr_delay_cycles>
			break;
    1bbc:	f4 cf       	rjmp	.-24     	; 0x1ba6 <set_trx_state+0x12e>
			break;
		}
		break;

	case CMD_FORCE_PLL_ON:
		switch (tal_trx_status) {
    1bbe:	80 91 56 09 	lds	r24, 0x0956	; 0x800956 <tal_trx_status>
    1bc2:	88 30       	cpi	r24, 0x08	; 8
    1bc4:	19 f0       	breq	.+6      	; 0x1bcc <set_trx_state+0x154>
    1bc6:	89 30       	cpi	r24, 0x09	; 9
    1bc8:	71 f3       	breq	.-36     	; 0x1ba6 <set_trx_state+0x12e>
		case TRX_OFF:
			switch_pll_on();
    1bca:	02 c0       	rjmp	.+4      	; 0x1bd0 <set_trx_state+0x158>
    1bcc:	35 df       	rcall	.-406    	; 0x1a38 <switch_pll_on>
			break;
    1bce:	eb cf       	rjmp	.-42     	; 0x1ba6 <set_trx_state+0x12e>

		case PLL_ON:
			break;

		default:
			trx_reg_write(RG_TRX_STATE, CMD_FORCE_PLL_ON);
    1bd0:	84 e0       	ldi	r24, 0x04	; 4
    1bd2:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
			break;
    1bd6:	e7 cf       	rjmp	.-50     	; 0x1ba6 <set_trx_state+0x12e>
		}
		break;

	case CMD_RX_ON:
		switch (tal_trx_status) {
    1bd8:	80 91 56 09 	lds	r24, 0x0956	; 0x800956 <tal_trx_status>
    1bdc:	89 30       	cpi	r24, 0x09	; 9
    1bde:	41 f0       	breq	.+16     	; 0x1bf0 <set_trx_state+0x178>
    1be0:	18 f4       	brcc	.+6      	; 0x1be8 <set_trx_state+0x170>
    1be2:	88 30       	cpi	r24, 0x08	; 8
    1be4:	71 f0       	breq	.+28     	; 0x1c02 <set_trx_state+0x18a>
    1be6:	df cf       	rjmp	.-66     	; 0x1ba6 <set_trx_state+0x12e>
    1be8:	86 31       	cpi	r24, 0x16	; 22
    1bea:	11 f0       	breq	.+4      	; 0x1bf0 <set_trx_state+0x178>
    1bec:	89 31       	cpi	r24, 0x19	; 25
			break;

		case PLL_ON:
		case RX_AACK_ON:
		case TX_ARET_ON:
			trx_reg_write(RG_TRX_STATE, CMD_RX_ON);
    1bee:	d9 f6       	brne	.-74     	; 0x1ba6 <set_trx_state+0x12e>
    1bf0:	86 e0       	ldi	r24, 0x06	; 6
			PAL_WAIT_1_US();
    1bf2:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
    1bf6:	62 e0       	ldi	r22, 0x02	; 2
    1bf8:	70 e0       	ldi	r23, 0x00	; 0
    1bfa:	80 e0       	ldi	r24, 0x00	; 0
    1bfc:	90 e0       	ldi	r25, 0x00	; 0
			break;

		case TRX_OFF:
			switch_pll_on();
    1bfe:	11 df       	rcall	.-478    	; 0x1a22 <__portable_avr_delay_cycles>
    1c00:	d2 cf       	rjmp	.-92     	; 0x1ba6 <set_trx_state+0x12e>
			trx_reg_write(RG_TRX_STATE, CMD_RX_ON);
    1c02:	1a df       	rcall	.-460    	; 0x1a38 <switch_pll_on>
    1c04:	86 e0       	ldi	r24, 0x06	; 6
    1c06:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
			PAL_WAIT_1_US();
    1c0a:	62 e0       	ldi	r22, 0x02	; 2
    1c0c:	70 e0       	ldi	r23, 0x00	; 0
    1c0e:	80 e0       	ldi	r24, 0x00	; 0
    1c10:	90 e0       	ldi	r25, 0x00	; 0
    1c12:	07 df       	rcall	.-498    	; 0x1a22 <__portable_avr_delay_cycles>
			break;
    1c14:	c8 cf       	rjmp	.-112    	; 0x1ba6 <set_trx_state+0x12e>
			break;
		}
		break;

	case CMD_RX_AACK_ON:
		switch (tal_trx_status) {
    1c16:	80 91 56 09 	lds	r24, 0x0956	; 0x800956 <tal_trx_status>
    1c1a:	88 30       	cpi	r24, 0x08	; 8
    1c1c:	91 f0       	breq	.+36     	; 0x1c42 <set_trx_state+0x1ca>
    1c1e:	18 f4       	brcc	.+6      	; 0x1c26 <set_trx_state+0x1ae>
    1c20:	86 30       	cpi	r24, 0x06	; 6
    1c22:	c9 f0       	breq	.+50     	; 0x1c56 <set_trx_state+0x1de>
    1c24:	c0 cf       	rjmp	.-128    	; 0x1ba6 <set_trx_state+0x12e>
    1c26:	89 30       	cpi	r24, 0x09	; 9
    1c28:	19 f0       	breq	.+6      	; 0x1c30 <set_trx_state+0x1b8>
    1c2a:	89 31       	cpi	r24, 0x19	; 25
		case RX_AACK_ON:
			break;

		case TX_ARET_ON:
		case PLL_ON:
			trx_reg_write(RG_TRX_STATE, CMD_RX_AACK_ON);
    1c2c:	09 f0       	breq	.+2      	; 0x1c30 <set_trx_state+0x1b8>
    1c2e:	bb cf       	rjmp	.-138    	; 0x1ba6 <set_trx_state+0x12e>
    1c30:	86 e1       	ldi	r24, 0x16	; 22
			PAL_WAIT_1_US();
    1c32:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
    1c36:	62 e0       	ldi	r22, 0x02	; 2
    1c38:	70 e0       	ldi	r23, 0x00	; 0
    1c3a:	80 e0       	ldi	r24, 0x00	; 0
			break;
    1c3c:	90 e0       	ldi	r25, 0x00	; 0

		case TRX_OFF:
			switch_pll_on(); /* state change from TRX_OFF to
    1c3e:	f1 de       	rcall	.-542    	; 0x1a22 <__portable_avr_delay_cycles>
    1c40:	b2 cf       	rjmp	.-156    	; 0x1ba6 <set_trx_state+0x12e>
			                  * RX_AACK_ON can be done directly, too
			                  **/
			trx_reg_write(RG_TRX_STATE, CMD_RX_AACK_ON);
    1c42:	fa de       	rcall	.-524    	; 0x1a38 <switch_pll_on>
    1c44:	86 e1       	ldi	r24, 0x16	; 22
    1c46:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
			PAL_WAIT_1_US();
    1c4a:	62 e0       	ldi	r22, 0x02	; 2
    1c4c:	70 e0       	ldi	r23, 0x00	; 0
    1c4e:	80 e0       	ldi	r24, 0x00	; 0
    1c50:	90 e0       	ldi	r25, 0x00	; 0
			break;
    1c52:	e7 de       	rcall	.-562    	; 0x1a22 <__portable_avr_delay_cycles>

		case RX_ON:
			trx_reg_write(RG_TRX_STATE, CMD_PLL_ON);
    1c54:	a8 cf       	rjmp	.-176    	; 0x1ba6 <set_trx_state+0x12e>
    1c56:	89 e0       	ldi	r24, 0x09	; 9
    1c58:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
			PAL_WAIT_1_US();
    1c5c:	62 e0       	ldi	r22, 0x02	; 2
    1c5e:	70 e0       	ldi	r23, 0x00	; 0
    1c60:	80 e0       	ldi	r24, 0x00	; 0
    1c62:	90 e0       	ldi	r25, 0x00	; 0
    1c64:	de de       	rcall	.-580    	; 0x1a22 <__portable_avr_delay_cycles>
			/* check if state change could be applied */
			tal_trx_status = (tal_trx_status_t)trx_bit_read(
    1c66:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7c0141>
    1c6a:	8f 71       	andi	r24, 0x1F	; 31
    1c6c:	80 93 56 09 	sts	0x0956, r24	; 0x800956 <tal_trx_status>
					SR_TRX_STATUS);
			if (tal_trx_status != PLL_ON) {
    1c70:	89 30       	cpi	r24, 0x09	; 9
    1c72:	09 f0       	breq	.+2      	; 0x1c76 <set_trx_state+0x1fe>
				return tal_trx_status;
			}

			trx_reg_write(RG_TRX_STATE, CMD_RX_AACK_ON);
    1c74:	47 c0       	rjmp	.+142    	; 0x1d04 <set_trx_state+0x28c>
    1c76:	86 e1       	ldi	r24, 0x16	; 22
    1c78:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
			PAL_WAIT_1_US();
    1c7c:	62 e0       	ldi	r22, 0x02	; 2
    1c7e:	70 e0       	ldi	r23, 0x00	; 0
    1c80:	80 e0       	ldi	r24, 0x00	; 0
    1c82:	90 e0       	ldi	r25, 0x00	; 0
    1c84:	ce de       	rcall	.-612    	; 0x1a22 <__portable_avr_delay_cycles>
			break;
    1c86:	8f cf       	rjmp	.-226    	; 0x1ba6 <set_trx_state+0x12e>
			break;
		}
		break;

	case CMD_TX_ARET_ON:
		switch (tal_trx_status) {
    1c88:	80 91 56 09 	lds	r24, 0x0956	; 0x800956 <tal_trx_status>
    1c8c:	88 30       	cpi	r24, 0x08	; 8
    1c8e:	51 f1       	breq	.+84     	; 0x1ce4 <set_trx_state+0x26c>
    1c90:	18 f4       	brcc	.+6      	; 0x1c98 <set_trx_state+0x220>
    1c92:	86 30       	cpi	r24, 0x06	; 6
    1c94:	79 f0       	breq	.+30     	; 0x1cb4 <set_trx_state+0x23c>
    1c96:	87 cf       	rjmp	.-242    	; 0x1ba6 <set_trx_state+0x12e>
    1c98:	89 30       	cpi	r24, 0x09	; 9
    1c9a:	19 f0       	breq	.+6      	; 0x1ca2 <set_trx_state+0x22a>
    1c9c:	86 31       	cpi	r24, 0x16	; 22
    1c9e:	51 f0       	breq	.+20     	; 0x1cb4 <set_trx_state+0x23c>
		case TX_ARET_ON:
			break;

		case PLL_ON:
			trx_reg_write(RG_TRX_STATE, CMD_TX_ARET_ON);
    1ca0:	82 cf       	rjmp	.-252    	; 0x1ba6 <set_trx_state+0x12e>
    1ca2:	89 e1       	ldi	r24, 0x19	; 25
			PAL_WAIT_1_US();
    1ca4:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
    1ca8:	62 e0       	ldi	r22, 0x02	; 2
    1caa:	70 e0       	ldi	r23, 0x00	; 0
    1cac:	80 e0       	ldi	r24, 0x00	; 0
    1cae:	90 e0       	ldi	r25, 0x00	; 0
			break;
    1cb0:	b8 de       	rcall	.-656    	; 0x1a22 <__portable_avr_delay_cycles>

		case RX_ON:
		case RX_AACK_ON:
			trx_reg_write(RG_TRX_STATE, CMD_PLL_ON);
    1cb2:	79 cf       	rjmp	.-270    	; 0x1ba6 <set_trx_state+0x12e>
    1cb4:	89 e0       	ldi	r24, 0x09	; 9
    1cb6:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
			PAL_WAIT_1_US();
    1cba:	62 e0       	ldi	r22, 0x02	; 2
    1cbc:	70 e0       	ldi	r23, 0x00	; 0
    1cbe:	80 e0       	ldi	r24, 0x00	; 0
			/* check if state change could be applied */
			tal_trx_status = (tal_trx_status_t)trx_bit_read(
    1cc0:	90 e0       	ldi	r25, 0x00	; 0
    1cc2:	af de       	rcall	.-674    	; 0x1a22 <__portable_avr_delay_cycles>
    1cc4:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7c0141>
    1cc8:	8f 71       	andi	r24, 0x1F	; 31
					SR_TRX_STATUS);
			if (tal_trx_status != PLL_ON) {
    1cca:	80 93 56 09 	sts	0x0956, r24	; 0x800956 <tal_trx_status>
				return tal_trx_status;
			}

			trx_reg_write(RG_TRX_STATE, CMD_TX_ARET_ON);
    1cce:	89 30       	cpi	r24, 0x09	; 9
    1cd0:	c9 f4       	brne	.+50     	; 0x1d04 <set_trx_state+0x28c>
			PAL_WAIT_1_US();
    1cd2:	89 e1       	ldi	r24, 0x19	; 25
    1cd4:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
    1cd8:	62 e0       	ldi	r22, 0x02	; 2
    1cda:	70 e0       	ldi	r23, 0x00	; 0
    1cdc:	80 e0       	ldi	r24, 0x00	; 0
			break;
    1cde:	90 e0       	ldi	r25, 0x00	; 0

		case TRX_OFF:
			switch_pll_on(); /* state change from TRX_OFF to
    1ce0:	a0 de       	rcall	.-704    	; 0x1a22 <__portable_avr_delay_cycles>
    1ce2:	61 cf       	rjmp	.-318    	; 0x1ba6 <set_trx_state+0x12e>
			                  * TX_ARET_ON can be done directly, too
			                  **/
			trx_reg_write(RG_TRX_STATE, CMD_TX_ARET_ON);
    1ce4:	a9 de       	rcall	.-686    	; 0x1a38 <switch_pll_on>
    1ce6:	89 e1       	ldi	r24, 0x19	; 25
    1ce8:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
			PAL_WAIT_1_US();
    1cec:	62 e0       	ldi	r22, 0x02	; 2
    1cee:	70 e0       	ldi	r23, 0x00	; 0
    1cf0:	80 e0       	ldi	r24, 0x00	; 0
    1cf2:	90 e0       	ldi	r25, 0x00	; 0
    1cf4:	96 de       	rcall	.-724    	; 0x1a22 <__portable_avr_delay_cycles>
			break;
    1cf6:	57 cf       	rjmp	.-338    	; 0x1ba6 <set_trx_state+0x12e>
		Assert("trx command not handled" == 0);
		break;
	}

	do {
		tal_trx_status = (tal_trx_status_t)trx_bit_read(
    1cf8:	80 81       	ld	r24, Z
    1cfa:	8f 71       	andi	r24, 0x1F	; 31
    1cfc:	80 93 56 09 	sts	0x0956, r24	; 0x800956 <tal_trx_status>
				SR_TRX_STATUS);
	} while (tal_trx_status == STATE_TRANSITION_IN_PROGRESS);
    1d00:	8f 31       	cpi	r24, 0x1F	; 31
    1d02:	d1 f3       	breq	.-12     	; 0x1cf8 <set_trx_state+0x280>

	return tal_trx_status;
} /* set_trx_state() */
    1d04:	0f 90       	pop	r0
    1d06:	df 91       	pop	r29
    1d08:	cf 91       	pop	r28
    1d0a:	1f 91       	pop	r17
    1d0c:	08 95       	ret

00001d0e <tal_task>:
 * - Checks and allocates the receive buffer.
 * - Processes the TAL incoming frame queue.
 * - Implements the TAL state machine.
 */
void tal_task(void)
{
    1d0e:	cf 93       	push	r28
    1d10:	df 93       	push	r29
	/* Check if the receiver needs to be switched on. */
	if (tal_rx_on_required && (tal_state == TAL_IDLE)) {
    1d12:	80 91 2f 09 	lds	r24, 0x092F	; 0x80092f <tal_rx_on_required>
    1d16:	88 23       	and	r24, r24
    1d18:	19 f1       	breq	.+70     	; 0x1d60 <tal_task+0x52>
    1d1a:	80 91 5b 09 	lds	r24, 0x095B	; 0x80095b <tal_state>
    1d1e:	81 11       	cpse	r24, r1
    1d20:	1f c0       	rjmp	.+62     	; 0x1d60 <tal_task+0x52>
		/* Check if a receive buffer has not been available before. */
		if (tal_rx_buffer == NULL) {
    1d22:	80 91 e9 06 	lds	r24, 0x06E9	; 0x8006e9 <tal_rx_buffer>
    1d26:	90 91 ea 06 	lds	r25, 0x06EA	; 0x8006ea <tal_rx_buffer+0x1>
    1d2a:	89 2b       	or	r24, r25
    1d2c:	41 f4       	brne	.+16     	; 0x1d3e <tal_task+0x30>
			tal_rx_buffer = bmm_buffer_alloc(LARGE_BUFFER_SIZE);
    1d2e:	8b e8       	ldi	r24, 0x8B	; 139
    1d30:	b7 dd       	rcall	.-1170   	; 0x18a0 <bmm_buffer_alloc>
    1d32:	90 93 ea 06 	sts	0x06EA, r25	; 0x8006ea <tal_rx_buffer+0x1>
    1d36:	80 93 e9 06 	sts	0x06E9, r24	; 0x8006e9 <tal_rx_buffer>
		}

		/* Check if buffer could be allocated */
		if (NULL != tal_rx_buffer) {
    1d3a:	89 2b       	or	r24, r25
    1d3c:	89 f0       	breq	.+34     	; 0x1d60 <tal_task+0x52>
			/*
			 * Note:
			 * This flag needs to be reset BEFORE the received is
			 * switched on.
			 */
			tal_rx_on_required = false;
    1d3e:	10 92 2f 09 	sts	0x092F, r1	; 0x80092f <tal_rx_on_required>
			/*
			 * Release the protected buffer and set it again for
			 * further protection
			 * since the buffer is available now.
			 */
			trx_bit_write(SR_RX_SAFE_MODE,
    1d42:	cc e4       	ldi	r28, 0x4C	; 76
    1d44:	d1 e0       	ldi	r29, 0x01	; 1
    1d46:	88 81       	ld	r24, Y
    1d48:	8f 77       	andi	r24, 0x7F	; 127
    1d4a:	88 83       	st	Y, r24
			                                                *
			                                                *
			                                                *protection
			                                                * mode
			                                                **/
			pal_timer_delay(2); /* Allow pin change to get effective
    1d4c:	63 e0       	ldi	r22, 0x03	; 3
    1d4e:	70 e0       	ldi	r23, 0x00	; 0
    1d50:	80 e0       	ldi	r24, 0x00	; 0
    1d52:	90 e0       	ldi	r25, 0x00	; 0
    1d54:	66 de       	rcall	.-820    	; 0x1a22 <__portable_avr_delay_cycles>
			                    **/
			trx_bit_write(SR_RX_SAFE_MODE, RX_SAFE_MODE_ENABLE); /*
    1d56:	88 81       	ld	r24, Y
    1d58:	80 68       	ori	r24, 0x80	; 128
			} else {
				set_trx_state(CMD_RX_AACK_ON);
			}

#else   /* Normal operation */
			set_trx_state(CMD_RX_AACK_ON);
    1d5a:	88 83       	st	Y, r24
    1d5c:	86 e1       	ldi	r24, 0x16	; 22
    1d5e:	8c de       	rcall	.-744    	; 0x1a78 <set_trx_state>

	/*
	 * If the transceiver has received a frame and it has been placed
	 * into the queue of the TAL, the frame needs to be processed further.
	 */
	if (tal_incoming_frame_queue.size > 0) {
    1d60:	80 91 34 09 	lds	r24, 0x0934	; 0x800934 <tal_incoming_frame_queue+0x4>
    1d64:	88 23       	and	r24, r24
    1d66:	41 f0       	breq	.+16     	; 0x1d78 <tal_task+0x6a>
		buffer_t *rx_frame;

		/* Check if there are any pending data in the
		 * incoming_frame_queue. */
		rx_frame = qmm_queue_remove(&tal_incoming_frame_queue, NULL);
    1d68:	60 e0       	ldi	r22, 0x00	; 0
    1d6a:	70 e0       	ldi	r23, 0x00	; 0
    1d6c:	80 e3       	ldi	r24, 0x30	; 48
    1d6e:	99 e0       	ldi	r25, 0x09	; 9
		if (NULL != rx_frame) {
    1d70:	54 de       	rcall	.-856    	; 0x1a1a <qmm_queue_remove>
    1d72:	00 97       	sbiw	r24, 0x00	; 0
			process_incoming_frame(rx_frame);
    1d74:	09 f0       	breq	.+2      	; 0x1d78 <tal_task+0x6a>
		}
	}

	/* Handle the TAL state machines */
	switch (tal_state) {
    1d76:	24 d5       	rcall	.+2632   	; 0x27c0 <process_incoming_frame>
    1d78:	80 91 5b 09 	lds	r24, 0x095B	; 0x80095b <tal_state>
    1d7c:	82 30       	cpi	r24, 0x02	; 2
		/* Wait until state is changed to TAL_TX_DONE inside tx end ISR
		**/
		break;

	case TAL_TX_DONE:
		tx_done_handling(); /* see tal_tx.c */
    1d7e:	09 f4       	brne	.+2      	; 0x1d82 <tal_task+0x74>
    1d80:	85 d5       	rcall	.+2826   	; 0x288c <tx_done_handling>
#endif /* (MAC_SCAN_ED_REQUEST_CONFIRM == 1) */
	default:
		Assert("tal_state is not handled" == 0);
		break;
	}
} /* tal_task() */
    1d82:	df 91       	pop	r29
    1d84:	cf 91       	pop	r28
    1d86:	08 95       	ret

00001d88 <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
    1d88:	04 c0       	rjmp	.+8      	; 0x1d92 <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
    1d8a:	61 50       	subi	r22, 0x01	; 1
    1d8c:	71 09       	sbc	r23, r1
    1d8e:	81 09       	sbc	r24, r1
    1d90:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
    1d92:	61 15       	cp	r22, r1
    1d94:	71 05       	cpc	r23, r1
    1d96:	81 05       	cpc	r24, r1
    1d98:	91 05       	cpc	r25, r1
    1d9a:	b9 f7       	brne	.-18     	; 0x1d8a <__portable_avr_delay_cycles+0x2>
    1d9c:	08 95       	ret

00001d9e <tal_generate_rand_seed>:
 * value and restoring this state after finishing the sequence.
 * Since in our case the function is called from TRX_OFF, this is not required
 * here.
 */
void tal_generate_rand_seed(void)
{
    1d9e:	ff 92       	push	r15
    1da0:	0f 93       	push	r16
    1da2:	1f 93       	push	r17
    1da4:	cf 93       	push	r28
    1da6:	df 93       	push	r29
	uint8_t cur_random_val = 0;

	/* Ensure that PLL has locked and receive mode is reached. */
	tal_trx_status_t trx_state;
	do {
		trx_state = set_trx_state(CMD_RX_ON);
    1da8:	86 e0       	ldi	r24, 0x06	; 6
    1daa:	66 de       	rcall	.-820    	; 0x1a78 <set_trx_state>
	} while (trx_state != RX_ON);
    1dac:	86 30       	cpi	r24, 0x06	; 6
    1dae:	e1 f7       	brne	.-8      	; 0x1da8 <tal_generate_rand_seed+0xa>

	/* Ensure that register bit RX_PDT_DIS is set to 0. */
	trx_bit_write(SR_RX_PDT_DIS, RX_ENABLE);
    1db0:	e5 e5       	ldi	r30, 0x55	; 85
    1db2:	f1 e0       	ldi	r31, 0x01	; 1
    1db4:	80 81       	ld	r24, Z
    1db6:	8f 77       	andi	r24, 0x7F	; 127
    1db8:	80 83       	st	Z, r24

	/*
	 * We need to disable TRX IRQs while generating random values in RX_ON,
	 * we do not want to receive frames at this point of time at all.
	 */
	trx_reg_write(RG_IRQ_MASK, TRX_IRQ_NONE);
    1dba:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x7c014e>
    1dbe:	68 94       	set
    1dc0:	ff 24       	eor	r15, r15
    1dc2:	f3 f8       	bld	r15, 3
 * Since in our case the function is called from TRX_OFF, this is not required
 * here.
 */
void tal_generate_rand_seed(void)
{
	uint16_t seed = 0;
    1dc4:	c0 e0       	ldi	r28, 0x00	; 0
    1dc6:	d0 e0       	ldi	r29, 0x00	; 0
	 * The 16-bit random value is generated from various 2-bit random
	 * values.
	 */
	for (uint8_t i = 0; i < 8; i++) {
		/* Now we can safely read the 2-bit random number. */
		cur_random_val = trx_bit_read(SR_RND_VALUE);
    1dc8:	06 e4       	ldi	r16, 0x46	; 70
    1dca:	11 e0       	ldi	r17, 0x01	; 1
    1dcc:	f8 01       	movw	r30, r16
    1dce:	90 81       	ld	r25, Z
		seed = seed << 2;
    1dd0:	cc 0f       	add	r28, r28
    1dd2:	dd 1f       	adc	r29, r29
    1dd4:	cc 0f       	add	r28, r28
    1dd6:	dd 1f       	adc	r29, r29
		seed |= cur_random_val;
    1dd8:	90 76       	andi	r25, 0x60	; 96
    1dda:	29 2f       	mov	r18, r25
    1ddc:	30 e0       	ldi	r19, 0x00	; 0
    1dde:	36 95       	lsr	r19
    1de0:	27 95       	ror	r18
    1de2:	32 95       	swap	r19
    1de4:	22 95       	swap	r18
    1de6:	2f 70       	andi	r18, 0x0F	; 15
    1de8:	23 27       	eor	r18, r19
    1dea:	3f 70       	andi	r19, 0x0F	; 15
    1dec:	23 27       	eor	r18, r19
    1dee:	c2 2b       	or	r28, r18
    1df0:	d3 2b       	or	r29, r19
		PAL_WAIT_1_US(); /* wait that the random value gets updated */
    1df2:	62 e0       	ldi	r22, 0x02	; 2
    1df4:	70 e0       	ldi	r23, 0x00	; 0
    1df6:	80 e0       	ldi	r24, 0x00	; 0
    1df8:	90 e0       	ldi	r25, 0x00	; 0
    1dfa:	c6 df       	rcall	.-116    	; 0x1d88 <__portable_avr_delay_cycles>
    1dfc:	fa 94       	dec	r15

	/*
	 * The 16-bit random value is generated from various 2-bit random
	 * values.
	 */
	for (uint8_t i = 0; i < 8; i++) {
    1dfe:	f1 10       	cpse	r15, r1
		seed = seed << 2;
		seed |= cur_random_val;
		PAL_WAIT_1_US(); /* wait that the random value gets updated */
	}

	set_trx_state(CMD_FORCE_TRX_OFF);
    1e00:	e5 cf       	rjmp	.-54     	; 0x1dcc <tal_generate_rand_seed+0x2e>
    1e02:	83 e0       	ldi	r24, 0x03	; 3
    1e04:	39 de       	rcall	.-910    	; 0x1a78 <set_trx_state>

	/*
	 * Now we need to clear potential pending TRX IRQs and
	 * enable the TRX IRQs again.
	 */
	trx_reg_write(RG_IRQ_STATUS, 0xFF);
    1e06:	8f ef       	ldi	r24, 0xFF	; 255
    1e08:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <__TEXT_REGION_LENGTH__+0x7c014f>
	trx_reg_write(RG_IRQ_MASK, TRX_IRQ_DEFAULT);
    1e0c:	88 e4       	ldi	r24, 0x48	; 72
    1e0e:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <__TEXT_REGION_LENGTH__+0x7c014e>

	/* Set the seed for the random number generator. */
	srand(seed);
    1e12:	ce 01       	movw	r24, r28
    1e14:	0e 94 15 1b 	call	0x362a	; 0x362a <srand>
}
    1e18:	df 91       	pop	r29
    1e1a:	cf 91       	pop	r28
    1e1c:	1f 91       	pop	r17
    1e1e:	0f 91       	pop	r16
    1e20:	ff 90       	pop	r15
    1e22:	08 95       	ret

00001e24 <internal_tal_reset>:
 * \return MAC_SUCCESS  if the transceiver state is changed to TRX_OFF and the
 *                 current device part number and version number are correct;
 *         FAILURE otherwise
 */
static retval_t internal_tal_reset(bool set_default_pib)
{
    1e24:	ff 92       	push	r15
    1e26:	0f 93       	push	r16
    1e28:	1f 93       	push	r17
    1e2a:	cf 93       	push	r28
    1e2c:	df 93       	push	r29
    1e2e:	f8 2e       	mov	r15, r24
{
	tal_trx_status_t trx_status;
	uint8_t poll_counter = 0;

	/* trx might sleep, so wake it up */
	TRX_SLP_TR_LOW();
    1e30:	c9 e3       	ldi	r28, 0x39	; 57
    1e32:	d1 e0       	ldi	r29, 0x01	; 1
    1e34:	88 81       	ld	r24, Y
    1e36:	8d 7f       	andi	r24, 0xFD	; 253
    1e38:	88 83       	st	Y, r24
	pal_timer_delay(SLEEP_TO_TRX_OFF_TYP_US);
    1e3a:	61 e4       	ldi	r22, 0x41	; 65
    1e3c:	71 e0       	ldi	r23, 0x01	; 1
    1e3e:	80 e0       	ldi	r24, 0x00	; 0
    1e40:	90 e0       	ldi	r25, 0x00	; 0
    1e42:	a2 df       	rcall	.-188    	; 0x1d88 <__portable_avr_delay_cycles>

	/* Apply reset pulse */
	TRX_RST_LOW();
    1e44:	88 81       	ld	r24, Y
    1e46:	8e 7f       	andi	r24, 0xFE	; 254
    1e48:	88 83       	st	Y, r24
	pal_timer_delay(RST_PULSE_WIDTH_US);
    1e4a:	62 e0       	ldi	r22, 0x02	; 2
    1e4c:	70 e0       	ldi	r23, 0x00	; 0
    1e4e:	80 e0       	ldi	r24, 0x00	; 0
    1e50:	90 e0       	ldi	r25, 0x00	; 0
    1e52:	9a df       	rcall	.-204    	; 0x1d88 <__portable_avr_delay_cycles>
	TRX_RST_HIGH();
    1e54:	88 81       	ld	r24, Y
    1e56:	81 60       	ori	r24, 0x01	; 1
    1e58:	88 83       	st	Y, r24

	/* verify that trx has reached TRX_OFF */
	do {
		/* Wait a short time interval. */
		pal_timer_delay(TRX_POLL_WAIT_TIME_US);
    1e5a:	66 e8       	ldi	r22, 0x86	; 134
    1e5c:	70 e0       	ldi	r23, 0x00	; 0
    1e5e:	80 e0       	ldi	r24, 0x00	; 0
    1e60:	90 e0       	ldi	r25, 0x00	; 0
    1e62:	92 df       	rcall	.-220    	; 0x1d88 <__portable_avr_delay_cycles>

		trx_status = (tal_trx_status_t)trx_bit_read(SR_TRX_STATUS);
    1e64:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7c0141>
    1e68:	8f 71       	andi	r24, 0x1F	; 31
    1e6a:	ca e0       	ldi	r28, 0x0A	; 10
    1e6c:	01 e4       	ldi	r16, 0x41	; 65
    1e6e:	11 e0       	ldi	r17, 0x01	; 1
    1e70:	0a c0       	rjmp	.+20     	; 0x1e86 <internal_tal_reset+0x62>
	TRX_RST_HIGH();

	/* verify that trx has reached TRX_OFF */
	do {
		/* Wait a short time interval. */
		pal_timer_delay(TRX_POLL_WAIT_TIME_US);
    1e72:	66 e8       	ldi	r22, 0x86	; 134
    1e74:	70 e0       	ldi	r23, 0x00	; 0
    1e76:	80 e0       	ldi	r24, 0x00	; 0
    1e78:	90 e0       	ldi	r25, 0x00	; 0
    1e7a:	86 df       	rcall	.-244    	; 0x1d88 <__portable_avr_delay_cycles>

		trx_status = (tal_trx_status_t)trx_bit_read(SR_TRX_STATUS);
    1e7c:	f8 01       	movw	r30, r16
    1e7e:	80 81       	ld	r24, Z
    1e80:	8f 71       	andi	r24, 0x1F	; 31
    1e82:	c1 50       	subi	r28, 0x01	; 1

		/* Wait not more than max. value of TR2. */
		if (poll_counter == SLEEP_TO_TRX_OFF_ATTEMPTS) {
    1e84:	c9 f1       	breq	.+114    	; 0x1ef8 <internal_tal_reset+0xd4>
#endif
			return FAILURE;
		}

		poll_counter++;
	} while (trx_status != TRX_OFF);
    1e86:	88 30       	cpi	r24, 0x08	; 8

	tal_trx_status = TRX_OFF;
    1e88:	a1 f7       	brne	.-24     	; 0x1e72 <internal_tal_reset+0x4e>
    1e8a:	80 93 56 09 	sts	0x0956, r24	; 0x800956 <tal_trx_status>

	/*
	 * Generate a seed for the random number generator in function rand().
	 * This is required (for example) as seed for the CSMA-CA algorithm.
	 */
	tal_generate_rand_seed();
    1e8e:	87 df       	rcall	.-242    	; 0x1d9e <tal_generate_rand_seed>
	 */

	/*
	 * Init the SEED value of the CSMA backoff algorithm.
	 */
	uint16_t rand_value = (uint16_t)rand();
    1e90:	0e 94 12 1b 	call	0x3624	; 0x3624 <rand>
	trx_reg_write(RG_CSMA_SEED_0, (uint8_t)rand_value);
    1e94:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <__TEXT_REGION_LENGTH__+0x7c016d>
	trx_bit_write(SR_CSMA_SEED_1, (uint8_t)(rand_value >> 8));
    1e98:	ee e6       	ldi	r30, 0x6E	; 110
    1e9a:	f1 e0       	ldi	r31, 0x01	; 1
    1e9c:	80 81       	ld	r24, Z
    1e9e:	97 70       	andi	r25, 0x07	; 7
    1ea0:	88 7f       	andi	r24, 0xF8	; 248
    1ea2:	89 2b       	or	r24, r25
    1ea4:	80 83       	st	Z, r24

	trx_bit_write(SR_AACK_SET_PD, PD_ACK_BIT_SET_ENABLE); /* ACKs for
    1ea6:	80 81       	ld	r24, Z
    1ea8:	80 62       	ori	r24, 0x20	; 32
    1eaa:	80 83       	st	Z, r24
	                                                       * data
	                                                       * requests,
	                                                       * indicate
	                                                       * pending data
	                                                       **/
	trx_bit_write(SR_RX_SAFE_MODE, RX_SAFE_MODE_ENABLE); /* Enable
    1eac:	ec e4       	ldi	r30, 0x4C	; 76
    1eae:	f1 e0       	ldi	r31, 0x01	; 1
    1eb0:	80 81       	ld	r24, Z
    1eb2:	80 68       	ori	r24, 0x80	; 128
    1eb4:	80 83       	st	Z, r24
	                                                     * buffer
	                                                     * protection
	                                                     * mode */
	trx_reg_write(RG_IRQ_MASK, TRX_IRQ_DEFAULT);
    1eb6:	88 e4       	ldi	r24, 0x48	; 72
    1eb8:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <__TEXT_REGION_LENGTH__+0x7c014e>
#if (defined BEACON_SUPPORT) || (defined ENABLE_TSTAMP)
	/* The TX start timestamp is taken by the respective PAL layer */
	trx_reg_write(RG_IRQ_MASK1, (1 << TX_START_EN));
#endif
	trx_reg_write(0x156, 0xFF); /* RPC feature configuration. */
    1ebc:	8f ef       	ldi	r24, 0xFF	; 255
    1ebe:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <__TEXT_REGION_LENGTH__+0x7c0156>

#if (ANTENNA_DIVERSITY == 1)
	/* Use antenna diversity */
	trx_bit_write(SR_ANT_CTRL, ANTENNA_DEFAULT);
    1ec2:	ed e4       	ldi	r30, 0x4D	; 77
    1ec4:	f1 e0       	ldi	r31, 0x01	; 1
    1ec6:	80 81       	ld	r24, Z
    1ec8:	8c 7f       	andi	r24, 0xFC	; 252
    1eca:	82 60       	ori	r24, 0x02	; 2
    1ecc:	80 83       	st	Z, r24
	trx_bit_write(SR_PDT_THRES, THRES_ANT_DIV_ENABLE);
    1ece:	aa e4       	ldi	r26, 0x4A	; 74
    1ed0:	b1 e0       	ldi	r27, 0x01	; 1
    1ed2:	8c 91       	ld	r24, X
    1ed4:	80 7f       	andi	r24, 0xF0	; 240
    1ed6:	83 60       	ori	r24, 0x03	; 3
    1ed8:	8c 93       	st	X, r24
	trx_bit_write(SR_ANT_DIV_EN, ANT_DIV_ENABLE);
    1eda:	80 81       	ld	r24, Z
    1edc:	88 60       	ori	r24, 0x08	; 8
	trx_bit_write(SR_ANT_EXT_SW_EN, ANT_EXT_SW_ENABLE);
    1ede:	80 83       	st	Z, r24
    1ee0:	80 81       	ld	r24, Z
	tal_generate_rand_seed();

	/* Configure the transceiver register values. */
	trx_config();

	if (set_default_pib) {
    1ee2:	84 60       	ori	r24, 0x04	; 4
		/* Set the default PIB values */
		init_tal_pib(); /* implementation can be found in 'tal_pib.c' */
    1ee4:	80 83       	st	Z, r24
    1ee6:	f1 10       	cpse	r15, r1

	/*
	 * Write all PIB values to the transceiver
	 * that are needed by the transceiver itself.
	 */
	write_all_tal_pib_to_trx(); /* implementation can be found in
    1ee8:	30 d2       	rcall	.+1120   	; 0x234a <init_tal_pib>
    1eea:	7d d2       	rcall	.+1274   	; 0x23e6 <write_all_tal_pib_to_trx>
	                             *'tal_pib.c' */

	/* Reset TAL variables. */
	tal_state = TAL_IDLE;
    1eec:	10 92 5b 09 	sts	0x095B, r1	; 0x80095b <tal_state>

#if ((MAC_START_REQUEST_CONFIRM == 1) && (defined BEACON_SUPPORT))
	tal_beacon_transmission = false;
#endif /* ((MAC_START_REQUEST_CONFIRM == 1) && (defined BEACON_SUPPORT)) */

	tal_rx_on_required = false;
    1ef0:	10 92 2f 09 	sts	0x092F, r1	; 0x80092f <tal_rx_on_required>

	return MAC_SUCCESS;
    1ef4:	80 e0       	ldi	r24, 0x00	; 0
    1ef6:	01 c0       	rjmp	.+2      	; 0x1efa <internal_tal_reset+0xd6>
 *         FAILURE otherwise
 */
static retval_t internal_tal_reset(bool set_default_pib)
{
	if (trx_reset() != MAC_SUCCESS) {
		return FAILURE;
    1ef8:	85 e8       	ldi	r24, 0x85	; 133
#endif /* ((MAC_START_REQUEST_CONFIRM == 1) && (defined BEACON_SUPPORT)) */

	tal_rx_on_required = false;

	return MAC_SUCCESS;
}
    1efa:	df 91       	pop	r29
    1efc:	cf 91       	pop	r28
    1efe:	1f 91       	pop	r17
    1f00:	0f 91       	pop	r16
    1f02:	ff 90       	pop	r15
    1f04:	08 95       	ret

00001f06 <tal_init>:
 * \return MAC_SUCCESS  if the transceiver state is changed to TRX_OFF and the
 *                 current device part number and version number are correct;
 *         FAILURE otherwise
 */
retval_t tal_init(void)
{
    1f06:	cf 92       	push	r12
    1f08:	df 92       	push	r13
    1f0a:	ef 92       	push	r14
    1f0c:	ff 92       	push	r15
    1f0e:	0f 93       	push	r16
    1f10:	1f 93       	push	r17
    1f12:	cf 93       	push	r28
    1f14:	df 93       	push	r29
	MCUSR = 0;
    1f16:	14 be       	out	0x34, r1	; 52

	/* Enable SRAM Data Retention */
	DRTRAM0 = _BV(ENDRT);
    1f18:	80 e1       	ldi	r24, 0x10	; 16
    1f1a:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <__TEXT_REGION_LENGTH__+0x7c0135>
	DRTRAM1 = _BV(ENDRT);
    1f1e:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <__TEXT_REGION_LENGTH__+0x7c0134>
	DRTRAM2 = _BV(ENDRT);
    1f22:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <__TEXT_REGION_LENGTH__+0x7c0133>
	DRTRAM3 = _BV(ENDRT);
    1f26:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <__TEXT_REGION_LENGTH__+0x7c0132>

	/* Init the PAL and by this means also the transceiver interface */
	if (pal_init() != MAC_SUCCESS) {
    1f2a:	92 dc       	rcall	.-1756   	; 0x1850 <pal_init>
    1f2c:	81 11       	cpse	r24, r1
    1f2e:	6d c0       	rjmp	.+218    	; 0x200a <__EEPROM_REGION_LENGTH__+0xa>
	} else if (module == &TCCR4A) {
		sysclk_enable_module(POWER_RED_REG1, PRTIM4_bm);
	} else if (module == &TCCR5A) {
		sysclk_enable_module(POWER_RED_REG1, PRTIM5_bm);
	} else if (module == &TRX_CTRL_0) {
		sysclk_enable_module(POWER_RED_REG1, PRTRX24_bm);
    1f30:	60 e4       	ldi	r22, 0x40	; 64
    1f32:	81 e0       	ldi	r24, 0x01	; 1
    1f34:	3b d9       	rcall	.-3466   	; 0x11ac <sysclk_enable_module>
{
	tal_trx_status_t trx_status;
	uint8_t poll_counter = 0;

	sysclk_enable_peripheral_clock(&TRX_CTRL_0);
	TRX_RST_HIGH();
    1f36:	c9 e3       	ldi	r28, 0x39	; 57
    1f38:	d1 e0       	ldi	r29, 0x01	; 1
    1f3a:	88 81       	ld	r24, Y
    1f3c:	81 60       	ori	r24, 0x01	; 1
    1f3e:	88 83       	st	Y, r24
	TRX_SLP_TR_LOW();
    1f40:	88 81       	ld	r24, Y
    1f42:	8d 7f       	andi	r24, 0xFD	; 253
    1f44:	88 83       	st	Y, r24

	pal_timer_delay(P_ON_TO_CLKM_AVAILABLE_TYP_US);
    1f46:	6b ef       	ldi	r22, 0xFB	; 251
    1f48:	71 e0       	ldi	r23, 0x01	; 1
    1f4a:	80 e0       	ldi	r24, 0x00	; 0
    1f4c:	90 e0       	ldi	r25, 0x00	; 0
    1f4e:	1c df       	rcall	.-456    	; 0x1d88 <__portable_avr_delay_cycles>

	/* Apply reset pulse */
	TRX_RST_LOW();
    1f50:	88 81       	ld	r24, Y
    1f52:	8e 7f       	andi	r24, 0xFE	; 254
    1f54:	88 83       	st	Y, r24
	pal_timer_delay(RST_PULSE_WIDTH_US);
    1f56:	62 e0       	ldi	r22, 0x02	; 2
    1f58:	70 e0       	ldi	r23, 0x00	; 0
    1f5a:	80 e0       	ldi	r24, 0x00	; 0
    1f5c:	90 e0       	ldi	r25, 0x00	; 0
    1f5e:	14 df       	rcall	.-472    	; 0x1d88 <__portable_avr_delay_cycles>
	TRX_RST_HIGH();
    1f60:	88 81       	ld	r24, Y
    1f62:	81 60       	ori	r24, 0x01	; 1
    1f64:	88 83       	st	Y, r24

	/* Verify that the trx has reached TRX_OFF. */
	poll_counter = 0;
	do {
		/* Wait a short time interval. */
		pal_timer_delay(TRX_POLL_WAIT_TIME_US);
    1f66:	66 e8       	ldi	r22, 0x86	; 134
    1f68:	70 e0       	ldi	r23, 0x00	; 0
    1f6a:	80 e0       	ldi	r24, 0x00	; 0
    1f6c:	90 e0       	ldi	r25, 0x00	; 0
    1f6e:	0c df       	rcall	.-488    	; 0x1d88 <__portable_avr_delay_cycles>

		trx_status = (tal_trx_status_t)trx_bit_read(SR_TRX_STATUS);
    1f70:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7c0141>
    1f74:	8f 71       	andi	r24, 0x1F	; 31
    1f76:	ca e0       	ldi	r28, 0x0A	; 10
    1f78:	01 e4       	ldi	r16, 0x41	; 65
    1f7a:	11 e0       	ldi	r17, 0x01	; 1

	/* Verify that the trx has reached TRX_OFF. */
	poll_counter = 0;
	do {
		/* Wait a short time interval. */
		pal_timer_delay(TRX_POLL_WAIT_TIME_US);
    1f7c:	0b c0       	rjmp	.+22     	; 0x1f94 <tal_init+0x8e>
    1f7e:	66 e8       	ldi	r22, 0x86	; 134
    1f80:	70 e0       	ldi	r23, 0x00	; 0
    1f82:	80 e0       	ldi	r24, 0x00	; 0
    1f84:	90 e0       	ldi	r25, 0x00	; 0
    1f86:	00 df       	rcall	.-512    	; 0x1d88 <__portable_avr_delay_cycles>

		trx_status = (tal_trx_status_t)trx_bit_read(SR_TRX_STATUS);
    1f88:	f8 01       	movw	r30, r16
    1f8a:	80 81       	ld	r24, Z
    1f8c:	8f 71       	andi	r24, 0x1F	; 31
    1f8e:	c1 50       	subi	r28, 0x01	; 1

		/* Wait not more than max. value of TR2. */
		if (poll_counter == RESET_TO_TRX_OFF_ATTEMPTS) {
    1f90:	09 f4       	brne	.+2      	; 0x1f94 <tal_init+0x8e>
    1f92:	51 c0       	rjmp	.+162    	; 0x2036 <__EEPROM_REGION_LENGTH__+0x36>
#endif
			return FAILURE;
		}

		poll_counter++;
	} while (trx_status != TRX_OFF);
    1f94:	88 30       	cpi	r24, 0x08	; 8
    1f96:	99 f7       	brne	.-26     	; 0x1f7e <tal_init+0x78>

	tal_trx_status = TRX_OFF;
    1f98:	80 93 56 09 	sts	0x0956, r24	; 0x800956 <tal_trx_status>

#if !defined(FPGA_EMULATION)
	/* Check if actually running on an ATmegaRFR2 device. */
	if (ATMEGARFR2_PART_NUM != trx_reg_read(RG_PART_NUM)) {
    1f9c:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <__TEXT_REGION_LENGTH__+0x7c015c>
    1fa0:	84 39       	cpi	r24, 0x94	; 148
    1fa2:	09 f0       	breq	.+2      	; 0x1fa6 <tal_init+0xa0>
    1fa4:	48 c0       	rjmp	.+144    	; 0x2036 <__EEPROM_REGION_LENGTH__+0x36>
    1fa6:	35 c0       	rjmp	.+106    	; 0x2012 <__EEPROM_REGION_LENGTH__+0x12>
		 * in function tal_generate_rand_seed().
		 */
		uint8_t *ptr_pib = (uint8_t *)&tal_pib.IeeeAddress;

		for (uint8_t i = 0; i < 8; i++) {
			*ptr_pib++ = (uint8_t)rand();
    1fa8:	0e 94 12 1b 	call	0x3624	; 0x3624 <rand>
    1fac:	f8 01       	movw	r30, r16
    1fae:	81 93       	st	Z+, r24
    1fb0:	8f 01       	movw	r16, r30
		 * generated
		 * in function tal_generate_rand_seed().
		 */
		uint8_t *ptr_pib = (uint8_t *)&tal_pib.IeeeAddress;

		for (uint8_t i = 0; i < 8; i++) {
    1fb2:	ec 15       	cp	r30, r12
    1fb4:	fd 05       	cpc	r31, r13
    1fb6:	c1 f7       	brne	.-16     	; 0x1fa8 <tal_init+0xa2>
	/*
	 * This while loop is on purpose, since just in the
	 * rare case that such an address is randomly
	 * generated again, we must repeat this.
	 */
	while ((tal_pib.IeeeAddress == 0x0000000000000000) ||
    1fb8:	f7 01       	movw	r30, r14
    1fba:	20 81       	ld	r18, Z
    1fbc:	31 81       	ldd	r19, Z+1	; 0x01
    1fbe:	42 81       	ldd	r20, Z+2	; 0x02
    1fc0:	53 81       	ldd	r21, Z+3	; 0x03
    1fc2:	64 81       	ldd	r22, Z+4	; 0x04
    1fc4:	75 81       	ldd	r23, Z+5	; 0x05
    1fc6:	86 81       	ldd	r24, Z+6	; 0x06
    1fc8:	97 81       	ldd	r25, Z+7	; 0x07
    1fca:	af ef       	ldi	r26, 0xFF	; 255
    1fcc:	0e 94 b3 1a 	call	0x3566	; 0x3566 <__adddi3_s8>
    1fd0:	ad ef       	ldi	r26, 0xFD	; 253
    1fd2:	0e 94 bf 1a 	call	0x357e	; 0x357e <__cmpdi2_s8>
    1fd6:	21 f0       	breq	.+8      	; 0x1fe0 <tal_init+0xda>
    1fd8:	18 f0       	brcs	.+6      	; 0x1fe0 <tal_init+0xda>
    1fda:	07 e3       	ldi	r16, 0x37	; 55
    1fdc:	19 e0       	ldi	r17, 0x09	; 9

	/*
	 * Configure interrupt handling.
	 * Install handlers for the transceiver interrupts.
	 */
	pal_trx_irq_init_rx_end((FUNC_PTR)trx_rx_end_handler_cb);
    1fde:	e4 cf       	rjmp	.-56     	; 0x1fa8 <tal_init+0xa2>
    1fe0:	8f e4       	ldi	r24, 0x4F	; 79
    1fe2:	91 e1       	ldi	r25, 0x11	; 17
	pal_trx_irq_init_tx_end((FUNC_PTR)trx_tx_end_handler_cb);
    1fe4:	38 d0       	rcall	.+112    	; 0x2056 <pal_trx_irq_init_rx_end>
    1fe6:	80 e6       	ldi	r24, 0x60	; 96
    1fe8:	91 e1       	ldi	r25, 0x11	; 17
	pal_trx_irq_init_awake((FUNC_PTR)trx_awake_handler_cb);
    1fea:	30 d0       	rcall	.+96     	; 0x204c <pal_trx_irq_init_tx_end>
    1fec:	81 e7       	ldi	r24, 0x71	; 113
    1fee:	91 e1       	ldi	r25, 0x11	; 17
    1ff0:	37 d0       	rcall	.+110    	; 0x2060 <pal_trx_irq_init_awake>
	pal_trx_irq_init_tstamp((FUNC_PTR)trx_irq_timestamp_handler_cb);
#endif /* (defined BEACON_SUPPORT) || (defined ENABLE_TSTAMP) */

	/* Initialize the buffer management module and get a buffer to store
	 * reveived frames. */
	bmm_buffer_init();
    1ff2:	32 dc       	rcall	.-1948   	; 0x1858 <bmm_buffer_init>
	tal_rx_buffer = bmm_buffer_alloc(LARGE_BUFFER_SIZE);
    1ff4:	8b e8       	ldi	r24, 0x8B	; 139
    1ff6:	54 dc       	rcall	.-1880   	; 0x18a0 <bmm_buffer_alloc>
    1ff8:	90 93 ea 06 	sts	0x06EA, r25	; 0x8006ea <tal_rx_buffer+0x1>
    1ffc:	80 93 e9 06 	sts	0x06E9, r24	; 0x8006e9 <tal_rx_buffer>
	/* Init incoming frame queue */
#ifdef ENABLE_QUEUE_CAPACITY
	qmm_queue_init(&tal_incoming_frame_queue,
			TAL_INCOMING_FRAME_QUEUE_CAPACITY);
#else
	qmm_queue_init(&tal_incoming_frame_queue);
    2000:	80 e3       	ldi	r24, 0x30	; 48
    2002:	99 e0       	ldi	r25, 0x09	; 9
    2004:	de dc       	rcall	.-1604   	; 0x19c2 <qmm_queue_init>
    2006:	cb d5       	rcall	.+2966   	; 0x2b9e <tfa_init>
#endif  /* ENABLE_QUEUE_CAPACITY */

#ifdef ENABLE_TFA
	tfa_init();
    2008:	17 c0       	rjmp	.+46     	; 0x2038 <__EEPROM_REGION_LENGTH__+0x38>
    200a:	c5 e8       	ldi	r28, 0x85	; 133
#endif

	return MAC_SUCCESS;
    200c:	15 c0       	rjmp	.+42     	; 0x2038 <__EEPROM_REGION_LENGTH__+0x38>
	DRTRAM2 = _BV(ENDRT);
	DRTRAM3 = _BV(ENDRT);

	/* Init the PAL and by this means also the transceiver interface */
	if (pal_init() != MAC_SUCCESS) {
		return FAILURE;
    200e:	c5 e8       	ldi	r28, 0x85	; 133
    2010:	13 c0       	rjmp	.+38     	; 0x2038 <__EEPROM_REGION_LENGTH__+0x38>
	 * Do the reset stuff.
	 * Set the default PIBs.
	 * Generate random seed.
	 */
	if (internal_tal_reset(true) != MAC_SUCCESS) {
		return FAILURE;
    2012:	81 e0       	ldi	r24, 0x01	; 1
    2014:	07 df       	rcall	.-498    	; 0x1e24 <internal_tal_reset>
	/*
	 * Do the reset stuff.
	 * Set the default PIBs.
	 * Generate random seed.
	 */
	if (internal_tal_reset(true) != MAC_SUCCESS) {
    2016:	c8 2f       	mov	r28, r24
    2018:	81 11       	cpse	r24, r1
    201a:	f9 cf       	rjmp	.-14     	; 0x200e <__EEPROM_REGION_LENGTH__+0xe>
    201c:	0f 2e       	mov	r0, r31
    201e:	f7 e3       	ldi	r31, 0x37	; 55
    2020:	ef 2e       	mov	r14, r31
	/*
	 * This while loop is on purpose, since just in the
	 * rare case that such an address is randomly
	 * generated again, we must repeat this.
	 */
	while ((tal_pib.IeeeAddress == 0x0000000000000000) ||
    2022:	f9 e0       	ldi	r31, 0x09	; 9
    2024:	ff 2e       	mov	r15, r31
    2026:	f0 2d       	mov	r31, r0
    2028:	0f 2e       	mov	r0, r31
    202a:	ff e3       	ldi	r31, 0x3F	; 63
    202c:	cf 2e       	mov	r12, r31
    202e:	f9 e0       	ldi	r31, 0x09	; 9
    2030:	df 2e       	mov	r13, r31
    2032:	f0 2d       	mov	r31, r0
    2034:	c1 cf       	rjmp	.-126    	; 0x1fb8 <tal_init+0xb2>
    2036:	c5 e8       	ldi	r28, 0x85	; 133
    2038:	8c 2f       	mov	r24, r28
    203a:	df 91       	pop	r29
	if (pal_init() != MAC_SUCCESS) {
		return FAILURE;
	}

	if (trx_init() != MAC_SUCCESS) {
		return FAILURE;
    203c:	cf 91       	pop	r28
#ifdef ENABLE_TFA
	tfa_init();
#endif

	return MAC_SUCCESS;
} /* tal_init() */
    203e:	1f 91       	pop	r17
    2040:	0f 91       	pop	r16
    2042:	ff 90       	pop	r15
    2044:	ef 90       	pop	r14
    2046:	df 90       	pop	r13
    2048:	cf 90       	pop	r12
    204a:	08 95       	ret

0000204c <pal_trx_irq_init_tx_end>:
    204c:	90 93 f2 06 	sts	0x06F2, r25	; 0x8006f2 <irq_hdl_trx_tx_end+0x1>
    2050:	80 93 f1 06 	sts	0x06F1, r24	; 0x8006f1 <irq_hdl_trx_tx_end>
 *
 * \param trx_irq_cb Callback function for the transceiver CCA ED END interrupt
 */
void pal_trx_irq_init_cca_ed(FUNC_PTR trx_irq_cb)
{
	irq_hdl_trx_cca_ed = (irq_handler_t)trx_irq_cb;
    2054:	08 95       	ret

00002056 <pal_trx_irq_init_rx_end>:
    2056:	90 93 f0 06 	sts	0x06F0, r25	; 0x8006f0 <irq_hdl_trx_rx_end+0x1>
    205a:	80 93 ef 06 	sts	0x06EF, r24	; 0x8006ef <irq_hdl_trx_rx_end>
    205e:	08 95       	ret

00002060 <pal_trx_irq_init_awake>:
 *
 * \param trx_irq_cb Callback function for the transceiver AWAKE interrupt
 */
void pal_trx_irq_init_awake(FUNC_PTR trx_irq_cb)
{
	irq_hdl_trx_awake = (irq_handler_t)trx_irq_cb;
    2060:	90 93 ec 06 	sts	0x06EC, r25	; 0x8006ec <irq_hdl_trx_awake+0x1>
    2064:	80 93 eb 06 	sts	0x06EB, r24	; 0x8006eb <irq_hdl_trx_awake>
    2068:	08 95       	ret

0000206a <__vector_63>:

/**
 * \brief ISR for transceiver's transmit end interrupt
 */
ISR(TRX24_TX_END_vect)
{
    206a:	1f 92       	push	r1
    206c:	0f 92       	push	r0
    206e:	0f b6       	in	r0, 0x3f	; 63
    2070:	0f 92       	push	r0
    2072:	11 24       	eor	r1, r1
    2074:	0b b6       	in	r0, 0x3b	; 59
    2076:	0f 92       	push	r0
    2078:	2f 93       	push	r18
    207a:	3f 93       	push	r19
    207c:	4f 93       	push	r20
    207e:	5f 93       	push	r21
    2080:	6f 93       	push	r22
    2082:	7f 93       	push	r23
    2084:	8f 93       	push	r24
    2086:	9f 93       	push	r25
    2088:	af 93       	push	r26
    208a:	bf 93       	push	r27
    208c:	ef 93       	push	r30
    208e:	ff 93       	push	r31
	irq_hdl_trx_tx_end();
    2090:	e0 91 f1 06 	lds	r30, 0x06F1	; 0x8006f1 <irq_hdl_trx_tx_end>
    2094:	f0 91 f2 06 	lds	r31, 0x06F2	; 0x8006f2 <irq_hdl_trx_tx_end+0x1>
    2098:	19 95       	eicall
}
    209a:	ff 91       	pop	r31
    209c:	ef 91       	pop	r30
    209e:	bf 91       	pop	r27
    20a0:	af 91       	pop	r26
    20a2:	9f 91       	pop	r25
    20a4:	8f 91       	pop	r24
    20a6:	7f 91       	pop	r23
    20a8:	6f 91       	pop	r22
    20aa:	5f 91       	pop	r21
    20ac:	4f 91       	pop	r20
    20ae:	3f 91       	pop	r19
    20b0:	2f 91       	pop	r18
    20b2:	0f 90       	pop	r0
    20b4:	0b be       	out	0x3b, r0	; 59
    20b6:	0f 90       	pop	r0
    20b8:	0f be       	out	0x3f, r0	; 63
    20ba:	0f 90       	pop	r0
    20bc:	1f 90       	pop	r1
    20be:	18 95       	reti

000020c0 <__vector_60>:

/**
 * \brief ISR for transceiver's receive end interrupt
 */
ISR(TRX24_RX_END_vect)
{
    20c0:	1f 92       	push	r1
    20c2:	0f 92       	push	r0
    20c4:	0f b6       	in	r0, 0x3f	; 63
    20c6:	0f 92       	push	r0
    20c8:	11 24       	eor	r1, r1
    20ca:	0b b6       	in	r0, 0x3b	; 59
    20cc:	0f 92       	push	r0
    20ce:	2f 93       	push	r18
    20d0:	3f 93       	push	r19
    20d2:	4f 93       	push	r20
    20d4:	5f 93       	push	r21
    20d6:	6f 93       	push	r22
    20d8:	7f 93       	push	r23
    20da:	8f 93       	push	r24
    20dc:	9f 93       	push	r25
    20de:	af 93       	push	r26
    20e0:	bf 93       	push	r27
    20e2:	ef 93       	push	r30
    20e4:	ff 93       	push	r31
	irq_hdl_trx_rx_end();
    20e6:	e0 91 ef 06 	lds	r30, 0x06EF	; 0x8006ef <irq_hdl_trx_rx_end>
    20ea:	f0 91 f0 06 	lds	r31, 0x06F0	; 0x8006f0 <irq_hdl_trx_rx_end+0x1>
    20ee:	19 95       	eicall
}
    20f0:	ff 91       	pop	r31
    20f2:	ef 91       	pop	r30
    20f4:	bf 91       	pop	r27
    20f6:	af 91       	pop	r26
    20f8:	9f 91       	pop	r25
    20fa:	8f 91       	pop	r24
    20fc:	7f 91       	pop	r23
    20fe:	6f 91       	pop	r22
    2100:	5f 91       	pop	r21
    2102:	4f 91       	pop	r20
    2104:	3f 91       	pop	r19
    2106:	2f 91       	pop	r18
    2108:	0f 90       	pop	r0
    210a:	0b be       	out	0x3b, r0	; 59
    210c:	0f 90       	pop	r0
    210e:	0f be       	out	0x3f, r0	; 63
    2110:	0f 90       	pop	r0
    2112:	1f 90       	pop	r1
    2114:	18 95       	reti

00002116 <__vector_61>:

/**
 * \brief ISR for transceiver's CCA/ED measurement done interrupt
 */
ISR(TRX24_CCA_ED_DONE_vect)
{
    2116:	1f 92       	push	r1
    2118:	0f 92       	push	r0
    211a:	0f b6       	in	r0, 0x3f	; 63
    211c:	0f 92       	push	r0
    211e:	11 24       	eor	r1, r1
    2120:	0b b6       	in	r0, 0x3b	; 59
    2122:	0f 92       	push	r0
    2124:	2f 93       	push	r18
    2126:	3f 93       	push	r19
    2128:	4f 93       	push	r20
    212a:	5f 93       	push	r21
    212c:	6f 93       	push	r22
    212e:	7f 93       	push	r23
    2130:	8f 93       	push	r24
    2132:	9f 93       	push	r25
    2134:	af 93       	push	r26
    2136:	bf 93       	push	r27
    2138:	ef 93       	push	r30
    213a:	ff 93       	push	r31
	irq_hdl_trx_cca_ed();
    213c:	e0 91 ed 06 	lds	r30, 0x06ED	; 0x8006ed <irq_hdl_trx_cca_ed>
    2140:	f0 91 ee 06 	lds	r31, 0x06EE	; 0x8006ee <irq_hdl_trx_cca_ed+0x1>
    2144:	19 95       	eicall
}
    2146:	ff 91       	pop	r31
    2148:	ef 91       	pop	r30
    214a:	bf 91       	pop	r27
    214c:	af 91       	pop	r26
    214e:	9f 91       	pop	r25
    2150:	8f 91       	pop	r24
    2152:	7f 91       	pop	r23
    2154:	6f 91       	pop	r22
    2156:	5f 91       	pop	r21
    2158:	4f 91       	pop	r20
    215a:	3f 91       	pop	r19
    215c:	2f 91       	pop	r18
    215e:	0f 90       	pop	r0
    2160:	0b be       	out	0x3b, r0	; 59
    2162:	0f 90       	pop	r0
    2164:	0f be       	out	0x3f, r0	; 63
    2166:	0f 90       	pop	r0
    2168:	1f 90       	pop	r1
    216a:	18 95       	reti

0000216c <__vector_64>:

/**
 * \brief ISR for transceiver's Awake interrupt
 */
ISR(TRX24_AWAKE_vect)
{
    216c:	1f 92       	push	r1
    216e:	0f 92       	push	r0
    2170:	0f b6       	in	r0, 0x3f	; 63
    2172:	0f 92       	push	r0
    2174:	11 24       	eor	r1, r1
    2176:	0b b6       	in	r0, 0x3b	; 59
    2178:	0f 92       	push	r0
    217a:	2f 93       	push	r18
    217c:	3f 93       	push	r19
    217e:	4f 93       	push	r20
    2180:	5f 93       	push	r21
    2182:	6f 93       	push	r22
    2184:	7f 93       	push	r23
    2186:	8f 93       	push	r24
    2188:	9f 93       	push	r25
    218a:	af 93       	push	r26
    218c:	bf 93       	push	r27
    218e:	ef 93       	push	r30
    2190:	ff 93       	push	r31
	irq_hdl_trx_awake();
    2192:	e0 91 eb 06 	lds	r30, 0x06EB	; 0x8006eb <irq_hdl_trx_awake>
    2196:	f0 91 ec 06 	lds	r31, 0x06EC	; 0x8006ec <irq_hdl_trx_awake+0x1>
    219a:	19 95       	eicall
}
    219c:	ff 91       	pop	r31
    219e:	ef 91       	pop	r30
    21a0:	bf 91       	pop	r27
    21a2:	af 91       	pop	r26
    21a4:	9f 91       	pop	r25
    21a6:	8f 91       	pop	r24
    21a8:	7f 91       	pop	r23
    21aa:	6f 91       	pop	r22
    21ac:	5f 91       	pop	r21
    21ae:	4f 91       	pop	r20
    21b0:	3f 91       	pop	r19
    21b2:	2f 91       	pop	r18
    21b4:	0f 90       	pop	r0
    21b6:	0b be       	out	0x3b, r0	; 59
    21b8:	0f 90       	pop	r0
    21ba:	0f be       	out	0x3f, r0	; 63
    21bc:	0f 90       	pop	r0
    21be:	1f 90       	pop	r1
    21c0:	18 95       	reti

000021c2 <__vector_59>:
 *
 * By the time the SFD is detected, the hardware timestamps the
 * current frame in the SCTSR register.
 */
ISR(TRX24_RX_START_vect)
{
    21c2:	1f 92       	push	r1
    21c4:	0f 92       	push	r0
    21c6:	0f b6       	in	r0, 0x3f	; 63
    21c8:	0f 92       	push	r0
    21ca:	11 24       	eor	r1, r1
#if (defined BEACON_SUPPORT) || (defined ENABLE_TSTAMP)
	irq_hdl_trx_tstamp();
#endif  /* #if (defined BEACON_SUPPORT) || (defined ENABLE_TSTAMP) */
}
    21cc:	0f 90       	pop	r0
    21ce:	0f be       	out	0x3f, r0	; 63
    21d0:	0f 90       	pop	r0
    21d2:	1f 90       	pop	r1
    21d4:	18 95       	reti

000021d6 <__vector_57>:

/**
 * \brief ISR for transceiver's PLL lock interrupt
 */
ISR(TRX24_PLL_LOCK_vect)
{
    21d6:	1f 92       	push	r1
    21d8:	0f 92       	push	r0
    21da:	0f b6       	in	r0, 0x3f	; 63
    21dc:	0f 92       	push	r0
    21de:	11 24       	eor	r1, r1
#ifdef ENABLE_ALL_TRX_IRQS
	irq_hdl_trx_pll_lock();
#endif  /*  ENABLE_ALL_TRX_IRQS*/
}
    21e0:	0f 90       	pop	r0
    21e2:	0f be       	out	0x3f, r0	; 63
    21e4:	0f 90       	pop	r0
    21e6:	1f 90       	pop	r1
    21e8:	18 95       	reti

000021ea <__vector_58>:

/**
 * \brief ISR for transceiver's PLL unlock interrupt
 */
ISR(TRX24_PLL_UNLOCK_vect)
{
    21ea:	1f 92       	push	r1
    21ec:	0f 92       	push	r0
    21ee:	0f b6       	in	r0, 0x3f	; 63
    21f0:	0f 92       	push	r0
    21f2:	11 24       	eor	r1, r1
#ifdef ENABLE_ALL_TRX_IRQS
	irq_hdl_trx_pll_unlock();
#endif  /*  ENABLE_ALL_TRX_IRQS*/
}
    21f4:	0f 90       	pop	r0
    21f6:	0f be       	out	0x3f, r0	; 63
    21f8:	0f 90       	pop	r0
    21fa:	1f 90       	pop	r1
    21fc:	18 95       	reti

000021fe <__vector_62>:

/**
 * \brief ISR for transceiver's address match interrupt
 */
ISR(TRX24_XAH_AMI_vect)
{
    21fe:	1f 92       	push	r1
    2200:	0f 92       	push	r0
    2202:	0f b6       	in	r0, 0x3f	; 63
    2204:	0f 92       	push	r0
    2206:	11 24       	eor	r1, r1
#ifdef ENABLE_ALL_TRX_IRQS
	irq_hdl_trx_ami();
#endif  /*  ENABLE_ALL_TRX_IRQS*/
}
    2208:	0f 90       	pop	r0
    220a:	0f be       	out	0x3f, r0	; 63
    220c:	0f 90       	pop	r0
    220e:	1f 90       	pop	r1
    2210:	18 95       	reti

00002212 <__vector_71>:

/**
 * \brief ISR for transceiver's battery low interrupt
 */
ISR(BAT_LOW_vect)
{
    2212:	1f 92       	push	r1
    2214:	0f 92       	push	r0
    2216:	0f b6       	in	r0, 0x3f	; 63
    2218:	0f 92       	push	r0
    221a:	11 24       	eor	r1, r1
#ifdef ENABLE_ALL_TRX_IRQS
	irq_hdl_trx_batmon();
#endif  /*  ENABLE_ALL_TRX_IRQS*/
}
    221c:	0f 90       	pop	r0
    221e:	0f be       	out	0x3f, r0	; 63
    2220:	0f 90       	pop	r0
    2222:	1f 90       	pop	r1
    2224:	18 95       	reti

00002226 <__vector_70>:

/**
 * \brief ISR for transceiver's AES interrupt
 */
ISR(AES_READY_vect)
{
    2226:	1f 92       	push	r1
    2228:	0f 92       	push	r0
    222a:	0f b6       	in	r0, 0x3f	; 63
    222c:	0f 92       	push	r0
    222e:	11 24       	eor	r1, r1
#ifdef ENABLE_ALL_TRX_IRQS
	irq_hdl_trx_aes_ready();
#endif  /*  ENABLE_ALL_TRX_IRQS*/
}
    2230:	0f 90       	pop	r0
    2232:	0f be       	out	0x3f, r0	; 63
    2234:	0f 90       	pop	r0
    2236:	1f 90       	pop	r1
    2238:	18 95       	reti

0000223a <__vector_72>:

/**
 * \brief ISR for transceiver's TX_START interrupt
 */
ISR(TRX24_TX_START_vect)
{
    223a:	1f 92       	push	r1
    223c:	0f 92       	push	r0
    223e:	0f b6       	in	r0, 0x3f	; 63
    2240:	0f 92       	push	r0
    2242:	11 24       	eor	r1, r1
	pal_tx_timestamp = PAL_US_PER_SYMBOLS * SC_READ32(SCCNT);
#endif
#ifdef ENABLE_ALL_TRX_IRQS
	irq_hdl_trx_tx_start();
#endif  /*  ENABLE_ALL_TRX_IRQS*/
}
    2244:	0f 90       	pop	r0
    2246:	0f be       	out	0x3f, r0	; 63
    2248:	0f 90       	pop	r0
    224a:	1f 90       	pop	r1
    224c:	18 95       	reti

0000224e <__vector_73>:

/**
 * \brief ISR for transceiver's AMI0 interrupt
 */
ISR(TRX24_AMI0_vect)
{
    224e:	1f 92       	push	r1
    2250:	0f 92       	push	r0
    2252:	0f b6       	in	r0, 0x3f	; 63
    2254:	0f 92       	push	r0
    2256:	11 24       	eor	r1, r1
#ifdef ENABLE_ALL_TRX_IRQS
	irq_hdl_trx_ami0();
#endif  /*  ENABLE_ALL_TRX_IRQS*/
}
    2258:	0f 90       	pop	r0
    225a:	0f be       	out	0x3f, r0	; 63
    225c:	0f 90       	pop	r0
    225e:	1f 90       	pop	r1
    2260:	18 95       	reti

00002262 <__vector_74>:

/**
 * \brief ISR for transceiver's AMI1 interrupt
 */
ISR(TRX24_AMI1_vect)
{
    2262:	1f 92       	push	r1
    2264:	0f 92       	push	r0
    2266:	0f b6       	in	r0, 0x3f	; 63
    2268:	0f 92       	push	r0
    226a:	11 24       	eor	r1, r1
#ifdef ENABLE_ALL_TRX_IRQS
	irq_hdl_trx_ami1();
#endif  /*  ENABLE_ALL_TRX_IRQS*/
}
    226c:	0f 90       	pop	r0
    226e:	0f be       	out	0x3f, r0	; 63
    2270:	0f 90       	pop	r0
    2272:	1f 90       	pop	r1
    2274:	18 95       	reti

00002276 <__vector_75>:

/**
 * \brief ISR for transceiver's AMI2 interrupt
 */
ISR(TRX24_AMI2_vect)
{
    2276:	1f 92       	push	r1
    2278:	0f 92       	push	r0
    227a:	0f b6       	in	r0, 0x3f	; 63
    227c:	0f 92       	push	r0
    227e:	11 24       	eor	r1, r1
#ifdef ENABLE_ALL_TRX_IRQS
	irq_hdl_trx_ami2();
#endif  /*  ENABLE_ALL_TRX_IRQS*/
}
    2280:	0f 90       	pop	r0
    2282:	0f be       	out	0x3f, r0	; 63
    2284:	0f 90       	pop	r0
    2286:	1f 90       	pop	r1
    2288:	18 95       	reti

0000228a <__vector_76>:

/**
 * \brief ISR for transceiver's AMI3 interrupt
 */
ISR(TRX24_AMI3_vect)
{
    228a:	1f 92       	push	r1
    228c:	0f 92       	push	r0
    228e:	0f b6       	in	r0, 0x3f	; 63
    2290:	0f 92       	push	r0
    2292:	11 24       	eor	r1, r1
#ifdef ENABLE_ALL_TRX_IRQS
	irq_hdl_trx_ami3();
#endif  /*  ENABLE_ALL_TRX_IRQS*/
}
    2294:	0f 90       	pop	r0
    2296:	0f be       	out	0x3f, r0	; 63
    2298:	0f 90       	pop	r0
    229a:	1f 90       	pop	r1
    229c:	18 95       	reti

0000229e <trx_rx_end_handler_cb>:
 * \brief Transceiver interrupt handler
 *
 * This function handles the transceiver generated interrupts for RX end.
 */
void trx_rx_end_handler_cb(void)
{
    229e:	1f 93       	push	r17
    22a0:	cf 93       	push	r28
    22a2:	df 93       	push	r29
    22a4:	1f 92       	push	r1
    22a6:	cd b7       	in	r28, 0x3d	; 61
    22a8:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    22aa:	8f b7       	in	r24, 0x3f	; 63
    22ac:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    22ae:	f8 94       	cli
	return flags;
    22b0:	19 81       	ldd	r17, Y+1	; 0x01
	ENTER_CRITICAL_REGION();

	/* Handle rx interrupt. */
	handle_received_frame_irq(); /* see tal_rx.c */
    22b2:	19 d2       	rcall	.+1074   	; 0x26e6 <handle_received_frame_irq>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    22b4:	1f bf       	out	0x3f, r17	; 63

	LEAVE_CRITICAL_REGION();
} /* trx_rx_end_handler_cb() */
    22b6:	0f 90       	pop	r0
    22b8:	df 91       	pop	r29
    22ba:	cf 91       	pop	r28
    22bc:	1f 91       	pop	r17
    22be:	08 95       	ret

000022c0 <trx_tx_end_handler_cb>:
 * \brief Transceiver interrupt handler
 *
 * This function handles the transceiver generated interrupts for TX end.
 */
void trx_tx_end_handler_cb(void)
{
    22c0:	1f 93       	push	r17
    22c2:	cf 93       	push	r28
    22c4:	df 93       	push	r29
    22c6:	1f 92       	push	r1
    22c8:	cd b7       	in	r28, 0x3d	; 61
    22ca:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    22cc:	8f b7       	in	r24, 0x3f	; 63
    22ce:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    22d0:	f8 94       	cli
	return flags;
    22d2:	19 81       	ldd	r17, Y+1	; 0x01
	ENTER_CRITICAL_REGION();

	/* Get the result and push it to the queue. */
	handle_tx_end_irq();        /* see tal_tx.c */
    22d4:	a6 d3       	rcall	.+1868   	; 0x2a22 <handle_tx_end_irq>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    22d6:	1f bf       	out	0x3f, r17	; 63

	LEAVE_CRITICAL_REGION();
} /* trx_tx_end_handler_cb() */
    22d8:	0f 90       	pop	r0
    22da:	df 91       	pop	r29
    22dc:	cf 91       	pop	r28
    22de:	1f 91       	pop	r17
    22e0:	08 95       	ret

000022e2 <trx_awake_handler_cb>:
 * This function handles the transceiver awake end interrupt.
 */
void trx_awake_handler_cb(void)
{
	/* Set the wake-up flag. */
	tal_awake_end_flag = true;
    22e2:	81 e0       	ldi	r24, 0x01	; 1
    22e4:	80 93 5a 09 	sts	0x095A, r24	; 0x80095a <tal_awake_end_flag>
    22e8:	08 95       	ret

000022ea <limit_tx_pwr>:
		/* Invalid attribute id */
		return MAC_UNSUPPORTED_ATTRIBUTE;
	}

	return MAC_SUCCESS;
} /* tal_pib_get() */
    22ea:	85 fd       	sbrc	r24, 5
    22ec:	03 c0       	rjmp	.+6      	; 0x22f4 <limit_tx_pwr+0xa>
    22ee:	98 2f       	mov	r25, r24
    22f0:	9f 73       	andi	r25, 0x3F	; 63
    22f2:	04 c0       	rjmp	.+8      	; 0x22fc <limit_tx_pwr+0x12>
    22f4:	98 2f       	mov	r25, r24
    22f6:	91 95       	neg	r25
    22f8:	9f 71       	andi	r25, 0x1F	; 31
    22fa:	91 95       	neg	r25
    22fc:	e2 e6       	ldi	r30, 0x62	; 98
    22fe:	f1 e0       	ldi	r31, 0x01	; 1
    2300:	24 91       	lpm	r18, Z
    2302:	29 17       	cp	r18, r25
    2304:	54 f4       	brge	.+20     	; 0x231a <limit_tx_pwr+0x30>
    2306:	84 91       	lpm	r24, Z
    2308:	80 3e       	cpi	r24, 0xE0	; 224
    230a:	b4 f0       	brlt	.+44     	; 0x2338 <limit_tx_pwr+0x4e>
    230c:	80 32       	cpi	r24, 0x20	; 32
    230e:	b4 f4       	brge	.+44     	; 0x233c <limit_tx_pwr+0x52>
    2310:	88 23       	and	r24, r24
    2312:	cc f4       	brge	.+50     	; 0x2346 <limit_tx_pwr+0x5c>
    2314:	8f 71       	andi	r24, 0x1F	; 31
    2316:	80 62       	ori	r24, 0x20	; 32
    2318:	16 c0       	rjmp	.+44     	; 0x2346 <limit_tx_pwr+0x5c>
    231a:	e1 e7       	ldi	r30, 0x71	; 113
    231c:	f1 e0       	ldi	r31, 0x01	; 1
    231e:	24 91       	lpm	r18, Z
    2320:	92 17       	cp	r25, r18
    2322:	8c f4       	brge	.+34     	; 0x2346 <limit_tx_pwr+0x5c>
    2324:	84 91       	lpm	r24, Z
    2326:	80 3e       	cpi	r24, 0xE0	; 224
    2328:	5c f0       	brlt	.+22     	; 0x2340 <limit_tx_pwr+0x56>
    232a:	80 32       	cpi	r24, 0x20	; 32
    232c:	5c f4       	brge	.+22     	; 0x2344 <limit_tx_pwr+0x5a>
    232e:	88 23       	and	r24, r24
    2330:	54 f4       	brge	.+20     	; 0x2346 <limit_tx_pwr+0x5c>
    2332:	8f 71       	andi	r24, 0x1F	; 31
    2334:	80 62       	ori	r24, 0x20	; 32
    2336:	07 c0       	rjmp	.+14     	; 0x2346 <limit_tx_pwr+0x5c>
    2338:	80 e2       	ldi	r24, 0x20	; 32
    233a:	05 c0       	rjmp	.+10     	; 0x2346 <limit_tx_pwr+0x5c>
    233c:	8f e1       	ldi	r24, 0x1F	; 31
    233e:	03 c0       	rjmp	.+6      	; 0x2346 <limit_tx_pwr+0x5c>
    2340:	80 e2       	ldi	r24, 0x20	; 32
    2342:	01 c0       	rjmp	.+2      	; 0x2346 <limit_tx_pwr+0x5c>
    2344:	8f e1       	ldi	r24, 0x1F	; 31
    2346:	80 68       	ori	r24, 0x80	; 128
    2348:	08 95       	ret

0000234a <init_tal_pib>:
    234a:	cf 93       	push	r28
    234c:	df 93       	push	r29
    234e:	c7 e3       	ldi	r28, 0x37	; 55
    2350:	d9 e0       	ldi	r29, 0x09	; 9
    2352:	84 e0       	ldi	r24, 0x04	; 4
    2354:	8c 8b       	std	Y+20, r24	; 0x14
    2356:	83 e0       	ldi	r24, 0x03	; 3
    2358:	8d 8b       	std	Y+21, r24	; 0x15
    235a:	2f ef       	ldi	r18, 0xFF	; 255
    235c:	3f ef       	ldi	r19, 0xFF	; 255
    235e:	3f 87       	std	Y+15, r19	; 0x0f
    2360:	2e 87       	std	Y+14, r18	; 0x0e
    2362:	3d 87       	std	Y+13, r19	; 0x0d
    2364:	2c 87       	std	Y+12, r18	; 0x0c
    2366:	9b e0       	ldi	r25, 0x0B	; 11
    2368:	9b 8b       	std	Y+19, r25	; 0x13
    236a:	18 8e       	std	Y+24, r1	; 0x18
    236c:	40 e0       	ldi	r20, 0x00	; 0
    236e:	58 ef       	ldi	r21, 0xF8	; 248
    2370:	6f ef       	ldi	r22, 0xFF	; 255
    2372:	77 e0       	ldi	r23, 0x07	; 7
    2374:	48 87       	std	Y+8, r20	; 0x08
    2376:	59 87       	std	Y+9, r21	; 0x09
    2378:	6a 87       	std	Y+10, r22	; 0x0a
    237a:	7b 87       	std	Y+11, r23	; 0x0b
    237c:	2a e0       	ldi	r18, 0x0A	; 10
    237e:	31 e0       	ldi	r19, 0x01	; 1
    2380:	39 8b       	std	Y+17, r19	; 0x11
    2382:	28 8b       	std	Y+16, r18	; 0x10
    2384:	9a e0       	ldi	r25, 0x0A	; 10
    2386:	99 8f       	std	Y+25, r25	; 0x19
    2388:	92 e0       	ldi	r25, 0x02	; 2
    238a:	9a 8f       	std	Y+26, r25	; 0x1a
    238c:	95 e0       	ldi	r25, 0x05	; 5
    238e:	9b 8f       	std	Y+27, r25	; 0x1b
    2390:	8c 8f       	std	Y+28, r24	; 0x1c
    2392:	84 e8       	ldi	r24, 0x84	; 132
    2394:	aa df       	rcall	.-172    	; 0x22ea <limit_tx_pwr>
    2396:	8f 8b       	std	Y+23, r24	; 0x17
    2398:	81 e0       	ldi	r24, 0x01	; 1
    239a:	8a 8b       	std	Y+18, r24	; 0x12
    239c:	1e 8a       	std	Y+22, r1	; 0x16
    239e:	df 91       	pop	r29
    23a0:	cf 91       	pop	r28
    23a2:	08 95       	ret

000023a4 <convert_phyTransmitPower_to_reg_value>:
{
	int8_t dbm_value;
	uint8_t i;
	int8_t trx_tx_level;

	dbm_value = CONV_phyTransmitPower_TO_DBM(phyTransmitPower_value);
    23a4:	85 fd       	sbrc	r24, 5
    23a6:	02 c0       	rjmp	.+4      	; 0x23ac <convert_phyTransmitPower_to_reg_value+0x8>
    23a8:	8f 73       	andi	r24, 0x3F	; 63
    23aa:	03 c0       	rjmp	.+6      	; 0x23b2 <convert_phyTransmitPower_to_reg_value+0xe>
    23ac:	81 95       	neg	r24
    23ae:	8f 71       	andi	r24, 0x1F	; 31
    23b0:	81 95       	neg	r24

	/* Compare to the register value to identify the value that matches. */
	for (i = 0; i < sizeof(tx_pwr_table); i++) {
		trx_tx_level = (int8_t)PGM_READ_BYTE(&tx_pwr_table[i]);
    23b2:	e2 e6       	ldi	r30, 0x62	; 98
    23b4:	f1 e0       	ldi	r31, 0x01	; 1
    23b6:	94 91       	lpm	r25, Z
		if (trx_tx_level <= dbm_value) {
    23b8:	89 17       	cp	r24, r25
    23ba:	3c f4       	brge	.+14     	; 0x23ca <convert_phyTransmitPower_to_reg_value+0x26>
    23bc:	e3 e6       	ldi	r30, 0x63	; 99
    23be:	f1 e0       	ldi	r31, 0x01	; 1
	int8_t trx_tx_level;

	dbm_value = CONV_phyTransmitPower_TO_DBM(phyTransmitPower_value);

	/* Compare to the register value to identify the value that matches. */
	for (i = 0; i < sizeof(tx_pwr_table); i++) {
    23c0:	21 e0       	ldi	r18, 0x01	; 1
		trx_tx_level = (int8_t)PGM_READ_BYTE(&tx_pwr_table[i]);
    23c2:	94 91       	lpm	r25, Z
		if (trx_tx_level <= dbm_value) {
    23c4:	89 17       	cp	r24, r25
    23c6:	3c f0       	brlt	.+14     	; 0x23d6 <convert_phyTransmitPower_to_reg_value+0x32>
    23c8:	01 c0       	rjmp	.+2      	; 0x23cc <convert_phyTransmitPower_to_reg_value+0x28>
	int8_t trx_tx_level;

	dbm_value = CONV_phyTransmitPower_TO_DBM(phyTransmitPower_value);

	/* Compare to the register value to identify the value that matches. */
	for (i = 0; i < sizeof(tx_pwr_table); i++) {
    23ca:	20 e0       	ldi	r18, 0x00	; 0
		trx_tx_level = (int8_t)PGM_READ_BYTE(&tx_pwr_table[i]);
		if (trx_tx_level <= dbm_value) {
			if (trx_tx_level < dbm_value) {
    23cc:	98 17       	cp	r25, r24
    23ce:	4c f4       	brge	.+18     	; 0x23e2 <convert_phyTransmitPower_to_reg_value+0x3e>
				return (i - 1);
    23d0:	8f ef       	ldi	r24, 0xFF	; 255
    23d2:	82 0f       	add	r24, r18
    23d4:	08 95       	ret
	int8_t trx_tx_level;

	dbm_value = CONV_phyTransmitPower_TO_DBM(phyTransmitPower_value);

	/* Compare to the register value to identify the value that matches. */
	for (i = 0; i < sizeof(tx_pwr_table); i++) {
    23d6:	2f 5f       	subi	r18, 0xFF	; 255
    23d8:	31 96       	adiw	r30, 0x01	; 1
    23da:	20 31       	cpi	r18, 0x10	; 16
    23dc:	91 f7       	brne	.-28     	; 0x23c2 <convert_phyTransmitPower_to_reg_value+0x1e>
			return i;
		}
	}

	/* This code should never be reached. */
	return 0;
    23de:	80 e0       	ldi	r24, 0x00	; 0
    23e0:	08 95       	ret
    23e2:	82 2f       	mov	r24, r18
}
    23e4:	08 95       	ret

000023e6 <write_all_tal_pib_to_trx>:
 *
 * This function writes all shadow PIB variables to the transceiver.
 * It is assumed that the radio does not sleep.
 */
void write_all_tal_pib_to_trx(void)
{
    23e6:	cf 93       	push	r28
    23e8:	df 93       	push	r29
	uint8_t *ptr_to_reg;

	trx_reg_write(RG_PAN_ID_0, (uint8_t)tal_pib.PANId);
    23ea:	e7 e3       	ldi	r30, 0x37	; 55
    23ec:	f9 e0       	ldi	r31, 0x09	; 9
    23ee:	86 85       	ldd	r24, Z+14	; 0x0e
    23f0:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <__TEXT_REGION_LENGTH__+0x7c0162>
	trx_reg_write(RG_PAN_ID_1, (uint8_t)(tal_pib.PANId >> 8));
    23f4:	87 85       	ldd	r24, Z+15	; 0x0f
    23f6:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <__TEXT_REGION_LENGTH__+0x7c0163>
    23fa:	e4 e6       	ldi	r30, 0x64	; 100
    23fc:	f1 e0       	ldi	r31, 0x01	; 1

	ptr_to_reg = (uint8_t *)&tal_pib.IeeeAddress;
    23fe:	a7 e3       	ldi	r26, 0x37	; 55
    2400:	b9 e0       	ldi	r27, 0x09	; 9
	for (uint8_t i = 0; i < 8; i++) {
		trx_reg_write((RG_IEEE_ADDR_0 + i), *ptr_to_reg);
    2402:	8d 91       	ld	r24, X+
    2404:	81 93       	st	Z+, r24

	trx_reg_write(RG_PAN_ID_0, (uint8_t)tal_pib.PANId);
	trx_reg_write(RG_PAN_ID_1, (uint8_t)(tal_pib.PANId >> 8));

	ptr_to_reg = (uint8_t *)&tal_pib.IeeeAddress;
	for (uint8_t i = 0; i < 8; i++) {
    2406:	ec 36       	cpi	r30, 0x6C	; 108
    2408:	31 e0       	ldi	r19, 0x01	; 1
    240a:	f3 07       	cpc	r31, r19
    240c:	d1 f7       	brne	.-12     	; 0x2402 <write_all_tal_pib_to_trx+0x1c>
		trx_reg_write((RG_IEEE_ADDR_0 + i), *ptr_to_reg);
		ptr_to_reg++;
	}

	trx_reg_write(RG_SHORT_ADDR_0, (uint8_t)tal_pib.ShortAddress);
    240e:	e7 e3       	ldi	r30, 0x37	; 55
    2410:	f9 e0       	ldi	r31, 0x09	; 9
    2412:	84 85       	ldd	r24, Z+12	; 0x0c
    2414:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <__TEXT_REGION_LENGTH__+0x7c0160>
	trx_reg_write(RG_SHORT_ADDR_1,
    2418:	85 85       	ldd	r24, Z+13	; 0x0d
    241a:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <__TEXT_REGION_LENGTH__+0x7c0161>
			(uint8_t)(tal_pib.ShortAddress >> 8));

	/* configure TX_ARET; CSMA and CCA */
	trx_bit_write(SR_CCA_MODE, tal_pib.CCAMode);
    241e:	48 e4       	ldi	r20, 0x48	; 72
    2420:	51 e0       	ldi	r21, 0x01	; 1
    2422:	da 01       	movw	r26, r20
    2424:	8c 91       	ld	r24, X
    2426:	22 89       	ldd	r18, Z+18	; 0x12
    2428:	b0 e2       	ldi	r27, 0x20	; 32
    242a:	2b 9f       	mul	r18, r27
    242c:	90 01       	movw	r18, r0
    242e:	11 24       	eor	r1, r1
    2430:	20 76       	andi	r18, 0x60	; 96
    2432:	8f 79       	andi	r24, 0x9F	; 159
    2434:	82 2b       	or	r24, r18
    2436:	da 01       	movw	r26, r20
    2438:	8c 93       	st	X, r24
	trx_bit_write(SR_MIN_BE, tal_pib.MinBE);
    243a:	cf e6       	ldi	r28, 0x6F	; 111
    243c:	d1 e0       	ldi	r29, 0x01	; 1
    243e:	88 81       	ld	r24, Y
    2440:	95 89       	ldd	r25, Z+21	; 0x15
    2442:	9f 70       	andi	r25, 0x0F	; 15
    2444:	80 7f       	andi	r24, 0xF0	; 240
    2446:	89 2b       	or	r24, r25
    2448:	88 83       	st	Y, r24

	trx_bit_write(SR_AACK_I_AM_COORD, tal_pib.PrivatePanCoordinator);
    244a:	2e e6       	ldi	r18, 0x6E	; 110
    244c:	31 e0       	ldi	r19, 0x01	; 1
    244e:	d9 01       	movw	r26, r18
    2450:	8c 91       	ld	r24, X
    2452:	96 89       	ldd	r25, Z+22	; 0x16
    2454:	99 0f       	add	r25, r25
    2456:	99 0f       	add	r25, r25
    2458:	99 0f       	add	r25, r25
    245a:	98 70       	andi	r25, 0x08	; 8
    245c:	87 7f       	andi	r24, 0xF7	; 247
    245e:	89 2b       	or	r24, r25
    2460:	8c 93       	st	X, r24

	/* set phy parameter */
	trx_bit_write(SR_MAX_BE, tal_pib.MaxBE);
    2462:	28 81       	ld	r18, Y
    2464:	93 8d       	ldd	r25, Z+27	; 0x1b
    2466:	b0 e1       	ldi	r27, 0x10	; 16
    2468:	9b 9f       	mul	r25, r27
    246a:	c0 01       	movw	r24, r0
    246c:	11 24       	eor	r1, r1
    246e:	92 2f       	mov	r25, r18
    2470:	9f 70       	andi	r25, 0x0F	; 15
    2472:	89 2b       	or	r24, r25
    2474:	88 83       	st	Y, r24

#ifdef HIGH_DATA_RATE_SUPPORT
	apply_channel_page_configuration(tal_pib.CurrentPage);
#endif

	trx_bit_write(SR_CHANNEL, tal_pib.CurrentChannel);
    2476:	da 01       	movw	r26, r20
    2478:	8c 91       	ld	r24, X
    247a:	93 89       	ldd	r25, Z+19	; 0x13
    247c:	9f 71       	andi	r25, 0x1F	; 31
    247e:	80 7e       	andi	r24, 0xE0	; 224
    2480:	89 2b       	or	r24, r25
    2482:	8c 93       	st	X, r24
	{
		uint8_t reg_value;

		reg_value = convert_phyTransmitPower_to_reg_value(
    2484:	87 89       	ldd	r24, Z+23	; 0x17
    2486:	8e df       	rcall	.-228    	; 0x23a4 <convert_phyTransmitPower_to_reg_value>
				tal_pib.TransmitPower);
		trx_bit_write(SR_TX_PWR, reg_value);
    2488:	e5 e4       	ldi	r30, 0x45	; 69
    248a:	f1 e0       	ldi	r31, 0x01	; 1
    248c:	90 81       	ld	r25, Z
    248e:	90 7f       	andi	r25, 0xF0	; 240
    2490:	8f 70       	andi	r24, 0x0F	; 15
    2492:	89 2b       	or	r24, r25
    2494:	80 83       	st	Z, r24
#ifdef PROMISCUOUS_MODE
	if (tal_pib.PromiscuousMode) {
		set_trx_state(CMD_RX_ON);
	}
#endif
}
    2496:	df 91       	pop	r29
    2498:	cf 91       	pop	r28
    249a:	08 95       	ret

0000249c <tal_pib_set>:
 *         in TAL_IDLE state.
 *         MAC_SUCCESS if the attempt to set the PIB attribute was successful
 *         TAL_TRX_ASLEEP if trx is in SLEEP mode and access to trx is required
 */
retval_t tal_pib_set(uint8_t attribute, pib_value_t *value)
{
    249c:	cf 93       	push	r28
    249e:	df 93       	push	r29
	 * and those that are simple variable udpates.
	 * Ensure that the transceiver is not in SLEEP.
	 * If it is in SLEEP, change it to TRX_OFF.
	 */

	switch (attribute) {
    24a0:	8e 34       	cpi	r24, 0x4E	; 78
    24a2:	41 f0       	breq	.+16     	; 0x24b4 <tal_pib_set+0x18>
    24a4:	89 35       	cpi	r24, 0x59	; 89
    24a6:	61 f4       	brne	.+24     	; 0x24c0 <tal_pib_set+0x24>

		/*
		 * The new PIB value is not immediately written to the
		 * transceiver. This is done on a frame-by-frame base.
		 */
		tal_pib.MaxFrameRetries = value->pib_value_8bit;
    24a8:	fb 01       	movw	r30, r22
    24aa:	80 81       	ld	r24, Z
    24ac:	80 93 53 09 	sts	0x0953, r24	; 0x800953 <tal_pib+0x1c>
			return MAC_UNSUPPORTED_ATTRIBUTE;
		}

		break; /* end of 'default' from 'switch (attribute)' */
	}
	return MAC_SUCCESS;
    24b0:	80 e0       	ldi	r24, 0x00	; 0
		/*
		 * The new PIB value is not immediately written to the
		 * transceiver. This is done on a frame-by-frame base.
		 */
		tal_pib.MaxFrameRetries = value->pib_value_8bit;
		break;
    24b2:	0b c1       	rjmp	.+534    	; 0x26ca <tal_pib_set+0x22e>

		/*
		 * The new PIB value is not immediately written to the
		 * transceiver. This is done on a frame-by-frame base.
		 */
		tal_pib.MaxCSMABackoffs = value->pib_value_8bit;
    24b4:	fb 01       	movw	r30, r22
    24b6:	80 81       	ld	r24, Z
    24b8:	80 93 4b 09 	sts	0x094B, r24	; 0x80094b <tal_pib+0x14>
			return MAC_UNSUPPORTED_ATTRIBUTE;
		}

		break; /* end of 'default' from 'switch (attribute)' */
	}
	return MAC_SUCCESS;
    24bc:	80 e0       	ldi	r24, 0x00	; 0
		/*
		 * The new PIB value is not immediately written to the
		 * transceiver. This is done on a frame-by-frame base.
		 */
		tal_pib.MaxCSMABackoffs = value->pib_value_8bit;
		break;
    24be:	05 c1       	rjmp	.+522    	; 0x26ca <tal_pib_set+0x22e>
		/*
		 * Following PIBs require access to trx.
		 * Therefore trx must be at least in TRX_OFF.
		 */

		if (tal_trx_status == TRX_SLEEP) {
    24c0:	90 91 56 09 	lds	r25, 0x0956	; 0x800956 <tal_trx_status>
    24c4:	9f 30       	cpi	r25, 0x0F	; 15
    24c6:	09 f4       	brne	.+2      	; 0x24ca <tal_pib_set+0x2e>
    24c8:	dc c0       	rjmp	.+440    	; 0x2682 <tal_pib_set+0x1e6>
			/* While trx is in SLEEP, register cannot be accessed.
			**/
			return TAL_TRX_ASLEEP;
		}

		switch (attribute) {
    24ca:	8b 30       	cpi	r24, 0x0B	; 11
    24cc:	09 f4       	brne	.+2      	; 0x24d0 <tal_pib_set+0x34>
    24ce:	c9 c0       	rjmp	.+402    	; 0x2662 <tal_pib_set+0x1c6>
    24d0:	80 f4       	brcc	.+32     	; 0x24f2 <tal_pib_set+0x56>
    24d2:	eb 01       	movw	r28, r22
    24d4:	82 30       	cpi	r24, 0x02	; 2
    24d6:	09 f4       	brne	.+2      	; 0x24da <tal_pib_set+0x3e>
    24d8:	84 c0       	rjmp	.+264    	; 0x25e2 <tal_pib_set+0x146>
    24da:	20 f4       	brcc	.+8      	; 0x24e4 <tal_pib_set+0x48>
    24dc:	88 23       	and	r24, r24
    24de:	09 f4       	brne	.+2      	; 0x24e2 <tal_pib_set+0x46>
    24e0:	46 c0       	rjmp	.+140    	; 0x256e <tal_pib_set+0xd2>
    24e2:	d1 c0       	rjmp	.+418    	; 0x2686 <tal_pib_set+0x1ea>
    24e4:	83 30       	cpi	r24, 0x03	; 3
    24e6:	09 f4       	brne	.+2      	; 0x24ea <tal_pib_set+0x4e>
    24e8:	8c c0       	rjmp	.+280    	; 0x2602 <tal_pib_set+0x166>
    24ea:	84 30       	cpi	r24, 0x04	; 4
    24ec:	09 f4       	brne	.+2      	; 0x24f0 <tal_pib_set+0x54>
    24ee:	5a c0       	rjmp	.+180    	; 0x25a4 <tal_pib_set+0x108>
    24f0:	ca c0       	rjmp	.+404    	; 0x2686 <tal_pib_set+0x1ea>
    24f2:	83 35       	cpi	r24, 0x53	; 83
    24f4:	79 f1       	breq	.+94     	; 0x2554 <tal_pib_set+0xb8>
    24f6:	28 f4       	brcc	.+10     	; 0x2502 <tal_pib_set+0x66>
    24f8:	8f 34       	cpi	r24, 0x4F	; 79
    24fa:	51 f0       	breq	.+20     	; 0x2510 <tal_pib_set+0x74>
    24fc:	80 35       	cpi	r24, 0x50	; 80
    24fe:	e9 f0       	breq	.+58     	; 0x253a <tal_pib_set+0x9e>
    2500:	c2 c0       	rjmp	.+388    	; 0x2686 <tal_pib_set+0x1ea>
    2502:	87 35       	cpi	r24, 0x57	; 87
    2504:	09 f4       	brne	.+2      	; 0x2508 <tal_pib_set+0x6c>
    2506:	56 c0       	rjmp	.+172    	; 0x25b4 <tal_pib_set+0x118>
    2508:	80 3f       	cpi	r24, 0xF0	; 240
    250a:	09 f4       	brne	.+2      	; 0x250e <tal_pib_set+0x72>
    250c:	8b c0       	rjmp	.+278    	; 0x2624 <tal_pib_set+0x188>
    250e:	bb c0       	rjmp	.+374    	; 0x2686 <tal_pib_set+0x1ea>
		case macMinBE:
			tal_pib.MinBE = value->pib_value_8bit;
    2510:	fb 01       	movw	r30, r22
    2512:	80 81       	ld	r24, Z
    2514:	e7 e3       	ldi	r30, 0x37	; 55
    2516:	f9 e0       	ldi	r31, 0x09	; 9
    2518:	85 8b       	std	Z+21, r24	; 0x15
			/*
			 * macMinBE must not be larger than macMaxBE or
			 * calculation
			 * of macMaxFrameWaitTotalTime will fail.
			 */
			if (tal_pib.MinBE > tal_pib.MaxBE) {
    251a:	93 8d       	ldd	r25, Z+27	; 0x1b
    251c:	98 17       	cp	r25, r24
    251e:	10 f4       	brcc	.+4      	; 0x2524 <tal_pib_set+0x88>
				tal_pib.MinBE = tal_pib.MaxBE;
    2520:	90 93 4c 09 	sts	0x094C, r25	; 0x80094c <tal_pib+0x15>
			}
#endif  /* REDUCED_PARAM_CHECK */

			trx_bit_write(SR_MIN_BE, tal_pib.MinBE);
    2524:	ef e6       	ldi	r30, 0x6F	; 111
    2526:	f1 e0       	ldi	r31, 0x01	; 1
    2528:	80 81       	ld	r24, Z
    252a:	90 91 4c 09 	lds	r25, 0x094C	; 0x80094c <tal_pib+0x15>
    252e:	9f 70       	andi	r25, 0x0F	; 15
    2530:	80 7f       	andi	r24, 0xF0	; 240
    2532:	89 2b       	or	r24, r25
    2534:	80 83       	st	Z, r24
			return MAC_UNSUPPORTED_ATTRIBUTE;
		}

		break; /* end of 'default' from 'switch (attribute)' */
	}
	return MAC_SUCCESS;
    2536:	80 e0       	ldi	r24, 0x00	; 0
				tal_pib.MinBE = tal_pib.MaxBE;
			}
#endif  /* REDUCED_PARAM_CHECK */

			trx_bit_write(SR_MIN_BE, tal_pib.MinBE);
			break;
    2538:	c8 c0       	rjmp	.+400    	; 0x26ca <tal_pib_set+0x22e>

		case macPANId:
			tal_pib.PANId = value->pib_value_16bit;
    253a:	fb 01       	movw	r30, r22
    253c:	90 81       	ld	r25, Z
    253e:	81 81       	ldd	r24, Z+1	; 0x01
    2540:	e7 e3       	ldi	r30, 0x37	; 55
    2542:	f9 e0       	ldi	r31, 0x09	; 9
    2544:	96 87       	std	Z+14, r25	; 0x0e
    2546:	87 87       	std	Z+15, r24	; 0x0f
			trx_reg_write(RG_PAN_ID_0, (uint8_t)tal_pib.PANId);
    2548:	90 93 62 01 	sts	0x0162, r25	; 0x800162 <__TEXT_REGION_LENGTH__+0x7c0162>
			trx_reg_write(RG_PAN_ID_1,
    254c:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <__TEXT_REGION_LENGTH__+0x7c0163>
			return MAC_UNSUPPORTED_ATTRIBUTE;
		}

		break; /* end of 'default' from 'switch (attribute)' */
	}
	return MAC_SUCCESS;
    2550:	80 e0       	ldi	r24, 0x00	; 0
		case macPANId:
			tal_pib.PANId = value->pib_value_16bit;
			trx_reg_write(RG_PAN_ID_0, (uint8_t)tal_pib.PANId);
			trx_reg_write(RG_PAN_ID_1,
					(uint8_t)(tal_pib.PANId >> 8));
			break;
    2552:	bb c0       	rjmp	.+374    	; 0x26ca <tal_pib_set+0x22e>

		case macShortAddress:
			tal_pib.ShortAddress = value->pib_value_16bit;
    2554:	fb 01       	movw	r30, r22
    2556:	90 81       	ld	r25, Z
    2558:	81 81       	ldd	r24, Z+1	; 0x01
    255a:	e7 e3       	ldi	r30, 0x37	; 55
    255c:	f9 e0       	ldi	r31, 0x09	; 9
    255e:	94 87       	std	Z+12, r25	; 0x0c
    2560:	85 87       	std	Z+13, r24	; 0x0d
			trx_reg_write(RG_SHORT_ADDR_0,
    2562:	90 93 60 01 	sts	0x0160, r25	; 0x800160 <__TEXT_REGION_LENGTH__+0x7c0160>
					(uint8_t)tal_pib.ShortAddress);
			trx_reg_write(RG_SHORT_ADDR_1,
    2566:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <__TEXT_REGION_LENGTH__+0x7c0161>
			return MAC_UNSUPPORTED_ATTRIBUTE;
		}

		break; /* end of 'default' from 'switch (attribute)' */
	}
	return MAC_SUCCESS;
    256a:	80 e0       	ldi	r24, 0x00	; 0
			tal_pib.ShortAddress = value->pib_value_16bit;
			trx_reg_write(RG_SHORT_ADDR_0,
					(uint8_t)tal_pib.ShortAddress);
			trx_reg_write(RG_SHORT_ADDR_1,
					(uint8_t)(tal_pib.ShortAddress >> 8));
			break;
    256c:	ae c0       	rjmp	.+348    	; 0x26ca <tal_pib_set+0x22e>

		case phyCurrentChannel:
			if (tal_state != TAL_IDLE) {
    256e:	80 91 5b 09 	lds	r24, 0x095B	; 0x80095b <tal_state>
    2572:	81 11       	cpse	r24, r1
    2574:	8a c0       	rjmp	.+276    	; 0x268a <tal_pib_set+0x1ee>
				return TAL_BUSY;
			}

			if ((uint32_t)TRX_SUPPORTED_CHANNELS &
					((uint32_t)0x01 <<
					value->pib_value_8bit)) {
    2576:	88 81       	ld	r24, Y
		case phyCurrentChannel:
			if (tal_state != TAL_IDLE) {
				return TAL_BUSY;
			}

			if ((uint32_t)TRX_SUPPORTED_CHANNELS &
    2578:	40 e0       	ldi	r20, 0x00	; 0
    257a:	58 ef       	ldi	r21, 0xF8	; 248
    257c:	6f ef       	ldi	r22, 0xFF	; 255
    257e:	77 e0       	ldi	r23, 0x07	; 7
    2580:	08 2e       	mov	r0, r24
    2582:	04 c0       	rjmp	.+8      	; 0x258c <tal_pib_set+0xf0>
    2584:	76 95       	lsr	r23
    2586:	67 95       	ror	r22
    2588:	57 95       	ror	r21
    258a:	47 95       	ror	r20
    258c:	0a 94       	dec	r0
    258e:	d2 f7       	brpl	.-12     	; 0x2584 <tal_pib_set+0xe8>
    2590:	40 ff       	sbrs	r20, 0
    2592:	7d c0       	rjmp	.+250    	; 0x268e <tal_pib_set+0x1f2>

				/*
				 * Set trx to "soft" off avoiding that ongoing
				 * transaction (e.g. ACK) are interrupted.
				 */
				if (tal_trx_status != TRX_OFF) {
    2594:	98 30       	cpi	r25, 0x08	; 8
    2596:	09 f4       	brne	.+2      	; 0x259a <tal_pib_set+0xfe>
    2598:	80 c0       	rjmp	.+256    	; 0x269a <tal_pib_set+0x1fe>
					                                   **/
					do {
						/* set TRX_OFF until it could be
						 * set;
						 * trx might be busy */
					} while (set_trx_state(CMD_TRX_OFF) !=
    259a:	88 e0       	ldi	r24, 0x08	; 8
    259c:	6d da       	rcall	.-2854   	; 0x1a78 <set_trx_state>
							TRX_OFF);
    259e:	88 30       	cpi	r24, 0x08	; 8
    25a0:	e1 f7       	brne	.-8      	; 0x259a <tal_pib_set+0xfe>
    25a2:	86 c0       	rjmp	.+268    	; 0x26b0 <tal_pib_set+0x214>
					return MAC_INVALID_PARAMETER;
				}
			}

#else
			if (tal_state != TAL_IDLE) {
    25a4:	80 91 5b 09 	lds	r24, 0x095B	; 0x80095b <tal_state>
    25a8:	81 11       	cpse	r24, r1
    25aa:	73 c0       	rjmp	.+230    	; 0x2692 <tal_pib_set+0x1f6>
				return TAL_BUSY;
			} else {
				uint8_t page;

				page = value->pib_value_8bit;
				if (page != 0) {
    25ac:	88 81       	ld	r24, Y
    25ae:	81 11       	cpse	r24, r1
    25b0:	72 c0       	rjmp	.+228    	; 0x2696 <tal_pib_set+0x1fa>
    25b2:	8b c0       	rjmp	.+278    	; 0x26ca <tal_pib_set+0x22e>
			}
#endif  /* #ifdef HIGH_DATA_RATE_SUPPORT */
			break;

		case macMaxBE:
			tal_pib.MaxBE = value->pib_value_8bit;
    25b4:	fb 01       	movw	r30, r22
    25b6:	90 81       	ld	r25, Z
    25b8:	e7 e3       	ldi	r30, 0x37	; 55
    25ba:	f9 e0       	ldi	r31, 0x09	; 9
    25bc:	93 8f       	std	Z+27, r25	; 0x1b
			/*
			 * macMinBE must not be larger than macMaxBE or
			 * calculation
			 * of macMaxFrameWaitTotalTime will fail.
			 */
			if (tal_pib.MaxBE < tal_pib.MinBE) {
    25be:	85 89       	ldd	r24, Z+21	; 0x15
    25c0:	98 17       	cp	r25, r24
    25c2:	10 f4       	brcc	.+4      	; 0x25c8 <tal_pib_set+0x12c>
				tal_pib.MinBE = tal_pib.MaxBE;
    25c4:	90 93 4c 09 	sts	0x094C, r25	; 0x80094c <tal_pib+0x15>
			}
#endif  /* REDUCED_PARAM_CHECK */
			trx_bit_write(SR_MAX_BE, tal_pib.MaxBE);
    25c8:	ef e6       	ldi	r30, 0x6F	; 111
    25ca:	f1 e0       	ldi	r31, 0x01	; 1
    25cc:	80 81       	ld	r24, Z
    25ce:	28 2f       	mov	r18, r24
    25d0:	2f 70       	andi	r18, 0x0F	; 15
    25d2:	30 e1       	ldi	r19, 0x10	; 16
    25d4:	93 9f       	mul	r25, r19
    25d6:	c0 01       	movw	r24, r0
    25d8:	11 24       	eor	r1, r1
    25da:	82 2b       	or	r24, r18
    25dc:	80 83       	st	Z, r24
			return MAC_UNSUPPORTED_ATTRIBUTE;
		}

		break; /* end of 'default' from 'switch (attribute)' */
	}
	return MAC_SUCCESS;
    25de:	80 e0       	ldi	r24, 0x00	; 0
			if (tal_pib.MaxBE < tal_pib.MinBE) {
				tal_pib.MinBE = tal_pib.MaxBE;
			}
#endif  /* REDUCED_PARAM_CHECK */
			trx_bit_write(SR_MAX_BE, tal_pib.MaxBE);
			break;
    25e0:	74 c0       	rjmp	.+232    	; 0x26ca <tal_pib_set+0x22e>

		case phyTransmitPower:
		{
			uint8_t reg_value;

			tal_pib.TransmitPower = value->pib_value_8bit;
    25e2:	88 81       	ld	r24, Y
    25e4:	c7 e3       	ldi	r28, 0x37	; 55
    25e6:	d9 e0       	ldi	r29, 0x09	; 9

			/* Limit tal_pib.TransmitPower to max/min trx values */
			tal_pib.TransmitPower = limit_tx_pwr(
    25e8:	8f 8b       	std	Y+23, r24	; 0x17
    25ea:	7f de       	rcall	.-770    	; 0x22ea <limit_tx_pwr>
					tal_pib.TransmitPower);
			reg_value = convert_phyTransmitPower_to_reg_value(
    25ec:	8f 8b       	std	Y+23, r24	; 0x17
    25ee:	da de       	rcall	.-588    	; 0x23a4 <convert_phyTransmitPower_to_reg_value>
					tal_pib.TransmitPower);
			trx_bit_write(SR_TX_PWR, reg_value);
    25f0:	e5 e4       	ldi	r30, 0x45	; 69
    25f2:	f1 e0       	ldi	r31, 0x01	; 1
    25f4:	90 81       	ld	r25, Z
    25f6:	90 7f       	andi	r25, 0xF0	; 240
    25f8:	8f 70       	andi	r24, 0x0F	; 15
    25fa:	89 2b       	or	r24, r25
    25fc:	80 83       	st	Z, r24
			return MAC_UNSUPPORTED_ATTRIBUTE;
		}

		break; /* end of 'default' from 'switch (attribute)' */
	}
	return MAC_SUCCESS;
    25fe:	80 e0       	ldi	r24, 0x00	; 0
					tal_pib.TransmitPower);
			reg_value = convert_phyTransmitPower_to_reg_value(
					tal_pib.TransmitPower);
			trx_bit_write(SR_TX_PWR, reg_value);
		}
		break;
    2600:	64 c0       	rjmp	.+200    	; 0x26ca <tal_pib_set+0x22e>

		case phyCCAMode:
			tal_pib.CCAMode = value->pib_value_8bit;
    2602:	88 81       	ld	r24, Y
    2604:	80 93 49 09 	sts	0x0949, r24	; 0x800949 <tal_pib+0x12>
			trx_bit_write(SR_CCA_MODE, tal_pib.CCAMode);
    2608:	e8 e4       	ldi	r30, 0x48	; 72
    260a:	f1 e0       	ldi	r31, 0x01	; 1
    260c:	20 81       	ld	r18, Z
    260e:	30 e2       	ldi	r19, 0x20	; 32
    2610:	83 9f       	mul	r24, r19
    2612:	c0 01       	movw	r24, r0
    2614:	11 24       	eor	r1, r1
    2616:	80 76       	andi	r24, 0x60	; 96
    2618:	92 2f       	mov	r25, r18
    261a:	9f 79       	andi	r25, 0x9F	; 159
    261c:	89 2b       	or	r24, r25
    261e:	80 83       	st	Z, r24
			return MAC_UNSUPPORTED_ATTRIBUTE;
		}

		break; /* end of 'default' from 'switch (attribute)' */
	}
	return MAC_SUCCESS;
    2620:	80 e0       	ldi	r24, 0x00	; 0
		break;

		case phyCCAMode:
			tal_pib.CCAMode = value->pib_value_8bit;
			trx_bit_write(SR_CCA_MODE, tal_pib.CCAMode);
			break;
    2622:	53 c0       	rjmp	.+166    	; 0x26ca <tal_pib_set+0x22e>

		case macIeeeAddress:
		{
			uint8_t *ptr;

			tal_pib.IeeeAddress = value->pib_value_64bit;
    2624:	fb 01       	movw	r30, r22
    2626:	b0 81       	ld	r27, Z
    2628:	a1 81       	ldd	r26, Z+1	; 0x01
    262a:	52 81       	ldd	r21, Z+2	; 0x02
    262c:	43 81       	ldd	r20, Z+3	; 0x03
    262e:	34 81       	ldd	r19, Z+4	; 0x04
    2630:	25 81       	ldd	r18, Z+5	; 0x05
    2632:	96 81       	ldd	r25, Z+6	; 0x06
    2634:	87 81       	ldd	r24, Z+7	; 0x07
    2636:	e7 e3       	ldi	r30, 0x37	; 55
    2638:	f9 e0       	ldi	r31, 0x09	; 9
    263a:	b0 83       	st	Z, r27
    263c:	a1 83       	std	Z+1, r26	; 0x01
    263e:	52 83       	std	Z+2, r21	; 0x02
    2640:	43 83       	std	Z+3, r20	; 0x03
    2642:	34 83       	std	Z+4, r19	; 0x04
    2644:	25 83       	std	Z+5, r18	; 0x05
    2646:	96 83       	std	Z+6, r25	; 0x06
    2648:	87 83       	std	Z+7, r24	; 0x07
    264a:	e4 e6       	ldi	r30, 0x64	; 100
    264c:	f1 e0       	ldi	r31, 0x01	; 1
			ptr = (uint8_t *)&tal_pib.IeeeAddress;
    264e:	a7 e3       	ldi	r26, 0x37	; 55
    2650:	b9 e0       	ldi	r27, 0x09	; 9

			for (uint8_t i = 0; i < 8; i++) {
				trx_reg_write((RG_IEEE_ADDR_0 + i), *ptr);
    2652:	8d 91       	ld	r24, X+
    2654:	81 93       	st	Z+, r24
			uint8_t *ptr;

			tal_pib.IeeeAddress = value->pib_value_64bit;
			ptr = (uint8_t *)&tal_pib.IeeeAddress;

			for (uint8_t i = 0; i < 8; i++) {
    2656:	ec 36       	cpi	r30, 0x6C	; 108
    2658:	31 e0       	ldi	r19, 0x01	; 1
    265a:	f3 07       	cpc	r31, r19
    265c:	d1 f7       	brne	.-12     	; 0x2652 <tal_pib_set+0x1b6>
			return MAC_UNSUPPORTED_ATTRIBUTE;
		}

		break; /* end of 'default' from 'switch (attribute)' */
	}
	return MAC_SUCCESS;
    265e:	80 e0       	ldi	r24, 0x00	; 0
    2660:	34 c0       	rjmp	.+104    	; 0x26ca <tal_pib_set+0x22e>
			}
		}
		break;

		case mac_i_pan_coordinator:
			tal_pib.PrivatePanCoordinator = value->pib_value_bool;
    2662:	fb 01       	movw	r30, r22
    2664:	80 81       	ld	r24, Z
    2666:	80 93 4d 09 	sts	0x094D, r24	; 0x80094d <tal_pib+0x16>
			trx_bit_write(SR_AACK_I_AM_COORD,
    266a:	ee e6       	ldi	r30, 0x6E	; 110
    266c:	f1 e0       	ldi	r31, 0x01	; 1
    266e:	90 81       	ld	r25, Z
    2670:	88 0f       	add	r24, r24
    2672:	88 0f       	add	r24, r24
    2674:	88 0f       	add	r24, r24
    2676:	88 70       	andi	r24, 0x08	; 8
    2678:	97 7f       	andi	r25, 0xF7	; 247
    267a:	89 2b       	or	r24, r25
    267c:	80 83       	st	Z, r24
			return MAC_UNSUPPORTED_ATTRIBUTE;
		}

		break; /* end of 'default' from 'switch (attribute)' */
	}
	return MAC_SUCCESS;
    267e:	80 e0       	ldi	r24, 0x00	; 0

		case mac_i_pan_coordinator:
			tal_pib.PrivatePanCoordinator = value->pib_value_bool;
			trx_bit_write(SR_AACK_I_AM_COORD,
					tal_pib.PrivatePanCoordinator);
			break;
    2680:	24 c0       	rjmp	.+72     	; 0x26ca <tal_pib_set+0x22e>
		 */

		if (tal_trx_status == TRX_SLEEP) {
			/* While trx is in SLEEP, register cannot be accessed.
			**/
			return TAL_TRX_ASLEEP;
    2682:	81 e8       	ldi	r24, 0x81	; 129
    2684:	22 c0       	rjmp	.+68     	; 0x26ca <tal_pib_set+0x22e>
			 * w.r.t.
			 * compliance operation.
			 * The ACK timing can be reduced to 2 symbols using TFA
			 * function.
			 */
			return MAC_UNSUPPORTED_ATTRIBUTE;
    2686:	84 ef       	ldi	r24, 0xF4	; 244
    2688:	20 c0       	rjmp	.+64     	; 0x26ca <tal_pib_set+0x22e>
					(uint8_t)(tal_pib.ShortAddress >> 8));
			break;

		case phyCurrentChannel:
			if (tal_state != TAL_IDLE) {
				return TAL_BUSY;
    268a:	86 e8       	ldi	r24, 0x86	; 134
    268c:	1e c0       	rjmp	.+60     	; 0x26ca <tal_pib_set+0x22e>
				if (previous_trx_status != TRX_OFF) {
					/* Set to default state */
					set_trx_state(CMD_RX_AACK_ON);
				}
			} else {
				return MAC_INVALID_PARAMETER;
    268e:	88 ee       	ldi	r24, 0xE8	; 232
    2690:	1c c0       	rjmp	.+56     	; 0x26ca <tal_pib_set+0x22e>
				}
			}

#else
			if (tal_state != TAL_IDLE) {
				return TAL_BUSY;
    2692:	86 e8       	ldi	r24, 0x86	; 134
    2694:	1a c0       	rjmp	.+52     	; 0x26ca <tal_pib_set+0x22e>
			} else {
				uint8_t page;

				page = value->pib_value_8bit;
				if (page != 0) {
					return MAC_INVALID_PARAMETER;
    2696:	88 ee       	ldi	r24, 0xE8	; 232
    2698:	18 c0       	rjmp	.+48     	; 0x26ca <tal_pib_set+0x22e>
						 * trx might be busy */
					} while (set_trx_state(CMD_TRX_OFF) !=
							TRX_OFF);
				}

				tal_pib.CurrentChannel = value->pib_value_8bit;
    269a:	80 93 4a 09 	sts	0x094A, r24	; 0x80094a <tal_pib+0x13>
				trx_bit_write(SR_CHANNEL,
    269e:	e8 e4       	ldi	r30, 0x48	; 72
    26a0:	f1 e0       	ldi	r31, 0x01	; 1
    26a2:	90 81       	ld	r25, Z
    26a4:	90 7e       	andi	r25, 0xE0	; 224
    26a6:	8f 71       	andi	r24, 0x1F	; 31
    26a8:	89 2b       	or	r24, r25
    26aa:	80 83       	st	Z, r24
			return MAC_UNSUPPORTED_ATTRIBUTE;
		}

		break; /* end of 'default' from 'switch (attribute)' */
	}
	return MAC_SUCCESS;
    26ac:	80 e0       	ldi	r24, 0x00	; 0
    26ae:	0d c0       	rjmp	.+26     	; 0x26ca <tal_pib_set+0x22e>
						 * trx might be busy */
					} while (set_trx_state(CMD_TRX_OFF) !=
							TRX_OFF);
				}

				tal_pib.CurrentChannel = value->pib_value_8bit;
    26b0:	88 81       	ld	r24, Y
    26b2:	80 93 4a 09 	sts	0x094A, r24	; 0x80094a <tal_pib+0x13>
				trx_bit_write(SR_CHANNEL,
    26b6:	e8 e4       	ldi	r30, 0x48	; 72
    26b8:	f1 e0       	ldi	r31, 0x01	; 1
    26ba:	90 81       	ld	r25, Z
    26bc:	90 7e       	andi	r25, 0xE0	; 224
    26be:	8f 71       	andi	r24, 0x1F	; 31
    26c0:	89 2b       	or	r24, r25
						tal_pib.CurrentChannel);
				/* Re-store previous trx state */
				if (previous_trx_status != TRX_OFF) {
					/* Set to default state */
					set_trx_state(CMD_RX_AACK_ON);
    26c2:	80 83       	st	Z, r24
    26c4:	86 e1       	ldi	r24, 0x16	; 22
    26c6:	d8 d9       	rcall	.-3152   	; 0x1a78 <set_trx_state>
			return MAC_UNSUPPORTED_ATTRIBUTE;
		}

		break; /* end of 'default' from 'switch (attribute)' */
	}
	return MAC_SUCCESS;
    26c8:	80 e0       	ldi	r24, 0x00	; 0
} /* tal_pib_set() */
    26ca:	df 91       	pop	r29
    26cc:	cf 91       	pop	r28
    26ce:	08 95       	ret

000026d0 <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
    26d0:	04 c0       	rjmp	.+8      	; 0x26da <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
    26d2:	61 50       	subi	r22, 0x01	; 1
    26d4:	71 09       	sbc	r23, r1
    26d6:	81 09       	sbc	r24, r1
    26d8:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
    26da:	61 15       	cp	r22, r1
    26dc:	71 05       	cpc	r23, r1
    26de:	81 05       	cpc	r24, r1
    26e0:	91 05       	cpc	r25, r1
    26e2:	b9 f7       	brne	.-18     	; 0x26d2 <__portable_avr_delay_cycles+0x2>
    26e4:	08 95       	ret

000026e6 <handle_received_frame_irq>:
 *
 * This function handles transceiver interrupts for received frames and
 * uploads the frames from the trx.
 */
void handle_received_frame_irq(void)
{
    26e6:	cf 92       	push	r12
    26e8:	df 92       	push	r13
    26ea:	ef 92       	push	r14
    26ec:	ff 92       	push	r15
    26ee:	0f 93       	push	r16
    26f0:	1f 93       	push	r17
    26f2:	cf 93       	push	r28
    26f4:	df 93       	push	r29
	/* Extended frame length appended by LQI and ED. */
	uint8_t ext_frame_length;
	frame_info_t *receive_frame;
	uint8_t *frame_ptr;

	if (tal_rx_buffer == NULL) {
    26f6:	e0 91 e9 06 	lds	r30, 0x06E9	; 0x8006e9 <tal_rx_buffer>
    26fa:	f0 91 ea 06 	lds	r31, 0x06EA	; 0x8006ea <tal_rx_buffer+0x1>
    26fe:	30 97       	sbiw	r30, 0x00	; 0
    2700:	71 f4       	brne	.+28     	; 0x271e <handle_received_frame_irq+0x38>
		 * Although the buffer protection mode is enabled and the
		 * receiver has
		 * been switched to PLL_ON, the next incoming frame was faster.
		 * It cannot be handled and is discarded.
		 */
		trx_bit_write(SR_RX_SAFE_MODE, RX_SAFE_MODE_DISABLE); /*
    2702:	cc e4       	ldi	r28, 0x4C	; 76
    2704:	d1 e0       	ldi	r29, 0x01	; 1
    2706:	88 81       	ld	r24, Y
    2708:	8f 77       	andi	r24, 0x7F	; 127
    270a:	88 83       	st	Y, r24
		                                                       *
		                                                       *
		                                                       *protection
		                                                       * mode
		                                                       **/
		pal_timer_delay(2); /* Allow pin change to get effective */
    270c:	63 e0       	ldi	r22, 0x03	; 3
    270e:	70 e0       	ldi	r23, 0x00	; 0
    2710:	80 e0       	ldi	r24, 0x00	; 0
    2712:	90 e0       	ldi	r25, 0x00	; 0
    2714:	dd df       	rcall	.-70     	; 0x26d0 <__portable_avr_delay_cycles>
		trx_bit_write(SR_RX_SAFE_MODE, RX_SAFE_MODE_ENABLE); /*
    2716:	88 81       	ld	r24, Y
    2718:	80 68       	ori	r24, 0x80	; 128
    271a:	88 83       	st	Y, r24
		                                                      *
		                                                      *
		                                                      *protection
		                                                      * mode
		                                                      **/
		return;
    271c:	48 c0       	rjmp	.+144    	; 0x27ae <handle_received_frame_irq+0xc8>
		}
	}
#endif

	/* Get ED value; needed to normalize LQI. */
	ed_value = trx_reg_read(RG_PHY_ED_LEVEL);
    271e:	00 91 47 01 	lds	r16, 0x0147	; 0x800147 <__TEXT_REGION_LENGTH__+0x7c0147>

	/* Get frame length from transceiver. */
	phy_frame_len = ext_frame_length = trx_reg_read(RG_TST_RX_LENGTH);
    2722:	10 91 7b 01 	lds	r17, 0x017B	; 0x80017b <__TEXT_REGION_LENGTH__+0x7c017b>

	/* Check for valid frame length. */
	if (phy_frame_len > 127) {
    2726:	11 23       	and	r17, r17
    2728:	0c f4       	brge	.+2      	; 0x272c <handle_received_frame_irq+0x46>
    272a:	41 c0       	rjmp	.+130    	; 0x27ae <handle_received_frame_irq+0xc8>
		                                                      * mode
		                                                      **/
		return;
	}

	receive_frame = (frame_info_t *)BMM_BUFFER_POINTER(tal_rx_buffer);
    272c:	e0 80       	ld	r14, Z
    272e:	f1 80       	ldd	r15, Z+1	; 0x01
	 * In addition to that, the LQI and ED value are uploaded, too.
	 */
	ext_frame_length += LQI_LEN + ED_VAL_LEN;

	/* Update payload pointer to store received frame. */
	frame_ptr = (uint8_t *)receive_frame + LARGE_BUFFER_SIZE -
    2730:	82 e0       	ldi	r24, 0x02	; 2
    2732:	81 0f       	add	r24, r17
    2734:	eb e8       	ldi	r30, 0x8B	; 139
    2736:	f0 e0       	ldi	r31, 0x00	; 0
    2738:	e8 1b       	sub	r30, r24
    273a:	f1 09       	sbc	r31, r1
    273c:	e7 01       	movw	r28, r14
    273e:	ce 0f       	add	r28, r30
    2740:	df 1f       	adc	r29, r31
	 * Note: The following code is different from other non-single chip
	 * transceivers, where reading the frame via SPI contains the length
	 * field
	 * in the first octet.
	 */
	trx_frame_read(frame_ptr, phy_frame_len + LQI_LEN);
    2742:	c1 2e       	mov	r12, r17
    2744:	d1 2c       	mov	r13, r1
    2746:	a6 01       	movw	r20, r12
    2748:	4f 5f       	subi	r20, 0xFF	; 255
    274a:	5f 4f       	sbci	r21, 0xFF	; 255
    274c:	60 e8       	ldi	r22, 0x80	; 128
    274e:	71 e0       	ldi	r23, 0x01	; 1
    2750:	ce 01       	movw	r24, r28
    2752:	76 d7       	rcall	.+3820   	; 0x3640 <memcpy>
	frame_ptr--;
    2754:	fe 01       	movw	r30, r28
	*frame_ptr = phy_frame_len;
    2756:	12 93       	st	-Z, r17
	receive_frame->mpdu = frame_ptr;
    2758:	d7 01       	movw	r26, r14
    275a:	18 96       	adiw	r26, 0x08	; 8
    275c:	fc 93       	st	X, r31
    275e:	ee 93       	st	-X, r30
    2760:	17 97       	sbiw	r26, 0x07	; 7
	/* Add ED value at the end of the frame buffer. */
	receive_frame->mpdu[phy_frame_len + LQI_LEN + ED_VAL_LEN] = ed_value;
    2762:	ec 0d       	add	r30, r12
    2764:	fd 1d       	adc	r31, r13
    2766:	02 83       	std	Z+2, r16	; 0x02
	receive_frame->time_stamp = tal_rx_timestamp;
#endif  /* #if (defined BEACON_SUPPORT) || (defined ENABLE_TSTAMP) */

	/* Append received frame to incoming_frame_queue and get new rx buffer.
	**/
	qmm_queue_append(&tal_incoming_frame_queue, tal_rx_buffer);
    2768:	60 91 e9 06 	lds	r22, 0x06E9	; 0x8006e9 <tal_rx_buffer>
    276c:	70 91 ea 06 	lds	r23, 0x06EA	; 0x8006ea <tal_rx_buffer+0x1>
    2770:	80 e3       	ldi	r24, 0x30	; 48
    2772:	99 e0       	ldi	r25, 0x09	; 9

	/* The previous buffer is eaten up and a new buffer is not assigned yet.
	**/
	tal_rx_buffer = bmm_buffer_alloc(LARGE_BUFFER_SIZE);
    2774:	2d d9       	rcall	.-3494   	; 0x19d0 <qmm_queue_append>
    2776:	8b e8       	ldi	r24, 0x8B	; 139
    2778:	93 d8       	rcall	.-3802   	; 0x18a0 <bmm_buffer_alloc>
    277a:	90 93 ea 06 	sts	0x06EA, r25	; 0x8006ea <tal_rx_buffer+0x1>
    277e:	80 93 e9 06 	sts	0x06E9, r24	; 0x8006e9 <tal_rx_buffer>

	/* Check if receive buffer is available */
	if (NULL == tal_rx_buffer) {
    2782:	89 2b       	or	r24, r25
    2784:	21 f4       	brne	.+8      	; 0x278e <handle_received_frame_irq+0xa8>
		 * re-enabled yet.
		 * Buffer protection will be re-enabled after buffer becomes
		 * available
		 */
		/* set_trx_state(CMD_PLL_ON); */
		tal_rx_on_required = true;
    2786:	81 e0       	ldi	r24, 0x01	; 1
    2788:	80 93 2f 09 	sts	0x092F, r24	; 0x80092f <tal_rx_on_required>
    278c:	0d c0       	rjmp	.+26     	; 0x27a8 <handle_received_frame_irq+0xc2>
		/*
		 * Release the protected buffer and set it again for further
		 * protection since
		 * the buffer is available
		 */
		trx_bit_write(SR_RX_SAFE_MODE, RX_SAFE_MODE_DISABLE); /*
    278e:	cc e4       	ldi	r28, 0x4C	; 76
    2790:	d1 e0       	ldi	r29, 0x01	; 1
    2792:	88 81       	ld	r24, Y
    2794:	8f 77       	andi	r24, 0x7F	; 127
    2796:	88 83       	st	Y, r24
		                                                       *
		                                                       *
		                                                       *protection
		                                                       * mode
		                                                       **/
		pal_timer_delay(2); /* Allow pin change to get effective */
    2798:	63 e0       	ldi	r22, 0x03	; 3
    279a:	70 e0       	ldi	r23, 0x00	; 0
    279c:	80 e0       	ldi	r24, 0x00	; 0
    279e:	90 e0       	ldi	r25, 0x00	; 0
    27a0:	97 df       	rcall	.-210    	; 0x26d0 <__portable_avr_delay_cycles>
		trx_bit_write(SR_RX_SAFE_MODE, RX_SAFE_MODE_ENABLE); /*
    27a2:	88 81       	ld	r24, Y
    27a4:	80 68       	ori	r24, 0x80	; 128
    27a6:	88 83       	st	Y, r24
	 * transmission
	 * end of an automatically sent ACK frame. This implementation does not
	 * use
	 * this feature.
	 */
	pal_trx_irq_flag_clr_tx_end();
    27a8:	80 e4       	ldi	r24, 0x40	; 64
    27aa:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <__TEXT_REGION_LENGTH__+0x7c014f>
}
    27ae:	df 91       	pop	r29
    27b0:	cf 91       	pop	r28
    27b2:	1f 91       	pop	r17
    27b4:	0f 91       	pop	r16
    27b6:	ff 90       	pop	r15
    27b8:	ef 90       	pop	r14
    27ba:	df 90       	pop	r13
    27bc:	cf 90       	pop	r12
    27be:	08 95       	ret

000027c0 <process_incoming_frame>:
 * structure to be sent to the MAC as a parameter of tal_rx_frame_cb().
 *
 * \param buf Pointer to the buffer containing the received frame
 */
void process_incoming_frame(buffer_t *buf_ptr)
{
    27c0:	cf 93       	push	r28
    27c2:	df 93       	push	r29
    27c4:	ac 01       	movw	r20, r24
	uint8_t *frame_ptr;
	uint8_t ed_level;
	uint8_t lqi;
#endif

	frame_info_t *receive_frame
    27c6:	fc 01       	movw	r30, r24
    27c8:	c0 81       	ld	r28, Z
    27ca:	d1 81       	ldd	r29, Z+1	; 0x01

	/*
	 * Store the last frame length for IFS handling.
	 * Substract LQI and length fields.
	 */
	frame_len = last_frame_length = receive_frame->mpdu[0];
    27cc:	af 81       	ldd	r26, Y+7	; 0x07
    27ce:	b8 85       	ldd	r27, Y+8	; 0x08
    27d0:	8c 91       	ld	r24, X
    27d2:	80 93 57 09 	sts	0x0957, r24	; 0x800957 <last_frame_length>

	/*
	 * The LQI is stored after the FCS.
	 * The ED value is stored after the LQI.
	 */
	frame_ptr = &(receive_frame->mpdu[frame_len + LQI_LEN]);
    27d6:	e8 2f       	mov	r30, r24
    27d8:	f0 e0       	ldi	r31, 0x00	; 0
    27da:	31 96       	adiw	r30, 0x01	; 1
    27dc:	ea 0f       	add	r30, r26
    27de:	fb 1f       	adc	r31, r27
	lqi = *frame_ptr++;
    27e0:	80 81       	ld	r24, Z
	ed_level = *frame_ptr;
    27e2:	31 81       	ldd	r19, Z+1	; 0x01
	uint8_t lqi_star;

#ifdef HIGH_DATA_RATE_SUPPORT
	if (tal_pib.CurrentPage == 0) {
#endif
	if (ed_value > ED_MAX_VAL) {
    27e4:	3d 33       	cpi	r19, 0x3D	; 61
    27e6:	20 f4       	brcc	.+8      	; 0x27f0 <process_incoming_frame+0x30>
		ed_value = ED_MAX_VAL;
	} else if (ed_value == 0) {
    27e8:	31 11       	cpse	r19, r1
    27ea:	03 c0       	rjmp	.+6      	; 0x27f2 <process_incoming_frame+0x32>
		ed_value = 1;
    27ec:	31 e0       	ldi	r19, 0x01	; 1
    27ee:	01 c0       	rjmp	.+2      	; 0x27f2 <process_incoming_frame+0x32>

#ifdef HIGH_DATA_RATE_SUPPORT
	if (tal_pib.CurrentPage == 0) {
#endif
	if (ed_value > ED_MAX_VAL) {
		ed_value = ED_MAX_VAL;
    27f0:	3c e3       	ldi	r19, 0x3C	; 60
	} else if (ed_value == 0) {
		ed_value = 1;
	}

	lqi_star = lqi >> 6;
	link_quality = (uint16_t)lqi_star * (uint16_t)ed_value * 255 /
    27f2:	82 95       	swap	r24
    27f4:	86 95       	lsr	r24
    27f6:	86 95       	lsr	r24
    27f8:	83 70       	andi	r24, 0x03	; 3
    27fa:	2f ef       	ldi	r18, 0xFF	; 255
    27fc:	82 9f       	mul	r24, r18
    27fe:	c0 01       	movw	r24, r0
    2800:	11 24       	eor	r1, r1
    2802:	38 9f       	mul	r19, r24
    2804:	b0 01       	movw	r22, r0
    2806:	39 9f       	mul	r19, r25
    2808:	70 0d       	add	r23, r0
    280a:	11 24       	eor	r1, r1
    280c:	9b 01       	movw	r18, r22
    280e:	a3 e8       	ldi	r26, 0x83	; 131
    2810:	bd e2       	ldi	r27, 0x2D	; 45
    2812:	8a d6       	rcall	.+3348   	; 0x3528 <__umulhisi3>
    2814:	96 95       	lsr	r25
    2816:	87 95       	ror	r24
    2818:	92 95       	swap	r25
    281a:	82 95       	swap	r24
    281c:	8f 70       	andi	r24, 0x0F	; 15
    281e:	89 27       	eor	r24, r25
    2820:	9f 70       	andi	r25, 0x0F	; 15
    2822:	89 27       	eor	r24, r25
			(ED_MAX_VAL * LQI_MAX);

	if (link_quality > 255) {
    2824:	8f 3f       	cpi	r24, 0xFF	; 255
    2826:	91 05       	cpc	r25, r1
    2828:	11 f0       	breq	.+4      	; 0x282e <process_incoming_frame+0x6e>
    282a:	08 f0       	brcs	.+2      	; 0x282e <process_incoming_frame+0x6e>
		return 255;
    282c:	8f ef       	ldi	r24, 0xFF	; 255
	lqi = normalize_lqi(lqi, ed_level);
#endif

	/* Store normalized LQI value again. */
	frame_ptr--;
	*frame_ptr = lqi;
    282e:	80 83       	st	Z, r24
#endif  /* #ifndef TRX_REG_RAW_VALUE */

	receive_frame->buffer_header = buf_ptr;
    2830:	5a 83       	std	Y+2, r21	; 0x02
    2832:	49 83       	std	Y+1, r20	; 0x01
#ifdef ENABLE_RTB
	/* The callback function implemented by RTB is invoked. */
	rtb_rx_frame_cb(receive_frame);
#else
	/* The callback function implemented by MAC is invoked. */
	tal_rx_frame_cb(receive_frame);
    2834:	ce 01       	movw	r24, r28
    2836:	2e d6       	rcall	.+3164   	; 0x3494 <tal_rx_frame_cb>
#endif
} /* process_incoming_frame() */
    2838:	df 91       	pop	r29
    283a:	cf 91       	pop	r28
    283c:	08 95       	ret

0000283e <tal_rx_enable>:
{
	/*
	 * Trx can only be enabled if TAL is not busy;
	 * i.e. if TAL is IDLE.
	 */
	if (TAL_IDLE != tal_state) {
    283e:	90 91 5b 09 	lds	r25, 0x095B	; 0x80095b <tal_state>
    2842:	91 11       	cpse	r25, r1
    2844:	16 c0       	rjmp	.+44     	; 0x2872 <tal_rx_enable+0x34>
#else
		return TAL_BUSY;
#endif
	}

	if (state == PHY_TRX_OFF) {
    2846:	88 30       	cpi	r24, 0x08	; 8
    2848:	29 f4       	brne	.+10     	; 0x2854 <tal_rx_enable+0x16>
		 * that is currently being received.
		 * This must not be a Forced TRX_OFF (CMD_FORCED_TRX_OFF) since
		 * this could
		 * corrupt an already outoing ACK frame.
		 */
		set_trx_state(CMD_TRX_OFF);
    284a:	16 d9       	rcall	.-3540   	; 0x1a78 <set_trx_state>
		tal_rx_on_required = false;
    284c:	10 92 2f 09 	sts	0x092F, r1	; 0x80092f <tal_rx_on_required>
		return TRX_OFF;
    2850:	88 e0       	ldi	r24, 0x08	; 8
    2852:	08 95       	ret
	} else {
#ifdef SNIFFER
		set_trx_state(CMD_RX_ON);
#else   /* #ifndef SNIFFER */
		if (NULL != tal_rx_buffer) {
    2854:	80 91 e9 06 	lds	r24, 0x06E9	; 0x8006e9 <tal_rx_buffer>
    2858:	90 91 ea 06 	lds	r25, 0x06EA	; 0x8006ea <tal_rx_buffer+0x1>
    285c:	89 2b       	or	r24, r25
    285e:	21 f0       	breq	.+8      	; 0x2868 <tal_rx_enable+0x2a>
			} else {
				set_trx_state(CMD_RX_AACK_ON);
			}

#else   /* Normal operation */
			set_trx_state(CMD_RX_AACK_ON);
    2860:	86 e1       	ldi	r24, 0x16	; 22
    2862:	0a d9       	rcall	.-3564   	; 0x1a78 <set_trx_state>
			 * receiver.
			 */
			tal_rx_on_required = true;
		}
#endif  /* #ifndef SNIFFER */
		return RX_ON; /* MAC layer assumes RX_ON as return value */
    2864:	86 e0       	ldi	r24, 0x06	; 6
    2866:	08 95       	ret
			 * the TAL returns MAC_SUCCESS. The TAL will try to
			 * allocate a receive
			 * buffer as soon as possible and will switch on the
			 * receiver.
			 */
			tal_rx_on_required = true;
    2868:	81 e0       	ldi	r24, 0x01	; 1
    286a:	80 93 2f 09 	sts	0x092F, r24	; 0x80092f <tal_rx_on_required>
		}
#endif  /* #ifndef SNIFFER */
		return RX_ON; /* MAC layer assumes RX_ON as return value */
    286e:	86 e0       	ldi	r24, 0x06	; 6
    2870:	08 95       	ret
		if (tal_state != TAL_SLOTTED_CSMA) {
			return TAL_BUSY;
		}

#else
		return TAL_BUSY;
    2872:	86 e8       	ldi	r24, 0x86	; 134
			tal_rx_on_required = true;
		}
#endif  /* #ifndef SNIFFER */
		return RX_ON; /* MAC layer assumes RX_ON as return value */
	}
}
    2874:	08 95       	ret

00002876 <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
    2876:	04 c0       	rjmp	.+8      	; 0x2880 <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
    2878:	61 50       	subi	r22, 0x01	; 1
    287a:	71 09       	sbc	r23, r1
    287c:	81 09       	sbc	r24, r1
    287e:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
    2880:	61 15       	cp	r22, r1
    2882:	71 05       	cpc	r23, r1
    2884:	81 05       	cpc	r24, r1
    2886:	91 05       	cpc	r25, r1
    2888:	b9 f7       	brne	.-18     	; 0x2878 <__portable_avr_delay_cycles+0x2>
    288a:	08 95       	ret

0000288c <tx_done_handling>:
 *
 * This function handles the callback for the transmission end.
 */
void tx_done_handling(void)
{
	tal_state = TAL_IDLE;
    288c:	10 92 5b 09 	sts	0x095B, r1	; 0x80095b <tal_state>
	mac_frame_ptr->time_stamp = pal_tx_timestamp;
#endif  /* #if (defined BEACON_SUPPORT) || (defined ENABLE_TSTAMP) */

	retval_t status;

	switch (trx_trac_status) {
    2890:	80 91 f3 06 	lds	r24, 0x06F3	; 0x8006f3 <trx_trac_status>
    2894:	83 30       	cpi	r24, 0x03	; 3
    2896:	69 f0       	breq	.+26     	; 0x28b2 <tx_done_handling+0x26>
    2898:	28 f4       	brcc	.+10     	; 0x28a4 <tx_done_handling+0x18>
    289a:	88 23       	and	r24, r24
    289c:	91 f0       	breq	.+36     	; 0x28c2 <tx_done_handling+0x36>
    289e:	81 30       	cpi	r24, 0x01	; 1
    28a0:	31 f0       	breq	.+12     	; 0x28ae <tx_done_handling+0x22>
    28a2:	0d c0       	rjmp	.+26     	; 0x28be <tx_done_handling+0x32>
    28a4:	85 30       	cpi	r24, 0x05	; 5
    28a6:	39 f0       	breq	.+14     	; 0x28b6 <tx_done_handling+0x2a>
    28a8:	87 30       	cpi	r24, 0x07	; 7
    28aa:	39 f0       	breq	.+14     	; 0x28ba <tx_done_handling+0x2e>
    28ac:	08 c0       	rjmp	.+16     	; 0x28be <tx_done_handling+0x32>
	case TRAC_SUCCESS:
		status = MAC_SUCCESS;
		break;

	case TRAC_SUCCESS_DATA_PENDING:
		status = TAL_FRAME_PENDING;
    28ae:	87 e8       	ldi	r24, 0x87	; 135
    28b0:	09 c0       	rjmp	.+18     	; 0x28c4 <tx_done_handling+0x38>
		break;

	case TRAC_CHANNEL_ACCESS_FAILURE:
		status = MAC_CHANNEL_ACCESS_FAILURE;
    28b2:	81 ee       	ldi	r24, 0xE1	; 225
		break;
    28b4:	07 c0       	rjmp	.+14     	; 0x28c4 <tx_done_handling+0x38>

	case TRAC_NO_ACK:
		status = MAC_NO_ACK;
    28b6:	89 ee       	ldi	r24, 0xE9	; 233
		break;
    28b8:	05 c0       	rjmp	.+10     	; 0x28c4 <tx_done_handling+0x38>

	case TRAC_INVALID:
		status = FAILURE;
    28ba:	85 e8       	ldi	r24, 0x85	; 133
		break;
    28bc:	03 c0       	rjmp	.+6      	; 0x28c4 <tx_done_handling+0x38>

	default:
		Assert("Unexpected tal_tx_state" == 0);
		status = FAILURE;
    28be:	85 e8       	ldi	r24, 0x85	; 133
		break;
    28c0:	01 c0       	rjmp	.+2      	; 0x28c4 <tx_done_handling+0x38>

	retval_t status;

	switch (trx_trac_status) {
	case TRAC_SUCCESS:
		status = MAC_SUCCESS;
    28c2:	80 e0       	ldi	r24, 0x00	; 0

#ifdef ENABLE_RTB
	rtb_tx_frame_done_cb(status, mac_frame_ptr);
#else
	/* Regular handling without RTB */
	tal_tx_frame_done_cb(status, mac_frame_ptr);
    28c4:	60 91 35 09 	lds	r22, 0x0935	; 0x800935 <mac_frame_ptr>
    28c8:	70 91 36 09 	lds	r23, 0x0936	; 0x800936 <mac_frame_ptr+0x1>
    28cc:	e0 c5       	rjmp	.+3008   	; 0x348e <tal_tx_frame_done_cb>
    28ce:	08 95       	ret

000028d0 <send_frame>:
 * \param use_csma Flag indicating if CSMA is requested
 * \param tx_retries Flag indicating if transmission retries are requested
 *                   by the MAC layer
 */
void send_frame(csma_mode_t csma_mode, bool tx_retries)
{
    28d0:	1f 93       	push	r17
    28d2:	cf 93       	push	r28
    28d4:	df 93       	push	r29
    28d6:	1f 92       	push	r1
    28d8:	cd b7       	in	r28, 0x3d	; 61
    28da:	de b7       	in	r29, 0x3e	; 62
    28dc:	18 2f       	mov	r17, r24
	tal_trx_status_t trx_status;

	/* Configure tx according to tx_retries */
	if (tx_retries) {
    28de:	66 23       	and	r22, r22
    28e0:	81 f0       	breq	.+32     	; 0x2902 <send_frame+0x32>
		trx_bit_write(SR_MAX_FRAME_RETRIES,
    28e2:	ec e6       	ldi	r30, 0x6C	; 108
    28e4:	f1 e0       	ldi	r31, 0x01	; 1
    28e6:	20 81       	ld	r18, Z
    28e8:	90 91 53 09 	lds	r25, 0x0953	; 0x800953 <tal_pib+0x1c>
    28ec:	30 e1       	ldi	r19, 0x10	; 16
    28ee:	93 9f       	mul	r25, r19
    28f0:	c0 01       	movw	r24, r0
    28f2:	11 24       	eor	r1, r1
    28f4:	92 2f       	mov	r25, r18
    28f6:	9f 70       	andi	r25, 0x0F	; 15
    28f8:	89 2b       	or	r24, r25
    28fa:	80 83       	st	Z, r24
	} else {
		trx_bit_write(SR_MAX_FRAME_RETRIES, 0);
	}

	/* Configure tx according to csma usage */
	if ((csma_mode == NO_CSMA_NO_IFS) || (csma_mode == NO_CSMA_WITH_IFS)) {
    28fc:	12 30       	cpi	r17, 0x02	; 2
    28fe:	e0 f4       	brcc	.+56     	; 0x2938 <send_frame+0x68>
    2900:	08 c0       	rjmp	.+16     	; 0x2912 <send_frame+0x42>
	/* Configure tx according to tx_retries */
	if (tx_retries) {
		trx_bit_write(SR_MAX_FRAME_RETRIES,
				tal_pib.MaxFrameRetries);
	} else {
		trx_bit_write(SR_MAX_FRAME_RETRIES, 0);
    2902:	ec e6       	ldi	r30, 0x6C	; 108
    2904:	f1 e0       	ldi	r31, 0x01	; 1
    2906:	80 81       	ld	r24, Z
    2908:	8f 70       	andi	r24, 0x0F	; 15
    290a:	80 83       	st	Z, r24
	}

	/* Configure tx according to csma usage */
	if ((csma_mode == NO_CSMA_NO_IFS) || (csma_mode == NO_CSMA_WITH_IFS)) {
    290c:	12 30       	cpi	r17, 0x02	; 2
    290e:	a0 f4       	brcc	.+40     	; 0x2938 <send_frame+0x68>
    2910:	0d c0       	rjmp	.+26     	; 0x292c <send_frame+0x5c>
		if (tx_retries) {
			trx_bit_write(SR_MAX_CSMA_RETRIES,
    2912:	ec e6       	ldi	r30, 0x6C	; 108
    2914:	f1 e0       	ldi	r31, 0x01	; 1
    2916:	80 81       	ld	r24, Z
    2918:	90 91 4b 09 	lds	r25, 0x094B	; 0x80094b <tal_pib+0x14>
    291c:	99 0f       	add	r25, r25
    291e:	9e 70       	andi	r25, 0x0E	; 14
    2920:	81 7f       	andi	r24, 0xF1	; 241
    2922:	89 2b       	or	r24, r25
    2924:	80 83       	st	Z, r24
					tal_pib.MaxCSMABackoffs);
			trx_reg_write(RG_CSMA_BE, 0x00);
    2926:	10 92 6f 01 	sts	0x016F, r1	; 0x80016f <__TEXT_REGION_LENGTH__+0x7c016f>
    292a:	1a c0       	rjmp	.+52     	; 0x2960 <send_frame+0x90>
		} else {
			trx_bit_write(SR_MAX_CSMA_RETRIES, 7);
    292c:	ec e6       	ldi	r30, 0x6C	; 108
    292e:	f1 e0       	ldi	r31, 0x01	; 1
    2930:	80 81       	ld	r24, Z
    2932:	8e 60       	ori	r24, 0x0E	; 14
    2934:	80 83       	st	Z, r24
    2936:	14 c0       	rjmp	.+40     	; 0x2960 <send_frame+0x90>
		}
	} else {
		trx_reg_write(RG_CSMA_BE,
    2938:	e7 e3       	ldi	r30, 0x37	; 55
    293a:	f9 e0       	ldi	r31, 0x09	; 9
    293c:	83 8d       	ldd	r24, Z+27	; 0x1b
    293e:	20 e1       	ldi	r18, 0x10	; 16
    2940:	82 9f       	mul	r24, r18
    2942:	c0 01       	movw	r24, r0
    2944:	11 24       	eor	r1, r1
    2946:	95 89       	ldd	r25, Z+21	; 0x15
    2948:	89 2b       	or	r24, r25
    294a:	80 93 6f 01 	sts	0x016F, r24	; 0x80016f <__TEXT_REGION_LENGTH__+0x7c016f>
				((tal_pib.MaxBE << 4) | tal_pib.MinBE));
		trx_bit_write(SR_MAX_CSMA_RETRIES, tal_pib.MaxCSMABackoffs);
    294e:	ac e6       	ldi	r26, 0x6C	; 108
    2950:	b1 e0       	ldi	r27, 0x01	; 1
    2952:	8c 91       	ld	r24, X
    2954:	94 89       	ldd	r25, Z+20	; 0x14
    2956:	99 0f       	add	r25, r25
    2958:	9e 70       	andi	r25, 0x0E	; 14
    295a:	81 7f       	andi	r24, 0xF1	; 241
    295c:	89 2b       	or	r24, r25
    295e:	8c 93       	st	X, r24
	}

	do {
		trx_status = set_trx_state(CMD_TX_ARET_ON);
    2960:	89 e1       	ldi	r24, 0x19	; 25
    2962:	8a d8       	rcall	.-3820   	; 0x1a78 <set_trx_state>
	} while (trx_status != TX_ARET_ON);
    2964:	89 31       	cpi	r24, 0x19	; 25
    2966:	e1 f7       	brne	.-8      	; 0x2960 <send_frame+0x90>

	/* Handle interframe spacing */
	if (csma_mode == NO_CSMA_WITH_IFS) {
    2968:	11 30       	cpi	r17, 0x01	; 1
    296a:	a1 f4       	brne	.+40     	; 0x2994 <send_frame+0xc4>
		if (last_frame_length > aMaxSIFSFrameSize) {
    296c:	80 91 57 09 	lds	r24, 0x0957	; 0x800957 <last_frame_length>
    2970:	83 31       	cpi	r24, 0x13	; 19
    2972:	40 f0       	brcs	.+16     	; 0x2984 <send_frame+0xb4>
			pal_timer_delay(TAL_CONVERT_SYMBOLS_TO_US(
    2974:	61 e0       	ldi	r22, 0x01	; 1
    2976:	73 e0       	ldi	r23, 0x03	; 3
    2978:	80 e0       	ldi	r24, 0x00	; 0
    297a:	90 e0       	ldi	r25, 0x00	; 0
    297c:	7c df       	rcall	.-264    	; 0x2876 <__portable_avr_delay_cycles>
					macMinLIFSPeriod_def)
					- IRQ_PROCESSING_DLY_US -
					PRE_TX_DURATION_US);
			last_frame_length = 0;
    297e:	10 92 57 09 	sts	0x0957, r1	; 0x800957 <last_frame_length>
    2982:	0d c0       	rjmp	.+26     	; 0x299e <send_frame+0xce>
		} else {
			pal_timer_delay(TAL_CONVERT_SYMBOLS_TO_US(
    2984:	6b ea       	ldi	r22, 0xAB	; 171
    2986:	70 e0       	ldi	r23, 0x00	; 0
    2988:	80 e0       	ldi	r24, 0x00	; 0
    298a:	90 e0       	ldi	r25, 0x00	; 0
    298c:	74 df       	rcall	.-280    	; 0x2876 <__portable_avr_delay_cycles>
					macMinSIFSPeriod_def)
					- IRQ_PROCESSING_DLY_US -
					PRE_TX_DURATION_US);
			last_frame_length = 0;
    298e:	10 92 57 09 	sts	0x0957, r1	; 0x800957 <last_frame_length>
    2992:	05 c0       	rjmp	.+10     	; 0x299e <send_frame+0xce>
		 * If no delay is applied after switching to TX_ARET_ON,
		 * a short delay is required that allows that a pending TX_END
		 * IRQ for
		 * ACK transmission gets served.
		 */
		pal_timer_delay(TRX_IRQ_DELAY_US);
    2994:	6c e0       	ldi	r22, 0x0C	; 12
    2996:	70 e0       	ldi	r23, 0x00	; 0
    2998:	80 e0       	ldi	r24, 0x00	; 0
    299a:	90 e0       	ldi	r25, 0x00	; 0
    299c:	6c df       	rcall	.-296    	; 0x2876 <__portable_avr_delay_cycles>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    299e:	8f b7       	in	r24, 0x3f	; 63
    29a0:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    29a2:	f8 94       	cli
	return flags;
    29a4:	19 81       	ldd	r17, Y+1	; 0x01
	}

	ENTER_CRITICAL_REGION(); /* prevent from buffer underrun */

	/* Toggle the SLP_TR pin triggering transmission. */
	TRX_SLP_TR_HIGH();
    29a6:	e9 e3       	ldi	r30, 0x39	; 57
    29a8:	f1 e0       	ldi	r31, 0x01	; 1
    29aa:	80 81       	ld	r24, Z
    29ac:	82 60       	ori	r24, 0x02	; 2
    29ae:	80 83       	st	Z, r24
	PAL_WAIT_65_NS();
    29b0:	00 00       	nop
    29b2:	00 00       	nop
	TRX_SLP_TR_LOW();
    29b4:	80 81       	ld	r24, Z
    29b6:	8d 7f       	andi	r24, 0xFD	; 253
    29b8:	80 83       	st	Z, r24
	 * is
	 * 1 octet frame length octet
	 * + n octets frame (i.e. value of frame_tx[0])
	 * - 2 octets FCS
	 */
	trx_frame_write(tal_frame_to_tx, tal_frame_to_tx[0] - 1);
    29ba:	60 91 58 09 	lds	r22, 0x0958	; 0x800958 <tal_frame_to_tx>
    29be:	70 91 59 09 	lds	r23, 0x0959	; 0x800959 <tal_frame_to_tx+0x1>
    29c2:	fb 01       	movw	r30, r22
    29c4:	40 81       	ld	r20, Z
    29c6:	50 e0       	ldi	r21, 0x00	; 0
    29c8:	41 50       	subi	r20, 0x01	; 1
    29ca:	51 09       	sbc	r21, r1
    29cc:	80 e8       	ldi	r24, 0x80	; 128
    29ce:	91 e0       	ldi	r25, 0x01	; 1
    29d0:	37 d6       	rcall	.+3182   	; 0x3640 <memcpy>

	tal_state = TAL_TX_AUTO;
    29d2:	81 e0       	ldi	r24, 0x01	; 1
    29d4:	80 93 5b 09 	sts	0x095B, r24	; 0x80095b <tal_state>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    29d8:	1f bf       	out	0x3f, r17	; 63

	LEAVE_CRITICAL_REGION();
}
    29da:	0f 90       	pop	r0
    29dc:	df 91       	pop	r29
    29de:	cf 91       	pop	r28
    29e0:	1f 91       	pop	r17
    29e2:	08 95       	ret

000029e4 <tal_tx_frame>:
 *                 transmission
 *         TAL_BUSY if the TAL is busy servicing the previous MAC request
 */
retval_t tal_tx_frame(frame_info_t *tx_frame, csma_mode_t csma_mode,
		bool perform_frame_retry)
{
    29e4:	fc 01       	movw	r30, r24
	if (tal_state != TAL_IDLE) {
    29e6:	90 91 5b 09 	lds	r25, 0x095B	; 0x80095b <tal_state>
    29ea:	91 11       	cpse	r25, r1
    29ec:	16 c0       	rjmp	.+44     	; 0x2a1a <tal_tx_frame+0x36>

	/*
	 * Store the pointer to the provided frame structure.
	 * This is needed for the callback function.
	 */
	mac_frame_ptr = tx_frame;
    29ee:	f0 93 36 09 	sts	0x0936, r31	; 0x800936 <mac_frame_ptr+0x1>
    29f2:	e0 93 35 09 	sts	0x0935, r30	; 0x800935 <mac_frame_ptr>

	/* Set pointer to actual mpdu to be downloaded to the transceiver. */
	tal_frame_to_tx = tx_frame->mpdu;
    29f6:	07 80       	ldd	r0, Z+7	; 0x07
    29f8:	f0 85       	ldd	r31, Z+8	; 0x08
    29fa:	e0 2d       	mov	r30, r0
    29fc:	f0 93 59 09 	sts	0x0959, r31	; 0x800959 <tal_frame_to_tx+0x1>
    2a00:	e0 93 58 09 	sts	0x0958, r30	; 0x800958 <tal_frame_to_tx>
	last_frame_length = tal_frame_to_tx[0] - 1;
    2a04:	80 81       	ld	r24, Z
    2a06:	81 50       	subi	r24, 0x01	; 1
    2a08:	80 93 57 09 	sts	0x0957, r24	; 0x800957 <last_frame_length>

	/*
	 * In case the frame is too large, return immediately indicating
	 * invalid status.
	 */
	if (tal_frame_to_tx == NULL) {
    2a0c:	ef 2b       	or	r30, r31
    2a0e:	39 f0       	breq	.+14     	; 0x2a1e <tal_tx_frame+0x3a>
    2a10:	86 2f       	mov	r24, r22
#endif  /* #if (MAC_INDIRECT_DATA_FFD == 1) */
		send_frame(csma_mode, perform_frame_retry);
	}

#else   /* No BEACON_SUPPORT */
	send_frame(csma_mode, perform_frame_retry);
    2a12:	64 2f       	mov	r22, r20
    2a14:	5d df       	rcall	.-326    	; 0x28d0 <send_frame>
#endif  /* BEACON_SUPPORT / No BEACON_SUPPORT */

	return MAC_SUCCESS;
    2a16:	80 e0       	ldi	r24, 0x00	; 0
    2a18:	08 95       	ret
 */
retval_t tal_tx_frame(frame_info_t *tx_frame, csma_mode_t csma_mode,
		bool perform_frame_retry)
{
	if (tal_state != TAL_IDLE) {
		return TAL_BUSY;
    2a1a:	86 e8       	ldi	r24, 0x86	; 134
    2a1c:	08 95       	ret
	/*
	 * In case the frame is too large, return immediately indicating
	 * invalid status.
	 */
	if (tal_frame_to_tx == NULL) {
		return MAC_INVALID_PARAMETER;
    2a1e:	88 ee       	ldi	r24, 0xE8	; 232
#else   /* No BEACON_SUPPORT */
	send_frame(csma_mode, perform_frame_retry);
#endif  /* BEACON_SUPPORT / No BEACON_SUPPORT */

	return MAC_SUCCESS;
}
    2a20:	08 95       	ret

00002a22 <handle_tx_end_irq>:
	/* Check if TX_END interrupt, is issued due to automatic ACK
	 * transmission. */
#if ((MAC_START_REQUEST_CONFIRM == 1) && (defined BEACON_SUPPORT))
	if ((tal_state != TAL_TX_AUTO) && (!tal_beacon_transmission))
#else
	if (tal_state != TAL_TX_AUTO)
    2a22:	80 91 5b 09 	lds	r24, 0x095B	; 0x80095b <tal_state>
    2a26:	81 30       	cpi	r24, 0x01	; 1
    2a28:	c1 f4       	brne	.+48     	; 0x2a5a <handle_tx_end_irq+0x38>
		}
	} else
#endif /* ((MAC_START_REQUEST_CONFIRM == 1) && (defined BEACON_SUPPORT)) */
	{
		/* Read trac status before enabling RX_AACK_ON. */
		trx_trac_status = (trx_trac_status_t)trx_bit_read(
    2a2a:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
    2a2e:	82 95       	swap	r24
    2a30:	86 95       	lsr	r24
    2a32:	87 70       	andi	r24, 0x07	; 7
    2a34:	80 93 f3 06 	sts	0x06F3, r24	; 0x8006f3 <trx_trac_status>
			PIN_ACK_WAITING_END();
		} else
#endif  /* BEACON_SUPPORT */
		/* Trx has handled the entire transmission incl. CSMA */
		{
			tal_state = TAL_TX_DONE; /* Further handling is done by
    2a38:	82 e0       	ldi	r24, 0x02	; 2
    2a3a:	80 93 5b 09 	sts	0x095B, r24	; 0x80095b <tal_state>

	/*
	 * After transmission has finished, switch receiver on again.
	 * Check if receive buffer is available.
	 */
	if (NULL == tal_rx_buffer) {
    2a3e:	80 91 e9 06 	lds	r24, 0x06E9	; 0x8006e9 <tal_rx_buffer>
    2a42:	90 91 ea 06 	lds	r25, 0x06EA	; 0x8006ea <tal_rx_buffer+0x1>
    2a46:	89 2b       	or	r24, r25
    2a48:	31 f4       	brne	.+12     	; 0x2a56 <handle_tx_end_irq+0x34>
		set_trx_state(CMD_PLL_ON);
    2a4a:	89 e0       	ldi	r24, 0x09	; 9
    2a4c:	15 d8       	rcall	.-4054   	; 0x1a78 <set_trx_state>
		tal_rx_on_required = true;
    2a4e:	81 e0       	ldi	r24, 0x01	; 1
    2a50:	80 93 2f 09 	sts	0x092F, r24	; 0x80092f <tal_rx_on_required>
    2a54:	08 95       	ret
	} else {
		set_trx_state(CMD_RX_AACK_ON);
    2a56:	86 e1       	ldi	r24, 0x16	; 22
    2a58:	0f c8       	rjmp	.-4066   	; 0x1a78 <set_trx_state>
    2a5a:	08 95       	ret

00002a5c <tal_ant_div_config>:
 */
#if ((TAL_TYPE != AT86RF230B) && (TAL_TYPE != AT86RF212))
retval_t  tal_ant_div_config(bool div_ctrl, uint8_t ant_ctrl)
{
	retval_t return_var = FAILURE;
	if (true == div_ctrl) {
    2a5c:	88 23       	and	r24, r24
    2a5e:	29 f1       	breq	.+74     	; 0x2aaa <tal_ant_div_config+0x4e>
		/* do the configurations if diversity has to be enabled */
		trx_bit_write(SR_ANT_CTRL, ANT_CTRL_0);
    2a60:	ed e4       	ldi	r30, 0x4D	; 77
    2a62:	f1 e0       	ldi	r31, 0x01	; 1
    2a64:	80 81       	ld	r24, Z
    2a66:	8c 7f       	andi	r24, 0xFC	; 252
    2a68:	80 83       	st	Z, r24
		trx_bit_write(SR_ANT_DIV_EN, ANT_DIV_ENABLE);
    2a6a:	80 81       	ld	r24, Z
    2a6c:	88 60       	ori	r24, 0x08	; 8
    2a6e:	80 83       	st	Z, r24

#if ((TAL_TYPE != AT86RF212) && (TAL_TYPE != AT86RF212B))
		trx_bit_write(SR_PDT_THRES, THRES_ANT_DIV_ENABLE);
    2a70:	aa e4       	ldi	r26, 0x4A	; 74
    2a72:	b1 e0       	ldi	r27, 0x01	; 1
    2a74:	8c 91       	ld	r24, X
    2a76:	80 7f       	andi	r24, 0xF0	; 240
    2a78:	83 60       	ori	r24, 0x03	; 3
    2a7a:	8c 93       	st	X, r24
#endif /* End of ((TAL_TYPE != AT86RF212) && (TAL_TYPE!= AT86RF212B)) */
		trx_bit_write(SR_ANT_EXT_SW_EN, ANT_EXT_SW_ENABLE);
    2a7c:	80 81       	ld	r24, Z
    2a7e:	84 60       	ori	r24, 0x04	; 4
    2a80:	80 83       	st	Z, r24
#if (TAL_TYPE == ATMEGARFA1)
		CONF_REG_WRITE();
#endif /* TAL_TYPE == ATMEGA128RFA1 */

		/* check the values written in transceiver registers */
		if ((trx_bit_read(SR_ANT_CTRL) == ANT_CTRL_0) &&
    2a82:	80 81       	ld	r24, Z
    2a84:	83 70       	andi	r24, 0x03	; 3
    2a86:	09 f0       	breq	.+2      	; 0x2a8a <tal_ant_div_config+0x2e>
    2a88:	54 c0       	rjmp	.+168    	; 0x2b32 <tal_ant_div_config+0xd6>
				(trx_bit_read(SR_ANT_DIV_EN) ==
    2a8a:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <__TEXT_REGION_LENGTH__+0x7c014d>
#if (TAL_TYPE == ATMEGARFA1)
		CONF_REG_WRITE();
#endif /* TAL_TYPE == ATMEGA128RFA1 */

		/* check the values written in transceiver registers */
		if ((trx_bit_read(SR_ANT_CTRL) == ANT_CTRL_0) &&
    2a8e:	83 ff       	sbrs	r24, 3
    2a90:	52 c0       	rjmp	.+164    	; 0x2b36 <tal_ant_div_config+0xda>
				(trx_bit_read(SR_ANT_DIV_EN) ==
				ANT_DIV_ENABLE) && \
				(trx_bit_read(SR_ANT_EXT_SW_EN) ==
    2a92:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <__TEXT_REGION_LENGTH__+0x7c014d>
#endif /* TAL_TYPE == ATMEGA128RFA1 */

		/* check the values written in transceiver registers */
		if ((trx_bit_read(SR_ANT_CTRL) == ANT_CTRL_0) &&
				(trx_bit_read(SR_ANT_DIV_EN) ==
				ANT_DIV_ENABLE) && \
    2a96:	82 ff       	sbrs	r24, 2
    2a98:	50 c0       	rjmp	.+160    	; 0x2b3a <tal_ant_div_config+0xde>
				(trx_bit_read(SR_ANT_EXT_SW_EN) ==
				ANT_EXT_SW_ENABLE)) {
#if ((TAL_TYPE != AT86RF212) && (TAL_TYPE != AT86RF212B))
			if ((trx_bit_read(SR_PDT_THRES) ==
    2a9a:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <__TEXT_REGION_LENGTH__+0x7c014a>
    2a9e:	8f 70       	andi	r24, 0x0F	; 15
    2aa0:	83 30       	cpi	r24, 0x03	; 3
    2aa2:	09 f0       	breq	.+2      	; 0x2aa6 <tal_ant_div_config+0x4a>
    2aa4:	4c c0       	rjmp	.+152    	; 0x2b3e <tal_ant_div_config+0xe2>
					THRES_ANT_DIV_ENABLE))
#endif
			return_var = MAC_SUCCESS;
    2aa6:	80 e0       	ldi	r24, 0x00	; 0
    2aa8:	08 95       	ret
		} else {
			return_var = FAILURE;
		}
	} else {
		/* do the configurations if diversity has to be disabled */
		trx_bit_write(SR_ANT_DIV_EN, ANT_DIV_DISABLE);
    2aaa:	ed e4       	ldi	r30, 0x4D	; 77
    2aac:	f1 e0       	ldi	r31, 0x01	; 1
    2aae:	80 81       	ld	r24, Z
    2ab0:	87 7f       	andi	r24, 0xF7	; 247
    2ab2:	80 83       	st	Z, r24
#if ((TAL_TYPE != AT86RF212) && (TAL_TYPE != AT86RF212B))
		trx_bit_write(SR_PDT_THRES, THRES_ANT_DIV_DISABLE);
    2ab4:	aa e4       	ldi	r26, 0x4A	; 74
    2ab6:	b1 e0       	ldi	r27, 0x01	; 1
    2ab8:	8c 91       	ld	r24, X
    2aba:	80 7f       	andi	r24, 0xF0	; 240
    2abc:	87 60       	ori	r24, 0x07	; 7
    2abe:	8c 93       	st	X, r24
#endif

		trx_bit_write(SR_ANT_EXT_SW_EN, ANT_EXT_SW_ENABLE);
    2ac0:	80 81       	ld	r24, Z
    2ac2:	84 60       	ori	r24, 0x04	; 4
    2ac4:	80 83       	st	Z, r24
		if (ant_ctrl == ANT_CTRL_1) {
    2ac6:	61 30       	cpi	r22, 0x01	; 1
    2ac8:	31 f4       	brne	.+12     	; 0x2ad6 <tal_ant_div_config+0x7a>
			/* Enable A1/X2 */
			trx_bit_write(SR_ANT_CTRL, ANT_CTRL_1);
    2aca:	80 81       	ld	r24, Z
    2acc:	8c 7f       	andi	r24, 0xFC	; 252
    2ace:	81 60       	ori	r24, 0x01	; 1
    2ad0:	80 83       	st	Z, r24
 * \return The value set in the TX_PWR bits
 */
#if ((TAL_TYPE != AT86RF230B) && (TAL_TYPE != AT86RF212))
retval_t  tal_ant_div_config(bool div_ctrl, uint8_t ant_ctrl)
{
	retval_t return_var = FAILURE;
    2ad2:	85 e8       	ldi	r24, 0x85	; 133
    2ad4:	17 c0       	rjmp	.+46     	; 0x2b04 <tal_ant_div_config+0xa8>

		trx_bit_write(SR_ANT_EXT_SW_EN, ANT_EXT_SW_ENABLE);
		if (ant_ctrl == ANT_CTRL_1) {
			/* Enable A1/X2 */
			trx_bit_write(SR_ANT_CTRL, ANT_CTRL_1);
		} else if (ant_ctrl == ANT_CTRL_2) {
    2ad6:	62 30       	cpi	r22, 0x02	; 2
    2ad8:	41 f4       	brne	.+16     	; 0x2aea <tal_ant_div_config+0x8e>
			/* Enable A2/X3 */
			trx_bit_write(SR_ANT_CTRL, ANT_CTRL_2);
    2ada:	ed e4       	ldi	r30, 0x4D	; 77
    2adc:	f1 e0       	ldi	r31, 0x01	; 1
    2ade:	80 81       	ld	r24, Z
    2ae0:	8c 7f       	andi	r24, 0xFC	; 252
    2ae2:	82 60       	ori	r24, 0x02	; 2
    2ae4:	80 83       	st	Z, r24
 * \return The value set in the TX_PWR bits
 */
#if ((TAL_TYPE != AT86RF230B) && (TAL_TYPE != AT86RF212))
retval_t  tal_ant_div_config(bool div_ctrl, uint8_t ant_ctrl)
{
	retval_t return_var = FAILURE;
    2ae6:	85 e8       	ldi	r24, 0x85	; 133
    2ae8:	0d c0       	rjmp	.+26     	; 0x2b04 <tal_ant_div_config+0xa8>
			/* Enable A1/X2 */
			trx_bit_write(SR_ANT_CTRL, ANT_CTRL_1);
		} else if (ant_ctrl == ANT_CTRL_2) {
			/* Enable A2/X3 */
			trx_bit_write(SR_ANT_CTRL, ANT_CTRL_2);
		} else if (ant_ctrl == ANT_CTRL_0 || ant_ctrl == ANT_CTRL_3) {
    2aea:	66 23       	and	r22, r22
    2aec:	11 f0       	breq	.+4      	; 0x2af2 <tal_ant_div_config+0x96>
    2aee:	63 30       	cpi	r22, 0x03	; 3
    2af0:	41 f4       	brne	.+16     	; 0x2b02 <tal_ant_div_config+0xa6>
			trx_bit_write(SR_ANT_CTRL, ANT_CTRL_0);
    2af2:	ed e4       	ldi	r30, 0x4D	; 77
    2af4:	f1 e0       	ldi	r31, 0x01	; 1
    2af6:	80 81       	ld	r24, Z
    2af8:	8c 7f       	andi	r24, 0xFC	; 252
    2afa:	80 83       	st	Z, r24
 * \return The value set in the TX_PWR bits
 */
#if ((TAL_TYPE != AT86RF230B) && (TAL_TYPE != AT86RF212))
retval_t  tal_ant_div_config(bool div_ctrl, uint8_t ant_ctrl)
{
	retval_t return_var = FAILURE;
    2afc:	85 e8       	ldi	r24, 0x85	; 133
		} else if (ant_ctrl == ANT_CTRL_2) {
			/* Enable A2/X3 */
			trx_bit_write(SR_ANT_CTRL, ANT_CTRL_2);
		} else if (ant_ctrl == ANT_CTRL_0 || ant_ctrl == ANT_CTRL_3) {
			trx_bit_write(SR_ANT_CTRL, ANT_CTRL_0);
			ant_ctrl = 0;
    2afe:	60 e0       	ldi	r22, 0x00	; 0
    2b00:	01 c0       	rjmp	.+2      	; 0x2b04 <tal_ant_div_config+0xa8>
		} else {
			return_var = MAC_INVALID_PARAMETER;
    2b02:	88 ee       	ldi	r24, 0xE8	; 232

#if (TAL_TYPE == ATMEGARFA1)
		CONF_REG_WRITE();
#endif /* TAL_TYPE == ATMEGA128RFA1 */
		/* check the values written in transceiver registers */
		if ((trx_bit_read(SR_ANT_CTRL) == ant_ctrl) &&
    2b04:	20 91 4d 01 	lds	r18, 0x014D	; 0x80014d <__TEXT_REGION_LENGTH__+0x7c014d>
    2b08:	23 70       	andi	r18, 0x03	; 3
    2b0a:	30 e0       	ldi	r19, 0x00	; 0
    2b0c:	70 e0       	ldi	r23, 0x00	; 0
    2b0e:	26 17       	cp	r18, r22
    2b10:	37 07       	cpc	r19, r23
    2b12:	b9 f4       	brne	.+46     	; 0x2b42 <tal_ant_div_config+0xe6>
				(trx_bit_read(SR_ANT_DIV_EN) ==
    2b14:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <__TEXT_REGION_LENGTH__+0x7c014d>

#if (TAL_TYPE == ATMEGARFA1)
		CONF_REG_WRITE();
#endif /* TAL_TYPE == ATMEGA128RFA1 */
		/* check the values written in transceiver registers */
		if ((trx_bit_read(SR_ANT_CTRL) == ant_ctrl) &&
    2b18:	93 fd       	sbrc	r25, 3
    2b1a:	15 c0       	rjmp	.+42     	; 0x2b46 <tal_ant_div_config+0xea>
				(trx_bit_read(SR_ANT_DIV_EN) ==
				ANT_DIV_DISABLE) && \
				(trx_bit_read(SR_ANT_EXT_SW_EN) ==
    2b1c:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <__TEXT_REGION_LENGTH__+0x7c014d>
		CONF_REG_WRITE();
#endif /* TAL_TYPE == ATMEGA128RFA1 */
		/* check the values written in transceiver registers */
		if ((trx_bit_read(SR_ANT_CTRL) == ant_ctrl) &&
				(trx_bit_read(SR_ANT_DIV_EN) ==
				ANT_DIV_DISABLE) && \
    2b20:	92 fd       	sbrc	r25, 2
    2b22:	13 c0       	rjmp	.+38     	; 0x2b4a <tal_ant_div_config+0xee>
				(trx_bit_read(SR_ANT_EXT_SW_EN) ==
				ANT_EXT_SW_DISABLE)) {
#if ((TAL_TYPE != AT86RF212) && (TAL_TYPE != AT86RF212B))
			if ((trx_bit_read(SR_PDT_THRES) ==
    2b24:	90 91 4a 01 	lds	r25, 0x014A	; 0x80014a <__TEXT_REGION_LENGTH__+0x7c014a>
    2b28:	9f 70       	andi	r25, 0x0F	; 15
    2b2a:	93 30       	cpi	r25, 0x03	; 3
    2b2c:	79 f4       	brne	.+30     	; 0x2b4c <tal_ant_div_config+0xf0>
					THRES_ANT_DIV_ENABLE))
#endif
			return_var = MAC_SUCCESS;
    2b2e:	80 e0       	ldi	r24, 0x00	; 0
    2b30:	08 95       	ret
			if ((trx_bit_read(SR_PDT_THRES) ==
					THRES_ANT_DIV_ENABLE))
#endif
			return_var = MAC_SUCCESS;
		} else {
			return_var = FAILURE;
    2b32:	85 e8       	ldi	r24, 0x85	; 133
    2b34:	08 95       	ret
    2b36:	85 e8       	ldi	r24, 0x85	; 133
    2b38:	08 95       	ret
    2b3a:	85 e8       	ldi	r24, 0x85	; 133
    2b3c:	08 95       	ret
 * \return The value set in the TX_PWR bits
 */
#if ((TAL_TYPE != AT86RF230B) && (TAL_TYPE != AT86RF212))
retval_t  tal_ant_div_config(bool div_ctrl, uint8_t ant_ctrl)
{
	retval_t return_var = FAILURE;
    2b3e:	85 e8       	ldi	r24, 0x85	; 133
    2b40:	08 95       	ret
			if ((trx_bit_read(SR_PDT_THRES) ==
					THRES_ANT_DIV_ENABLE))
#endif
			return_var = MAC_SUCCESS;
		} else {
			return_var = FAILURE;
    2b42:	85 e8       	ldi	r24, 0x85	; 133
    2b44:	08 95       	ret
    2b46:	85 e8       	ldi	r24, 0x85	; 133
    2b48:	08 95       	ret
    2b4a:	85 e8       	ldi	r24, 0x85	; 133
		}
	}

	return return_var;
}
    2b4c:	08 95       	ret

00002b4e <tfa_pib_set>:
 *         TAL_BUSY if the TAL is not in TAL_IDLE state.
 *         MAC_SUCCESS if the attempt to set the PIB attribute was successful
 */
retval_t tfa_pib_set(tfa_pib_t tfa_pib_attribute, void *value)
{
	switch (tfa_pib_attribute) {
    2b4e:	81 11       	cpse	r24, r1
    2b50:	24 c0       	rjmp	.+72     	; 0x2b9a <tfa_pib_set+0x4c>
	case TFA_PIB_RX_SENS:
	{
		uint8_t reg_val;

		tfa_pib_rx_sens = *((int8_t *)value);
    2b52:	fb 01       	movw	r30, r22
    2b54:	80 81       	ld	r24, Z
		if (tfa_pib_rx_sens > -49) {
    2b56:	80 3d       	cpi	r24, 0xD0	; 208
    2b58:	2c f0       	brlt	.+10     	; 0x2b64 <tfa_pib_set+0x16>
			reg_val = 0xF;
			tfa_pib_rx_sens = -49;
    2b5a:	8f ec       	ldi	r24, 0xCF	; 207
    2b5c:	80 93 f4 06 	sts	0x06F4, r24	; 0x8006f4 <tfa_pib_rx_sens>
	{
		uint8_t reg_val;

		tfa_pib_rx_sens = *((int8_t *)value);
		if (tfa_pib_rx_sens > -49) {
			reg_val = 0xF;
    2b60:	6f e0       	ldi	r22, 0x0F	; 15
    2b62:	12 c0       	rjmp	.+36     	; 0x2b88 <tfa_pib_set+0x3a>
			tfa_pib_rx_sens = -49;
		} else if (tfa_pib_rx_sens <= RSSI_BASE_VAL_DBM) {
    2b64:	87 3a       	cpi	r24, 0xA7	; 167
    2b66:	2c f4       	brge	.+10     	; 0x2b72 <tfa_pib_set+0x24>
			reg_val = 0x0;
			tfa_pib_rx_sens = RSSI_BASE_VAL_DBM;
    2b68:	86 ea       	ldi	r24, 0xA6	; 166
    2b6a:	80 93 f4 06 	sts	0x06F4, r24	; 0x8006f4 <tfa_pib_rx_sens>
		tfa_pib_rx_sens = *((int8_t *)value);
		if (tfa_pib_rx_sens > -49) {
			reg_val = 0xF;
			tfa_pib_rx_sens = -49;
		} else if (tfa_pib_rx_sens <= RSSI_BASE_VAL_DBM) {
			reg_val = 0x0;
    2b6e:	60 e0       	ldi	r22, 0x00	; 0
    2b70:	0b c0       	rjmp	.+22     	; 0x2b88 <tfa_pib_set+0x3a>
	switch (tfa_pib_attribute) {
	case TFA_PIB_RX_SENS:
	{
		uint8_t reg_val;

		tfa_pib_rx_sens = *((int8_t *)value);
    2b72:	80 93 f4 06 	sts	0x06F4, r24	; 0x8006f4 <tfa_pib_rx_sens>
		} else if (tfa_pib_rx_sens <= RSSI_BASE_VAL_DBM) {
			reg_val = 0x0;
			tfa_pib_rx_sens = RSSI_BASE_VAL_DBM;
		} else {
			reg_val
				= ((tfa_pib_rx_sens -
    2b76:	08 2e       	mov	r0, r24
    2b78:	00 0c       	add	r0, r0
    2b7a:	99 0b       	sbc	r25, r25
    2b7c:	86 5a       	subi	r24, 0xA6	; 166
    2b7e:	9f 4f       	sbci	r25, 0xFF	; 255
    2b80:	63 e0       	ldi	r22, 0x03	; 3
    2b82:	70 e0       	ldi	r23, 0x00	; 0
    2b84:	b6 d4       	rcall	.+2412   	; 0x34f2 <__divmodhi4>
    2b86:	6f 5f       	subi	r22, 0xFF	; 255
					(RSSI_BASE_VAL_DBM)) / 3) + 1;
		}

		trx_bit_write(SR_RX_PDT_LEVEL, reg_val);
    2b88:	e5 e5       	ldi	r30, 0x55	; 85
    2b8a:	f1 e0       	ldi	r31, 0x01	; 1
    2b8c:	80 81       	ld	r24, Z
    2b8e:	80 7f       	andi	r24, 0xF0	; 240
    2b90:	6f 70       	andi	r22, 0x0F	; 15
    2b92:	68 2b       	or	r22, r24
    2b94:	60 83       	st	Z, r22
	default:
		/* Invalid attribute id */
		return MAC_UNSUPPORTED_ATTRIBUTE;
	}

	return MAC_SUCCESS;
    2b96:	80 e0       	ldi	r24, 0x00	; 0
    2b98:	08 95       	ret
	}
	break;

	default:
		/* Invalid attribute id */
		return MAC_UNSUPPORTED_ATTRIBUTE;
    2b9a:	84 ef       	ldi	r24, 0xF4	; 244
	}

	return MAC_SUCCESS;
}
    2b9c:	08 95       	ret

00002b9e <tfa_init>:
 * to their default values.
 * \ingroup group_tfa
 */
static void init_tfa_pib(void)
{
	tfa_pib_rx_sens = TFA_PIB_RX_SENS_DEF;
    2b9e:	86 ea       	ldi	r24, 0xA6	; 166
    2ba0:	80 93 f4 06 	sts	0x06F4, r24	; 0x8006f4 <tfa_pib_rx_sens>
 * It is assumed that the radio does not sleep.
 * \ingroup group_tfa
 */
static void write_all_tfa_pibs_to_trx(void)
{
	tfa_pib_set(TFA_PIB_RX_SENS, (void *)&tfa_pib_rx_sens);
    2ba4:	64 ef       	ldi	r22, 0xF4	; 244
    2ba6:	76 e0       	ldi	r23, 0x06	; 6
    2ba8:	80 e0       	ldi	r24, 0x00	; 0
    2baa:	d1 df       	rcall	.-94     	; 0x2b4e <tfa_pib_set>
		Assert(false);
	}

#if !MEGA_XX_UN0 && !MEGA_XX_UN1
	else if (module == &ADC) {
		sysclk_enable_module(POWER_RED_REG0, PRADC_bm);
    2bac:	61 e0       	ldi	r22, 0x01	; 1
    2bae:	80 e0       	ldi	r24, 0x00	; 0
    2bb0:	0e 94 d6 08 	call	0x11ac	; 0x11ac <sysclk_enable_module>
#if MEGA_RF
		sysclk_enable_module(POWER_RED_REG0, PRPGA_bm);
    2bb4:	60 e1       	ldi	r22, 0x10	; 16
    2bb6:	80 e0       	ldi	r24, 0x00	; 0
    2bb8:	0e 94 d6 08 	call	0x11ac	; 0x11ac <sysclk_enable_module>
{
	init_tfa_pib();
	write_all_tfa_pibs_to_trx();
	sysclk_enable_peripheral_clock(&ADC);
	return MAC_SUCCESS;
}
    2bbc:	80 e0       	ldi	r24, 0x00	; 0
    2bbe:	08 95       	ret

00002bc0 <tc_ovf_callback>:

/*! \brief  hw timer overflow callback
 */
void tc_ovf_callback(void)
{
	tmr_ovf_callback();
    2bc0:	0c 94 9a 01 	jmp	0x334	; 0x334 <tmr_ovf_callback>
    2bc4:	08 95       	ret

00002bc6 <tc_cca_callback>:

/*! \brief  hw timer compare callback
 */
void tc_cca_callback(void)
{
	tmr_cca_callback();
    2bc6:	0c 94 d2 01 	jmp	0x3a4	; 0x3a4 <tmr_cca_callback>
    2bca:	08 95       	ret

00002bcc <tmr_read_count>:
 * @return  count  in the register
 */
static inline uint16_t tc_read_count(volatile void *tc)
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
		return TCNT1;
    2bcc:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7c0084>
    2bd0:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7c0085>
/*! \brief  read the actual timer count from register
 */
uint16_t tmr_read_count(void)
{
	return tc_read_count(TIMER);
}
    2bd4:	08 95       	ret

00002bd6 <tmr_disable_cc_interrupt>:
 * @param tc Timer Address
 */
static inline void tc_disable_compa_int(volatile void *tc)
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
		TIMSK1 &= ~(1 << OCIE1A);
    2bd6:	ef e6       	ldi	r30, 0x6F	; 111
    2bd8:	f0 e0       	ldi	r31, 0x00	; 0
    2bda:	80 81       	ld	r24, Z
    2bdc:	8d 7f       	andi	r24, 0xFD	; 253
    2bde:	80 83       	st	Z, r24
 * @param tc Timer Address
 */
static inline void clear_compa_flag(volatile void *tc)
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
		TIFR1 |= (1 << OCF1A);
    2be0:	b1 9a       	sbi	0x16, 1	; 22
    2be2:	08 95       	ret

00002be4 <tmr_enable_cc_interrupt>:
    2be4:	b1 9a       	sbi	0x16, 1	; 22
 * @param tc Timer Address
 */
static inline void tc_enable_compa_int(volatile void *tc)
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
		TIMSK1 |= (1 << OCIE1A);
    2be6:	ef e6       	ldi	r30, 0x6F	; 111
    2be8:	f0 e0       	ldi	r31, 0x00	; 0
    2bea:	80 81       	ld	r24, Z
    2bec:	82 60       	ori	r24, 0x02	; 2
    2bee:	80 83       	st	Z, r24
    2bf0:	08 95       	ret

00002bf2 <tmr_disable_ovf_interrupt>:
 * @param tc Timer Address
 */
static inline void tc_enable_ovf_int(volatile void *tc)
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
		TIMSK1 |= (1 << TOIE1);
    2bf2:	ef e6       	ldi	r30, 0x6F	; 111
    2bf4:	f0 e0       	ldi	r31, 0x00	; 0
    2bf6:	80 81       	ld	r24, Z
    2bf8:	81 60       	ori	r24, 0x01	; 1
    2bfa:	80 83       	st	Z, r24
 * @param tc Timer Address
 */
static inline void clear_ovf_flag(volatile void *tc)
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
		TIFR1 |= (1 << TOV1);
    2bfc:	b0 9a       	sbi	0x16, 0	; 22
    2bfe:	08 95       	ret

00002c00 <tmr_stop>:

/*! \brief  to stop the running timer
 */
void tmr_stop(void)
{
	tc_disable(TIMER);
    2c00:	80 e8       	ldi	r24, 0x80	; 128
    2c02:	90 e0       	ldi	r25, 0x00	; 0
    2c04:	82 c3       	rjmp	.+1796   	; 0x330a <tc_disable>
    2c06:	08 95       	ret

00002c08 <tmr_write_cmpreg>:
 */
static inline void tc_write_cc(volatile void *tc,
		enum tc_cc_channel_t channel_index, uint16_t value)
{
	uint8_t *reg = (uint8_t *)tc;
	*(reg + channel_index + 1) |=  (value >> 8);
    2c08:	e9 e8       	ldi	r30, 0x89	; 137
    2c0a:	f0 e0       	ldi	r31, 0x00	; 0
    2c0c:	20 81       	ld	r18, Z
    2c0e:	92 2b       	or	r25, r18
    2c10:	90 83       	st	Z, r25
	*(reg + channel_index) |=  value;
    2c12:	e8 e8       	ldi	r30, 0x88	; 136
    2c14:	f0 e0       	ldi	r31, 0x00	; 0
    2c16:	90 81       	ld	r25, Z
    2c18:	89 2b       	or	r24, r25
    2c1a:	80 83       	st	Z, r24
    2c1c:	08 95       	ret

00002c1e <save_cpu_interrupt>:
}

/*! \brief  to save current interrupts status
 */
uint8_t save_cpu_interrupt(void)
{
    2c1e:	cf 93       	push	r28
    2c20:	df 93       	push	r29
    2c22:	1f 92       	push	r1
    2c24:	cd b7       	in	r28, 0x3d	; 61
    2c26:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    2c28:	8f b7       	in	r24, 0x3f	; 63
    2c2a:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    2c2c:	f8 94       	cli
	return flags;
    2c2e:	89 81       	ldd	r24, Y+1	; 0x01
	return cpu_irq_save();
}
    2c30:	0f 90       	pop	r0
    2c32:	df 91       	pop	r29
    2c34:	cf 91       	pop	r28
    2c36:	08 95       	ret

00002c38 <restore_cpu_interrupt>:
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2c38:	8f bf       	out	0x3f, r24	; 63
    2c3a:	08 95       	ret

00002c3c <tmr_init>:
}

/*! \brief  to initialiaze hw timer
 */
uint8_t tmr_init(void)
{
    2c3c:	cf 93       	push	r28
    2c3e:	df 93       	push	r29
	uint8_t timer_multiplier;

	tc_enable(TIMER);
    2c40:	80 e8       	ldi	r24, 0x80	; 128
    2c42:	90 e0       	ldi	r25, 0x00	; 0
    2c44:	eb d2       	rcall	.+1494   	; 0x321c <tc_enable>

	tc_set_overflow_interrupt_callback(TIMER, tc_ovf_callback);
    2c46:	60 ee       	ldi	r22, 0xE0	; 224
    2c48:	75 e1       	ldi	r23, 0x15	; 21
    2c4a:	80 e8       	ldi	r24, 0x80	; 128
    2c4c:	90 e0       	ldi	r25, 0x00	; 0
    2c4e:	d4 d3       	rcall	.+1960   	; 0x33f8 <tc_set_overflow_interrupt_callback>
 * @param tc Timer Address
 */
static inline void tc_enable_ovf_int(volatile void *tc)
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
		TIMSK1 |= (1 << TOIE1);
    2c50:	cf e6       	ldi	r28, 0x6F	; 111
    2c52:	d0 e0       	ldi	r29, 0x00	; 0
    2c54:	88 81       	ld	r24, Y
    2c56:	81 60       	ori	r24, 0x01	; 1
    2c58:	88 83       	st	Y, r24
 */
static void configure_tc_callback(volatile void *timer)
{
	if ((&TCCR1A == timer) || (&TCCR3A == timer) ||
			(&TCCR4A == timer) || (&TCCR5A == timer)) {
		tc_set_compa_interrupt_callback(TIMER, tc_cca_callback);
    2c5a:	63 ee       	ldi	r22, 0xE3	; 227
    2c5c:	75 e1       	ldi	r23, 0x15	; 21
    2c5e:	80 e8       	ldi	r24, 0x80	; 128
    2c60:	90 e0       	ldi	r25, 0x00	; 0
    2c62:	ea d3       	rcall	.+2004   	; 0x3438 <tc_set_compa_interrupt_callback>
 * @param tc Timer Address
 */
static inline void tc_disable_compa_int(volatile void *tc)
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
		TIMSK1 &= ~(1 << OCIE1A);
    2c64:	88 81       	ld	r24, Y
    2c66:	8d 7f       	andi	r24, 0xFD	; 253
    2c68:	88 83       	st	Y, r24
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
		TCCR1B |=  TC_CLKSEL_enum;
    2c6a:	e1 e8       	ldi	r30, 0x81	; 129
    2c6c:	f0 e0       	ldi	r31, 0x00	; 0
    2c6e:	80 81       	ld	r24, Z
    2c70:	81 60       	ori	r24, 0x01	; 1
    2c72:	80 83       	st	Z, r24
	tc_write_clock_source(TIMER, TC_CLKSEL_DIV1_gc);

	timer_multiplier = sysclk_get_peripheral_bus_hz(TIMER) / DEF_1MHZ;

	return timer_multiplier;
}
    2c74:	88 e0       	ldi	r24, 0x08	; 8
    2c76:	df 91       	pop	r29
    2c78:	cf 91       	pop	r28
    2c7a:	08 95       	ret

00002c7c <__vector_20>:
/**
 * \internal
 * \brief Interrupt handler for Timer Counter  overflow
 */
ISR(TIMER1_OVF_vect)
{
    2c7c:	1f 92       	push	r1
    2c7e:	0f 92       	push	r0
    2c80:	0f b6       	in	r0, 0x3f	; 63
    2c82:	0f 92       	push	r0
    2c84:	11 24       	eor	r1, r1
    2c86:	0b b6       	in	r0, 0x3b	; 59
    2c88:	0f 92       	push	r0
    2c8a:	2f 93       	push	r18
    2c8c:	3f 93       	push	r19
    2c8e:	4f 93       	push	r20
    2c90:	5f 93       	push	r21
    2c92:	6f 93       	push	r22
    2c94:	7f 93       	push	r23
    2c96:	8f 93       	push	r24
    2c98:	9f 93       	push	r25
    2c9a:	af 93       	push	r26
    2c9c:	bf 93       	push	r27
    2c9e:	ef 93       	push	r30
    2ca0:	ff 93       	push	r31
	if (tc_tccr1_ovf_callback) {
    2ca2:	e0 91 13 07 	lds	r30, 0x0713	; 0x800713 <tc_tccr1_ovf_callback>
    2ca6:	f0 91 14 07 	lds	r31, 0x0714	; 0x800714 <tc_tccr1_ovf_callback+0x1>
    2caa:	30 97       	sbiw	r30, 0x00	; 0
    2cac:	09 f0       	breq	.+2      	; 0x2cb0 <__vector_20+0x34>
		tc_tccr1_ovf_callback();
    2cae:	19 95       	eicall
	}
}
    2cb0:	ff 91       	pop	r31
    2cb2:	ef 91       	pop	r30
    2cb4:	bf 91       	pop	r27
    2cb6:	af 91       	pop	r26
    2cb8:	9f 91       	pop	r25
    2cba:	8f 91       	pop	r24
    2cbc:	7f 91       	pop	r23
    2cbe:	6f 91       	pop	r22
    2cc0:	5f 91       	pop	r21
    2cc2:	4f 91       	pop	r20
    2cc4:	3f 91       	pop	r19
    2cc6:	2f 91       	pop	r18
    2cc8:	0f 90       	pop	r0
    2cca:	0b be       	out	0x3b, r0	; 59
    2ccc:	0f 90       	pop	r0
    2cce:	0f be       	out	0x3f, r0	; 63
    2cd0:	0f 90       	pop	r0
    2cd2:	1f 90       	pop	r1
    2cd4:	18 95       	reti

00002cd6 <__vector_17>:

/**
 * \brief Interrupt handler for Timer Counter  Compare Match in Channel A
 */
ISR(TIMER1_COMPA_vect)
{
    2cd6:	1f 92       	push	r1
    2cd8:	0f 92       	push	r0
    2cda:	0f b6       	in	r0, 0x3f	; 63
    2cdc:	0f 92       	push	r0
    2cde:	11 24       	eor	r1, r1
    2ce0:	0b b6       	in	r0, 0x3b	; 59
    2ce2:	0f 92       	push	r0
    2ce4:	2f 93       	push	r18
    2ce6:	3f 93       	push	r19
    2ce8:	4f 93       	push	r20
    2cea:	5f 93       	push	r21
    2cec:	6f 93       	push	r22
    2cee:	7f 93       	push	r23
    2cf0:	8f 93       	push	r24
    2cf2:	9f 93       	push	r25
    2cf4:	af 93       	push	r26
    2cf6:	bf 93       	push	r27
    2cf8:	ef 93       	push	r30
    2cfa:	ff 93       	push	r31
	if (tc_tccr1_compa_callback) {
    2cfc:	e0 91 11 07 	lds	r30, 0x0711	; 0x800711 <tc_tccr1_compa_callback>
    2d00:	f0 91 12 07 	lds	r31, 0x0712	; 0x800712 <tc_tccr1_compa_callback+0x1>
    2d04:	30 97       	sbiw	r30, 0x00	; 0
    2d06:	09 f0       	breq	.+2      	; 0x2d0a <__vector_17+0x34>
		tc_tccr1_compa_callback();
    2d08:	19 95       	eicall
	}
}
    2d0a:	ff 91       	pop	r31
    2d0c:	ef 91       	pop	r30
    2d0e:	bf 91       	pop	r27
    2d10:	af 91       	pop	r26
    2d12:	9f 91       	pop	r25
    2d14:	8f 91       	pop	r24
    2d16:	7f 91       	pop	r23
    2d18:	6f 91       	pop	r22
    2d1a:	5f 91       	pop	r21
    2d1c:	4f 91       	pop	r20
    2d1e:	3f 91       	pop	r19
    2d20:	2f 91       	pop	r18
    2d22:	0f 90       	pop	r0
    2d24:	0b be       	out	0x3b, r0	; 59
    2d26:	0f 90       	pop	r0
    2d28:	0f be       	out	0x3f, r0	; 63
    2d2a:	0f 90       	pop	r0
    2d2c:	1f 90       	pop	r1
    2d2e:	18 95       	reti

00002d30 <__vector_18>:

/**
 * \brief Interrupt handler for Timer Counter  Compare Match in Channel B
 */
ISR(TIMER1_COMPB_vect)
{
    2d30:	1f 92       	push	r1
    2d32:	0f 92       	push	r0
    2d34:	0f b6       	in	r0, 0x3f	; 63
    2d36:	0f 92       	push	r0
    2d38:	11 24       	eor	r1, r1
    2d3a:	0b b6       	in	r0, 0x3b	; 59
    2d3c:	0f 92       	push	r0
    2d3e:	2f 93       	push	r18
    2d40:	3f 93       	push	r19
    2d42:	4f 93       	push	r20
    2d44:	5f 93       	push	r21
    2d46:	6f 93       	push	r22
    2d48:	7f 93       	push	r23
    2d4a:	8f 93       	push	r24
    2d4c:	9f 93       	push	r25
    2d4e:	af 93       	push	r26
    2d50:	bf 93       	push	r27
    2d52:	ef 93       	push	r30
    2d54:	ff 93       	push	r31
	if (tc_tccr1_compb_callback) {
    2d56:	e0 91 0f 07 	lds	r30, 0x070F	; 0x80070f <tc_tccr1_compb_callback>
    2d5a:	f0 91 10 07 	lds	r31, 0x0710	; 0x800710 <tc_tccr1_compb_callback+0x1>
    2d5e:	30 97       	sbiw	r30, 0x00	; 0
    2d60:	09 f0       	breq	.+2      	; 0x2d64 <__vector_18+0x34>
		tc_tccr1_compb_callback();
    2d62:	19 95       	eicall
	}
}
    2d64:	ff 91       	pop	r31
    2d66:	ef 91       	pop	r30
    2d68:	bf 91       	pop	r27
    2d6a:	af 91       	pop	r26
    2d6c:	9f 91       	pop	r25
    2d6e:	8f 91       	pop	r24
    2d70:	7f 91       	pop	r23
    2d72:	6f 91       	pop	r22
    2d74:	5f 91       	pop	r21
    2d76:	4f 91       	pop	r20
    2d78:	3f 91       	pop	r19
    2d7a:	2f 91       	pop	r18
    2d7c:	0f 90       	pop	r0
    2d7e:	0b be       	out	0x3b, r0	; 59
    2d80:	0f 90       	pop	r0
    2d82:	0f be       	out	0x3f, r0	; 63
    2d84:	0f 90       	pop	r0
    2d86:	1f 90       	pop	r1
    2d88:	18 95       	reti

00002d8a <__vector_19>:

/**
 * \brief Interrupt handler for Timer Counter  Compare Match in Channel C
 */
ISR(TIMER1_COMPC_vect)
{
    2d8a:	1f 92       	push	r1
    2d8c:	0f 92       	push	r0
    2d8e:	0f b6       	in	r0, 0x3f	; 63
    2d90:	0f 92       	push	r0
    2d92:	11 24       	eor	r1, r1
    2d94:	0b b6       	in	r0, 0x3b	; 59
    2d96:	0f 92       	push	r0
    2d98:	2f 93       	push	r18
    2d9a:	3f 93       	push	r19
    2d9c:	4f 93       	push	r20
    2d9e:	5f 93       	push	r21
    2da0:	6f 93       	push	r22
    2da2:	7f 93       	push	r23
    2da4:	8f 93       	push	r24
    2da6:	9f 93       	push	r25
    2da8:	af 93       	push	r26
    2daa:	bf 93       	push	r27
    2dac:	ef 93       	push	r30
    2dae:	ff 93       	push	r31
	if (tc_tccr1_compc_callback) {
    2db0:	e0 91 0d 07 	lds	r30, 0x070D	; 0x80070d <tc_tccr1_compc_callback>
    2db4:	f0 91 0e 07 	lds	r31, 0x070E	; 0x80070e <tc_tccr1_compc_callback+0x1>
    2db8:	30 97       	sbiw	r30, 0x00	; 0
    2dba:	09 f0       	breq	.+2      	; 0x2dbe <__vector_19+0x34>
		tc_tccr1_compc_callback();
    2dbc:	19 95       	eicall
	}
}
    2dbe:	ff 91       	pop	r31
    2dc0:	ef 91       	pop	r30
    2dc2:	bf 91       	pop	r27
    2dc4:	af 91       	pop	r26
    2dc6:	9f 91       	pop	r25
    2dc8:	8f 91       	pop	r24
    2dca:	7f 91       	pop	r23
    2dcc:	6f 91       	pop	r22
    2dce:	5f 91       	pop	r21
    2dd0:	4f 91       	pop	r20
    2dd2:	3f 91       	pop	r19
    2dd4:	2f 91       	pop	r18
    2dd6:	0f 90       	pop	r0
    2dd8:	0b be       	out	0x3b, r0	; 59
    2dda:	0f 90       	pop	r0
    2ddc:	0f be       	out	0x3f, r0	; 63
    2dde:	0f 90       	pop	r0
    2de0:	1f 90       	pop	r1
    2de2:	18 95       	reti

00002de4 <__vector_35>:
static tc_callback_t tc_tccr3_compa_callback;
static tc_callback_t tc_tccr3_compb_callback;
static tc_callback_t tc_tccr3_compc_callback;

ISR(TIMER3_OVF_vect)
{
    2de4:	1f 92       	push	r1
    2de6:	0f 92       	push	r0
    2de8:	0f b6       	in	r0, 0x3f	; 63
    2dea:	0f 92       	push	r0
    2dec:	11 24       	eor	r1, r1
    2dee:	0b b6       	in	r0, 0x3b	; 59
    2df0:	0f 92       	push	r0
    2df2:	2f 93       	push	r18
    2df4:	3f 93       	push	r19
    2df6:	4f 93       	push	r20
    2df8:	5f 93       	push	r21
    2dfa:	6f 93       	push	r22
    2dfc:	7f 93       	push	r23
    2dfe:	8f 93       	push	r24
    2e00:	9f 93       	push	r25
    2e02:	af 93       	push	r26
    2e04:	bf 93       	push	r27
    2e06:	ef 93       	push	r30
    2e08:	ff 93       	push	r31
	if (tc_tccr3_ovf_callback) {
    2e0a:	e0 91 0b 07 	lds	r30, 0x070B	; 0x80070b <tc_tccr3_ovf_callback>
    2e0e:	f0 91 0c 07 	lds	r31, 0x070C	; 0x80070c <tc_tccr3_ovf_callback+0x1>
    2e12:	30 97       	sbiw	r30, 0x00	; 0
    2e14:	09 f0       	breq	.+2      	; 0x2e18 <__vector_35+0x34>
		tc_tccr3_ovf_callback();
    2e16:	19 95       	eicall
	}
}
    2e18:	ff 91       	pop	r31
    2e1a:	ef 91       	pop	r30
    2e1c:	bf 91       	pop	r27
    2e1e:	af 91       	pop	r26
    2e20:	9f 91       	pop	r25
    2e22:	8f 91       	pop	r24
    2e24:	7f 91       	pop	r23
    2e26:	6f 91       	pop	r22
    2e28:	5f 91       	pop	r21
    2e2a:	4f 91       	pop	r20
    2e2c:	3f 91       	pop	r19
    2e2e:	2f 91       	pop	r18
    2e30:	0f 90       	pop	r0
    2e32:	0b be       	out	0x3b, r0	; 59
    2e34:	0f 90       	pop	r0
    2e36:	0f be       	out	0x3f, r0	; 63
    2e38:	0f 90       	pop	r0
    2e3a:	1f 90       	pop	r1
    2e3c:	18 95       	reti

00002e3e <__vector_32>:

ISR(TIMER3_COMPA_vect)
{
    2e3e:	1f 92       	push	r1
    2e40:	0f 92       	push	r0
    2e42:	0f b6       	in	r0, 0x3f	; 63
    2e44:	0f 92       	push	r0
    2e46:	11 24       	eor	r1, r1
    2e48:	0b b6       	in	r0, 0x3b	; 59
    2e4a:	0f 92       	push	r0
    2e4c:	2f 93       	push	r18
    2e4e:	3f 93       	push	r19
    2e50:	4f 93       	push	r20
    2e52:	5f 93       	push	r21
    2e54:	6f 93       	push	r22
    2e56:	7f 93       	push	r23
    2e58:	8f 93       	push	r24
    2e5a:	9f 93       	push	r25
    2e5c:	af 93       	push	r26
    2e5e:	bf 93       	push	r27
    2e60:	ef 93       	push	r30
    2e62:	ff 93       	push	r31
	if (tc_tccr3_compa_callback) {
    2e64:	e0 91 09 07 	lds	r30, 0x0709	; 0x800709 <tc_tccr3_compa_callback>
    2e68:	f0 91 0a 07 	lds	r31, 0x070A	; 0x80070a <tc_tccr3_compa_callback+0x1>
    2e6c:	30 97       	sbiw	r30, 0x00	; 0
    2e6e:	09 f0       	breq	.+2      	; 0x2e72 <__vector_32+0x34>
		tc_tccr3_compa_callback();
    2e70:	19 95       	eicall
	}
}
    2e72:	ff 91       	pop	r31
    2e74:	ef 91       	pop	r30
    2e76:	bf 91       	pop	r27
    2e78:	af 91       	pop	r26
    2e7a:	9f 91       	pop	r25
    2e7c:	8f 91       	pop	r24
    2e7e:	7f 91       	pop	r23
    2e80:	6f 91       	pop	r22
    2e82:	5f 91       	pop	r21
    2e84:	4f 91       	pop	r20
    2e86:	3f 91       	pop	r19
    2e88:	2f 91       	pop	r18
    2e8a:	0f 90       	pop	r0
    2e8c:	0b be       	out	0x3b, r0	; 59
    2e8e:	0f 90       	pop	r0
    2e90:	0f be       	out	0x3f, r0	; 63
    2e92:	0f 90       	pop	r0
    2e94:	1f 90       	pop	r1
    2e96:	18 95       	reti

00002e98 <__vector_33>:

ISR(TIMER3_COMPB_vect)
{
    2e98:	1f 92       	push	r1
    2e9a:	0f 92       	push	r0
    2e9c:	0f b6       	in	r0, 0x3f	; 63
    2e9e:	0f 92       	push	r0
    2ea0:	11 24       	eor	r1, r1
    2ea2:	0b b6       	in	r0, 0x3b	; 59
    2ea4:	0f 92       	push	r0
    2ea6:	2f 93       	push	r18
    2ea8:	3f 93       	push	r19
    2eaa:	4f 93       	push	r20
    2eac:	5f 93       	push	r21
    2eae:	6f 93       	push	r22
    2eb0:	7f 93       	push	r23
    2eb2:	8f 93       	push	r24
    2eb4:	9f 93       	push	r25
    2eb6:	af 93       	push	r26
    2eb8:	bf 93       	push	r27
    2eba:	ef 93       	push	r30
    2ebc:	ff 93       	push	r31
	if (tc_tccr3_compb_callback) {
    2ebe:	e0 91 07 07 	lds	r30, 0x0707	; 0x800707 <tc_tccr3_compb_callback>
    2ec2:	f0 91 08 07 	lds	r31, 0x0708	; 0x800708 <tc_tccr3_compb_callback+0x1>
    2ec6:	30 97       	sbiw	r30, 0x00	; 0
    2ec8:	09 f0       	breq	.+2      	; 0x2ecc <__vector_33+0x34>
		tc_tccr3_compb_callback();
    2eca:	19 95       	eicall
	}
}
    2ecc:	ff 91       	pop	r31
    2ece:	ef 91       	pop	r30
    2ed0:	bf 91       	pop	r27
    2ed2:	af 91       	pop	r26
    2ed4:	9f 91       	pop	r25
    2ed6:	8f 91       	pop	r24
    2ed8:	7f 91       	pop	r23
    2eda:	6f 91       	pop	r22
    2edc:	5f 91       	pop	r21
    2ede:	4f 91       	pop	r20
    2ee0:	3f 91       	pop	r19
    2ee2:	2f 91       	pop	r18
    2ee4:	0f 90       	pop	r0
    2ee6:	0b be       	out	0x3b, r0	; 59
    2ee8:	0f 90       	pop	r0
    2eea:	0f be       	out	0x3f, r0	; 63
    2eec:	0f 90       	pop	r0
    2eee:	1f 90       	pop	r1
    2ef0:	18 95       	reti

00002ef2 <__vector_34>:

ISR(TIMER3_COMPC_vect)
{
    2ef2:	1f 92       	push	r1
    2ef4:	0f 92       	push	r0
    2ef6:	0f b6       	in	r0, 0x3f	; 63
    2ef8:	0f 92       	push	r0
    2efa:	11 24       	eor	r1, r1
    2efc:	0b b6       	in	r0, 0x3b	; 59
    2efe:	0f 92       	push	r0
    2f00:	2f 93       	push	r18
    2f02:	3f 93       	push	r19
    2f04:	4f 93       	push	r20
    2f06:	5f 93       	push	r21
    2f08:	6f 93       	push	r22
    2f0a:	7f 93       	push	r23
    2f0c:	8f 93       	push	r24
    2f0e:	9f 93       	push	r25
    2f10:	af 93       	push	r26
    2f12:	bf 93       	push	r27
    2f14:	ef 93       	push	r30
    2f16:	ff 93       	push	r31
	if (tc_tccr3_compc_callback) {
    2f18:	e0 91 05 07 	lds	r30, 0x0705	; 0x800705 <tc_tccr3_compc_callback>
    2f1c:	f0 91 06 07 	lds	r31, 0x0706	; 0x800706 <tc_tccr3_compc_callback+0x1>
    2f20:	30 97       	sbiw	r30, 0x00	; 0
    2f22:	09 f0       	breq	.+2      	; 0x2f26 <__vector_34+0x34>
		tc_tccr3_compc_callback();
    2f24:	19 95       	eicall
	}
}
    2f26:	ff 91       	pop	r31
    2f28:	ef 91       	pop	r30
    2f2a:	bf 91       	pop	r27
    2f2c:	af 91       	pop	r26
    2f2e:	9f 91       	pop	r25
    2f30:	8f 91       	pop	r24
    2f32:	7f 91       	pop	r23
    2f34:	6f 91       	pop	r22
    2f36:	5f 91       	pop	r21
    2f38:	4f 91       	pop	r20
    2f3a:	3f 91       	pop	r19
    2f3c:	2f 91       	pop	r18
    2f3e:	0f 90       	pop	r0
    2f40:	0b be       	out	0x3b, r0	; 59
    2f42:	0f 90       	pop	r0
    2f44:	0f be       	out	0x3f, r0	; 63
    2f46:	0f 90       	pop	r0
    2f48:	1f 90       	pop	r1
    2f4a:	18 95       	reti

00002f4c <__vector_45>:
static tc_callback_t tc_tccr4_compa_callback;
static tc_callback_t tc_tccr4_compb_callback;
static tc_callback_t tc_tccr4_compc_callback;

ISR(TIMER4_OVF_vect)
{
    2f4c:	1f 92       	push	r1
    2f4e:	0f 92       	push	r0
    2f50:	0f b6       	in	r0, 0x3f	; 63
    2f52:	0f 92       	push	r0
    2f54:	11 24       	eor	r1, r1
    2f56:	0b b6       	in	r0, 0x3b	; 59
    2f58:	0f 92       	push	r0
    2f5a:	2f 93       	push	r18
    2f5c:	3f 93       	push	r19
    2f5e:	4f 93       	push	r20
    2f60:	5f 93       	push	r21
    2f62:	6f 93       	push	r22
    2f64:	7f 93       	push	r23
    2f66:	8f 93       	push	r24
    2f68:	9f 93       	push	r25
    2f6a:	af 93       	push	r26
    2f6c:	bf 93       	push	r27
    2f6e:	ef 93       	push	r30
    2f70:	ff 93       	push	r31
	if (tc_tccr4_ovf_callback) {
    2f72:	e0 91 03 07 	lds	r30, 0x0703	; 0x800703 <tc_tccr4_ovf_callback>
    2f76:	f0 91 04 07 	lds	r31, 0x0704	; 0x800704 <tc_tccr4_ovf_callback+0x1>
    2f7a:	30 97       	sbiw	r30, 0x00	; 0
    2f7c:	09 f0       	breq	.+2      	; 0x2f80 <__vector_45+0x34>
		tc_tccr4_ovf_callback();
    2f7e:	19 95       	eicall
	}
}
    2f80:	ff 91       	pop	r31
    2f82:	ef 91       	pop	r30
    2f84:	bf 91       	pop	r27
    2f86:	af 91       	pop	r26
    2f88:	9f 91       	pop	r25
    2f8a:	8f 91       	pop	r24
    2f8c:	7f 91       	pop	r23
    2f8e:	6f 91       	pop	r22
    2f90:	5f 91       	pop	r21
    2f92:	4f 91       	pop	r20
    2f94:	3f 91       	pop	r19
    2f96:	2f 91       	pop	r18
    2f98:	0f 90       	pop	r0
    2f9a:	0b be       	out	0x3b, r0	; 59
    2f9c:	0f 90       	pop	r0
    2f9e:	0f be       	out	0x3f, r0	; 63
    2fa0:	0f 90       	pop	r0
    2fa2:	1f 90       	pop	r1
    2fa4:	18 95       	reti

00002fa6 <__vector_42>:

ISR(TIMER4_COMPA_vect)
{
    2fa6:	1f 92       	push	r1
    2fa8:	0f 92       	push	r0
    2faa:	0f b6       	in	r0, 0x3f	; 63
    2fac:	0f 92       	push	r0
    2fae:	11 24       	eor	r1, r1
    2fb0:	0b b6       	in	r0, 0x3b	; 59
    2fb2:	0f 92       	push	r0
    2fb4:	2f 93       	push	r18
    2fb6:	3f 93       	push	r19
    2fb8:	4f 93       	push	r20
    2fba:	5f 93       	push	r21
    2fbc:	6f 93       	push	r22
    2fbe:	7f 93       	push	r23
    2fc0:	8f 93       	push	r24
    2fc2:	9f 93       	push	r25
    2fc4:	af 93       	push	r26
    2fc6:	bf 93       	push	r27
    2fc8:	ef 93       	push	r30
    2fca:	ff 93       	push	r31
	if (tc_tccr4_compa_callback) {
    2fcc:	e0 91 01 07 	lds	r30, 0x0701	; 0x800701 <tc_tccr4_compa_callback>
    2fd0:	f0 91 02 07 	lds	r31, 0x0702	; 0x800702 <tc_tccr4_compa_callback+0x1>
    2fd4:	30 97       	sbiw	r30, 0x00	; 0
    2fd6:	09 f0       	breq	.+2      	; 0x2fda <__vector_42+0x34>
		tc_tccr4_compa_callback();
    2fd8:	19 95       	eicall
	}
}
    2fda:	ff 91       	pop	r31
    2fdc:	ef 91       	pop	r30
    2fde:	bf 91       	pop	r27
    2fe0:	af 91       	pop	r26
    2fe2:	9f 91       	pop	r25
    2fe4:	8f 91       	pop	r24
    2fe6:	7f 91       	pop	r23
    2fe8:	6f 91       	pop	r22
    2fea:	5f 91       	pop	r21
    2fec:	4f 91       	pop	r20
    2fee:	3f 91       	pop	r19
    2ff0:	2f 91       	pop	r18
    2ff2:	0f 90       	pop	r0
    2ff4:	0b be       	out	0x3b, r0	; 59
    2ff6:	0f 90       	pop	r0
    2ff8:	0f be       	out	0x3f, r0	; 63
    2ffa:	0f 90       	pop	r0
    2ffc:	1f 90       	pop	r1
    2ffe:	18 95       	reti

00003000 <__vector_43>:

ISR(TIMER4_COMPB_vect)
{
    3000:	1f 92       	push	r1
    3002:	0f 92       	push	r0
    3004:	0f b6       	in	r0, 0x3f	; 63
    3006:	0f 92       	push	r0
    3008:	11 24       	eor	r1, r1
    300a:	0b b6       	in	r0, 0x3b	; 59
    300c:	0f 92       	push	r0
    300e:	2f 93       	push	r18
    3010:	3f 93       	push	r19
    3012:	4f 93       	push	r20
    3014:	5f 93       	push	r21
    3016:	6f 93       	push	r22
    3018:	7f 93       	push	r23
    301a:	8f 93       	push	r24
    301c:	9f 93       	push	r25
    301e:	af 93       	push	r26
    3020:	bf 93       	push	r27
    3022:	ef 93       	push	r30
    3024:	ff 93       	push	r31
	if (tc_tccr4_compb_callback) {
    3026:	e0 91 ff 06 	lds	r30, 0x06FF	; 0x8006ff <tc_tccr4_compb_callback>
    302a:	f0 91 00 07 	lds	r31, 0x0700	; 0x800700 <tc_tccr4_compb_callback+0x1>
    302e:	30 97       	sbiw	r30, 0x00	; 0
    3030:	09 f0       	breq	.+2      	; 0x3034 <__vector_43+0x34>
		tc_tccr4_compb_callback();
    3032:	19 95       	eicall
	}
}
    3034:	ff 91       	pop	r31
    3036:	ef 91       	pop	r30
    3038:	bf 91       	pop	r27
    303a:	af 91       	pop	r26
    303c:	9f 91       	pop	r25
    303e:	8f 91       	pop	r24
    3040:	7f 91       	pop	r23
    3042:	6f 91       	pop	r22
    3044:	5f 91       	pop	r21
    3046:	4f 91       	pop	r20
    3048:	3f 91       	pop	r19
    304a:	2f 91       	pop	r18
    304c:	0f 90       	pop	r0
    304e:	0b be       	out	0x3b, r0	; 59
    3050:	0f 90       	pop	r0
    3052:	0f be       	out	0x3f, r0	; 63
    3054:	0f 90       	pop	r0
    3056:	1f 90       	pop	r1
    3058:	18 95       	reti

0000305a <__vector_44>:

ISR(TIMER4_COMPC_vect)
{
    305a:	1f 92       	push	r1
    305c:	0f 92       	push	r0
    305e:	0f b6       	in	r0, 0x3f	; 63
    3060:	0f 92       	push	r0
    3062:	11 24       	eor	r1, r1
    3064:	0b b6       	in	r0, 0x3b	; 59
    3066:	0f 92       	push	r0
    3068:	2f 93       	push	r18
    306a:	3f 93       	push	r19
    306c:	4f 93       	push	r20
    306e:	5f 93       	push	r21
    3070:	6f 93       	push	r22
    3072:	7f 93       	push	r23
    3074:	8f 93       	push	r24
    3076:	9f 93       	push	r25
    3078:	af 93       	push	r26
    307a:	bf 93       	push	r27
    307c:	ef 93       	push	r30
    307e:	ff 93       	push	r31
	if (tc_tccr4_compc_callback) {
    3080:	e0 91 fd 06 	lds	r30, 0x06FD	; 0x8006fd <tc_tccr4_compc_callback>
    3084:	f0 91 fe 06 	lds	r31, 0x06FE	; 0x8006fe <tc_tccr4_compc_callback+0x1>
    3088:	30 97       	sbiw	r30, 0x00	; 0
    308a:	09 f0       	breq	.+2      	; 0x308e <__vector_44+0x34>
		tc_tccr4_compc_callback();
    308c:	19 95       	eicall
	}
}
    308e:	ff 91       	pop	r31
    3090:	ef 91       	pop	r30
    3092:	bf 91       	pop	r27
    3094:	af 91       	pop	r26
    3096:	9f 91       	pop	r25
    3098:	8f 91       	pop	r24
    309a:	7f 91       	pop	r23
    309c:	6f 91       	pop	r22
    309e:	5f 91       	pop	r21
    30a0:	4f 91       	pop	r20
    30a2:	3f 91       	pop	r19
    30a4:	2f 91       	pop	r18
    30a6:	0f 90       	pop	r0
    30a8:	0b be       	out	0x3b, r0	; 59
    30aa:	0f 90       	pop	r0
    30ac:	0f be       	out	0x3f, r0	; 63
    30ae:	0f 90       	pop	r0
    30b0:	1f 90       	pop	r1
    30b2:	18 95       	reti

000030b4 <__vector_50>:
static tc_callback_t tc_tccr5_compa_callback;
static tc_callback_t tc_tccr5_compb_callback;
static tc_callback_t tc_tccr5_compc_callback;

ISR(TIMER5_OVF_vect)
{
    30b4:	1f 92       	push	r1
    30b6:	0f 92       	push	r0
    30b8:	0f b6       	in	r0, 0x3f	; 63
    30ba:	0f 92       	push	r0
    30bc:	11 24       	eor	r1, r1
    30be:	0b b6       	in	r0, 0x3b	; 59
    30c0:	0f 92       	push	r0
    30c2:	2f 93       	push	r18
    30c4:	3f 93       	push	r19
    30c6:	4f 93       	push	r20
    30c8:	5f 93       	push	r21
    30ca:	6f 93       	push	r22
    30cc:	7f 93       	push	r23
    30ce:	8f 93       	push	r24
    30d0:	9f 93       	push	r25
    30d2:	af 93       	push	r26
    30d4:	bf 93       	push	r27
    30d6:	ef 93       	push	r30
    30d8:	ff 93       	push	r31
	if (tc_tccr5_ovf_callback) {
    30da:	e0 91 fb 06 	lds	r30, 0x06FB	; 0x8006fb <tc_tccr5_ovf_callback>
    30de:	f0 91 fc 06 	lds	r31, 0x06FC	; 0x8006fc <tc_tccr5_ovf_callback+0x1>
    30e2:	30 97       	sbiw	r30, 0x00	; 0
    30e4:	09 f0       	breq	.+2      	; 0x30e8 <__vector_50+0x34>
		tc_tccr5_ovf_callback();
    30e6:	19 95       	eicall
	}
}
    30e8:	ff 91       	pop	r31
    30ea:	ef 91       	pop	r30
    30ec:	bf 91       	pop	r27
    30ee:	af 91       	pop	r26
    30f0:	9f 91       	pop	r25
    30f2:	8f 91       	pop	r24
    30f4:	7f 91       	pop	r23
    30f6:	6f 91       	pop	r22
    30f8:	5f 91       	pop	r21
    30fa:	4f 91       	pop	r20
    30fc:	3f 91       	pop	r19
    30fe:	2f 91       	pop	r18
    3100:	0f 90       	pop	r0
    3102:	0b be       	out	0x3b, r0	; 59
    3104:	0f 90       	pop	r0
    3106:	0f be       	out	0x3f, r0	; 63
    3108:	0f 90       	pop	r0
    310a:	1f 90       	pop	r1
    310c:	18 95       	reti

0000310e <__vector_47>:

ISR(TIMER5_COMPA_vect)
{
    310e:	1f 92       	push	r1
    3110:	0f 92       	push	r0
    3112:	0f b6       	in	r0, 0x3f	; 63
    3114:	0f 92       	push	r0
    3116:	11 24       	eor	r1, r1
    3118:	0b b6       	in	r0, 0x3b	; 59
    311a:	0f 92       	push	r0
    311c:	2f 93       	push	r18
    311e:	3f 93       	push	r19
    3120:	4f 93       	push	r20
    3122:	5f 93       	push	r21
    3124:	6f 93       	push	r22
    3126:	7f 93       	push	r23
    3128:	8f 93       	push	r24
    312a:	9f 93       	push	r25
    312c:	af 93       	push	r26
    312e:	bf 93       	push	r27
    3130:	ef 93       	push	r30
    3132:	ff 93       	push	r31
	if (tc_tccr5_compa_callback) {
    3134:	e0 91 f9 06 	lds	r30, 0x06F9	; 0x8006f9 <tc_tccr5_compa_callback>
    3138:	f0 91 fa 06 	lds	r31, 0x06FA	; 0x8006fa <tc_tccr5_compa_callback+0x1>
    313c:	30 97       	sbiw	r30, 0x00	; 0
    313e:	09 f0       	breq	.+2      	; 0x3142 <__vector_47+0x34>
		tc_tccr5_compa_callback();
    3140:	19 95       	eicall
	}
}
    3142:	ff 91       	pop	r31
    3144:	ef 91       	pop	r30
    3146:	bf 91       	pop	r27
    3148:	af 91       	pop	r26
    314a:	9f 91       	pop	r25
    314c:	8f 91       	pop	r24
    314e:	7f 91       	pop	r23
    3150:	6f 91       	pop	r22
    3152:	5f 91       	pop	r21
    3154:	4f 91       	pop	r20
    3156:	3f 91       	pop	r19
    3158:	2f 91       	pop	r18
    315a:	0f 90       	pop	r0
    315c:	0b be       	out	0x3b, r0	; 59
    315e:	0f 90       	pop	r0
    3160:	0f be       	out	0x3f, r0	; 63
    3162:	0f 90       	pop	r0
    3164:	1f 90       	pop	r1
    3166:	18 95       	reti

00003168 <__vector_48>:

ISR(TIMER5_COMPB_vect)
{
    3168:	1f 92       	push	r1
    316a:	0f 92       	push	r0
    316c:	0f b6       	in	r0, 0x3f	; 63
    316e:	0f 92       	push	r0
    3170:	11 24       	eor	r1, r1
    3172:	0b b6       	in	r0, 0x3b	; 59
    3174:	0f 92       	push	r0
    3176:	2f 93       	push	r18
    3178:	3f 93       	push	r19
    317a:	4f 93       	push	r20
    317c:	5f 93       	push	r21
    317e:	6f 93       	push	r22
    3180:	7f 93       	push	r23
    3182:	8f 93       	push	r24
    3184:	9f 93       	push	r25
    3186:	af 93       	push	r26
    3188:	bf 93       	push	r27
    318a:	ef 93       	push	r30
    318c:	ff 93       	push	r31
	if (tc_tccr5_compb_callback) {
    318e:	e0 91 f7 06 	lds	r30, 0x06F7	; 0x8006f7 <tc_tccr5_compb_callback>
    3192:	f0 91 f8 06 	lds	r31, 0x06F8	; 0x8006f8 <tc_tccr5_compb_callback+0x1>
    3196:	30 97       	sbiw	r30, 0x00	; 0
    3198:	09 f0       	breq	.+2      	; 0x319c <__vector_48+0x34>
		tc_tccr5_compb_callback();
    319a:	19 95       	eicall
	}
}
    319c:	ff 91       	pop	r31
    319e:	ef 91       	pop	r30
    31a0:	bf 91       	pop	r27
    31a2:	af 91       	pop	r26
    31a4:	9f 91       	pop	r25
    31a6:	8f 91       	pop	r24
    31a8:	7f 91       	pop	r23
    31aa:	6f 91       	pop	r22
    31ac:	5f 91       	pop	r21
    31ae:	4f 91       	pop	r20
    31b0:	3f 91       	pop	r19
    31b2:	2f 91       	pop	r18
    31b4:	0f 90       	pop	r0
    31b6:	0b be       	out	0x3b, r0	; 59
    31b8:	0f 90       	pop	r0
    31ba:	0f be       	out	0x3f, r0	; 63
    31bc:	0f 90       	pop	r0
    31be:	1f 90       	pop	r1
    31c0:	18 95       	reti

000031c2 <__vector_49>:

ISR(TIMER5_COMPC_vect)
{
    31c2:	1f 92       	push	r1
    31c4:	0f 92       	push	r0
    31c6:	0f b6       	in	r0, 0x3f	; 63
    31c8:	0f 92       	push	r0
    31ca:	11 24       	eor	r1, r1
    31cc:	0b b6       	in	r0, 0x3b	; 59
    31ce:	0f 92       	push	r0
    31d0:	2f 93       	push	r18
    31d2:	3f 93       	push	r19
    31d4:	4f 93       	push	r20
    31d6:	5f 93       	push	r21
    31d8:	6f 93       	push	r22
    31da:	7f 93       	push	r23
    31dc:	8f 93       	push	r24
    31de:	9f 93       	push	r25
    31e0:	af 93       	push	r26
    31e2:	bf 93       	push	r27
    31e4:	ef 93       	push	r30
    31e6:	ff 93       	push	r31
	if (tc_tccr5_compc_callback) {
    31e8:	e0 91 f5 06 	lds	r30, 0x06F5	; 0x8006f5 <tc_tccr5_compc_callback>
    31ec:	f0 91 f6 06 	lds	r31, 0x06F6	; 0x8006f6 <tc_tccr5_compc_callback+0x1>
    31f0:	30 97       	sbiw	r30, 0x00	; 0
    31f2:	09 f0       	breq	.+2      	; 0x31f6 <__vector_49+0x34>
		tc_tccr5_compc_callback();
    31f4:	19 95       	eicall
	}
}
    31f6:	ff 91       	pop	r31
    31f8:	ef 91       	pop	r30
    31fa:	bf 91       	pop	r27
    31fc:	af 91       	pop	r26
    31fe:	9f 91       	pop	r25
    3200:	8f 91       	pop	r24
    3202:	7f 91       	pop	r23
    3204:	6f 91       	pop	r22
    3206:	5f 91       	pop	r21
    3208:	4f 91       	pop	r20
    320a:	3f 91       	pop	r19
    320c:	2f 91       	pop	r18
    320e:	0f 90       	pop	r0
    3210:	0b be       	out	0x3b, r0	; 59
    3212:	0f 90       	pop	r0
    3214:	0f be       	out	0x3f, r0	; 63
    3216:	0f 90       	pop	r0
    3218:	1f 90       	pop	r1
    321a:	18 95       	reti

0000321c <tc_enable>:

void tc_enable(volatile void *tc)
{
    321c:	1f 93       	push	r17
    321e:	cf 93       	push	r28
    3220:	df 93       	push	r29
    3222:	1f 92       	push	r1
    3224:	cd b7       	in	r28, 0x3d	; 61
    3226:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    3228:	2f b7       	in	r18, 0x3f	; 63
    322a:	29 83       	std	Y+1, r18	; 0x01
	cpu_irq_disable();
    322c:	f8 94       	cli
	return flags;
    322e:	19 81       	ldd	r17, Y+1	; 0x01
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
    3230:	00 97       	sbiw	r24, 0x00	; 0
    3232:	09 f4       	brne	.+2      	; 0x3236 <tc_enable+0x1a>
    3234:	64 c0       	rjmp	.+200    	; 0x32fe <tc_enable+0xe2>
		Assert(false);
	}

#if !MEGA_XX_UN0 && !MEGA_XX_UN1
	else if (module == &ADC) {
    3236:	88 37       	cpi	r24, 0x78	; 120
    3238:	91 05       	cpc	r25, r1
    323a:	49 f4       	brne	.+18     	; 0x324e <tc_enable+0x32>
		sysclk_enable_module(POWER_RED_REG0, PRADC_bm);
    323c:	61 e0       	ldi	r22, 0x01	; 1
    323e:	80 e0       	ldi	r24, 0x00	; 0
    3240:	0e 94 d6 08 	call	0x11ac	; 0x11ac <sysclk_enable_module>
#if MEGA_RF
		sysclk_enable_module(POWER_RED_REG0, PRPGA_bm);
    3244:	60 e1       	ldi	r22, 0x10	; 16
    3246:	80 e0       	ldi	r24, 0x00	; 0
    3248:	0e 94 d6 08 	call	0x11ac	; 0x11ac <sysclk_enable_module>
    324c:	58 c0       	rjmp	.+176    	; 0x32fe <tc_enable+0xe2>
#endif
	}
#if !MEGA_UNCATEGORIZED
	else if (module == &UCSR0A) {
    324e:	80 3c       	cpi	r24, 0xC0	; 192
    3250:	91 05       	cpc	r25, r1
    3252:	29 f4       	brne	.+10     	; 0x325e <tc_enable+0x42>
		sysclk_enable_module(POWER_RED_REG0, PRUSART0_bm);
    3254:	62 e0       	ldi	r22, 0x02	; 2
    3256:	80 e0       	ldi	r24, 0x00	; 0
    3258:	0e 94 d6 08 	call	0x11ac	; 0x11ac <sysclk_enable_module>
    325c:	50 c0       	rjmp	.+160    	; 0x32fe <tc_enable+0xe2>
	}
#endif
#if MEGA_RF
	else if (module == &SPCR) {
    325e:	8c 34       	cpi	r24, 0x4C	; 76
    3260:	91 05       	cpc	r25, r1
    3262:	29 f4       	brne	.+10     	; 0x326e <tc_enable+0x52>
		sysclk_enable_module(POWER_RED_REG0, PRSPI_bm);
    3264:	64 e0       	ldi	r22, 0x04	; 4
    3266:	80 e0       	ldi	r24, 0x00	; 0
    3268:	0e 94 d6 08 	call	0x11ac	; 0x11ac <sysclk_enable_module>
    326c:	48 c0       	rjmp	.+144    	; 0x32fe <tc_enable+0xe2>
	}
#endif

	else if (module == &TCCR1A) {
    326e:	80 38       	cpi	r24, 0x80	; 128
    3270:	91 05       	cpc	r25, r1
    3272:	29 f4       	brne	.+10     	; 0x327e <tc_enable+0x62>
		sysclk_enable_module(POWER_RED_REG0, PRTIM1_bm);
    3274:	68 e0       	ldi	r22, 0x08	; 8
    3276:	80 e0       	ldi	r24, 0x00	; 0
    3278:	0e 94 d6 08 	call	0x11ac	; 0x11ac <sysclk_enable_module>
    327c:	40 c0       	rjmp	.+128    	; 0x32fe <tc_enable+0xe2>
		sysclk_enable_module(POWER_RED_REG0, PRLCD_bm);
	}
#endif

#if !MEGA_XX_UN2 && !MEGA_UNCATEGORIZED
	else if (module == &TCCR0A) {
    327e:	84 34       	cpi	r24, 0x44	; 68
    3280:	91 05       	cpc	r25, r1
    3282:	29 f4       	brne	.+10     	; 0x328e <tc_enable+0x72>
		sysclk_enable_module(POWER_RED_REG0, PRTIM0_bm);
    3284:	60 e2       	ldi	r22, 0x20	; 32
    3286:	80 e0       	ldi	r24, 0x00	; 0
    3288:	0e 94 d6 08 	call	0x11ac	; 0x11ac <sysclk_enable_module>
    328c:	38 c0       	rjmp	.+112    	; 0x32fe <tc_enable+0xe2>
	} else if (module == &TCCR2A) {
    328e:	80 3b       	cpi	r24, 0xB0	; 176
    3290:	91 05       	cpc	r25, r1
    3292:	29 f4       	brne	.+10     	; 0x329e <tc_enable+0x82>
		sysclk_enable_module(POWER_RED_REG0, PRTIM2_bm);
    3294:	60 e4       	ldi	r22, 0x40	; 64
    3296:	80 e0       	ldi	r24, 0x00	; 0
    3298:	0e 94 d6 08 	call	0x11ac	; 0x11ac <sysclk_enable_module>
    329c:	30 c0       	rjmp	.+96     	; 0x32fe <tc_enable+0xe2>
#if AVR8_PART_IS_DEFINED(ATmega328PB) || AVR8_PART_IS_DEFINED(ATmega324PB)
	} else if (module == &TWBR0) {
		sysclk_enable_module(POWER_RED_REG0, PRTWI_bm);
	}
#else
	} else if (module == &TWBR) {
    329e:	88 3b       	cpi	r24, 0xB8	; 184
    32a0:	91 05       	cpc	r25, r1
    32a2:	29 f4       	brne	.+10     	; 0x32ae <tc_enable+0x92>
		sysclk_enable_module(POWER_RED_REG0, PRTWI_bm);
    32a4:	60 e8       	ldi	r22, 0x80	; 128
    32a6:	80 e0       	ldi	r24, 0x00	; 0
    32a8:	0e 94 d6 08 	call	0x11ac	; 0x11ac <sysclk_enable_module>
    32ac:	28 c0       	rjmp	.+80     	; 0x32fe <tc_enable+0xe2>
	}
#endif
#endif

#if MEGA_RF
	else if (module == &UCSR1A) {
    32ae:	88 3c       	cpi	r24, 0xC8	; 200
    32b0:	91 05       	cpc	r25, r1
    32b2:	29 f4       	brne	.+10     	; 0x32be <tc_enable+0xa2>
		sysclk_enable_module(POWER_RED_REG1, PRUSART1_bm);
    32b4:	61 e0       	ldi	r22, 0x01	; 1
    32b6:	81 e0       	ldi	r24, 0x01	; 1
    32b8:	0e 94 d6 08 	call	0x11ac	; 0x11ac <sysclk_enable_module>
    32bc:	20 c0       	rjmp	.+64     	; 0x32fe <tc_enable+0xe2>
	} else if (module == &TCCR3A) {
    32be:	80 39       	cpi	r24, 0x90	; 144
    32c0:	91 05       	cpc	r25, r1
    32c2:	29 f4       	brne	.+10     	; 0x32ce <tc_enable+0xb2>
		sysclk_enable_module(POWER_RED_REG1, PRTIM3_bm);
    32c4:	68 e0       	ldi	r22, 0x08	; 8
    32c6:	81 e0       	ldi	r24, 0x01	; 1
    32c8:	0e 94 d6 08 	call	0x11ac	; 0x11ac <sysclk_enable_module>
    32cc:	18 c0       	rjmp	.+48     	; 0x32fe <tc_enable+0xe2>
	} else if (module == &TCCR4A) {
    32ce:	80 3a       	cpi	r24, 0xA0	; 160
    32d0:	91 05       	cpc	r25, r1
    32d2:	29 f4       	brne	.+10     	; 0x32de <tc_enable+0xc2>
		sysclk_enable_module(POWER_RED_REG1, PRTIM4_bm);
    32d4:	60 e1       	ldi	r22, 0x10	; 16
    32d6:	81 e0       	ldi	r24, 0x01	; 1
    32d8:	0e 94 d6 08 	call	0x11ac	; 0x11ac <sysclk_enable_module>
    32dc:	10 c0       	rjmp	.+32     	; 0x32fe <tc_enable+0xe2>
	} else if (module == &TCCR5A) {
    32de:	80 32       	cpi	r24, 0x20	; 32
    32e0:	21 e0       	ldi	r18, 0x01	; 1
    32e2:	92 07       	cpc	r25, r18
    32e4:	29 f4       	brne	.+10     	; 0x32f0 <tc_enable+0xd4>
		sysclk_enable_module(POWER_RED_REG1, PRTIM5_bm);
    32e6:	60 e2       	ldi	r22, 0x20	; 32
    32e8:	81 e0       	ldi	r24, 0x01	; 1
    32ea:	0e 94 d6 08 	call	0x11ac	; 0x11ac <sysclk_enable_module>
    32ee:	07 c0       	rjmp	.+14     	; 0x32fe <tc_enable+0xe2>
	} else if (module == &TRX_CTRL_0) {
    32f0:	83 34       	cpi	r24, 0x43	; 67
    32f2:	91 40       	sbci	r25, 0x01	; 1
    32f4:	21 f4       	brne	.+8      	; 0x32fe <tc_enable+0xe2>
		sysclk_enable_module(POWER_RED_REG1, PRTRX24_bm);
    32f6:	60 e4       	ldi	r22, 0x40	; 64
    32f8:	81 e0       	ldi	r24, 0x01	; 1
    32fa:	0e 94 d6 08 	call	0x11ac	; 0x11ac <sysclk_enable_module>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    32fe:	1f bf       	out	0x3f, r17	; 63
	irqflags_t iflags = cpu_irq_save();

	sysclk_enable_peripheral_clock(tc);

	cpu_irq_restore(iflags);
}
    3300:	0f 90       	pop	r0
    3302:	df 91       	pop	r29
    3304:	cf 91       	pop	r28
    3306:	1f 91       	pop	r17
    3308:	08 95       	ret

0000330a <tc_disable>:

void tc_disable(volatile void *tc)
{
    330a:	1f 93       	push	r17
    330c:	cf 93       	push	r28
    330e:	df 93       	push	r29
    3310:	1f 92       	push	r1
    3312:	cd b7       	in	r28, 0x3d	; 61
    3314:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    3316:	2f b7       	in	r18, 0x3f	; 63
    3318:	29 83       	std	Y+1, r18	; 0x01
	cpu_irq_disable();
    331a:	f8 94       	cli
	return flags;
    331c:	19 81       	ldd	r17, Y+1	; 0x01
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_disable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
    331e:	00 97       	sbiw	r24, 0x00	; 0
    3320:	09 f4       	brne	.+2      	; 0x3324 <tc_disable+0x1a>
    3322:	64 c0       	rjmp	.+200    	; 0x33ec <tc_disable+0xe2>
		Assert(false);
	}

#if !MEGA_XX_UN0 && !MEGA_XX_UN1
	else if (module == &ADC) {
    3324:	88 37       	cpi	r24, 0x78	; 120
    3326:	91 05       	cpc	r25, r1
    3328:	49 f4       	brne	.+18     	; 0x333c <tc_disable+0x32>
		sysclk_disable_module(POWER_RED_REG0, PRADC_bm);
    332a:	61 e0       	ldi	r22, 0x01	; 1
    332c:	80 e0       	ldi	r24, 0x00	; 0
    332e:	0e 94 ee 08 	call	0x11dc	; 0x11dc <sysclk_disable_module>
#if MEGA_RF
		sysclk_disable_module(POWER_RED_REG0, PRPGA_bm);
    3332:	60 e1       	ldi	r22, 0x10	; 16
    3334:	80 e0       	ldi	r24, 0x00	; 0
    3336:	0e 94 ee 08 	call	0x11dc	; 0x11dc <sysclk_disable_module>
    333a:	58 c0       	rjmp	.+176    	; 0x33ec <tc_disable+0xe2>
#endif
	} 
#if !MEGA_UNCATEGORIZED
	else if (module == &UCSR0A) {
    333c:	80 3c       	cpi	r24, 0xC0	; 192
    333e:	91 05       	cpc	r25, r1
    3340:	29 f4       	brne	.+10     	; 0x334c <tc_disable+0x42>
		sysclk_disable_module(POWER_RED_REG0, PRUSART0_bm);
    3342:	62 e0       	ldi	r22, 0x02	; 2
    3344:	80 e0       	ldi	r24, 0x00	; 0
    3346:	0e 94 ee 08 	call	0x11dc	; 0x11dc <sysclk_disable_module>
    334a:	50 c0       	rjmp	.+160    	; 0x33ec <tc_disable+0xe2>
	}
#endif
#if MEGA_RF
	else if (module == &SPCR) {
    334c:	8c 34       	cpi	r24, 0x4C	; 76
    334e:	91 05       	cpc	r25, r1
    3350:	29 f4       	brne	.+10     	; 0x335c <tc_disable+0x52>
		sysclk_disable_module(POWER_RED_REG0, PRSPI_bm);
    3352:	64 e0       	ldi	r22, 0x04	; 4
    3354:	80 e0       	ldi	r24, 0x00	; 0
    3356:	0e 94 ee 08 	call	0x11dc	; 0x11dc <sysclk_disable_module>
    335a:	48 c0       	rjmp	.+144    	; 0x33ec <tc_disable+0xe2>
	}
#endif
	else if (module == &TCCR1A) {
    335c:	80 38       	cpi	r24, 0x80	; 128
    335e:	91 05       	cpc	r25, r1
    3360:	29 f4       	brne	.+10     	; 0x336c <tc_disable+0x62>
		sysclk_disable_module(POWER_RED_REG0, PRTIM1_bm);
    3362:	68 e0       	ldi	r22, 0x08	; 8
    3364:	80 e0       	ldi	r24, 0x00	; 0
    3366:	0e 94 ee 08 	call	0x11dc	; 0x11dc <sysclk_disable_module>
    336a:	40 c0       	rjmp	.+128    	; 0x33ec <tc_disable+0xe2>
	else if (module == &LCDCRA) {
		sysclk_disable_module(POWER_RED_REG0, PRLCD_bm);
	}
#endif
#if !MEGA_XX_UN2 && !MEGA_UNCATEGORIZED
	else if (module == &TCCR0A) {
    336c:	84 34       	cpi	r24, 0x44	; 68
    336e:	91 05       	cpc	r25, r1
    3370:	29 f4       	brne	.+10     	; 0x337c <tc_disable+0x72>
		sysclk_disable_module(POWER_RED_REG0, PRTIM0_bm);
    3372:	60 e2       	ldi	r22, 0x20	; 32
    3374:	80 e0       	ldi	r24, 0x00	; 0
    3376:	0e 94 ee 08 	call	0x11dc	; 0x11dc <sysclk_disable_module>
    337a:	38 c0       	rjmp	.+112    	; 0x33ec <tc_disable+0xe2>
	} else if (module == &TCCR2A) {
    337c:	80 3b       	cpi	r24, 0xB0	; 176
    337e:	91 05       	cpc	r25, r1
    3380:	29 f4       	brne	.+10     	; 0x338c <tc_disable+0x82>
		sysclk_disable_module(POWER_RED_REG0, PRTIM2_bm);
    3382:	60 e4       	ldi	r22, 0x40	; 64
    3384:	80 e0       	ldi	r24, 0x00	; 0
    3386:	0e 94 ee 08 	call	0x11dc	; 0x11dc <sysclk_disable_module>
    338a:	30 c0       	rjmp	.+96     	; 0x33ec <tc_disable+0xe2>
#if AVR8_PART_IS_DEFINED(ATmega328PB) || AVR8_PART_IS_DEFINED(ATmega324PB)
	} else if (module == &TWBR0) {
		sysclk_disable_module(POWER_RED_REG0, PRTWI_bm);
	}
#else
	} else if (module == &TWBR) {
    338c:	88 3b       	cpi	r24, 0xB8	; 184
    338e:	91 05       	cpc	r25, r1
    3390:	29 f4       	brne	.+10     	; 0x339c <tc_disable+0x92>
		sysclk_disable_module(POWER_RED_REG0, PRTWI_bm);
    3392:	60 e8       	ldi	r22, 0x80	; 128
    3394:	80 e0       	ldi	r24, 0x00	; 0
    3396:	0e 94 ee 08 	call	0x11dc	; 0x11dc <sysclk_disable_module>
    339a:	28 c0       	rjmp	.+80     	; 0x33ec <tc_disable+0xe2>
	}
#endif
#endif

#if MEGA_RF
	else if (module == &UCSR1A) {
    339c:	88 3c       	cpi	r24, 0xC8	; 200
    339e:	91 05       	cpc	r25, r1
    33a0:	29 f4       	brne	.+10     	; 0x33ac <tc_disable+0xa2>
		sysclk_disable_module(POWER_RED_REG1, PRUSART1_bm);
    33a2:	61 e0       	ldi	r22, 0x01	; 1
    33a4:	81 e0       	ldi	r24, 0x01	; 1
    33a6:	0e 94 ee 08 	call	0x11dc	; 0x11dc <sysclk_disable_module>
    33aa:	20 c0       	rjmp	.+64     	; 0x33ec <tc_disable+0xe2>
	} else if (module == &TCCR3A) {
    33ac:	80 39       	cpi	r24, 0x90	; 144
    33ae:	91 05       	cpc	r25, r1
    33b0:	29 f4       	brne	.+10     	; 0x33bc <tc_disable+0xb2>
		sysclk_disable_module(POWER_RED_REG1, PRTIM3_bm);
    33b2:	68 e0       	ldi	r22, 0x08	; 8
    33b4:	81 e0       	ldi	r24, 0x01	; 1
    33b6:	0e 94 ee 08 	call	0x11dc	; 0x11dc <sysclk_disable_module>
    33ba:	18 c0       	rjmp	.+48     	; 0x33ec <tc_disable+0xe2>
	} else if (module == &TCCR4A) {
    33bc:	80 3a       	cpi	r24, 0xA0	; 160
    33be:	91 05       	cpc	r25, r1
    33c0:	29 f4       	brne	.+10     	; 0x33cc <tc_disable+0xc2>
		sysclk_disable_module(POWER_RED_REG1, PRTIM4_bm);
    33c2:	60 e1       	ldi	r22, 0x10	; 16
    33c4:	81 e0       	ldi	r24, 0x01	; 1
    33c6:	0e 94 ee 08 	call	0x11dc	; 0x11dc <sysclk_disable_module>
    33ca:	10 c0       	rjmp	.+32     	; 0x33ec <tc_disable+0xe2>
	} else if (module == &TCCR5A) {
    33cc:	80 32       	cpi	r24, 0x20	; 32
    33ce:	21 e0       	ldi	r18, 0x01	; 1
    33d0:	92 07       	cpc	r25, r18
    33d2:	29 f4       	brne	.+10     	; 0x33de <tc_disable+0xd4>
		sysclk_disable_module(POWER_RED_REG1, PRTIM5_bm);
    33d4:	60 e2       	ldi	r22, 0x20	; 32
    33d6:	81 e0       	ldi	r24, 0x01	; 1
    33d8:	0e 94 ee 08 	call	0x11dc	; 0x11dc <sysclk_disable_module>
    33dc:	07 c0       	rjmp	.+14     	; 0x33ec <tc_disable+0xe2>
	} else if (module == &TRX_CTRL_0) {
    33de:	83 34       	cpi	r24, 0x43	; 67
    33e0:	91 40       	sbci	r25, 0x01	; 1
    33e2:	21 f4       	brne	.+8      	; 0x33ec <tc_disable+0xe2>
		sysclk_disable_module(POWER_RED_REG1, PRTRX24_bm);
    33e4:	60 e4       	ldi	r22, 0x40	; 64
    33e6:	81 e0       	ldi	r24, 0x01	; 1
    33e8:	0e 94 ee 08 	call	0x11dc	; 0x11dc <sysclk_disable_module>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    33ec:	1f bf       	out	0x3f, r17	; 63
	irqflags_t iflags = cpu_irq_save();

	sysclk_disable_peripheral_clock(tc);

	cpu_irq_restore(iflags);
}
    33ee:	0f 90       	pop	r0
    33f0:	df 91       	pop	r29
    33f2:	cf 91       	pop	r28
    33f4:	1f 91       	pop	r17
    33f6:	08 95       	ret

000033f8 <tc_set_overflow_interrupt_callback>:

void tc_set_overflow_interrupt_callback(volatile void *tc,
		tc_callback_t callback)
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
    33f8:	80 38       	cpi	r24, 0x80	; 128
    33fa:	91 05       	cpc	r25, r1
    33fc:	29 f4       	brne	.+10     	; 0x3408 <tc_set_overflow_interrupt_callback+0x10>
		tc_tccr1_ovf_callback = callback;
    33fe:	70 93 14 07 	sts	0x0714, r23	; 0x800714 <tc_tccr1_ovf_callback+0x1>
    3402:	60 93 13 07 	sts	0x0713, r22	; 0x800713 <tc_tccr1_ovf_callback>
    3406:	08 95       	ret
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR3A) {
    3408:	80 39       	cpi	r24, 0x90	; 144
    340a:	91 05       	cpc	r25, r1
    340c:	29 f4       	brne	.+10     	; 0x3418 <tc_set_overflow_interrupt_callback+0x20>
		tc_tccr3_ovf_callback = callback;
    340e:	70 93 0c 07 	sts	0x070C, r23	; 0x80070c <tc_tccr3_ovf_callback+0x1>
    3412:	60 93 0b 07 	sts	0x070B, r22	; 0x80070b <tc_tccr3_ovf_callback>
    3416:	08 95       	ret
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR4A) {
    3418:	80 3a       	cpi	r24, 0xA0	; 160
    341a:	91 05       	cpc	r25, r1
    341c:	29 f4       	brne	.+10     	; 0x3428 <tc_set_overflow_interrupt_callback+0x30>
		tc_tccr4_ovf_callback = callback;
    341e:	70 93 04 07 	sts	0x0704, r23	; 0x800704 <tc_tccr4_ovf_callback+0x1>
    3422:	60 93 03 07 	sts	0x0703, r22	; 0x800703 <tc_tccr4_ovf_callback>
    3426:	08 95       	ret
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR5A) {
    3428:	80 32       	cpi	r24, 0x20	; 32
    342a:	91 40       	sbci	r25, 0x01	; 1
    342c:	21 f4       	brne	.+8      	; 0x3436 <tc_set_overflow_interrupt_callback+0x3e>
		tc_tccr5_ovf_callback = callback;
    342e:	70 93 fc 06 	sts	0x06FC, r23	; 0x8006fc <tc_tccr5_ovf_callback+0x1>
    3432:	60 93 fb 06 	sts	0x06FB, r22	; 0x8006fb <tc_tccr5_ovf_callback>
    3436:	08 95       	ret

00003438 <tc_set_compa_interrupt_callback>:
	} else {}
}

void tc_set_compa_interrupt_callback(volatile void *tc, tc_callback_t callback)
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
    3438:	80 38       	cpi	r24, 0x80	; 128
    343a:	91 05       	cpc	r25, r1
    343c:	29 f4       	brne	.+10     	; 0x3448 <tc_set_compa_interrupt_callback+0x10>
		tc_tccr1_compa_callback = callback;
    343e:	70 93 12 07 	sts	0x0712, r23	; 0x800712 <tc_tccr1_compa_callback+0x1>
    3442:	60 93 11 07 	sts	0x0711, r22	; 0x800711 <tc_tccr1_compa_callback>
    3446:	08 95       	ret
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR3A) {
    3448:	80 39       	cpi	r24, 0x90	; 144
    344a:	91 05       	cpc	r25, r1
    344c:	29 f4       	brne	.+10     	; 0x3458 <tc_set_compa_interrupt_callback+0x20>
		tc_tccr3_compa_callback = callback;
    344e:	70 93 0a 07 	sts	0x070A, r23	; 0x80070a <tc_tccr3_compa_callback+0x1>
    3452:	60 93 09 07 	sts	0x0709, r22	; 0x800709 <tc_tccr3_compa_callback>
    3456:	08 95       	ret
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR4A) {
    3458:	80 3a       	cpi	r24, 0xA0	; 160
    345a:	91 05       	cpc	r25, r1
    345c:	29 f4       	brne	.+10     	; 0x3468 <tc_set_compa_interrupt_callback+0x30>
		tc_tccr4_compa_callback = callback;
    345e:	70 93 02 07 	sts	0x0702, r23	; 0x800702 <tc_tccr4_compa_callback+0x1>
    3462:	60 93 01 07 	sts	0x0701, r22	; 0x800701 <tc_tccr4_compa_callback>
    3466:	08 95       	ret
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR5A) {
    3468:	80 32       	cpi	r24, 0x20	; 32
    346a:	91 40       	sbci	r25, 0x01	; 1
    346c:	21 f4       	brne	.+8      	; 0x3476 <tc_set_compa_interrupt_callback+0x3e>
		tc_tccr5_compa_callback = callback;
    346e:	70 93 fa 06 	sts	0x06FA, r23	; 0x8006fa <tc_tccr5_compa_callback+0x1>
    3472:	60 93 f9 06 	sts	0x06F9, r22	; 0x8006f9 <tc_tccr5_compa_callback>
    3476:	08 95       	ret

00003478 <main>:
 * \brief Main function of the application
 */
int main(void)
{	
	/* Initialize the Wireless Module */
	wireless_init();    
    3478:	0e 94 6e 08 	call	0x10dc	; 0x10dc <wireless_init>
	
	/*The Modules selected in the wizard are initialized here */
	modules_init();
    347c:	0e 94 b9 08 	call	0x1172	; 0x1172 <modules_init>
 * \brief Tasks Handled By the Stack and application are Performed here,this function is handled in a loop to perform tasks continuously 
 */
void WirelessTask(void)
{
	/* These methods are called to perform the default tasks of the MAC Stack */
	pal_task();
    3480:	0e 94 2a 0c 	call	0x1854	; 0x1854 <pal_task>
	tal_task();
    3484:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <tal_task>
/**
 * \brief Application task
 */
 void app_task(void)
{
	usr_wireless_app_task();
    3488:	0e 94 4f 07 	call	0xe9e	; 0xe9e <usr_wireless_app_task>
    348c:	f9 cf       	rjmp	.-14     	; 0x3480 <main+0x8>

0000348e <tal_tx_frame_done_cb>:
 * \param frame pointer to the transmitted frame
 */
void tal_tx_frame_done_cb(retval_t status, frame_info_t *frame)
{
	/*Perform application tasks when a frame is transmitted here*/
	usr_frame_transmitted_cb(status, frame);
    348e:	0c 94 75 02 	jmp	0x4ea	; 0x4ea <usr_frame_transmitted_cb>
    3492:	08 95       	ret

00003494 <tal_rx_frame_cb>:
 * \brief This method (callback) is called when a frame is received by the transceiver
 * \param frame pointer to the received frame
 *
 */
void tal_rx_frame_cb(frame_info_t *frame)
{
    3494:	cf 93       	push	r28
    3496:	df 93       	push	r29
    3498:	ec 01       	movw	r28, r24
	/*Perform application tasks when a frame is received here*/
	usr_frame_received_cb(frame);
    349a:	0e 94 29 02 	call	0x452	; 0x452 <usr_frame_received_cb>
	// Free-up the buffer which was used for reception once the frame is extracted.
	bmm_buffer_free(frame->buffer_header);
    349e:	89 81       	ldd	r24, Y+1	; 0x01
    34a0:	9a 81       	ldd	r25, Y+2	; 0x02
    34a2:	0e 94 56 0c 	call	0x18ac	; 0x18ac <bmm_buffer_free>
}
    34a6:	df 91       	pop	r29
    34a8:	cf 91       	pop	r28
    34aa:	08 95       	ret

000034ac <__mulsi3>:
    34ac:	db 01       	movw	r26, r22
    34ae:	8f 93       	push	r24
    34b0:	9f 93       	push	r25
    34b2:	49 d0       	rcall	.+146    	; 0x3546 <__muluhisi3>
    34b4:	bf 91       	pop	r27
    34b6:	af 91       	pop	r26
    34b8:	a2 9f       	mul	r26, r18
    34ba:	80 0d       	add	r24, r0
    34bc:	91 1d       	adc	r25, r1
    34be:	a3 9f       	mul	r26, r19
    34c0:	90 0d       	add	r25, r0
    34c2:	b2 9f       	mul	r27, r18
    34c4:	90 0d       	add	r25, r0
    34c6:	11 24       	eor	r1, r1
    34c8:	08 95       	ret

000034ca <__udivmodhi4>:
    34ca:	aa 1b       	sub	r26, r26
    34cc:	bb 1b       	sub	r27, r27
    34ce:	51 e1       	ldi	r21, 0x11	; 17
    34d0:	07 c0       	rjmp	.+14     	; 0x34e0 <__udivmodhi4_ep>

000034d2 <__udivmodhi4_loop>:
    34d2:	aa 1f       	adc	r26, r26
    34d4:	bb 1f       	adc	r27, r27
    34d6:	a6 17       	cp	r26, r22
    34d8:	b7 07       	cpc	r27, r23
    34da:	10 f0       	brcs	.+4      	; 0x34e0 <__udivmodhi4_ep>
    34dc:	a6 1b       	sub	r26, r22
    34de:	b7 0b       	sbc	r27, r23

000034e0 <__udivmodhi4_ep>:
    34e0:	88 1f       	adc	r24, r24
    34e2:	99 1f       	adc	r25, r25
    34e4:	5a 95       	dec	r21
    34e6:	a9 f7       	brne	.-22     	; 0x34d2 <__udivmodhi4_loop>
    34e8:	80 95       	com	r24
    34ea:	90 95       	com	r25
    34ec:	bc 01       	movw	r22, r24
    34ee:	cd 01       	movw	r24, r26
    34f0:	08 95       	ret

000034f2 <__divmodhi4>:
    34f2:	97 fb       	bst	r25, 7
    34f4:	07 2e       	mov	r0, r23
    34f6:	16 f4       	brtc	.+4      	; 0x34fc <__divmodhi4+0xa>
    34f8:	00 94       	com	r0
    34fa:	06 d0       	rcall	.+12     	; 0x3508 <__divmodhi4_neg1>
    34fc:	77 fd       	sbrc	r23, 7
    34fe:	08 d0       	rcall	.+16     	; 0x3510 <__divmodhi4_neg2>
    3500:	e4 df       	rcall	.-56     	; 0x34ca <__udivmodhi4>
    3502:	07 fc       	sbrc	r0, 7
    3504:	05 d0       	rcall	.+10     	; 0x3510 <__divmodhi4_neg2>
    3506:	3e f4       	brtc	.+14     	; 0x3516 <__divmodhi4_exit>

00003508 <__divmodhi4_neg1>:
    3508:	90 95       	com	r25
    350a:	81 95       	neg	r24
    350c:	9f 4f       	sbci	r25, 0xFF	; 255
    350e:	08 95       	ret

00003510 <__divmodhi4_neg2>:
    3510:	70 95       	com	r23
    3512:	61 95       	neg	r22
    3514:	7f 4f       	sbci	r23, 0xFF	; 255

00003516 <__divmodhi4_exit>:
    3516:	08 95       	ret

00003518 <__tablejump2__>:
    3518:	ee 0f       	add	r30, r30
    351a:	ff 1f       	adc	r31, r31
    351c:	88 1f       	adc	r24, r24
    351e:	8b bf       	out	0x3b, r24	; 59
    3520:	07 90       	elpm	r0, Z+
    3522:	f6 91       	elpm	r31, Z
    3524:	e0 2d       	mov	r30, r0
    3526:	19 94       	eijmp

00003528 <__umulhisi3>:
    3528:	a2 9f       	mul	r26, r18
    352a:	b0 01       	movw	r22, r0
    352c:	b3 9f       	mul	r27, r19
    352e:	c0 01       	movw	r24, r0
    3530:	a3 9f       	mul	r26, r19
    3532:	70 0d       	add	r23, r0
    3534:	81 1d       	adc	r24, r1
    3536:	11 24       	eor	r1, r1
    3538:	91 1d       	adc	r25, r1
    353a:	b2 9f       	mul	r27, r18
    353c:	70 0d       	add	r23, r0
    353e:	81 1d       	adc	r24, r1
    3540:	11 24       	eor	r1, r1
    3542:	91 1d       	adc	r25, r1
    3544:	08 95       	ret

00003546 <__muluhisi3>:
    3546:	f0 df       	rcall	.-32     	; 0x3528 <__umulhisi3>
    3548:	a5 9f       	mul	r26, r21
    354a:	90 0d       	add	r25, r0
    354c:	b4 9f       	mul	r27, r20
    354e:	90 0d       	add	r25, r0
    3550:	a4 9f       	mul	r26, r20
    3552:	80 0d       	add	r24, r0
    3554:	91 1d       	adc	r25, r1
    3556:	11 24       	eor	r1, r1
    3558:	08 95       	ret

0000355a <__mulshisi3>:
    355a:	b7 ff       	sbrs	r27, 7
    355c:	f4 cf       	rjmp	.-24     	; 0x3546 <__muluhisi3>

0000355e <__mulohisi3>:
    355e:	f3 df       	rcall	.-26     	; 0x3546 <__muluhisi3>
    3560:	82 1b       	sub	r24, r18
    3562:	93 0b       	sbc	r25, r19
    3564:	08 95       	ret

00003566 <__adddi3_s8>:
    3566:	00 24       	eor	r0, r0
    3568:	a7 fd       	sbrc	r26, 7
    356a:	00 94       	com	r0
    356c:	2a 0f       	add	r18, r26
    356e:	30 1d       	adc	r19, r0
    3570:	40 1d       	adc	r20, r0
    3572:	50 1d       	adc	r21, r0
    3574:	60 1d       	adc	r22, r0
    3576:	70 1d       	adc	r23, r0
    3578:	80 1d       	adc	r24, r0
    357a:	90 1d       	adc	r25, r0
    357c:	08 95       	ret

0000357e <__cmpdi2_s8>:
    357e:	00 24       	eor	r0, r0
    3580:	a7 fd       	sbrc	r26, 7
    3582:	00 94       	com	r0
    3584:	2a 17       	cp	r18, r26
    3586:	30 05       	cpc	r19, r0
    3588:	40 05       	cpc	r20, r0
    358a:	50 05       	cpc	r21, r0
    358c:	60 05       	cpc	r22, r0
    358e:	70 05       	cpc	r23, r0
    3590:	80 05       	cpc	r24, r0
    3592:	90 05       	cpc	r25, r0
    3594:	08 95       	ret

00003596 <do_rand>:
    3596:	8f 92       	push	r8
    3598:	9f 92       	push	r9
    359a:	af 92       	push	r10
    359c:	bf 92       	push	r11
    359e:	cf 92       	push	r12
    35a0:	df 92       	push	r13
    35a2:	ef 92       	push	r14
    35a4:	ff 92       	push	r15
    35a6:	cf 93       	push	r28
    35a8:	df 93       	push	r29
    35aa:	ec 01       	movw	r28, r24
    35ac:	68 81       	ld	r22, Y
    35ae:	79 81       	ldd	r23, Y+1	; 0x01
    35b0:	8a 81       	ldd	r24, Y+2	; 0x02
    35b2:	9b 81       	ldd	r25, Y+3	; 0x03
    35b4:	61 15       	cp	r22, r1
    35b6:	71 05       	cpc	r23, r1
    35b8:	81 05       	cpc	r24, r1
    35ba:	91 05       	cpc	r25, r1
    35bc:	21 f4       	brne	.+8      	; 0x35c6 <do_rand+0x30>
    35be:	64 e2       	ldi	r22, 0x24	; 36
    35c0:	79 ed       	ldi	r23, 0xD9	; 217
    35c2:	8b e5       	ldi	r24, 0x5B	; 91
    35c4:	97 e0       	ldi	r25, 0x07	; 7
    35c6:	2d e1       	ldi	r18, 0x1D	; 29
    35c8:	33 ef       	ldi	r19, 0xF3	; 243
    35ca:	41 e0       	ldi	r20, 0x01	; 1
    35cc:	50 e0       	ldi	r21, 0x00	; 0
    35ce:	41 d0       	rcall	.+130    	; 0x3652 <__divmodsi4>
    35d0:	49 01       	movw	r8, r18
    35d2:	5a 01       	movw	r10, r20
    35d4:	9b 01       	movw	r18, r22
    35d6:	ac 01       	movw	r20, r24
    35d8:	a7 ea       	ldi	r26, 0xA7	; 167
    35da:	b1 e4       	ldi	r27, 0x41	; 65
    35dc:	b4 df       	rcall	.-152    	; 0x3546 <__muluhisi3>
    35de:	6b 01       	movw	r12, r22
    35e0:	7c 01       	movw	r14, r24
    35e2:	ac ee       	ldi	r26, 0xEC	; 236
    35e4:	b4 ef       	ldi	r27, 0xF4	; 244
    35e6:	a5 01       	movw	r20, r10
    35e8:	94 01       	movw	r18, r8
    35ea:	b9 df       	rcall	.-142    	; 0x355e <__mulohisi3>
    35ec:	dc 01       	movw	r26, r24
    35ee:	cb 01       	movw	r24, r22
    35f0:	8c 0d       	add	r24, r12
    35f2:	9d 1d       	adc	r25, r13
    35f4:	ae 1d       	adc	r26, r14
    35f6:	bf 1d       	adc	r27, r15
    35f8:	b7 ff       	sbrs	r27, 7
    35fa:	03 c0       	rjmp	.+6      	; 0x3602 <do_rand+0x6c>
    35fc:	01 97       	sbiw	r24, 0x01	; 1
    35fe:	a1 09       	sbc	r26, r1
    3600:	b0 48       	sbci	r27, 0x80	; 128
    3602:	88 83       	st	Y, r24
    3604:	99 83       	std	Y+1, r25	; 0x01
    3606:	aa 83       	std	Y+2, r26	; 0x02
    3608:	bb 83       	std	Y+3, r27	; 0x03
    360a:	9f 77       	andi	r25, 0x7F	; 127
    360c:	df 91       	pop	r29
    360e:	cf 91       	pop	r28
    3610:	ff 90       	pop	r15
    3612:	ef 90       	pop	r14
    3614:	df 90       	pop	r13
    3616:	cf 90       	pop	r12
    3618:	bf 90       	pop	r11
    361a:	af 90       	pop	r10
    361c:	9f 90       	pop	r9
    361e:	8f 90       	pop	r8
    3620:	08 95       	ret

00003622 <rand_r>:
    3622:	b9 cf       	rjmp	.-142    	; 0x3596 <do_rand>

00003624 <rand>:
    3624:	80 e0       	ldi	r24, 0x00	; 0
    3626:	92 e0       	ldi	r25, 0x02	; 2
    3628:	b6 cf       	rjmp	.-148    	; 0x3596 <do_rand>

0000362a <srand>:
    362a:	a0 e0       	ldi	r26, 0x00	; 0
    362c:	b0 e0       	ldi	r27, 0x00	; 0
    362e:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
    3632:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    3636:	a0 93 02 02 	sts	0x0202, r26	; 0x800202 <__DATA_REGION_ORIGIN__+0x2>
    363a:	b0 93 03 02 	sts	0x0203, r27	; 0x800203 <__DATA_REGION_ORIGIN__+0x3>
    363e:	08 95       	ret

00003640 <memcpy>:
    3640:	fb 01       	movw	r30, r22
    3642:	dc 01       	movw	r26, r24
    3644:	02 c0       	rjmp	.+4      	; 0x364a <memcpy+0xa>
    3646:	01 90       	ld	r0, Z+
    3648:	0d 92       	st	X+, r0
    364a:	41 50       	subi	r20, 0x01	; 1
    364c:	50 40       	sbci	r21, 0x00	; 0
    364e:	d8 f7       	brcc	.-10     	; 0x3646 <memcpy+0x6>
    3650:	08 95       	ret

00003652 <__divmodsi4>:
    3652:	05 2e       	mov	r0, r21
    3654:	97 fb       	bst	r25, 7
    3656:	16 f4       	brtc	.+4      	; 0x365c <__divmodsi4+0xa>
    3658:	00 94       	com	r0
    365a:	0f d0       	rcall	.+30     	; 0x367a <__negsi2>
    365c:	57 fd       	sbrc	r21, 7
    365e:	05 d0       	rcall	.+10     	; 0x366a <__divmodsi4_neg2>
    3660:	14 d0       	rcall	.+40     	; 0x368a <__udivmodsi4>
    3662:	07 fc       	sbrc	r0, 7
    3664:	02 d0       	rcall	.+4      	; 0x366a <__divmodsi4_neg2>
    3666:	46 f4       	brtc	.+16     	; 0x3678 <__divmodsi4_exit>
    3668:	08 c0       	rjmp	.+16     	; 0x367a <__negsi2>

0000366a <__divmodsi4_neg2>:
    366a:	50 95       	com	r21
    366c:	40 95       	com	r20
    366e:	30 95       	com	r19
    3670:	21 95       	neg	r18
    3672:	3f 4f       	sbci	r19, 0xFF	; 255
    3674:	4f 4f       	sbci	r20, 0xFF	; 255
    3676:	5f 4f       	sbci	r21, 0xFF	; 255

00003678 <__divmodsi4_exit>:
    3678:	08 95       	ret

0000367a <__negsi2>:
    367a:	90 95       	com	r25
    367c:	80 95       	com	r24
    367e:	70 95       	com	r23
    3680:	61 95       	neg	r22
    3682:	7f 4f       	sbci	r23, 0xFF	; 255
    3684:	8f 4f       	sbci	r24, 0xFF	; 255
    3686:	9f 4f       	sbci	r25, 0xFF	; 255
    3688:	08 95       	ret

0000368a <__udivmodsi4>:
    368a:	a1 e2       	ldi	r26, 0x21	; 33
    368c:	1a 2e       	mov	r1, r26
    368e:	aa 1b       	sub	r26, r26
    3690:	bb 1b       	sub	r27, r27
    3692:	fd 01       	movw	r30, r26
    3694:	0d c0       	rjmp	.+26     	; 0x36b0 <__udivmodsi4_ep>

00003696 <__udivmodsi4_loop>:
    3696:	aa 1f       	adc	r26, r26
    3698:	bb 1f       	adc	r27, r27
    369a:	ee 1f       	adc	r30, r30
    369c:	ff 1f       	adc	r31, r31
    369e:	a2 17       	cp	r26, r18
    36a0:	b3 07       	cpc	r27, r19
    36a2:	e4 07       	cpc	r30, r20
    36a4:	f5 07       	cpc	r31, r21
    36a6:	20 f0       	brcs	.+8      	; 0x36b0 <__udivmodsi4_ep>
    36a8:	a2 1b       	sub	r26, r18
    36aa:	b3 0b       	sbc	r27, r19
    36ac:	e4 0b       	sbc	r30, r20
    36ae:	f5 0b       	sbc	r31, r21

000036b0 <__udivmodsi4_ep>:
    36b0:	66 1f       	adc	r22, r22
    36b2:	77 1f       	adc	r23, r23
    36b4:	88 1f       	adc	r24, r24
    36b6:	99 1f       	adc	r25, r25
    36b8:	1a 94       	dec	r1
    36ba:	69 f7       	brne	.-38     	; 0x3696 <__udivmodsi4_loop>
    36bc:	60 95       	com	r22
    36be:	70 95       	com	r23
    36c0:	80 95       	com	r24
    36c2:	90 95       	com	r25
    36c4:	9b 01       	movw	r18, r22
    36c6:	ac 01       	movw	r20, r24
    36c8:	bd 01       	movw	r22, r26
    36ca:	cf 01       	movw	r24, r30
    36cc:	08 95       	ret

000036ce <_exit>:
    36ce:	f8 94       	cli

000036d0 <__stop_program>:
    36d0:	ff cf       	rjmp	.-2      	; 0x36d0 <__stop_program>
