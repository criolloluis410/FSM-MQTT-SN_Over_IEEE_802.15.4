/**
 * \file periodic_timer.h
 *
 * Created: 15/11/2021 18:35:44
 * Author: luisc
 *
 * \brief  API file of periodic operations using timer as generated by Project Wizard
 *
 * Copyright (c) 2014 Atmel Corporation. All rights reserved.
 *
 *
 * \page License
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * 3. The name of Atmel may not be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * 4. This software may only be redistributed and used in connection with an
 *    Atmel microcontroller product.
 *
 * THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
 * EXPRESSLY AND SPECIFICALLY DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 */

/**
 * \page license License
 * Copyright(c) 2014, Atmel Corporation All rights reserved.
 *
 * Licensed under Atmel's Limited License Agreement --> EULA.txt
 */

#ifndef PERIODIC_TIMER_H_
#define PERIODIC_TIMER_H_


#include <wireless_api.h>
#include "usr_periodic_timer.h"

/**
 * \page wl_timer Quick Start Guide Periodic Timer Module
 *
 * This is the quick start guide for the usage of the the Stack SW Timer for performing Periodic Operations
 * The Timer module is a Software Timer Implementation where any number of timers can be made use of irrespective of limitation in the nubmer of timers in the hardware
 * The Total Number of Timers is equal to the sum of timers used by the stack and timers used by the Application which is given in conf_common_sw_timer.h and app_config.h 
 *
 * \section wl_timer_init Timer Initialization:
 * The Application Timers used are first declared ex. uint8_t  T_APP_TIMER1 ,T_APP_TIMER2 and so on based on the application requirement
 * These timers are initialized using app_timers_init() function where the id's for these Timers are provided ,if more timers are tried to
 * initialize than the total number of timers then it throws an error status ERR_NO_TIMER .Following is the code to add three timers for application inside app_timer_init.
 * \note these timers should have been declared earlier
 * \code
 * void app_timers_init(void)
 *  {
 * 	if (STATUS_OK != sw_timer_get_id(&T_APP_TIMER1)) {
 * 		app_alert();
 *	}
 *  
 * 	if (STATUS_OK != sw_timer_get_id(&T_APP_TIMER2)) {
 * 		app_alert();
 *	}
  *  
 * 	if (STATUS_OK != sw_timer_get_id(&T_APP_TIMER3)) {
 * 		app_alert();
 *	}
 * }
 * \endcode 
 * \section wl_timer_usage  Periodic Timer usage:
 * Once the Timers are initialized the start_timer1 can be used to start the timer,the function inside the start_timer1 starts T_APP_TIMER1 with timeout TIMER_DURATION
 * and the callback app_timer_cb ,more start timers functions can be added based on the requiremnt of the application or alternatively the 
 * sw_timer_start() function can be directly called  which directly access the common_sw_timer layer.
 * The stop_timer1 function stops the timer before expiry and the cb app_timer_cb is called once the timer expires and is hooked to the function  usr_app_timer_cb()
 * where user can add his tasks .This timer is started again in the app_timer_cb() to perform periodic operations.
 * In order to stop this timer to get only one timeout the app_timer_cb can be left without calling the start_timer1() again
 *
 */
  
/* SW Timer Related Prototypes and globals*/
/**
 * \brief This function initializes the App timers
 * (T_APP_TIMER1 is the only timer added by the project wizard,add extra timers based on the application requirement)
 */
void app_timers_init(void);

/**
 \brief Callback called once the timer expires
*/
void app_timer_cb(void *parameter);

/**
 \brief This function starts a timer T-APP_TIMER with timeout TIMER_DURATION  with callback id app_timer_cb
 * New timers can be added by defeining ex. start_timer2 by adding a new timer id T_APP_TIMER2 and a different call back name based on the requirement ,
 * max no of timers to be added is based on *the  count  TOTAL_NUMBER_OF_TIMERS in conf_common_sw_timer.h
 */
void start_timer1(void);
/**
 \brief This function stops a timer T-APP_TIMER 
 * To add stop timer functions for other timer, add defenitions stop_timer2 with sw_timer_stop(NEW ID) inside it
 */
void stop_timer1(void);

/* App Timer declaration,This is initialized during app_timers_init ,
 * Additional Timers can be added by declaring them as say T-APP_TIMER2 and inititializing in app_timers_init
 */
uint8_t T_APP_TIMER1;

int enableTimer;
int TimerEnd;
int timerDurationTime;

#define TIMER_DURATION 1000000 * timerDurationTime // in Âµs
// END OF TIMER related definitions

#endif